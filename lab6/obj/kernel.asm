
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 d0 12 00 	lgdtl  0x12d018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 d0 12 c0       	mov    $0xc012d000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 04 00 00 00       	call   c010002c <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>
	...

c010002c <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c010002c:	55                   	push   %ebp
c010002d:	89 e5                	mov    %esp,%ebp
c010002f:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100032:	ba 78 1e 1b c0       	mov    $0xc01b1e78,%edx
c0100037:	b8 c4 ec 1a c0       	mov    $0xc01aecc4,%eax
c010003c:	89 d1                	mov    %edx,%ecx
c010003e:	29 c1                	sub    %eax,%ecx
c0100040:	89 c8                	mov    %ecx,%eax
c0100042:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100046:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010004d:	00 
c010004e:	c7 04 24 c4 ec 1a c0 	movl   $0xc01aecc4,(%esp)
c0100055:	e8 49 c3 00 00       	call   c010c3a3 <memset>

    cons_init();                // init the console
c010005a:	e8 11 17 00 00       	call   c0101770 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005f:	c7 45 f4 60 c5 10 c0 	movl   $0xc010c560,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100066:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100069:	89 44 24 04          	mov    %eax,0x4(%esp)
c010006d:	c7 04 24 7c c5 10 c0 	movl   $0xc010c57c,(%esp)
c0100074:	e8 ea 02 00 00       	call   c0100363 <cprintf>

    print_kerninfo();
c0100079:	e8 ee 08 00 00       	call   c010096c <print_kerninfo>

    grade_backtrace();
c010007e:	e8 a2 00 00 00       	call   c0100125 <grade_backtrace>

    pmm_init();                 // init physical memory management
c0100083:	e8 ef 56 00 00       	call   c0105777 <pmm_init>

    pic_init();                 // init interrupt controller
c0100088:	e8 f0 20 00 00       	call   c010217d <pic_init>
    idt_init();                 // init interrupt descriptor table
c010008d:	e8 68 22 00 00       	call   c01022fa <idt_init>

    vmm_init();                 // init virtual memory management
c0100092:	e8 d3 86 00 00       	call   c010876a <vmm_init>
    sched_init();               // init scheduler
c0100097:	e8 1f b4 00 00       	call   c010b4bb <sched_init>
    proc_init();                // init process table
c010009c:	e8 9b ad 00 00       	call   c010ae3c <proc_init>
    
    ide_init();                 // init ide devices
c01000a1:	e8 09 18 00 00       	call   c01018af <ide_init>
    swap_init();                // init swap
c01000a6:	e8 94 6d 00 00       	call   c0106e3f <swap_init>

    clock_init();               // init clock interrupt
c01000ab:	e8 d0 0d 00 00       	call   c0100e80 <clock_init>
    intr_enable();              // enable irq interrupt
c01000b0:	e8 2f 20 00 00       	call   c01020e4 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b5:	e8 41 af 00 00       	call   c010affb <cpu_idle>

c01000ba <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000ba:	55                   	push   %ebp
c01000bb:	89 e5                	mov    %esp,%ebp
c01000bd:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000c0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000c7:	00 
c01000c8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000cf:	00 
c01000d0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000d7:	e8 ce 0c 00 00       	call   c0100daa <mon_backtrace>
}
c01000dc:	c9                   	leave  
c01000dd:	c3                   	ret    

c01000de <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000de:	55                   	push   %ebp
c01000df:	89 e5                	mov    %esp,%ebp
c01000e1:	53                   	push   %ebx
c01000e2:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e5:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000e8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000eb:	8d 55 08             	lea    0x8(%ebp),%edx
c01000ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01000f1:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000f5:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000f9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000fd:	89 04 24             	mov    %eax,(%esp)
c0100100:	e8 b5 ff ff ff       	call   c01000ba <grade_backtrace2>
}
c0100105:	83 c4 14             	add    $0x14,%esp
c0100108:	5b                   	pop    %ebx
c0100109:	5d                   	pop    %ebp
c010010a:	c3                   	ret    

c010010b <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c010010b:	55                   	push   %ebp
c010010c:	89 e5                	mov    %esp,%ebp
c010010e:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c0100111:	8b 45 10             	mov    0x10(%ebp),%eax
c0100114:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100118:	8b 45 08             	mov    0x8(%ebp),%eax
c010011b:	89 04 24             	mov    %eax,(%esp)
c010011e:	e8 bb ff ff ff       	call   c01000de <grade_backtrace1>
}
c0100123:	c9                   	leave  
c0100124:	c3                   	ret    

c0100125 <grade_backtrace>:

void
grade_backtrace(void) {
c0100125:	55                   	push   %ebp
c0100126:	89 e5                	mov    %esp,%ebp
c0100128:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c010012b:	b8 2c 00 10 c0       	mov    $0xc010002c,%eax
c0100130:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100137:	ff 
c0100138:	89 44 24 04          	mov    %eax,0x4(%esp)
c010013c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100143:	e8 c3 ff ff ff       	call   c010010b <grade_backtrace0>
}
c0100148:	c9                   	leave  
c0100149:	c3                   	ret    

c010014a <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c010014a:	55                   	push   %ebp
c010014b:	89 e5                	mov    %esp,%ebp
c010014d:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100150:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100153:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100156:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100159:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c010015c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100160:	0f b7 c0             	movzwl %ax,%eax
c0100163:	89 c2                	mov    %eax,%edx
c0100165:	83 e2 03             	and    $0x3,%edx
c0100168:	a1 e0 ec 1a c0       	mov    0xc01aece0,%eax
c010016d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100171:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100175:	c7 04 24 81 c5 10 c0 	movl   $0xc010c581,(%esp)
c010017c:	e8 e2 01 00 00       	call   c0100363 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c0100181:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100185:	0f b7 d0             	movzwl %ax,%edx
c0100188:	a1 e0 ec 1a c0       	mov    0xc01aece0,%eax
c010018d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100191:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100195:	c7 04 24 8f c5 10 c0 	movl   $0xc010c58f,(%esp)
c010019c:	e8 c2 01 00 00       	call   c0100363 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c01001a1:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001a5:	0f b7 d0             	movzwl %ax,%edx
c01001a8:	a1 e0 ec 1a c0       	mov    0xc01aece0,%eax
c01001ad:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001b1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001b5:	c7 04 24 9d c5 10 c0 	movl   $0xc010c59d,(%esp)
c01001bc:	e8 a2 01 00 00       	call   c0100363 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001c1:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001c5:	0f b7 d0             	movzwl %ax,%edx
c01001c8:	a1 e0 ec 1a c0       	mov    0xc01aece0,%eax
c01001cd:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001d5:	c7 04 24 ab c5 10 c0 	movl   $0xc010c5ab,(%esp)
c01001dc:	e8 82 01 00 00       	call   c0100363 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001e1:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001e5:	0f b7 d0             	movzwl %ax,%edx
c01001e8:	a1 e0 ec 1a c0       	mov    0xc01aece0,%eax
c01001ed:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001f5:	c7 04 24 b9 c5 10 c0 	movl   $0xc010c5b9,(%esp)
c01001fc:	e8 62 01 00 00       	call   c0100363 <cprintf>
    round ++;
c0100201:	a1 e0 ec 1a c0       	mov    0xc01aece0,%eax
c0100206:	83 c0 01             	add    $0x1,%eax
c0100209:	a3 e0 ec 1a c0       	mov    %eax,0xc01aece0
}
c010020e:	c9                   	leave  
c010020f:	c3                   	ret    

c0100210 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c0100210:	55                   	push   %ebp
c0100211:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c0100213:	5d                   	pop    %ebp
c0100214:	c3                   	ret    

c0100215 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100215:	55                   	push   %ebp
c0100216:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100218:	5d                   	pop    %ebp
c0100219:	c3                   	ret    

c010021a <lab1_switch_test>:

static void
lab1_switch_test(void) {
c010021a:	55                   	push   %ebp
c010021b:	89 e5                	mov    %esp,%ebp
c010021d:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c0100220:	e8 25 ff ff ff       	call   c010014a <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100225:	c7 04 24 c8 c5 10 c0 	movl   $0xc010c5c8,(%esp)
c010022c:	e8 32 01 00 00       	call   c0100363 <cprintf>
    lab1_switch_to_user();
c0100231:	e8 da ff ff ff       	call   c0100210 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100236:	e8 0f ff ff ff       	call   c010014a <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c010023b:	c7 04 24 e8 c5 10 c0 	movl   $0xc010c5e8,(%esp)
c0100242:	e8 1c 01 00 00       	call   c0100363 <cprintf>
    lab1_switch_to_kernel();
c0100247:	e8 c9 ff ff ff       	call   c0100215 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c010024c:	e8 f9 fe ff ff       	call   c010014a <lab1_print_cur_status>
}
c0100251:	c9                   	leave  
c0100252:	c3                   	ret    
	...

c0100254 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100254:	55                   	push   %ebp
c0100255:	89 e5                	mov    %esp,%ebp
c0100257:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c010025a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010025e:	74 13                	je     c0100273 <readline+0x1f>
        cprintf("%s", prompt);
c0100260:	8b 45 08             	mov    0x8(%ebp),%eax
c0100263:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100267:	c7 04 24 07 c6 10 c0 	movl   $0xc010c607,(%esp)
c010026e:	e8 f0 00 00 00       	call   c0100363 <cprintf>
    }
    int i = 0, c;
c0100273:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010027a:	eb 01                	jmp    c010027d <readline+0x29>
        else if (c == '\n' || c == '\r') {
            cputchar(c);
            buf[i] = '\0';
            return buf;
        }
    }
c010027c:	90                   	nop
    if (prompt != NULL) {
        cprintf("%s", prompt);
    }
    int i = 0, c;
    while (1) {
        c = getchar();
c010027d:	e8 6e 01 00 00       	call   c01003f0 <getchar>
c0100282:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100285:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100289:	79 07                	jns    c0100292 <readline+0x3e>
            return NULL;
c010028b:	b8 00 00 00 00       	mov    $0x0,%eax
c0100290:	eb 79                	jmp    c010030b <readline+0xb7>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0100292:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0100296:	7e 28                	jle    c01002c0 <readline+0x6c>
c0100298:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c010029f:	7f 1f                	jg     c01002c0 <readline+0x6c>
            cputchar(c);
c01002a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a4:	89 04 24             	mov    %eax,(%esp)
c01002a7:	e8 df 00 00 00       	call   c010038b <cputchar>
            buf[i ++] = c;
c01002ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002af:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01002b2:	81 c2 00 ed 1a c0    	add    $0xc01aed00,%edx
c01002b8:	88 02                	mov    %al,(%edx)
c01002ba:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01002be:	eb 46                	jmp    c0100306 <readline+0xb2>
        }
        else if (c == '\b' && i > 0) {
c01002c0:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002c4:	75 17                	jne    c01002dd <readline+0x89>
c01002c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002ca:	7e 11                	jle    c01002dd <readline+0x89>
            cputchar(c);
c01002cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002cf:	89 04 24             	mov    %eax,(%esp)
c01002d2:	e8 b4 00 00 00       	call   c010038b <cputchar>
            i --;
c01002d7:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002db:	eb 29                	jmp    c0100306 <readline+0xb2>
        }
        else if (c == '\n' || c == '\r') {
c01002dd:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002e1:	74 06                	je     c01002e9 <readline+0x95>
c01002e3:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002e7:	75 93                	jne    c010027c <readline+0x28>
            cputchar(c);
c01002e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002ec:	89 04 24             	mov    %eax,(%esp)
c01002ef:	e8 97 00 00 00       	call   c010038b <cputchar>
            buf[i] = '\0';
c01002f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002f7:	05 00 ed 1a c0       	add    $0xc01aed00,%eax
c01002fc:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01002ff:	b8 00 ed 1a c0       	mov    $0xc01aed00,%eax
c0100304:	eb 05                	jmp    c010030b <readline+0xb7>
        }
    }
c0100306:	e9 71 ff ff ff       	jmp    c010027c <readline+0x28>
}
c010030b:	c9                   	leave  
c010030c:	c3                   	ret    
c010030d:	00 00                	add    %al,(%eax)
	...

c0100310 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100310:	55                   	push   %ebp
c0100311:	89 e5                	mov    %esp,%ebp
c0100313:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100316:	8b 45 08             	mov    0x8(%ebp),%eax
c0100319:	89 04 24             	mov    %eax,(%esp)
c010031c:	e8 7b 14 00 00       	call   c010179c <cons_putc>
    (*cnt) ++;
c0100321:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100324:	8b 00                	mov    (%eax),%eax
c0100326:	8d 50 01             	lea    0x1(%eax),%edx
c0100329:	8b 45 0c             	mov    0xc(%ebp),%eax
c010032c:	89 10                	mov    %edx,(%eax)
}
c010032e:	c9                   	leave  
c010032f:	c3                   	ret    

c0100330 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c0100330:	55                   	push   %ebp
c0100331:	89 e5                	mov    %esp,%ebp
c0100333:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c0100336:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c010033d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100340:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100344:	8b 45 08             	mov    0x8(%ebp),%eax
c0100347:	89 44 24 08          	mov    %eax,0x8(%esp)
c010034b:	8d 45 f4             	lea    -0xc(%ebp),%eax
c010034e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100352:	c7 04 24 10 03 10 c0 	movl   $0xc0100310,(%esp)
c0100359:	e8 44 b7 00 00       	call   c010baa2 <vprintfmt>
    return cnt;
c010035e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100361:	c9                   	leave  
c0100362:	c3                   	ret    

c0100363 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100363:	55                   	push   %ebp
c0100364:	89 e5                	mov    %esp,%ebp
c0100366:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0100369:	8d 55 0c             	lea    0xc(%ebp),%edx
c010036c:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010036f:	89 10                	mov    %edx,(%eax)
    cnt = vcprintf(fmt, ap);
c0100371:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100374:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100378:	8b 45 08             	mov    0x8(%ebp),%eax
c010037b:	89 04 24             	mov    %eax,(%esp)
c010037e:	e8 ad ff ff ff       	call   c0100330 <vcprintf>
c0100383:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100386:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100389:	c9                   	leave  
c010038a:	c3                   	ret    

c010038b <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010038b:	55                   	push   %ebp
c010038c:	89 e5                	mov    %esp,%ebp
c010038e:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100391:	8b 45 08             	mov    0x8(%ebp),%eax
c0100394:	89 04 24             	mov    %eax,(%esp)
c0100397:	e8 00 14 00 00       	call   c010179c <cons_putc>
}
c010039c:	c9                   	leave  
c010039d:	c3                   	ret    

c010039e <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c010039e:	55                   	push   %ebp
c010039f:	89 e5                	mov    %esp,%ebp
c01003a1:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01003a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01003ab:	eb 13                	jmp    c01003c0 <cputs+0x22>
        cputch(c, &cnt);
c01003ad:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003b1:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003b4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003b8:	89 04 24             	mov    %eax,(%esp)
c01003bb:	e8 50 ff ff ff       	call   c0100310 <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01003c3:	0f b6 00             	movzbl (%eax),%eax
c01003c6:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003c9:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003cd:	0f 95 c0             	setne  %al
c01003d0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01003d4:	84 c0                	test   %al,%al
c01003d6:	75 d5                	jne    c01003ad <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003d8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003db:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003df:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003e6:	e8 25 ff ff ff       	call   c0100310 <cputch>
    return cnt;
c01003eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003ee:	c9                   	leave  
c01003ef:	c3                   	ret    

c01003f0 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003f0:	55                   	push   %ebp
c01003f1:	89 e5                	mov    %esp,%ebp
c01003f3:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003f6:	e8 dd 13 00 00       	call   c01017d8 <cons_getc>
c01003fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100402:	74 f2                	je     c01003f6 <getchar+0x6>
        /* do nothing */;
    return c;
c0100404:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100407:	c9                   	leave  
c0100408:	c3                   	ret    
c0100409:	00 00                	add    %al,(%eax)
	...

c010040c <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c010040c:	55                   	push   %ebp
c010040d:	89 e5                	mov    %esp,%ebp
c010040f:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c0100412:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100415:	8b 00                	mov    (%eax),%eax
c0100417:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010041a:	8b 45 10             	mov    0x10(%ebp),%eax
c010041d:	8b 00                	mov    (%eax),%eax
c010041f:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0100422:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100429:	e9 c6 00 00 00       	jmp    c01004f4 <stab_binsearch+0xe8>
        int true_m = (l + r) / 2, m = true_m;
c010042e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100431:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100434:	01 d0                	add    %edx,%eax
c0100436:	89 c2                	mov    %eax,%edx
c0100438:	c1 ea 1f             	shr    $0x1f,%edx
c010043b:	01 d0                	add    %edx,%eax
c010043d:	d1 f8                	sar    %eax
c010043f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100442:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100445:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100448:	eb 04                	jmp    c010044e <stab_binsearch+0x42>
            m --;
c010044a:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010044e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100451:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100454:	7c 1b                	jl     c0100471 <stab_binsearch+0x65>
c0100456:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100459:	89 d0                	mov    %edx,%eax
c010045b:	01 c0                	add    %eax,%eax
c010045d:	01 d0                	add    %edx,%eax
c010045f:	c1 e0 02             	shl    $0x2,%eax
c0100462:	03 45 08             	add    0x8(%ebp),%eax
c0100465:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100469:	0f b6 c0             	movzbl %al,%eax
c010046c:	3b 45 14             	cmp    0x14(%ebp),%eax
c010046f:	75 d9                	jne    c010044a <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100471:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100474:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100477:	7d 0b                	jge    c0100484 <stab_binsearch+0x78>
            l = true_m + 1;
c0100479:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010047c:	83 c0 01             	add    $0x1,%eax
c010047f:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100482:	eb 70                	jmp    c01004f4 <stab_binsearch+0xe8>
        }

        // actual binary search
        any_matches = 1;
c0100484:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010048b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010048e:	89 d0                	mov    %edx,%eax
c0100490:	01 c0                	add    %eax,%eax
c0100492:	01 d0                	add    %edx,%eax
c0100494:	c1 e0 02             	shl    $0x2,%eax
c0100497:	03 45 08             	add    0x8(%ebp),%eax
c010049a:	8b 40 08             	mov    0x8(%eax),%eax
c010049d:	3b 45 18             	cmp    0x18(%ebp),%eax
c01004a0:	73 13                	jae    c01004b5 <stab_binsearch+0xa9>
            *region_left = m;
c01004a2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004a5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004a8:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c01004aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004ad:	83 c0 01             	add    $0x1,%eax
c01004b0:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004b3:	eb 3f                	jmp    c01004f4 <stab_binsearch+0xe8>
        } else if (stabs[m].n_value > addr) {
c01004b5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004b8:	89 d0                	mov    %edx,%eax
c01004ba:	01 c0                	add    %eax,%eax
c01004bc:	01 d0                	add    %edx,%eax
c01004be:	c1 e0 02             	shl    $0x2,%eax
c01004c1:	03 45 08             	add    0x8(%ebp),%eax
c01004c4:	8b 40 08             	mov    0x8(%eax),%eax
c01004c7:	3b 45 18             	cmp    0x18(%ebp),%eax
c01004ca:	76 16                	jbe    c01004e2 <stab_binsearch+0xd6>
            *region_right = m - 1;
c01004cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004cf:	8d 50 ff             	lea    -0x1(%eax),%edx
c01004d2:	8b 45 10             	mov    0x10(%ebp),%eax
c01004d5:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01004d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004da:	83 e8 01             	sub    $0x1,%eax
c01004dd:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004e0:	eb 12                	jmp    c01004f4 <stab_binsearch+0xe8>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01004e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004e8:	89 10                	mov    %edx,(%eax)
            l = m;
c01004ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004ed:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01004f0:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01004f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01004f7:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01004fa:	0f 8e 2e ff ff ff    	jle    c010042e <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c0100500:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100504:	75 0f                	jne    c0100515 <stab_binsearch+0x109>
        *region_right = *region_left - 1;
c0100506:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100509:	8b 00                	mov    (%eax),%eax
c010050b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010050e:	8b 45 10             	mov    0x10(%ebp),%eax
c0100511:	89 10                	mov    %edx,(%eax)
c0100513:	eb 3b                	jmp    c0100550 <stab_binsearch+0x144>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c0100515:	8b 45 10             	mov    0x10(%ebp),%eax
c0100518:	8b 00                	mov    (%eax),%eax
c010051a:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c010051d:	eb 04                	jmp    c0100523 <stab_binsearch+0x117>
c010051f:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c0100523:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100526:	8b 00                	mov    (%eax),%eax
c0100528:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010052b:	7d 1b                	jge    c0100548 <stab_binsearch+0x13c>
c010052d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100530:	89 d0                	mov    %edx,%eax
c0100532:	01 c0                	add    %eax,%eax
c0100534:	01 d0                	add    %edx,%eax
c0100536:	c1 e0 02             	shl    $0x2,%eax
c0100539:	03 45 08             	add    0x8(%ebp),%eax
c010053c:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100540:	0f b6 c0             	movzbl %al,%eax
c0100543:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100546:	75 d7                	jne    c010051f <stab_binsearch+0x113>
            /* do nothing */;
        *region_left = l;
c0100548:	8b 45 0c             	mov    0xc(%ebp),%eax
c010054b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010054e:	89 10                	mov    %edx,(%eax)
    }
}
c0100550:	c9                   	leave  
c0100551:	c3                   	ret    

c0100552 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0100552:	55                   	push   %ebp
c0100553:	89 e5                	mov    %esp,%ebp
c0100555:	53                   	push   %ebx
c0100556:	83 ec 54             	sub    $0x54,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100559:	8b 45 0c             	mov    0xc(%ebp),%eax
c010055c:	c7 00 0c c6 10 c0    	movl   $0xc010c60c,(%eax)
    info->eip_line = 0;
c0100562:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100565:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c010056c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010056f:	c7 40 08 0c c6 10 c0 	movl   $0xc010c60c,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100576:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100579:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c0100580:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100583:	8b 55 08             	mov    0x8(%ebp),%edx
c0100586:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100589:	8b 45 0c             	mov    0xc(%ebp),%eax
c010058c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0100593:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c010059a:	76 21                	jbe    c01005bd <debuginfo_eip+0x6b>
        stabs = __STAB_BEGIN__;
c010059c:	c7 45 f4 80 ed 10 c0 	movl   $0xc010ed80,-0xc(%ebp)
        stab_end = __STAB_END__;
c01005a3:	c7 45 f0 f8 40 12 c0 	movl   $0xc01240f8,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c01005aa:	c7 45 ec f9 40 12 c0 	movl   $0xc01240f9,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c01005b1:	c7 45 e8 f7 a1 12 c0 	movl   $0xc012a1f7,-0x18(%ebp)
c01005b8:	e9 ec 00 00 00       	jmp    c01006a9 <debuginfo_eip+0x157>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01005bd:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01005c4:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c01005c9:	85 c0                	test   %eax,%eax
c01005cb:	74 11                	je     c01005de <debuginfo_eip+0x8c>
c01005cd:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c01005d2:	8b 40 18             	mov    0x18(%eax),%eax
c01005d5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01005d8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01005dc:	75 0a                	jne    c01005e8 <debuginfo_eip+0x96>
            return -1;
c01005de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01005e3:	e9 7e 03 00 00       	jmp    c0100966 <debuginfo_eip+0x414>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01005e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01005eb:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01005f2:	00 
c01005f3:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01005fa:	00 
c01005fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01005ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100602:	89 04 24             	mov    %eax,(%esp)
c0100605:	e8 a3 8a 00 00       	call   c01090ad <user_mem_check>
c010060a:	85 c0                	test   %eax,%eax
c010060c:	75 0a                	jne    c0100618 <debuginfo_eip+0xc6>
            return -1;
c010060e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100613:	e9 4e 03 00 00       	jmp    c0100966 <debuginfo_eip+0x414>
        }

        stabs = usd->stabs;
c0100618:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010061b:	8b 00                	mov    (%eax),%eax
c010061d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c0100620:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100623:	8b 40 04             	mov    0x4(%eax),%eax
c0100626:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100629:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010062c:	8b 40 08             	mov    0x8(%eax),%eax
c010062f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c0100632:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100635:	8b 40 0c             	mov    0xc(%eax),%eax
c0100638:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c010063b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010063e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100641:	29 c2                	sub    %eax,%edx
c0100643:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100646:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010064d:	00 
c010064e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100652:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100656:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100659:	89 04 24             	mov    %eax,(%esp)
c010065c:	e8 4c 8a 00 00       	call   c01090ad <user_mem_check>
c0100661:	85 c0                	test   %eax,%eax
c0100663:	75 0a                	jne    c010066f <debuginfo_eip+0x11d>
            return -1;
c0100665:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010066a:	e9 f7 02 00 00       	jmp    c0100966 <debuginfo_eip+0x414>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c010066f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100672:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100675:	89 d1                	mov    %edx,%ecx
c0100677:	29 c1                	sub    %eax,%ecx
c0100679:	89 c8                	mov    %ecx,%eax
c010067b:	89 c2                	mov    %eax,%edx
c010067d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100680:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100687:	00 
c0100688:	89 54 24 08          	mov    %edx,0x8(%esp)
c010068c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100690:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100693:	89 04 24             	mov    %eax,(%esp)
c0100696:	e8 12 8a 00 00       	call   c01090ad <user_mem_check>
c010069b:	85 c0                	test   %eax,%eax
c010069d:	75 0a                	jne    c01006a9 <debuginfo_eip+0x157>
            return -1;
c010069f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006a4:	e9 bd 02 00 00       	jmp    c0100966 <debuginfo_eip+0x414>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c01006a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006ac:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01006af:	76 0d                	jbe    c01006be <debuginfo_eip+0x16c>
c01006b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006b4:	83 e8 01             	sub    $0x1,%eax
c01006b7:	0f b6 00             	movzbl (%eax),%eax
c01006ba:	84 c0                	test   %al,%al
c01006bc:	74 0a                	je     c01006c8 <debuginfo_eip+0x176>
        return -1;
c01006be:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006c3:	e9 9e 02 00 00       	jmp    c0100966 <debuginfo_eip+0x414>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01006c8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01006cf:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01006d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006d5:	89 d3                	mov    %edx,%ebx
c01006d7:	29 c3                	sub    %eax,%ebx
c01006d9:	89 d8                	mov    %ebx,%eax
c01006db:	c1 f8 02             	sar    $0x2,%eax
c01006de:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01006e4:	83 e8 01             	sub    $0x1,%eax
c01006e7:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01006ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01006ed:	89 44 24 10          	mov    %eax,0x10(%esp)
c01006f1:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01006f8:	00 
c01006f9:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01006fc:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100700:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100703:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100707:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010070a:	89 04 24             	mov    %eax,(%esp)
c010070d:	e8 fa fc ff ff       	call   c010040c <stab_binsearch>
    if (lfile == 0)
c0100712:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100715:	85 c0                	test   %eax,%eax
c0100717:	75 0a                	jne    c0100723 <debuginfo_eip+0x1d1>
        return -1;
c0100719:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010071e:	e9 43 02 00 00       	jmp    c0100966 <debuginfo_eip+0x414>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0100723:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100726:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0100729:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010072c:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c010072f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100732:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100736:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c010073d:	00 
c010073e:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100741:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100745:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0100748:	89 44 24 04          	mov    %eax,0x4(%esp)
c010074c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010074f:	89 04 24             	mov    %eax,(%esp)
c0100752:	e8 b5 fc ff ff       	call   c010040c <stab_binsearch>

    if (lfun <= rfun) {
c0100757:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010075a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010075d:	39 c2                	cmp    %eax,%edx
c010075f:	7f 72                	jg     c01007d3 <debuginfo_eip+0x281>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100761:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100764:	89 c2                	mov    %eax,%edx
c0100766:	89 d0                	mov    %edx,%eax
c0100768:	01 c0                	add    %eax,%eax
c010076a:	01 d0                	add    %edx,%eax
c010076c:	c1 e0 02             	shl    $0x2,%eax
c010076f:	03 45 f4             	add    -0xc(%ebp),%eax
c0100772:	8b 10                	mov    (%eax),%edx
c0100774:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100777:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010077a:	89 cb                	mov    %ecx,%ebx
c010077c:	29 c3                	sub    %eax,%ebx
c010077e:	89 d8                	mov    %ebx,%eax
c0100780:	39 c2                	cmp    %eax,%edx
c0100782:	73 1e                	jae    c01007a2 <debuginfo_eip+0x250>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0100784:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100787:	89 c2                	mov    %eax,%edx
c0100789:	89 d0                	mov    %edx,%eax
c010078b:	01 c0                	add    %eax,%eax
c010078d:	01 d0                	add    %edx,%eax
c010078f:	c1 e0 02             	shl    $0x2,%eax
c0100792:	03 45 f4             	add    -0xc(%ebp),%eax
c0100795:	8b 00                	mov    (%eax),%eax
c0100797:	89 c2                	mov    %eax,%edx
c0100799:	03 55 ec             	add    -0x14(%ebp),%edx
c010079c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010079f:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c01007a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007a5:	89 c2                	mov    %eax,%edx
c01007a7:	89 d0                	mov    %edx,%eax
c01007a9:	01 c0                	add    %eax,%eax
c01007ab:	01 d0                	add    %edx,%eax
c01007ad:	c1 e0 02             	shl    $0x2,%eax
c01007b0:	03 45 f4             	add    -0xc(%ebp),%eax
c01007b3:	8b 50 08             	mov    0x8(%eax),%edx
c01007b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007b9:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01007bc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007bf:	8b 40 10             	mov    0x10(%eax),%eax
c01007c2:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01007c5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007c8:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01007cb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007ce:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01007d1:	eb 15                	jmp    c01007e8 <debuginfo_eip+0x296>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01007d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007d6:	8b 55 08             	mov    0x8(%ebp),%edx
c01007d9:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01007dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007df:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01007e2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007e5:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01007e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007eb:	8b 40 08             	mov    0x8(%eax),%eax
c01007ee:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01007f5:	00 
c01007f6:	89 04 24             	mov    %eax,(%esp)
c01007f9:	e8 1d ba 00 00       	call   c010c21b <strfind>
c01007fe:	89 c2                	mov    %eax,%edx
c0100800:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100803:	8b 40 08             	mov    0x8(%eax),%eax
c0100806:	29 c2                	sub    %eax,%edx
c0100808:	8b 45 0c             	mov    0xc(%ebp),%eax
c010080b:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c010080e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100811:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100815:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010081c:	00 
c010081d:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100820:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100824:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100827:	89 44 24 04          	mov    %eax,0x4(%esp)
c010082b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010082e:	89 04 24             	mov    %eax,(%esp)
c0100831:	e8 d6 fb ff ff       	call   c010040c <stab_binsearch>
    if (lline <= rline) {
c0100836:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100839:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010083c:	39 c2                	cmp    %eax,%edx
c010083e:	7f 20                	jg     c0100860 <debuginfo_eip+0x30e>
        info->eip_line = stabs[rline].n_desc;
c0100840:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100843:	89 c2                	mov    %eax,%edx
c0100845:	89 d0                	mov    %edx,%eax
c0100847:	01 c0                	add    %eax,%eax
c0100849:	01 d0                	add    %edx,%eax
c010084b:	c1 e0 02             	shl    $0x2,%eax
c010084e:	03 45 f4             	add    -0xc(%ebp),%eax
c0100851:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0100855:	0f b7 d0             	movzwl %ax,%edx
c0100858:	8b 45 0c             	mov    0xc(%ebp),%eax
c010085b:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c010085e:	eb 13                	jmp    c0100873 <debuginfo_eip+0x321>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100860:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100865:	e9 fc 00 00 00       	jmp    c0100966 <debuginfo_eip+0x414>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c010086a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010086d:	83 e8 01             	sub    $0x1,%eax
c0100870:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100873:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100876:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100879:	39 c2                	cmp    %eax,%edx
c010087b:	7c 4a                	jl     c01008c7 <debuginfo_eip+0x375>
           && stabs[lline].n_type != N_SOL
c010087d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100880:	89 c2                	mov    %eax,%edx
c0100882:	89 d0                	mov    %edx,%eax
c0100884:	01 c0                	add    %eax,%eax
c0100886:	01 d0                	add    %edx,%eax
c0100888:	c1 e0 02             	shl    $0x2,%eax
c010088b:	03 45 f4             	add    -0xc(%ebp),%eax
c010088e:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100892:	3c 84                	cmp    $0x84,%al
c0100894:	74 31                	je     c01008c7 <debuginfo_eip+0x375>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0100896:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100899:	89 c2                	mov    %eax,%edx
c010089b:	89 d0                	mov    %edx,%eax
c010089d:	01 c0                	add    %eax,%eax
c010089f:	01 d0                	add    %edx,%eax
c01008a1:	c1 e0 02             	shl    $0x2,%eax
c01008a4:	03 45 f4             	add    -0xc(%ebp),%eax
c01008a7:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01008ab:	3c 64                	cmp    $0x64,%al
c01008ad:	75 bb                	jne    c010086a <debuginfo_eip+0x318>
c01008af:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008b2:	89 c2                	mov    %eax,%edx
c01008b4:	89 d0                	mov    %edx,%eax
c01008b6:	01 c0                	add    %eax,%eax
c01008b8:	01 d0                	add    %edx,%eax
c01008ba:	c1 e0 02             	shl    $0x2,%eax
c01008bd:	03 45 f4             	add    -0xc(%ebp),%eax
c01008c0:	8b 40 08             	mov    0x8(%eax),%eax
c01008c3:	85 c0                	test   %eax,%eax
c01008c5:	74 a3                	je     c010086a <debuginfo_eip+0x318>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01008c7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008cd:	39 c2                	cmp    %eax,%edx
c01008cf:	7c 40                	jl     c0100911 <debuginfo_eip+0x3bf>
c01008d1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008d4:	89 c2                	mov    %eax,%edx
c01008d6:	89 d0                	mov    %edx,%eax
c01008d8:	01 c0                	add    %eax,%eax
c01008da:	01 d0                	add    %edx,%eax
c01008dc:	c1 e0 02             	shl    $0x2,%eax
c01008df:	03 45 f4             	add    -0xc(%ebp),%eax
c01008e2:	8b 10                	mov    (%eax),%edx
c01008e4:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01008e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01008ea:	89 cb                	mov    %ecx,%ebx
c01008ec:	29 c3                	sub    %eax,%ebx
c01008ee:	89 d8                	mov    %ebx,%eax
c01008f0:	39 c2                	cmp    %eax,%edx
c01008f2:	73 1d                	jae    c0100911 <debuginfo_eip+0x3bf>
        info->eip_file = stabstr + stabs[lline].n_strx;
c01008f4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008f7:	89 c2                	mov    %eax,%edx
c01008f9:	89 d0                	mov    %edx,%eax
c01008fb:	01 c0                	add    %eax,%eax
c01008fd:	01 d0                	add    %edx,%eax
c01008ff:	c1 e0 02             	shl    $0x2,%eax
c0100902:	03 45 f4             	add    -0xc(%ebp),%eax
c0100905:	8b 00                	mov    (%eax),%eax
c0100907:	89 c2                	mov    %eax,%edx
c0100909:	03 55 ec             	add    -0x14(%ebp),%edx
c010090c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010090f:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100911:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100914:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100917:	39 c2                	cmp    %eax,%edx
c0100919:	7d 46                	jge    c0100961 <debuginfo_eip+0x40f>
        for (lline = lfun + 1;
c010091b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010091e:	83 c0 01             	add    $0x1,%eax
c0100921:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100924:	eb 18                	jmp    c010093e <debuginfo_eip+0x3ec>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100926:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100929:	8b 40 14             	mov    0x14(%eax),%eax
c010092c:	8d 50 01             	lea    0x1(%eax),%edx
c010092f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100932:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0100935:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100938:	83 c0 01             	add    $0x1,%eax
c010093b:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c010093e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100941:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0100944:	39 c2                	cmp    %eax,%edx
c0100946:	7d 19                	jge    c0100961 <debuginfo_eip+0x40f>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100948:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010094b:	89 c2                	mov    %eax,%edx
c010094d:	89 d0                	mov    %edx,%eax
c010094f:	01 c0                	add    %eax,%eax
c0100951:	01 d0                	add    %edx,%eax
c0100953:	c1 e0 02             	shl    $0x2,%eax
c0100956:	03 45 f4             	add    -0xc(%ebp),%eax
c0100959:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010095d:	3c a0                	cmp    $0xa0,%al
c010095f:	74 c5                	je     c0100926 <debuginfo_eip+0x3d4>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100961:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100966:	83 c4 54             	add    $0x54,%esp
c0100969:	5b                   	pop    %ebx
c010096a:	5d                   	pop    %ebp
c010096b:	c3                   	ret    

c010096c <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c010096c:	55                   	push   %ebp
c010096d:	89 e5                	mov    %esp,%ebp
c010096f:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100972:	c7 04 24 16 c6 10 c0 	movl   $0xc010c616,(%esp)
c0100979:	e8 e5 f9 ff ff       	call   c0100363 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c010097e:	c7 44 24 04 2c 00 10 	movl   $0xc010002c,0x4(%esp)
c0100985:	c0 
c0100986:	c7 04 24 2f c6 10 c0 	movl   $0xc010c62f,(%esp)
c010098d:	e8 d1 f9 ff ff       	call   c0100363 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100992:	c7 44 24 04 5b c5 10 	movl   $0xc010c55b,0x4(%esp)
c0100999:	c0 
c010099a:	c7 04 24 47 c6 10 c0 	movl   $0xc010c647,(%esp)
c01009a1:	e8 bd f9 ff ff       	call   c0100363 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c01009a6:	c7 44 24 04 c4 ec 1a 	movl   $0xc01aecc4,0x4(%esp)
c01009ad:	c0 
c01009ae:	c7 04 24 5f c6 10 c0 	movl   $0xc010c65f,(%esp)
c01009b5:	e8 a9 f9 ff ff       	call   c0100363 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c01009ba:	c7 44 24 04 78 1e 1b 	movl   $0xc01b1e78,0x4(%esp)
c01009c1:	c0 
c01009c2:	c7 04 24 77 c6 10 c0 	movl   $0xc010c677,(%esp)
c01009c9:	e8 95 f9 ff ff       	call   c0100363 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c01009ce:	b8 78 1e 1b c0       	mov    $0xc01b1e78,%eax
c01009d3:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c01009d9:	b8 2c 00 10 c0       	mov    $0xc010002c,%eax
c01009de:	89 d1                	mov    %edx,%ecx
c01009e0:	29 c1                	sub    %eax,%ecx
c01009e2:	89 c8                	mov    %ecx,%eax
c01009e4:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c01009ea:	85 c0                	test   %eax,%eax
c01009ec:	0f 48 c2             	cmovs  %edx,%eax
c01009ef:	c1 f8 0a             	sar    $0xa,%eax
c01009f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01009f6:	c7 04 24 90 c6 10 c0 	movl   $0xc010c690,(%esp)
c01009fd:	e8 61 f9 ff ff       	call   c0100363 <cprintf>
}
c0100a02:	c9                   	leave  
c0100a03:	c3                   	ret    

c0100a04 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100a04:	55                   	push   %ebp
c0100a05:	89 e5                	mov    %esp,%ebp
c0100a07:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100a0d:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100a10:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a14:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a17:	89 04 24             	mov    %eax,(%esp)
c0100a1a:	e8 33 fb ff ff       	call   c0100552 <debuginfo_eip>
c0100a1f:	85 c0                	test   %eax,%eax
c0100a21:	74 15                	je     c0100a38 <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100a23:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a26:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a2a:	c7 04 24 ba c6 10 c0 	movl   $0xc010c6ba,(%esp)
c0100a31:	e8 2d f9 ff ff       	call   c0100363 <cprintf>
c0100a36:	eb 69                	jmp    c0100aa1 <print_debuginfo+0x9d>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a38:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100a3f:	eb 1a                	jmp    c0100a5b <print_debuginfo+0x57>
            fnname[j] = info.eip_fn_name[j];
c0100a41:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100a44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a47:	01 d0                	add    %edx,%eax
c0100a49:	0f b6 10             	movzbl (%eax),%edx
c0100a4c:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
c0100a52:	03 45 f4             	add    -0xc(%ebp),%eax
c0100a55:	88 10                	mov    %dl,(%eax)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a57:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100a5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100a5e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100a61:	7f de                	jg     c0100a41 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100a63:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
c0100a69:	03 45 f4             	add    -0xc(%ebp),%eax
c0100a6c:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100a6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100a72:	8b 55 08             	mov    0x8(%ebp),%edx
c0100a75:	89 d1                	mov    %edx,%ecx
c0100a77:	29 c1                	sub    %eax,%ecx
c0100a79:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100a7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100a7f:	89 4c 24 10          	mov    %ecx,0x10(%esp)
                fnname, eip - info.eip_fn_addr);
c0100a83:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100a89:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100a8d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100a91:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a95:	c7 04 24 d6 c6 10 c0 	movl   $0xc010c6d6,(%esp)
c0100a9c:	e8 c2 f8 ff ff       	call   c0100363 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100aa1:	c9                   	leave  
c0100aa2:	c3                   	ret    

c0100aa3 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100aa3:	55                   	push   %ebp
c0100aa4:	89 e5                	mov    %esp,%ebp
c0100aa6:	53                   	push   %ebx
c0100aa7:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100aaa:	8b 5d 04             	mov    0x4(%ebp),%ebx
c0100aad:	89 5d f8             	mov    %ebx,-0x8(%ebp)
    return eip;
c0100ab0:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0100ab3:	83 c4 10             	add    $0x10,%esp
c0100ab6:	5b                   	pop    %ebx
c0100ab7:	5d                   	pop    %ebp
c0100ab8:	c3                   	ret    

c0100ab9 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100ab9:	55                   	push   %ebp
c0100aba:	89 e5                	mov    %esp,%ebp
c0100abc:	53                   	push   %ebx
c0100abd:	83 ec 34             	sub    $0x34,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100ac0:	89 eb                	mov    %ebp,%ebx
c0100ac2:	89 5d e0             	mov    %ebx,-0x20(%ebp)
    return ebp;
c0100ac5:	8b 45 e0             	mov    -0x20(%ebp),%eax
     *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
     *    (3.5) popup a calling stackframe
     *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
     *                   the calling funciton's ebp = ss:[ebp]
     */
    uint32_t ebp = read_ebp();
c0100ac8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t eip = read_eip();
c0100acb:	e8 d3 ff ff ff       	call   c0100aa3 <read_eip>
c0100ad0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int i;
    int j;
    uint32_t *args;
    for(i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i++) {
c0100ad3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100ada:	e9 82 00 00 00       	jmp    c0100b61 <print_stackframe+0xa8>
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100adf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100ae2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100ae6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ae9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100aed:	c7 04 24 e8 c6 10 c0 	movl   $0xc010c6e8,(%esp)
c0100af4:	e8 6a f8 ff ff       	call   c0100363 <cprintf>
        args = (uint32_t *)ebp + 2;
c0100af9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100afc:	83 c0 08             	add    $0x8,%eax
c0100aff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for(j = 0; j < 4; j++)
c0100b02:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100b09:	eb 1f                	jmp    c0100b2a <print_stackframe+0x71>
            cprintf("0x%08x ",args[j]);
c0100b0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b0e:	c1 e0 02             	shl    $0x2,%eax
c0100b11:	03 45 e4             	add    -0x1c(%ebp),%eax
c0100b14:	8b 00                	mov    (%eax),%eax
c0100b16:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b1a:	c7 04 24 04 c7 10 c0 	movl   $0xc010c704,(%esp)
c0100b21:	e8 3d f8 ff ff       	call   c0100363 <cprintf>
    int j;
    uint32_t *args;
    for(i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i++) {
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
        args = (uint32_t *)ebp + 2;
        for(j = 0; j < 4; j++)
c0100b26:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100b2a:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100b2e:	7e db                	jle    c0100b0b <print_stackframe+0x52>
            cprintf("0x%08x ",args[j]);
        cprintf("\n");
c0100b30:	c7 04 24 0c c7 10 c0 	movl   $0xc010c70c,(%esp)
c0100b37:	e8 27 f8 ff ff       	call   c0100363 <cprintf>
        print_debuginfo(eip-1);
c0100b3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b3f:	83 e8 01             	sub    $0x1,%eax
c0100b42:	89 04 24             	mov    %eax,(%esp)
c0100b45:	e8 ba fe ff ff       	call   c0100a04 <print_debuginfo>
        eip = ((uint32_t *)ebp)[1];
c0100b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b4d:	83 c0 04             	add    $0x4,%eax
c0100b50:	8b 00                	mov    (%eax),%eax
c0100b52:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0100b55:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b58:	8b 00                	mov    (%eax),%eax
c0100b5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t ebp = read_ebp();
    uint32_t eip = read_eip();
    int i;
    int j;
    uint32_t *args;
    for(i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i++) {
c0100b5d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100b61:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100b65:	74 0a                	je     c0100b71 <print_stackframe+0xb8>
c0100b67:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100b6b:	0f 8e 6e ff ff ff    	jle    c0100adf <print_stackframe+0x26>
        cprintf("\n");
        print_debuginfo(eip-1);
        eip = ((uint32_t *)ebp)[1];
        ebp = ((uint32_t *)ebp)[0];
    }
}
c0100b71:	83 c4 34             	add    $0x34,%esp
c0100b74:	5b                   	pop    %ebx
c0100b75:	5d                   	pop    %ebp
c0100b76:	c3                   	ret    
	...

c0100b78 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100b78:	55                   	push   %ebp
c0100b79:	89 e5                	mov    %esp,%ebp
c0100b7b:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100b7e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100b85:	eb 0d                	jmp    c0100b94 <parse+0x1c>
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
c0100b87:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100b88:	eb 0a                	jmp    c0100b94 <parse+0x1c>
            *buf ++ = '\0';
c0100b8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b8d:	c6 00 00             	movb   $0x0,(%eax)
c0100b90:	83 45 08 01          	addl   $0x1,0x8(%ebp)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100b94:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b97:	0f b6 00             	movzbl (%eax),%eax
c0100b9a:	84 c0                	test   %al,%al
c0100b9c:	74 1d                	je     c0100bbb <parse+0x43>
c0100b9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ba1:	0f b6 00             	movzbl (%eax),%eax
c0100ba4:	0f be c0             	movsbl %al,%eax
c0100ba7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bab:	c7 04 24 90 c7 10 c0 	movl   $0xc010c790,(%esp)
c0100bb2:	e8 31 b6 00 00       	call   c010c1e8 <strchr>
c0100bb7:	85 c0                	test   %eax,%eax
c0100bb9:	75 cf                	jne    c0100b8a <parse+0x12>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100bbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bbe:	0f b6 00             	movzbl (%eax),%eax
c0100bc1:	84 c0                	test   %al,%al
c0100bc3:	74 5e                	je     c0100c23 <parse+0xab>
            break;
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100bc5:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100bc9:	75 14                	jne    c0100bdf <parse+0x67>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100bcb:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100bd2:	00 
c0100bd3:	c7 04 24 95 c7 10 c0 	movl   $0xc010c795,(%esp)
c0100bda:	e8 84 f7 ff ff       	call   c0100363 <cprintf>
        }
        argv[argc ++] = buf;
c0100bdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100be2:	c1 e0 02             	shl    $0x2,%eax
c0100be5:	03 45 0c             	add    0xc(%ebp),%eax
c0100be8:	8b 55 08             	mov    0x8(%ebp),%edx
c0100beb:	89 10                	mov    %edx,(%eax)
c0100bed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100bf1:	eb 04                	jmp    c0100bf7 <parse+0x7f>
            buf ++;
c0100bf3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100bf7:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bfa:	0f b6 00             	movzbl (%eax),%eax
c0100bfd:	84 c0                	test   %al,%al
c0100bff:	74 86                	je     c0100b87 <parse+0xf>
c0100c01:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c04:	0f b6 00             	movzbl (%eax),%eax
c0100c07:	0f be c0             	movsbl %al,%eax
c0100c0a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c0e:	c7 04 24 90 c7 10 c0 	movl   $0xc010c790,(%esp)
c0100c15:	e8 ce b5 00 00       	call   c010c1e8 <strchr>
c0100c1a:	85 c0                	test   %eax,%eax
c0100c1c:	74 d5                	je     c0100bf3 <parse+0x7b>
            buf ++;
        }
    }
c0100c1e:	e9 64 ff ff ff       	jmp    c0100b87 <parse+0xf>
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
            break;
c0100c23:	90                   	nop
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100c24:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100c27:	c9                   	leave  
c0100c28:	c3                   	ret    

c0100c29 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100c29:	55                   	push   %ebp
c0100c2a:	89 e5                	mov    %esp,%ebp
c0100c2c:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100c2f:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100c32:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c36:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c39:	89 04 24             	mov    %eax,(%esp)
c0100c3c:	e8 37 ff ff ff       	call   c0100b78 <parse>
c0100c41:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100c44:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100c48:	75 0a                	jne    c0100c54 <runcmd+0x2b>
        return 0;
c0100c4a:	b8 00 00 00 00       	mov    $0x0,%eax
c0100c4f:	e9 85 00 00 00       	jmp    c0100cd9 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100c54:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100c5b:	eb 5c                	jmp    c0100cb9 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100c5d:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100c60:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100c63:	89 d0                	mov    %edx,%eax
c0100c65:	01 c0                	add    %eax,%eax
c0100c67:	01 d0                	add    %edx,%eax
c0100c69:	c1 e0 02             	shl    $0x2,%eax
c0100c6c:	05 20 d0 12 c0       	add    $0xc012d020,%eax
c0100c71:	8b 00                	mov    (%eax),%eax
c0100c73:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100c77:	89 04 24             	mov    %eax,(%esp)
c0100c7a:	e8 c4 b4 00 00       	call   c010c143 <strcmp>
c0100c7f:	85 c0                	test   %eax,%eax
c0100c81:	75 32                	jne    c0100cb5 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100c83:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100c86:	89 d0                	mov    %edx,%eax
c0100c88:	01 c0                	add    %eax,%eax
c0100c8a:	01 d0                	add    %edx,%eax
c0100c8c:	c1 e0 02             	shl    $0x2,%eax
c0100c8f:	05 20 d0 12 c0       	add    $0xc012d020,%eax
c0100c94:	8b 50 08             	mov    0x8(%eax),%edx
c0100c97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c9a:	8d 48 ff             	lea    -0x1(%eax),%ecx
c0100c9d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100ca0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100ca4:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100ca7:	83 c0 04             	add    $0x4,%eax
c0100caa:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cae:	89 0c 24             	mov    %ecx,(%esp)
c0100cb1:	ff d2                	call   *%edx
c0100cb3:	eb 24                	jmp    c0100cd9 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100cb5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cbc:	83 f8 02             	cmp    $0x2,%eax
c0100cbf:	76 9c                	jbe    c0100c5d <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100cc1:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100cc4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cc8:	c7 04 24 b3 c7 10 c0 	movl   $0xc010c7b3,(%esp)
c0100ccf:	e8 8f f6 ff ff       	call   c0100363 <cprintf>
    return 0;
c0100cd4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100cd9:	c9                   	leave  
c0100cda:	c3                   	ret    

c0100cdb <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100cdb:	55                   	push   %ebp
c0100cdc:	89 e5                	mov    %esp,%ebp
c0100cde:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100ce1:	c7 04 24 cc c7 10 c0 	movl   $0xc010c7cc,(%esp)
c0100ce8:	e8 76 f6 ff ff       	call   c0100363 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100ced:	c7 04 24 f4 c7 10 c0 	movl   $0xc010c7f4,(%esp)
c0100cf4:	e8 6a f6 ff ff       	call   c0100363 <cprintf>

    if (tf != NULL) {
c0100cf9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100cfd:	74 0e                	je     c0100d0d <kmonitor+0x32>
        print_trapframe(tf);
c0100cff:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d02:	89 04 24             	mov    %eax,(%esp)
c0100d05:	e8 a4 17 00 00       	call   c01024ae <print_trapframe>
c0100d0a:	eb 01                	jmp    c0100d0d <kmonitor+0x32>
        if ((buf = readline("K> ")) != NULL) {
            if (runcmd(buf, tf) < 0) {
                break;
            }
        }
    }
c0100d0c:	90                   	nop
        print_trapframe(tf);
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100d0d:	c7 04 24 19 c8 10 c0 	movl   $0xc010c819,(%esp)
c0100d14:	e8 3b f5 ff ff       	call   c0100254 <readline>
c0100d19:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100d1c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100d20:	74 ea                	je     c0100d0c <kmonitor+0x31>
            if (runcmd(buf, tf) < 0) {
c0100d22:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d25:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d2c:	89 04 24             	mov    %eax,(%esp)
c0100d2f:	e8 f5 fe ff ff       	call   c0100c29 <runcmd>
c0100d34:	85 c0                	test   %eax,%eax
c0100d36:	79 d4                	jns    c0100d0c <kmonitor+0x31>
                break;
c0100d38:	90                   	nop
            }
        }
    }
}
c0100d39:	c9                   	leave  
c0100d3a:	c3                   	ret    

c0100d3b <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100d3b:	55                   	push   %ebp
c0100d3c:	89 e5                	mov    %esp,%ebp
c0100d3e:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d41:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d48:	eb 3f                	jmp    c0100d89 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100d4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d4d:	89 d0                	mov    %edx,%eax
c0100d4f:	01 c0                	add    %eax,%eax
c0100d51:	01 d0                	add    %edx,%eax
c0100d53:	c1 e0 02             	shl    $0x2,%eax
c0100d56:	05 20 d0 12 c0       	add    $0xc012d020,%eax
c0100d5b:	8b 48 04             	mov    0x4(%eax),%ecx
c0100d5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d61:	89 d0                	mov    %edx,%eax
c0100d63:	01 c0                	add    %eax,%eax
c0100d65:	01 d0                	add    %edx,%eax
c0100d67:	c1 e0 02             	shl    $0x2,%eax
c0100d6a:	05 20 d0 12 c0       	add    $0xc012d020,%eax
c0100d6f:	8b 00                	mov    (%eax),%eax
c0100d71:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100d75:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d79:	c7 04 24 1d c8 10 c0 	movl   $0xc010c81d,(%esp)
c0100d80:	e8 de f5 ff ff       	call   c0100363 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d85:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100d89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d8c:	83 f8 02             	cmp    $0x2,%eax
c0100d8f:	76 b9                	jbe    c0100d4a <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100d91:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100d96:	c9                   	leave  
c0100d97:	c3                   	ret    

c0100d98 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100d98:	55                   	push   %ebp
c0100d99:	89 e5                	mov    %esp,%ebp
c0100d9b:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100d9e:	e8 c9 fb ff ff       	call   c010096c <print_kerninfo>
    return 0;
c0100da3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100da8:	c9                   	leave  
c0100da9:	c3                   	ret    

c0100daa <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100daa:	55                   	push   %ebp
c0100dab:	89 e5                	mov    %esp,%ebp
c0100dad:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100db0:	e8 04 fd ff ff       	call   c0100ab9 <print_stackframe>
    return 0;
c0100db5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dba:	c9                   	leave  
c0100dbb:	c3                   	ret    

c0100dbc <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100dbc:	55                   	push   %ebp
c0100dbd:	89 e5                	mov    %esp,%ebp
c0100dbf:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100dc2:	a1 00 f1 1a c0       	mov    0xc01af100,%eax
c0100dc7:	85 c0                	test   %eax,%eax
c0100dc9:	75 4c                	jne    c0100e17 <__panic+0x5b>
        goto panic_dead;
    }
    is_panic = 1;
c0100dcb:	c7 05 00 f1 1a c0 01 	movl   $0x1,0xc01af100
c0100dd2:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100dd5:	8d 55 14             	lea    0x14(%ebp),%edx
c0100dd8:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100ddb:	89 10                	mov    %edx,(%eax)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100ddd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100de0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100de4:	8b 45 08             	mov    0x8(%ebp),%eax
c0100de7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100deb:	c7 04 24 26 c8 10 c0 	movl   $0xc010c826,(%esp)
c0100df2:	e8 6c f5 ff ff       	call   c0100363 <cprintf>
    vcprintf(fmt, ap);
c0100df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100dfa:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100dfe:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e01:	89 04 24             	mov    %eax,(%esp)
c0100e04:	e8 27 f5 ff ff       	call   c0100330 <vcprintf>
    cprintf("\n");
c0100e09:	c7 04 24 42 c8 10 c0 	movl   $0xc010c842,(%esp)
c0100e10:	e8 4e f5 ff ff       	call   c0100363 <cprintf>
c0100e15:	eb 01                	jmp    c0100e18 <__panic+0x5c>
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
    if (is_panic) {
        goto panic_dead;
c0100e17:	90                   	nop
    vcprintf(fmt, ap);
    cprintf("\n");
    va_end(ap);

panic_dead:
    intr_disable();
c0100e18:	e8 cd 12 00 00       	call   c01020ea <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100e1d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100e24:	e8 b2 fe ff ff       	call   c0100cdb <kmonitor>
    }
c0100e29:	eb f2                	jmp    c0100e1d <__panic+0x61>

c0100e2b <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100e2b:	55                   	push   %ebp
c0100e2c:	89 e5                	mov    %esp,%ebp
c0100e2e:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100e31:	8d 55 14             	lea    0x14(%ebp),%edx
c0100e34:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100e37:	89 10                	mov    %edx,(%eax)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100e39:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e3c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e40:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e43:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e47:	c7 04 24 44 c8 10 c0 	movl   $0xc010c844,(%esp)
c0100e4e:	e8 10 f5 ff ff       	call   c0100363 <cprintf>
    vcprintf(fmt, ap);
c0100e53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e56:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e5a:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e5d:	89 04 24             	mov    %eax,(%esp)
c0100e60:	e8 cb f4 ff ff       	call   c0100330 <vcprintf>
    cprintf("\n");
c0100e65:	c7 04 24 42 c8 10 c0 	movl   $0xc010c842,(%esp)
c0100e6c:	e8 f2 f4 ff ff       	call   c0100363 <cprintf>
    va_end(ap);
}
c0100e71:	c9                   	leave  
c0100e72:	c3                   	ret    

c0100e73 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100e73:	55                   	push   %ebp
c0100e74:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100e76:	a1 00 f1 1a c0       	mov    0xc01af100,%eax
}
c0100e7b:	5d                   	pop    %ebp
c0100e7c:	c3                   	ret    
c0100e7d:	00 00                	add    %al,(%eax)
	...

c0100e80 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100e80:	55                   	push   %ebp
c0100e81:	89 e5                	mov    %esp,%ebp
c0100e83:	83 ec 28             	sub    $0x28,%esp
c0100e86:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100e8c:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100e90:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100e94:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100e98:	ee                   	out    %al,(%dx)
c0100e99:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100e9f:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100ea3:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100ea7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100eab:	ee                   	out    %al,(%dx)
c0100eac:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100eb2:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100eb6:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100eba:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100ebe:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100ebf:	c7 05 78 1d 1b c0 00 	movl   $0x0,0xc01b1d78
c0100ec6:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100ec9:	c7 04 24 62 c8 10 c0 	movl   $0xc010c862,(%esp)
c0100ed0:	e8 8e f4 ff ff       	call   c0100363 <cprintf>
    pic_enable(IRQ_TIMER);
c0100ed5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100edc:	e8 67 12 00 00       	call   c0102148 <pic_enable>
}
c0100ee1:	c9                   	leave  
c0100ee2:	c3                   	ret    
	...

c0100ee4 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100ee4:	55                   	push   %ebp
c0100ee5:	89 e5                	mov    %esp,%ebp
c0100ee7:	53                   	push   %ebx
c0100ee8:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100eeb:	9c                   	pushf  
c0100eec:	5b                   	pop    %ebx
c0100eed:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c0100ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100ef3:	25 00 02 00 00       	and    $0x200,%eax
c0100ef8:	85 c0                	test   %eax,%eax
c0100efa:	74 0c                	je     c0100f08 <__intr_save+0x24>
        intr_disable();
c0100efc:	e8 e9 11 00 00       	call   c01020ea <intr_disable>
        return 1;
c0100f01:	b8 01 00 00 00       	mov    $0x1,%eax
c0100f06:	eb 05                	jmp    c0100f0d <__intr_save+0x29>
    }
    return 0;
c0100f08:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f0d:	83 c4 14             	add    $0x14,%esp
c0100f10:	5b                   	pop    %ebx
c0100f11:	5d                   	pop    %ebp
c0100f12:	c3                   	ret    

c0100f13 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0100f13:	55                   	push   %ebp
c0100f14:	89 e5                	mov    %esp,%ebp
c0100f16:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0100f19:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100f1d:	74 05                	je     c0100f24 <__intr_restore+0x11>
        intr_enable();
c0100f1f:	e8 c0 11 00 00       	call   c01020e4 <intr_enable>
    }
}
c0100f24:	c9                   	leave  
c0100f25:	c3                   	ret    

c0100f26 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0100f26:	55                   	push   %ebp
c0100f27:	89 e5                	mov    %esp,%ebp
c0100f29:	53                   	push   %ebx
c0100f2a:	83 ec 14             	sub    $0x14,%esp
c0100f2d:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f33:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0100f37:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0100f3b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f3f:	ec                   	in     (%dx),%al
c0100f40:	89 c3                	mov    %eax,%ebx
c0100f42:	88 5d f9             	mov    %bl,-0x7(%ebp)
    return data;
c0100f45:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f4b:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100f4f:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0100f53:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f57:	ec                   	in     (%dx),%al
c0100f58:	89 c3                	mov    %eax,%ebx
c0100f5a:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c0100f5d:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f63:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100f67:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0100f6b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f6f:	ec                   	in     (%dx),%al
c0100f70:	89 c3                	mov    %eax,%ebx
c0100f72:	88 5d f1             	mov    %bl,-0xf(%ebp)
    return data;
c0100f75:	66 c7 45 ee 84 00    	movw   $0x84,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f7b:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100f7f:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0100f83:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f87:	ec                   	in     (%dx),%al
c0100f88:	89 c3                	mov    %eax,%ebx
c0100f8a:	88 5d ed             	mov    %bl,-0x13(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0100f8d:	83 c4 14             	add    $0x14,%esp
c0100f90:	5b                   	pop    %ebx
c0100f91:	5d                   	pop    %ebp
c0100f92:	c3                   	ret    

c0100f93 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0100f93:	55                   	push   %ebp
c0100f94:	89 e5                	mov    %esp,%ebp
c0100f96:	53                   	push   %ebx
c0100f97:	83 ec 24             	sub    $0x24,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0100f9a:	c7 45 f8 00 80 0b c0 	movl   $0xc00b8000,-0x8(%ebp)
    uint16_t was = *cp;
c0100fa1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100fa4:	0f b7 00             	movzwl (%eax),%eax
c0100fa7:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    *cp = (uint16_t) 0xA55A;
c0100fab:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100fae:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0100fb3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100fb6:	0f b7 00             	movzwl (%eax),%eax
c0100fb9:	66 3d 5a a5          	cmp    $0xa55a,%ax
c0100fbd:	74 12                	je     c0100fd1 <cga_init+0x3e>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0100fbf:	c7 45 f8 00 00 0b c0 	movl   $0xc00b0000,-0x8(%ebp)
        addr_6845 = MONO_BASE;
c0100fc6:	66 c7 05 26 f1 1a c0 	movw   $0x3b4,0xc01af126
c0100fcd:	b4 03 
c0100fcf:	eb 13                	jmp    c0100fe4 <cga_init+0x51>
    } else {
        *cp = was;
c0100fd1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100fd4:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100fd8:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0100fdb:	66 c7 05 26 f1 1a c0 	movw   $0x3d4,0xc01af126
c0100fe2:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c0100fe4:	0f b7 05 26 f1 1a c0 	movzwl 0xc01af126,%eax
c0100feb:	0f b7 c0             	movzwl %ax,%eax
c0100fee:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0100ff2:	c6 45 ed 0e          	movb   $0xe,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100ff6:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100ffa:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100ffe:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0100fff:	0f b7 05 26 f1 1a c0 	movzwl 0xc01af126,%eax
c0101006:	83 c0 01             	add    $0x1,%eax
c0101009:	0f b7 c0             	movzwl %ax,%eax
c010100c:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101010:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101014:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101018:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010101c:	ec                   	in     (%dx),%al
c010101d:	89 c3                	mov    %eax,%ebx
c010101f:	88 5d e9             	mov    %bl,-0x17(%ebp)
    return data;
c0101022:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101026:	0f b6 c0             	movzbl %al,%eax
c0101029:	c1 e0 08             	shl    $0x8,%eax
c010102c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    outb(addr_6845, 15);
c010102f:	0f b7 05 26 f1 1a c0 	movzwl 0xc01af126,%eax
c0101036:	0f b7 c0             	movzwl %ax,%eax
c0101039:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
c010103d:	c6 45 e5 0f          	movb   $0xf,-0x1b(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101041:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101045:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101049:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c010104a:	0f b7 05 26 f1 1a c0 	movzwl 0xc01af126,%eax
c0101051:	83 c0 01             	add    $0x1,%eax
c0101054:	0f b7 c0             	movzwl %ax,%eax
c0101057:	66 89 45 e2          	mov    %ax,-0x1e(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010105b:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010105f:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101063:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101067:	ec                   	in     (%dx),%al
c0101068:	89 c3                	mov    %eax,%ebx
c010106a:	88 5d e1             	mov    %bl,-0x1f(%ebp)
    return data;
c010106d:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101071:	0f b6 c0             	movzbl %al,%eax
c0101074:	09 45 f0             	or     %eax,-0x10(%ebp)

    crt_buf = (uint16_t*) cp;
c0101077:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010107a:	a3 20 f1 1a c0       	mov    %eax,0xc01af120
    crt_pos = pos;
c010107f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101082:	66 a3 24 f1 1a c0    	mov    %ax,0xc01af124
}
c0101088:	83 c4 24             	add    $0x24,%esp
c010108b:	5b                   	pop    %ebx
c010108c:	5d                   	pop    %ebp
c010108d:	c3                   	ret    

c010108e <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c010108e:	55                   	push   %ebp
c010108f:	89 e5                	mov    %esp,%ebp
c0101091:	53                   	push   %ebx
c0101092:	83 ec 54             	sub    $0x54,%esp
c0101095:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c010109b:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010109f:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01010a3:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01010a7:	ee                   	out    %al,(%dx)
c01010a8:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c01010ae:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c01010b2:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01010b6:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01010ba:	ee                   	out    %al,(%dx)
c01010bb:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c01010c1:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c01010c5:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01010c9:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01010cd:	ee                   	out    %al,(%dx)
c01010ce:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01010d4:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c01010d8:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01010dc:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01010e0:	ee                   	out    %al,(%dx)
c01010e1:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01010e7:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01010eb:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01010ef:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01010f3:	ee                   	out    %al,(%dx)
c01010f4:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01010fa:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01010fe:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101102:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101106:	ee                   	out    %al,(%dx)
c0101107:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c010110d:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c0101111:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101115:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101119:	ee                   	out    %al,(%dx)
c010111a:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101120:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101124:	66 89 55 c6          	mov    %dx,-0x3a(%ebp)
c0101128:	0f b7 55 c6          	movzwl -0x3a(%ebp),%edx
c010112c:	ec                   	in     (%dx),%al
c010112d:	89 c3                	mov    %eax,%ebx
c010112f:	88 5d d9             	mov    %bl,-0x27(%ebp)
    return data;
c0101132:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101136:	3c ff                	cmp    $0xff,%al
c0101138:	0f 95 c0             	setne  %al
c010113b:	0f b6 c0             	movzbl %al,%eax
c010113e:	a3 28 f1 1a c0       	mov    %eax,0xc01af128
c0101143:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101149:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010114d:	66 89 55 c6          	mov    %dx,-0x3a(%ebp)
c0101151:	0f b7 55 c6          	movzwl -0x3a(%ebp),%edx
c0101155:	ec                   	in     (%dx),%al
c0101156:	89 c3                	mov    %eax,%ebx
c0101158:	88 5d d5             	mov    %bl,-0x2b(%ebp)
    return data;
c010115b:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101161:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0101165:	66 89 55 c6          	mov    %dx,-0x3a(%ebp)
c0101169:	0f b7 55 c6          	movzwl -0x3a(%ebp),%edx
c010116d:	ec                   	in     (%dx),%al
c010116e:	89 c3                	mov    %eax,%ebx
c0101170:	88 5d d1             	mov    %bl,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101173:	a1 28 f1 1a c0       	mov    0xc01af128,%eax
c0101178:	85 c0                	test   %eax,%eax
c010117a:	74 0c                	je     c0101188 <serial_init+0xfa>
        pic_enable(IRQ_COM1);
c010117c:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0101183:	e8 c0 0f 00 00       	call   c0102148 <pic_enable>
    }
}
c0101188:	83 c4 54             	add    $0x54,%esp
c010118b:	5b                   	pop    %ebx
c010118c:	5d                   	pop    %ebp
c010118d:	c3                   	ret    

c010118e <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c010118e:	55                   	push   %ebp
c010118f:	89 e5                	mov    %esp,%ebp
c0101191:	53                   	push   %ebx
c0101192:	83 ec 24             	sub    $0x24,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101195:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c010119c:	eb 09                	jmp    c01011a7 <lpt_putc_sub+0x19>
        delay();
c010119e:	e8 83 fd ff ff       	call   c0100f26 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c01011a3:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c01011a7:	66 c7 45 f6 79 03    	movw   $0x379,-0xa(%ebp)
c01011ad:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01011b1:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c01011b5:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01011b9:	ec                   	in     (%dx),%al
c01011ba:	89 c3                	mov    %eax,%ebx
c01011bc:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c01011bf:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01011c3:	84 c0                	test   %al,%al
c01011c5:	78 09                	js     c01011d0 <lpt_putc_sub+0x42>
c01011c7:	81 7d f8 ff 31 00 00 	cmpl   $0x31ff,-0x8(%ebp)
c01011ce:	7e ce                	jle    c010119e <lpt_putc_sub+0x10>
        delay();
    }
    outb(LPTPORT + 0, c);
c01011d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01011d3:	0f b6 c0             	movzbl %al,%eax
c01011d6:	66 c7 45 f2 78 03    	movw   $0x378,-0xe(%ebp)
c01011dc:	88 45 f1             	mov    %al,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01011df:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01011e3:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01011e7:	ee                   	out    %al,(%dx)
c01011e8:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c01011ee:	c6 45 ed 0d          	movb   $0xd,-0x13(%ebp)
c01011f2:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01011f6:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01011fa:	ee                   	out    %al,(%dx)
c01011fb:	66 c7 45 ea 7a 03    	movw   $0x37a,-0x16(%ebp)
c0101201:	c6 45 e9 08          	movb   $0x8,-0x17(%ebp)
c0101205:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101209:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010120d:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c010120e:	83 c4 24             	add    $0x24,%esp
c0101211:	5b                   	pop    %ebx
c0101212:	5d                   	pop    %ebp
c0101213:	c3                   	ret    

c0101214 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c0101214:	55                   	push   %ebp
c0101215:	89 e5                	mov    %esp,%ebp
c0101217:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c010121a:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010121e:	74 0d                	je     c010122d <lpt_putc+0x19>
        lpt_putc_sub(c);
c0101220:	8b 45 08             	mov    0x8(%ebp),%eax
c0101223:	89 04 24             	mov    %eax,(%esp)
c0101226:	e8 63 ff ff ff       	call   c010118e <lpt_putc_sub>
c010122b:	eb 24                	jmp    c0101251 <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c010122d:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101234:	e8 55 ff ff ff       	call   c010118e <lpt_putc_sub>
        lpt_putc_sub(' ');
c0101239:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101240:	e8 49 ff ff ff       	call   c010118e <lpt_putc_sub>
        lpt_putc_sub('\b');
c0101245:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010124c:	e8 3d ff ff ff       	call   c010118e <lpt_putc_sub>
    }
}
c0101251:	c9                   	leave  
c0101252:	c3                   	ret    

c0101253 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0101253:	55                   	push   %ebp
c0101254:	89 e5                	mov    %esp,%ebp
c0101256:	53                   	push   %ebx
c0101257:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c010125a:	8b 45 08             	mov    0x8(%ebp),%eax
c010125d:	b0 00                	mov    $0x0,%al
c010125f:	85 c0                	test   %eax,%eax
c0101261:	75 07                	jne    c010126a <cga_putc+0x17>
        c |= 0x0700;
c0101263:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c010126a:	8b 45 08             	mov    0x8(%ebp),%eax
c010126d:	25 ff 00 00 00       	and    $0xff,%eax
c0101272:	83 f8 0a             	cmp    $0xa,%eax
c0101275:	74 4e                	je     c01012c5 <cga_putc+0x72>
c0101277:	83 f8 0d             	cmp    $0xd,%eax
c010127a:	74 59                	je     c01012d5 <cga_putc+0x82>
c010127c:	83 f8 08             	cmp    $0x8,%eax
c010127f:	0f 85 8c 00 00 00    	jne    c0101311 <cga_putc+0xbe>
    case '\b':
        if (crt_pos > 0) {
c0101285:	0f b7 05 24 f1 1a c0 	movzwl 0xc01af124,%eax
c010128c:	66 85 c0             	test   %ax,%ax
c010128f:	0f 84 a1 00 00 00    	je     c0101336 <cga_putc+0xe3>
            crt_pos --;
c0101295:	0f b7 05 24 f1 1a c0 	movzwl 0xc01af124,%eax
c010129c:	83 e8 01             	sub    $0x1,%eax
c010129f:	66 a3 24 f1 1a c0    	mov    %ax,0xc01af124
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c01012a5:	a1 20 f1 1a c0       	mov    0xc01af120,%eax
c01012aa:	0f b7 15 24 f1 1a c0 	movzwl 0xc01af124,%edx
c01012b1:	0f b7 d2             	movzwl %dx,%edx
c01012b4:	01 d2                	add    %edx,%edx
c01012b6:	01 c2                	add    %eax,%edx
c01012b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01012bb:	b0 00                	mov    $0x0,%al
c01012bd:	83 c8 20             	or     $0x20,%eax
c01012c0:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c01012c3:	eb 71                	jmp    c0101336 <cga_putc+0xe3>
    case '\n':
        crt_pos += CRT_COLS;
c01012c5:	0f b7 05 24 f1 1a c0 	movzwl 0xc01af124,%eax
c01012cc:	83 c0 50             	add    $0x50,%eax
c01012cf:	66 a3 24 f1 1a c0    	mov    %ax,0xc01af124
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c01012d5:	0f b7 1d 24 f1 1a c0 	movzwl 0xc01af124,%ebx
c01012dc:	0f b7 0d 24 f1 1a c0 	movzwl 0xc01af124,%ecx
c01012e3:	0f b7 c1             	movzwl %cx,%eax
c01012e6:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c01012ec:	c1 e8 10             	shr    $0x10,%eax
c01012ef:	89 c2                	mov    %eax,%edx
c01012f1:	66 c1 ea 06          	shr    $0x6,%dx
c01012f5:	89 d0                	mov    %edx,%eax
c01012f7:	c1 e0 02             	shl    $0x2,%eax
c01012fa:	01 d0                	add    %edx,%eax
c01012fc:	c1 e0 04             	shl    $0x4,%eax
c01012ff:	89 ca                	mov    %ecx,%edx
c0101301:	66 29 c2             	sub    %ax,%dx
c0101304:	89 d8                	mov    %ebx,%eax
c0101306:	66 29 d0             	sub    %dx,%ax
c0101309:	66 a3 24 f1 1a c0    	mov    %ax,0xc01af124
        break;
c010130f:	eb 26                	jmp    c0101337 <cga_putc+0xe4>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0101311:	8b 15 20 f1 1a c0    	mov    0xc01af120,%edx
c0101317:	0f b7 05 24 f1 1a c0 	movzwl 0xc01af124,%eax
c010131e:	0f b7 c8             	movzwl %ax,%ecx
c0101321:	01 c9                	add    %ecx,%ecx
c0101323:	01 d1                	add    %edx,%ecx
c0101325:	8b 55 08             	mov    0x8(%ebp),%edx
c0101328:	66 89 11             	mov    %dx,(%ecx)
c010132b:	83 c0 01             	add    $0x1,%eax
c010132e:	66 a3 24 f1 1a c0    	mov    %ax,0xc01af124
        break;
c0101334:	eb 01                	jmp    c0101337 <cga_putc+0xe4>
    case '\b':
        if (crt_pos > 0) {
            crt_pos --;
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
        }
        break;
c0101336:	90                   	nop
        crt_buf[crt_pos ++] = c;     // write the character
        break;
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0101337:	0f b7 05 24 f1 1a c0 	movzwl 0xc01af124,%eax
c010133e:	66 3d cf 07          	cmp    $0x7cf,%ax
c0101342:	76 5b                	jbe    c010139f <cga_putc+0x14c>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101344:	a1 20 f1 1a c0       	mov    0xc01af120,%eax
c0101349:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c010134f:	a1 20 f1 1a c0       	mov    0xc01af120,%eax
c0101354:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c010135b:	00 
c010135c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101360:	89 04 24             	mov    %eax,(%esp)
c0101363:	e8 86 b0 00 00       	call   c010c3ee <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101368:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c010136f:	eb 15                	jmp    c0101386 <cga_putc+0x133>
            crt_buf[i] = 0x0700 | ' ';
c0101371:	a1 20 f1 1a c0       	mov    0xc01af120,%eax
c0101376:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101379:	01 d2                	add    %edx,%edx
c010137b:	01 d0                	add    %edx,%eax
c010137d:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101382:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101386:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c010138d:	7e e2                	jle    c0101371 <cga_putc+0x11e>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c010138f:	0f b7 05 24 f1 1a c0 	movzwl 0xc01af124,%eax
c0101396:	83 e8 50             	sub    $0x50,%eax
c0101399:	66 a3 24 f1 1a c0    	mov    %ax,0xc01af124
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c010139f:	0f b7 05 26 f1 1a c0 	movzwl 0xc01af126,%eax
c01013a6:	0f b7 c0             	movzwl %ax,%eax
c01013a9:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01013ad:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c01013b1:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01013b5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013b9:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c01013ba:	0f b7 05 24 f1 1a c0 	movzwl 0xc01af124,%eax
c01013c1:	66 c1 e8 08          	shr    $0x8,%ax
c01013c5:	0f b6 c0             	movzbl %al,%eax
c01013c8:	0f b7 15 26 f1 1a c0 	movzwl 0xc01af126,%edx
c01013cf:	83 c2 01             	add    $0x1,%edx
c01013d2:	0f b7 d2             	movzwl %dx,%edx
c01013d5:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c01013d9:	88 45 ed             	mov    %al,-0x13(%ebp)
c01013dc:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01013e0:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01013e4:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c01013e5:	0f b7 05 26 f1 1a c0 	movzwl 0xc01af126,%eax
c01013ec:	0f b7 c0             	movzwl %ax,%eax
c01013ef:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c01013f3:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c01013f7:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01013fb:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01013ff:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0101400:	0f b7 05 24 f1 1a c0 	movzwl 0xc01af124,%eax
c0101407:	0f b6 c0             	movzbl %al,%eax
c010140a:	0f b7 15 26 f1 1a c0 	movzwl 0xc01af126,%edx
c0101411:	83 c2 01             	add    $0x1,%edx
c0101414:	0f b7 d2             	movzwl %dx,%edx
c0101417:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010141b:	88 45 e5             	mov    %al,-0x1b(%ebp)
c010141e:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101422:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101426:	ee                   	out    %al,(%dx)
}
c0101427:	83 c4 34             	add    $0x34,%esp
c010142a:	5b                   	pop    %ebx
c010142b:	5d                   	pop    %ebp
c010142c:	c3                   	ret    

c010142d <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c010142d:	55                   	push   %ebp
c010142e:	89 e5                	mov    %esp,%ebp
c0101430:	53                   	push   %ebx
c0101431:	83 ec 14             	sub    $0x14,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101434:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c010143b:	eb 09                	jmp    c0101446 <serial_putc_sub+0x19>
        delay();
c010143d:	e8 e4 fa ff ff       	call   c0100f26 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101442:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c0101446:	66 c7 45 f6 fd 03    	movw   $0x3fd,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010144c:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101450:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101454:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101458:	ec                   	in     (%dx),%al
c0101459:	89 c3                	mov    %eax,%ebx
c010145b:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c010145e:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101462:	0f b6 c0             	movzbl %al,%eax
c0101465:	83 e0 20             	and    $0x20,%eax
c0101468:	85 c0                	test   %eax,%eax
c010146a:	75 09                	jne    c0101475 <serial_putc_sub+0x48>
c010146c:	81 7d f8 ff 31 00 00 	cmpl   $0x31ff,-0x8(%ebp)
c0101473:	7e c8                	jle    c010143d <serial_putc_sub+0x10>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101475:	8b 45 08             	mov    0x8(%ebp),%eax
c0101478:	0f b6 c0             	movzbl %al,%eax
c010147b:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
c0101481:	88 45 f1             	mov    %al,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101484:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101488:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010148c:	ee                   	out    %al,(%dx)
}
c010148d:	83 c4 14             	add    $0x14,%esp
c0101490:	5b                   	pop    %ebx
c0101491:	5d                   	pop    %ebp
c0101492:	c3                   	ret    

c0101493 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101493:	55                   	push   %ebp
c0101494:	89 e5                	mov    %esp,%ebp
c0101496:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0101499:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010149d:	74 0d                	je     c01014ac <serial_putc+0x19>
        serial_putc_sub(c);
c010149f:	8b 45 08             	mov    0x8(%ebp),%eax
c01014a2:	89 04 24             	mov    %eax,(%esp)
c01014a5:	e8 83 ff ff ff       	call   c010142d <serial_putc_sub>
c01014aa:	eb 24                	jmp    c01014d0 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c01014ac:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01014b3:	e8 75 ff ff ff       	call   c010142d <serial_putc_sub>
        serial_putc_sub(' ');
c01014b8:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01014bf:	e8 69 ff ff ff       	call   c010142d <serial_putc_sub>
        serial_putc_sub('\b');
c01014c4:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01014cb:	e8 5d ff ff ff       	call   c010142d <serial_putc_sub>
    }
}
c01014d0:	c9                   	leave  
c01014d1:	c3                   	ret    

c01014d2 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c01014d2:	55                   	push   %ebp
c01014d3:	89 e5                	mov    %esp,%ebp
c01014d5:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c01014d8:	eb 32                	jmp    c010150c <cons_intr+0x3a>
        if (c != 0) {
c01014da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01014de:	74 2c                	je     c010150c <cons_intr+0x3a>
            cons.buf[cons.wpos ++] = c;
c01014e0:	a1 44 f3 1a c0       	mov    0xc01af344,%eax
c01014e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01014e8:	88 90 40 f1 1a c0    	mov    %dl,-0x3fe50ec0(%eax)
c01014ee:	83 c0 01             	add    $0x1,%eax
c01014f1:	a3 44 f3 1a c0       	mov    %eax,0xc01af344
            if (cons.wpos == CONSBUFSIZE) {
c01014f6:	a1 44 f3 1a c0       	mov    0xc01af344,%eax
c01014fb:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101500:	75 0a                	jne    c010150c <cons_intr+0x3a>
                cons.wpos = 0;
c0101502:	c7 05 44 f3 1a c0 00 	movl   $0x0,0xc01af344
c0101509:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c010150c:	8b 45 08             	mov    0x8(%ebp),%eax
c010150f:	ff d0                	call   *%eax
c0101511:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101514:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0101518:	75 c0                	jne    c01014da <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c010151a:	c9                   	leave  
c010151b:	c3                   	ret    

c010151c <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c010151c:	55                   	push   %ebp
c010151d:	89 e5                	mov    %esp,%ebp
c010151f:	53                   	push   %ebx
c0101520:	83 ec 14             	sub    $0x14,%esp
c0101523:	66 c7 45 f6 fd 03    	movw   $0x3fd,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101529:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010152d:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101531:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101535:	ec                   	in     (%dx),%al
c0101536:	89 c3                	mov    %eax,%ebx
c0101538:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c010153b:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c010153f:	0f b6 c0             	movzbl %al,%eax
c0101542:	83 e0 01             	and    $0x1,%eax
c0101545:	85 c0                	test   %eax,%eax
c0101547:	75 07                	jne    c0101550 <serial_proc_data+0x34>
        return -1;
c0101549:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010154e:	eb 32                	jmp    c0101582 <serial_proc_data+0x66>
c0101550:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101556:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010155a:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010155e:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101562:	ec                   	in     (%dx),%al
c0101563:	89 c3                	mov    %eax,%ebx
c0101565:	88 5d f1             	mov    %bl,-0xf(%ebp)
    return data;
c0101568:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c010156c:	0f b6 c0             	movzbl %al,%eax
c010156f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (c == 127) {
c0101572:	83 7d f8 7f          	cmpl   $0x7f,-0x8(%ebp)
c0101576:	75 07                	jne    c010157f <serial_proc_data+0x63>
        c = '\b';
c0101578:	c7 45 f8 08 00 00 00 	movl   $0x8,-0x8(%ebp)
    }
    return c;
c010157f:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0101582:	83 c4 14             	add    $0x14,%esp
c0101585:	5b                   	pop    %ebx
c0101586:	5d                   	pop    %ebp
c0101587:	c3                   	ret    

c0101588 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101588:	55                   	push   %ebp
c0101589:	89 e5                	mov    %esp,%ebp
c010158b:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c010158e:	a1 28 f1 1a c0       	mov    0xc01af128,%eax
c0101593:	85 c0                	test   %eax,%eax
c0101595:	74 0c                	je     c01015a3 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c0101597:	c7 04 24 1c 15 10 c0 	movl   $0xc010151c,(%esp)
c010159e:	e8 2f ff ff ff       	call   c01014d2 <cons_intr>
    }
}
c01015a3:	c9                   	leave  
c01015a4:	c3                   	ret    

c01015a5 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c01015a5:	55                   	push   %ebp
c01015a6:	89 e5                	mov    %esp,%ebp
c01015a8:	53                   	push   %ebx
c01015a9:	83 ec 44             	sub    $0x44,%esp
c01015ac:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015b2:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c01015b6:	66 89 55 d6          	mov    %dx,-0x2a(%ebp)
c01015ba:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01015be:	ec                   	in     (%dx),%al
c01015bf:	89 c3                	mov    %eax,%ebx
c01015c1:	88 5d ef             	mov    %bl,-0x11(%ebp)
    return data;
c01015c4:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c01015c8:	0f b6 c0             	movzbl %al,%eax
c01015cb:	83 e0 01             	and    $0x1,%eax
c01015ce:	85 c0                	test   %eax,%eax
c01015d0:	75 0a                	jne    c01015dc <kbd_proc_data+0x37>
        return -1;
c01015d2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01015d7:	e9 61 01 00 00       	jmp    c010173d <kbd_proc_data+0x198>
c01015dc:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015e2:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c01015e6:	66 89 55 d6          	mov    %dx,-0x2a(%ebp)
c01015ea:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01015ee:	ec                   	in     (%dx),%al
c01015ef:	89 c3                	mov    %eax,%ebx
c01015f1:	88 5d eb             	mov    %bl,-0x15(%ebp)
    return data;
c01015f4:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c01015f8:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c01015fb:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c01015ff:	75 17                	jne    c0101618 <kbd_proc_data+0x73>
        // E0 escape character
        shift |= E0ESC;
c0101601:	a1 48 f3 1a c0       	mov    0xc01af348,%eax
c0101606:	83 c8 40             	or     $0x40,%eax
c0101609:	a3 48 f3 1a c0       	mov    %eax,0xc01af348
        return 0;
c010160e:	b8 00 00 00 00       	mov    $0x0,%eax
c0101613:	e9 25 01 00 00       	jmp    c010173d <kbd_proc_data+0x198>
    } else if (data & 0x80) {
c0101618:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010161c:	84 c0                	test   %al,%al
c010161e:	79 47                	jns    c0101667 <kbd_proc_data+0xc2>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101620:	a1 48 f3 1a c0       	mov    0xc01af348,%eax
c0101625:	83 e0 40             	and    $0x40,%eax
c0101628:	85 c0                	test   %eax,%eax
c010162a:	75 09                	jne    c0101635 <kbd_proc_data+0x90>
c010162c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101630:	83 e0 7f             	and    $0x7f,%eax
c0101633:	eb 04                	jmp    c0101639 <kbd_proc_data+0x94>
c0101635:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101639:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c010163c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101640:	0f b6 80 60 d0 12 c0 	movzbl -0x3fed2fa0(%eax),%eax
c0101647:	83 c8 40             	or     $0x40,%eax
c010164a:	0f b6 c0             	movzbl %al,%eax
c010164d:	f7 d0                	not    %eax
c010164f:	89 c2                	mov    %eax,%edx
c0101651:	a1 48 f3 1a c0       	mov    0xc01af348,%eax
c0101656:	21 d0                	and    %edx,%eax
c0101658:	a3 48 f3 1a c0       	mov    %eax,0xc01af348
        return 0;
c010165d:	b8 00 00 00 00       	mov    $0x0,%eax
c0101662:	e9 d6 00 00 00       	jmp    c010173d <kbd_proc_data+0x198>
    } else if (shift & E0ESC) {
c0101667:	a1 48 f3 1a c0       	mov    0xc01af348,%eax
c010166c:	83 e0 40             	and    $0x40,%eax
c010166f:	85 c0                	test   %eax,%eax
c0101671:	74 11                	je     c0101684 <kbd_proc_data+0xdf>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0101673:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0101677:	a1 48 f3 1a c0       	mov    0xc01af348,%eax
c010167c:	83 e0 bf             	and    $0xffffffbf,%eax
c010167f:	a3 48 f3 1a c0       	mov    %eax,0xc01af348
    }

    shift |= shiftcode[data];
c0101684:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101688:	0f b6 80 60 d0 12 c0 	movzbl -0x3fed2fa0(%eax),%eax
c010168f:	0f b6 d0             	movzbl %al,%edx
c0101692:	a1 48 f3 1a c0       	mov    0xc01af348,%eax
c0101697:	09 d0                	or     %edx,%eax
c0101699:	a3 48 f3 1a c0       	mov    %eax,0xc01af348
    shift ^= togglecode[data];
c010169e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016a2:	0f b6 80 60 d1 12 c0 	movzbl -0x3fed2ea0(%eax),%eax
c01016a9:	0f b6 d0             	movzbl %al,%edx
c01016ac:	a1 48 f3 1a c0       	mov    0xc01af348,%eax
c01016b1:	31 d0                	xor    %edx,%eax
c01016b3:	a3 48 f3 1a c0       	mov    %eax,0xc01af348

    c = charcode[shift & (CTL | SHIFT)][data];
c01016b8:	a1 48 f3 1a c0       	mov    0xc01af348,%eax
c01016bd:	83 e0 03             	and    $0x3,%eax
c01016c0:	8b 14 85 60 d5 12 c0 	mov    -0x3fed2aa0(,%eax,4),%edx
c01016c7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016cb:	01 d0                	add    %edx,%eax
c01016cd:	0f b6 00             	movzbl (%eax),%eax
c01016d0:	0f b6 c0             	movzbl %al,%eax
c01016d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c01016d6:	a1 48 f3 1a c0       	mov    0xc01af348,%eax
c01016db:	83 e0 08             	and    $0x8,%eax
c01016de:	85 c0                	test   %eax,%eax
c01016e0:	74 22                	je     c0101704 <kbd_proc_data+0x15f>
        if ('a' <= c && c <= 'z')
c01016e2:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c01016e6:	7e 0c                	jle    c01016f4 <kbd_proc_data+0x14f>
c01016e8:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c01016ec:	7f 06                	jg     c01016f4 <kbd_proc_data+0x14f>
            c += 'A' - 'a';
c01016ee:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c01016f2:	eb 10                	jmp    c0101704 <kbd_proc_data+0x15f>
        else if ('A' <= c && c <= 'Z')
c01016f4:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c01016f8:	7e 0a                	jle    c0101704 <kbd_proc_data+0x15f>
c01016fa:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c01016fe:	7f 04                	jg     c0101704 <kbd_proc_data+0x15f>
            c += 'a' - 'A';
c0101700:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101704:	a1 48 f3 1a c0       	mov    0xc01af348,%eax
c0101709:	f7 d0                	not    %eax
c010170b:	83 e0 06             	and    $0x6,%eax
c010170e:	85 c0                	test   %eax,%eax
c0101710:	75 28                	jne    c010173a <kbd_proc_data+0x195>
c0101712:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101719:	75 1f                	jne    c010173a <kbd_proc_data+0x195>
        cprintf("Rebooting!\n");
c010171b:	c7 04 24 7d c8 10 c0 	movl   $0xc010c87d,(%esp)
c0101722:	e8 3c ec ff ff       	call   c0100363 <cprintf>
c0101727:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c010172d:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101731:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0101735:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101739:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c010173a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010173d:	83 c4 44             	add    $0x44,%esp
c0101740:	5b                   	pop    %ebx
c0101741:	5d                   	pop    %ebp
c0101742:	c3                   	ret    

c0101743 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0101743:	55                   	push   %ebp
c0101744:	89 e5                	mov    %esp,%ebp
c0101746:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c0101749:	c7 04 24 a5 15 10 c0 	movl   $0xc01015a5,(%esp)
c0101750:	e8 7d fd ff ff       	call   c01014d2 <cons_intr>
}
c0101755:	c9                   	leave  
c0101756:	c3                   	ret    

c0101757 <kbd_init>:

static void
kbd_init(void) {
c0101757:	55                   	push   %ebp
c0101758:	89 e5                	mov    %esp,%ebp
c010175a:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c010175d:	e8 e1 ff ff ff       	call   c0101743 <kbd_intr>
    pic_enable(IRQ_KBD);
c0101762:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0101769:	e8 da 09 00 00       	call   c0102148 <pic_enable>
}
c010176e:	c9                   	leave  
c010176f:	c3                   	ret    

c0101770 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0101770:	55                   	push   %ebp
c0101771:	89 e5                	mov    %esp,%ebp
c0101773:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c0101776:	e8 18 f8 ff ff       	call   c0100f93 <cga_init>
    serial_init();
c010177b:	e8 0e f9 ff ff       	call   c010108e <serial_init>
    kbd_init();
c0101780:	e8 d2 ff ff ff       	call   c0101757 <kbd_init>
    if (!serial_exists) {
c0101785:	a1 28 f1 1a c0       	mov    0xc01af128,%eax
c010178a:	85 c0                	test   %eax,%eax
c010178c:	75 0c                	jne    c010179a <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c010178e:	c7 04 24 89 c8 10 c0 	movl   $0xc010c889,(%esp)
c0101795:	e8 c9 eb ff ff       	call   c0100363 <cprintf>
    }
}
c010179a:	c9                   	leave  
c010179b:	c3                   	ret    

c010179c <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c010179c:	55                   	push   %ebp
c010179d:	89 e5                	mov    %esp,%ebp
c010179f:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01017a2:	e8 3d f7 ff ff       	call   c0100ee4 <__intr_save>
c01017a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c01017aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01017ad:	89 04 24             	mov    %eax,(%esp)
c01017b0:	e8 5f fa ff ff       	call   c0101214 <lpt_putc>
        cga_putc(c);
c01017b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01017b8:	89 04 24             	mov    %eax,(%esp)
c01017bb:	e8 93 fa ff ff       	call   c0101253 <cga_putc>
        serial_putc(c);
c01017c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01017c3:	89 04 24             	mov    %eax,(%esp)
c01017c6:	e8 c8 fc ff ff       	call   c0101493 <serial_putc>
    }
    local_intr_restore(intr_flag);
c01017cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01017ce:	89 04 24             	mov    %eax,(%esp)
c01017d1:	e8 3d f7 ff ff       	call   c0100f13 <__intr_restore>
}
c01017d6:	c9                   	leave  
c01017d7:	c3                   	ret    

c01017d8 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c01017d8:	55                   	push   %ebp
c01017d9:	89 e5                	mov    %esp,%ebp
c01017db:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c01017de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c01017e5:	e8 fa f6 ff ff       	call   c0100ee4 <__intr_save>
c01017ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c01017ed:	e8 96 fd ff ff       	call   c0101588 <serial_intr>
        kbd_intr();
c01017f2:	e8 4c ff ff ff       	call   c0101743 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c01017f7:	8b 15 40 f3 1a c0    	mov    0xc01af340,%edx
c01017fd:	a1 44 f3 1a c0       	mov    0xc01af344,%eax
c0101802:	39 c2                	cmp    %eax,%edx
c0101804:	74 30                	je     c0101836 <cons_getc+0x5e>
            c = cons.buf[cons.rpos ++];
c0101806:	a1 40 f3 1a c0       	mov    0xc01af340,%eax
c010180b:	0f b6 90 40 f1 1a c0 	movzbl -0x3fe50ec0(%eax),%edx
c0101812:	0f b6 d2             	movzbl %dl,%edx
c0101815:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0101818:	83 c0 01             	add    $0x1,%eax
c010181b:	a3 40 f3 1a c0       	mov    %eax,0xc01af340
            if (cons.rpos == CONSBUFSIZE) {
c0101820:	a1 40 f3 1a c0       	mov    0xc01af340,%eax
c0101825:	3d 00 02 00 00       	cmp    $0x200,%eax
c010182a:	75 0a                	jne    c0101836 <cons_getc+0x5e>
                cons.rpos = 0;
c010182c:	c7 05 40 f3 1a c0 00 	movl   $0x0,0xc01af340
c0101833:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0101836:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101839:	89 04 24             	mov    %eax,(%esp)
c010183c:	e8 d2 f6 ff ff       	call   c0100f13 <__intr_restore>
    return c;
c0101841:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101844:	c9                   	leave  
c0101845:	c3                   	ret    
	...

c0101848 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0101848:	55                   	push   %ebp
c0101849:	89 e5                	mov    %esp,%ebp
c010184b:	53                   	push   %ebx
c010184c:	83 ec 14             	sub    $0x14,%esp
c010184f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101852:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0101856:	90                   	nop
c0101857:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c010185b:	83 c0 07             	add    $0x7,%eax
c010185e:	0f b7 c0             	movzwl %ax,%eax
c0101861:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101865:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101869:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010186d:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101871:	ec                   	in     (%dx),%al
c0101872:	89 c3                	mov    %eax,%ebx
c0101874:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c0101877:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010187b:	0f b6 c0             	movzbl %al,%eax
c010187e:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0101881:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0101884:	25 80 00 00 00       	and    $0x80,%eax
c0101889:	85 c0                	test   %eax,%eax
c010188b:	75 ca                	jne    c0101857 <ide_wait_ready+0xf>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c010188d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0101891:	74 11                	je     c01018a4 <ide_wait_ready+0x5c>
c0101893:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0101896:	83 e0 21             	and    $0x21,%eax
c0101899:	85 c0                	test   %eax,%eax
c010189b:	74 07                	je     c01018a4 <ide_wait_ready+0x5c>
        return -1;
c010189d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01018a2:	eb 05                	jmp    c01018a9 <ide_wait_ready+0x61>
    }
    return 0;
c01018a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01018a9:	83 c4 14             	add    $0x14,%esp
c01018ac:	5b                   	pop    %ebx
c01018ad:	5d                   	pop    %ebp
c01018ae:	c3                   	ret    

c01018af <ide_init>:

void
ide_init(void) {
c01018af:	55                   	push   %ebp
c01018b0:	89 e5                	mov    %esp,%ebp
c01018b2:	57                   	push   %edi
c01018b3:	56                   	push   %esi
c01018b4:	53                   	push   %ebx
c01018b5:	81 ec 6c 02 00 00    	sub    $0x26c,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c01018bb:	66 c7 45 e6 00 00    	movw   $0x0,-0x1a(%ebp)
c01018c1:	e9 e3 02 00 00       	jmp    c0101ba9 <ide_init+0x2fa>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c01018c6:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c01018ca:	c1 e0 03             	shl    $0x3,%eax
c01018cd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01018d4:	29 c2                	sub    %eax,%edx
c01018d6:	8d 82 60 f3 1a c0    	lea    -0x3fe50ca0(%edx),%eax
c01018dc:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c01018df:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c01018e3:	66 d1 e8             	shr    %ax
c01018e6:	0f b7 c0             	movzwl %ax,%eax
c01018e9:	0f b7 04 85 a8 c8 10 	movzwl -0x3fef3758(,%eax,4),%eax
c01018f0:	c0 
c01018f1:	66 89 45 da          	mov    %ax,-0x26(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c01018f5:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01018f9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101900:	00 
c0101901:	89 04 24             	mov    %eax,(%esp)
c0101904:	e8 3f ff ff ff       	call   c0101848 <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0101909:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c010190d:	83 e0 01             	and    $0x1,%eax
c0101910:	c1 e0 04             	shl    $0x4,%eax
c0101913:	83 c8 e0             	or     $0xffffffe0,%eax
c0101916:	0f b6 c0             	movzbl %al,%eax
c0101919:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010191d:	83 c2 06             	add    $0x6,%edx
c0101920:	0f b7 d2             	movzwl %dx,%edx
c0101923:	66 89 55 c2          	mov    %dx,-0x3e(%ebp)
c0101927:	88 45 c1             	mov    %al,-0x3f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010192a:	0f b6 45 c1          	movzbl -0x3f(%ebp),%eax
c010192e:	0f b7 55 c2          	movzwl -0x3e(%ebp),%edx
c0101932:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0101933:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101937:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010193e:	00 
c010193f:	89 04 24             	mov    %eax,(%esp)
c0101942:	e8 01 ff ff ff       	call   c0101848 <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0101947:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c010194b:	83 c0 07             	add    $0x7,%eax
c010194e:	0f b7 c0             	movzwl %ax,%eax
c0101951:	66 89 45 be          	mov    %ax,-0x42(%ebp)
c0101955:	c6 45 bd ec          	movb   $0xec,-0x43(%ebp)
c0101959:	0f b6 45 bd          	movzbl -0x43(%ebp),%eax
c010195d:	0f b7 55 be          	movzwl -0x42(%ebp),%edx
c0101961:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0101962:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101966:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010196d:	00 
c010196e:	89 04 24             	mov    %eax,(%esp)
c0101971:	e8 d2 fe ff ff       	call   c0101848 <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c0101976:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c010197a:	83 c0 07             	add    $0x7,%eax
c010197d:	0f b7 c0             	movzwl %ax,%eax
c0101980:	66 89 45 ba          	mov    %ax,-0x46(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101984:	0f b7 55 ba          	movzwl -0x46(%ebp),%edx
c0101988:	66 89 95 a6 fd ff ff 	mov    %dx,-0x25a(%ebp)
c010198f:	0f b7 95 a6 fd ff ff 	movzwl -0x25a(%ebp),%edx
c0101996:	ec                   	in     (%dx),%al
c0101997:	89 c3                	mov    %eax,%ebx
c0101999:	88 5d b9             	mov    %bl,-0x47(%ebp)
    return data;
c010199c:	0f b6 45 b9          	movzbl -0x47(%ebp),%eax
c01019a0:	84 c0                	test   %al,%al
c01019a2:	0f 84 fb 01 00 00    	je     c0101ba3 <ide_init+0x2f4>
c01019a8:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01019ac:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01019b3:	00 
c01019b4:	89 04 24             	mov    %eax,(%esp)
c01019b7:	e8 8c fe ff ff       	call   c0101848 <ide_wait_ready>
c01019bc:	85 c0                	test   %eax,%eax
c01019be:	0f 85 df 01 00 00    	jne    c0101ba3 <ide_init+0x2f4>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c01019c4:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c01019c8:	c1 e0 03             	shl    $0x3,%eax
c01019cb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019d2:	29 c2                	sub    %eax,%edx
c01019d4:	8d 82 60 f3 1a c0    	lea    -0x3fe50ca0(%edx),%eax
c01019da:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c01019dd:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01019e1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c01019e4:	8d 85 ac fd ff ff    	lea    -0x254(%ebp),%eax
c01019ea:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01019ed:	c7 45 ac 80 00 00 00 	movl   $0x80,-0x54(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c01019f4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01019f7:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c01019fa:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01019fd:	89 ce                	mov    %ecx,%esi
c01019ff:	89 d3                	mov    %edx,%ebx
c0101a01:	89 f7                	mov    %esi,%edi
c0101a03:	89 d9                	mov    %ebx,%ecx
c0101a05:	89 c2                	mov    %eax,%edx
c0101a07:	fc                   	cld    
c0101a08:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101a0a:	89 cb                	mov    %ecx,%ebx
c0101a0c:	89 fe                	mov    %edi,%esi
c0101a0e:	89 75 b0             	mov    %esi,-0x50(%ebp)
c0101a11:	89 5d ac             	mov    %ebx,-0x54(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101a14:	8d 85 ac fd ff ff    	lea    -0x254(%ebp),%eax
c0101a1a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101a1d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101a20:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101a26:	89 45 d0             	mov    %eax,-0x30(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101a29:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101a2c:	25 00 00 00 04       	and    $0x4000000,%eax
c0101a31:	85 c0                	test   %eax,%eax
c0101a33:	74 0e                	je     c0101a43 <ide_init+0x194>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101a35:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101a38:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101a3e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0101a41:	eb 09                	jmp    c0101a4c <ide_init+0x19d>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101a43:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101a46:	8b 40 78             	mov    0x78(%eax),%eax
c0101a49:	89 45 e0             	mov    %eax,-0x20(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101a4c:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101a50:	c1 e0 03             	shl    $0x3,%eax
c0101a53:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a5a:	29 c2                	sub    %eax,%edx
c0101a5c:	81 c2 60 f3 1a c0    	add    $0xc01af360,%edx
c0101a62:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101a65:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c0101a68:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101a6c:	c1 e0 03             	shl    $0x3,%eax
c0101a6f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a76:	29 c2                	sub    %eax,%edx
c0101a78:	81 c2 60 f3 1a c0    	add    $0xc01af360,%edx
c0101a7e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101a81:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101a84:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101a87:	83 c0 62             	add    $0x62,%eax
c0101a8a:	0f b7 00             	movzwl (%eax),%eax
c0101a8d:	0f b7 c0             	movzwl %ax,%eax
c0101a90:	25 00 02 00 00       	and    $0x200,%eax
c0101a95:	85 c0                	test   %eax,%eax
c0101a97:	75 24                	jne    c0101abd <ide_init+0x20e>
c0101a99:	c7 44 24 0c b0 c8 10 	movl   $0xc010c8b0,0xc(%esp)
c0101aa0:	c0 
c0101aa1:	c7 44 24 08 f3 c8 10 	movl   $0xc010c8f3,0x8(%esp)
c0101aa8:	c0 
c0101aa9:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0101ab0:	00 
c0101ab1:	c7 04 24 08 c9 10 c0 	movl   $0xc010c908,(%esp)
c0101ab8:	e8 ff f2 ff ff       	call   c0100dbc <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101abd:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101ac1:	c1 e0 03             	shl    $0x3,%eax
c0101ac4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101acb:	29 c2                	sub    %eax,%edx
c0101acd:	8d 82 60 f3 1a c0    	lea    -0x3fe50ca0(%edx),%eax
c0101ad3:	83 c0 0c             	add    $0xc,%eax
c0101ad6:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101ad9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101adc:	83 c0 36             	add    $0x36,%eax
c0101adf:	89 45 c8             	mov    %eax,-0x38(%ebp)
        unsigned int i, length = 40;
c0101ae2:	c7 45 c4 28 00 00 00 	movl   $0x28,-0x3c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101ae9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0101af0:	eb 30                	jmp    c0101b22 <ide_init+0x273>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101af2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101af5:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101af8:	01 c2                	add    %eax,%edx
c0101afa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101afd:	83 c0 01             	add    $0x1,%eax
c0101b00:	03 45 c8             	add    -0x38(%ebp),%eax
c0101b03:	0f b6 00             	movzbl (%eax),%eax
c0101b06:	88 02                	mov    %al,(%edx)
c0101b08:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b0b:	83 c0 01             	add    $0x1,%eax
c0101b0e:	03 45 cc             	add    -0x34(%ebp),%eax
c0101b11:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b14:	8b 4d c8             	mov    -0x38(%ebp),%ecx
c0101b17:	01 ca                	add    %ecx,%edx
c0101b19:	0f b6 12             	movzbl (%edx),%edx
c0101b1c:	88 10                	mov    %dl,(%eax)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101b1e:	83 45 dc 02          	addl   $0x2,-0x24(%ebp)
c0101b22:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b25:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c0101b28:	72 c8                	jb     c0101af2 <ide_init+0x243>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101b2a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b2d:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101b30:	01 d0                	add    %edx,%eax
c0101b32:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101b35:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0101b39:	0f 95 c0             	setne  %al
c0101b3c:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
c0101b40:	84 c0                	test   %al,%al
c0101b42:	74 0f                	je     c0101b53 <ide_init+0x2a4>
c0101b44:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b47:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101b4a:	01 d0                	add    %edx,%eax
c0101b4c:	0f b6 00             	movzbl (%eax),%eax
c0101b4f:	3c 20                	cmp    $0x20,%al
c0101b51:	74 d7                	je     c0101b2a <ide_init+0x27b>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101b53:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101b57:	c1 e0 03             	shl    $0x3,%eax
c0101b5a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b61:	29 c2                	sub    %eax,%edx
c0101b63:	8d 82 60 f3 1a c0    	lea    -0x3fe50ca0(%edx),%eax
c0101b69:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101b6c:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101b70:	c1 e0 03             	shl    $0x3,%eax
c0101b73:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b7a:	29 c2                	sub    %eax,%edx
c0101b7c:	8d 82 60 f3 1a c0    	lea    -0x3fe50ca0(%edx),%eax
c0101b82:	8b 50 08             	mov    0x8(%eax),%edx
c0101b85:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101b89:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101b8d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101b91:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101b95:	c7 04 24 1a c9 10 c0 	movl   $0xc010c91a,(%esp)
c0101b9c:	e8 c2 e7 ff ff       	call   c0100363 <cprintf>
c0101ba1:	eb 01                	jmp    c0101ba4 <ide_init+0x2f5>
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
        ide_wait_ready(iobase, 0);

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
            continue ;
c0101ba3:	90                   	nop

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101ba4:	66 83 45 e6 01       	addw   $0x1,-0x1a(%ebp)
c0101ba9:	66 83 7d e6 03       	cmpw   $0x3,-0x1a(%ebp)
c0101bae:	0f 86 12 fd ff ff    	jbe    c01018c6 <ide_init+0x17>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101bb4:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101bbb:	e8 88 05 00 00       	call   c0102148 <pic_enable>
    pic_enable(IRQ_IDE2);
c0101bc0:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101bc7:	e8 7c 05 00 00       	call   c0102148 <pic_enable>
}
c0101bcc:	81 c4 6c 02 00 00    	add    $0x26c,%esp
c0101bd2:	5b                   	pop    %ebx
c0101bd3:	5e                   	pop    %esi
c0101bd4:	5f                   	pop    %edi
c0101bd5:	5d                   	pop    %ebp
c0101bd6:	c3                   	ret    

c0101bd7 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101bd7:	55                   	push   %ebp
c0101bd8:	89 e5                	mov    %esp,%ebp
c0101bda:	83 ec 04             	sub    $0x4,%esp
c0101bdd:	8b 45 08             	mov    0x8(%ebp),%eax
c0101be0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101be4:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101be9:	77 24                	ja     c0101c0f <ide_device_valid+0x38>
c0101beb:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101bef:	c1 e0 03             	shl    $0x3,%eax
c0101bf2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bf9:	29 c2                	sub    %eax,%edx
c0101bfb:	8d 82 60 f3 1a c0    	lea    -0x3fe50ca0(%edx),%eax
c0101c01:	0f b6 00             	movzbl (%eax),%eax
c0101c04:	84 c0                	test   %al,%al
c0101c06:	74 07                	je     c0101c0f <ide_device_valid+0x38>
c0101c08:	b8 01 00 00 00       	mov    $0x1,%eax
c0101c0d:	eb 05                	jmp    c0101c14 <ide_device_valid+0x3d>
c0101c0f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c14:	c9                   	leave  
c0101c15:	c3                   	ret    

c0101c16 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101c16:	55                   	push   %ebp
c0101c17:	89 e5                	mov    %esp,%ebp
c0101c19:	83 ec 08             	sub    $0x8,%esp
c0101c1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c1f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101c23:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c27:	89 04 24             	mov    %eax,(%esp)
c0101c2a:	e8 a8 ff ff ff       	call   c0101bd7 <ide_device_valid>
c0101c2f:	85 c0                	test   %eax,%eax
c0101c31:	74 1b                	je     c0101c4e <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101c33:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c37:	c1 e0 03             	shl    $0x3,%eax
c0101c3a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c41:	29 c2                	sub    %eax,%edx
c0101c43:	8d 82 60 f3 1a c0    	lea    -0x3fe50ca0(%edx),%eax
c0101c49:	8b 40 08             	mov    0x8(%eax),%eax
c0101c4c:	eb 05                	jmp    c0101c53 <ide_device_size+0x3d>
    }
    return 0;
c0101c4e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c53:	c9                   	leave  
c0101c54:	c3                   	ret    

c0101c55 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101c55:	55                   	push   %ebp
c0101c56:	89 e5                	mov    %esp,%ebp
c0101c58:	57                   	push   %edi
c0101c59:	56                   	push   %esi
c0101c5a:	53                   	push   %ebx
c0101c5b:	83 ec 5c             	sub    $0x5c,%esp
c0101c5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c61:	66 89 45 b4          	mov    %ax,-0x4c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101c65:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101c6c:	77 24                	ja     c0101c92 <ide_read_secs+0x3d>
c0101c6e:	66 83 7d b4 03       	cmpw   $0x3,-0x4c(%ebp)
c0101c73:	77 1d                	ja     c0101c92 <ide_read_secs+0x3d>
c0101c75:	0f b7 45 b4          	movzwl -0x4c(%ebp),%eax
c0101c79:	c1 e0 03             	shl    $0x3,%eax
c0101c7c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c83:	29 c2                	sub    %eax,%edx
c0101c85:	8d 82 60 f3 1a c0    	lea    -0x3fe50ca0(%edx),%eax
c0101c8b:	0f b6 00             	movzbl (%eax),%eax
c0101c8e:	84 c0                	test   %al,%al
c0101c90:	75 24                	jne    c0101cb6 <ide_read_secs+0x61>
c0101c92:	c7 44 24 0c 38 c9 10 	movl   $0xc010c938,0xc(%esp)
c0101c99:	c0 
c0101c9a:	c7 44 24 08 f3 c8 10 	movl   $0xc010c8f3,0x8(%esp)
c0101ca1:	c0 
c0101ca2:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101ca9:	00 
c0101caa:	c7 04 24 08 c9 10 c0 	movl   $0xc010c908,(%esp)
c0101cb1:	e8 06 f1 ff ff       	call   c0100dbc <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101cb6:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101cbd:	77 0f                	ja     c0101cce <ide_read_secs+0x79>
c0101cbf:	8b 45 14             	mov    0x14(%ebp),%eax
c0101cc2:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101cc5:	01 d0                	add    %edx,%eax
c0101cc7:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101ccc:	76 24                	jbe    c0101cf2 <ide_read_secs+0x9d>
c0101cce:	c7 44 24 0c 60 c9 10 	movl   $0xc010c960,0xc(%esp)
c0101cd5:	c0 
c0101cd6:	c7 44 24 08 f3 c8 10 	movl   $0xc010c8f3,0x8(%esp)
c0101cdd:	c0 
c0101cde:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101ce5:	00 
c0101ce6:	c7 04 24 08 c9 10 c0 	movl   $0xc010c908,(%esp)
c0101ced:	e8 ca f0 ff ff       	call   c0100dbc <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101cf2:	0f b7 45 b4          	movzwl -0x4c(%ebp),%eax
c0101cf6:	66 d1 e8             	shr    %ax
c0101cf9:	0f b7 c0             	movzwl %ax,%eax
c0101cfc:	0f b7 04 85 a8 c8 10 	movzwl -0x3fef3758(,%eax,4),%eax
c0101d03:	c0 
c0101d04:	66 89 45 e2          	mov    %ax,-0x1e(%ebp)
c0101d08:	0f b7 45 b4          	movzwl -0x4c(%ebp),%eax
c0101d0c:	66 d1 e8             	shr    %ax
c0101d0f:	0f b7 c0             	movzwl %ax,%eax
c0101d12:	0f b7 04 85 aa c8 10 	movzwl -0x3fef3756(,%eax,4),%eax
c0101d19:	c0 
c0101d1a:	66 89 45 e0          	mov    %ax,-0x20(%ebp)

    ide_wait_ready(iobase, 0);
c0101d1e:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
c0101d22:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101d29:	00 
c0101d2a:	89 04 24             	mov    %eax,(%esp)
c0101d2d:	e8 16 fb ff ff       	call   c0101848 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101d32:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
c0101d36:	83 c0 02             	add    $0x2,%eax
c0101d39:	0f b7 c0             	movzwl %ax,%eax
c0101d3c:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c0101d40:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101d44:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101d48:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101d4c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101d4d:	8b 45 14             	mov    0x14(%ebp),%eax
c0101d50:	0f b6 c0             	movzbl %al,%eax
c0101d53:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101d57:	83 c2 02             	add    $0x2,%edx
c0101d5a:	0f b7 d2             	movzwl %dx,%edx
c0101d5d:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101d61:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101d64:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101d68:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101d6c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101d6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d70:	0f b6 c0             	movzbl %al,%eax
c0101d73:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101d77:	83 c2 03             	add    $0x3,%edx
c0101d7a:	0f b7 d2             	movzwl %dx,%edx
c0101d7d:	66 89 55 d6          	mov    %dx,-0x2a(%ebp)
c0101d81:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101d84:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101d88:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101d8c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101d8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d90:	c1 e8 08             	shr    $0x8,%eax
c0101d93:	0f b6 c0             	movzbl %al,%eax
c0101d96:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101d9a:	83 c2 04             	add    $0x4,%edx
c0101d9d:	0f b7 d2             	movzwl %dx,%edx
c0101da0:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101da4:	88 45 d1             	mov    %al,-0x2f(%ebp)
c0101da7:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0101dab:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0101daf:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101db0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101db3:	c1 e8 10             	shr    $0x10,%eax
c0101db6:	0f b6 c0             	movzbl %al,%eax
c0101db9:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101dbd:	83 c2 05             	add    $0x5,%edx
c0101dc0:	0f b7 d2             	movzwl %dx,%edx
c0101dc3:	66 89 55 ce          	mov    %dx,-0x32(%ebp)
c0101dc7:	88 45 cd             	mov    %al,-0x33(%ebp)
c0101dca:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c0101dce:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c0101dd2:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101dd3:	0f b7 45 b4          	movzwl -0x4c(%ebp),%eax
c0101dd7:	83 e0 01             	and    $0x1,%eax
c0101dda:	89 c2                	mov    %eax,%edx
c0101ddc:	c1 e2 04             	shl    $0x4,%edx
c0101ddf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101de2:	c1 e8 18             	shr    $0x18,%eax
c0101de5:	83 e0 0f             	and    $0xf,%eax
c0101de8:	09 d0                	or     %edx,%eax
c0101dea:	83 c8 e0             	or     $0xffffffe0,%eax
c0101ded:	0f b6 c0             	movzbl %al,%eax
c0101df0:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101df4:	83 c2 06             	add    $0x6,%edx
c0101df7:	0f b7 d2             	movzwl %dx,%edx
c0101dfa:	66 89 55 ca          	mov    %dx,-0x36(%ebp)
c0101dfe:	88 45 c9             	mov    %al,-0x37(%ebp)
c0101e01:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0101e05:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c0101e09:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101e0a:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
c0101e0e:	83 c0 07             	add    $0x7,%eax
c0101e11:	0f b7 c0             	movzwl %ax,%eax
c0101e14:	66 89 45 c6          	mov    %ax,-0x3a(%ebp)
c0101e18:	c6 45 c5 20          	movb   $0x20,-0x3b(%ebp)
c0101e1c:	0f b6 45 c5          	movzbl -0x3b(%ebp),%eax
c0101e20:	0f b7 55 c6          	movzwl -0x3a(%ebp),%edx
c0101e24:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101e25:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101e2c:	eb 5c                	jmp    c0101e8a <ide_read_secs+0x235>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101e2e:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
c0101e32:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101e39:	00 
c0101e3a:	89 04 24             	mov    %eax,(%esp)
c0101e3d:	e8 06 fa ff ff       	call   c0101848 <ide_wait_ready>
c0101e42:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0101e45:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0101e49:	75 47                	jne    c0101e92 <ide_read_secs+0x23d>
            goto out;
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101e4b:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
c0101e4f:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101e52:	8b 45 10             	mov    0x10(%ebp),%eax
c0101e55:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0101e58:	c7 45 b8 80 00 00 00 	movl   $0x80,-0x48(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101e5f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0101e62:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c0101e65:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0101e68:	89 ce                	mov    %ecx,%esi
c0101e6a:	89 d3                	mov    %edx,%ebx
c0101e6c:	89 f7                	mov    %esi,%edi
c0101e6e:	89 d9                	mov    %ebx,%ecx
c0101e70:	89 c2                	mov    %eax,%edx
c0101e72:	fc                   	cld    
c0101e73:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101e75:	89 cb                	mov    %ecx,%ebx
c0101e77:	89 fe                	mov    %edi,%esi
c0101e79:	89 75 bc             	mov    %esi,-0x44(%ebp)
c0101e7c:	89 5d b8             	mov    %ebx,-0x48(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101e7f:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101e83:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101e8a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101e8e:	75 9e                	jne    c0101e2e <ide_read_secs+0x1d9>
c0101e90:	eb 01                	jmp    c0101e93 <ide_read_secs+0x23e>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c0101e92:	90                   	nop
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101e93:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c0101e96:	83 c4 5c             	add    $0x5c,%esp
c0101e99:	5b                   	pop    %ebx
c0101e9a:	5e                   	pop    %esi
c0101e9b:	5f                   	pop    %edi
c0101e9c:	5d                   	pop    %ebp
c0101e9d:	c3                   	ret    

c0101e9e <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101e9e:	55                   	push   %ebp
c0101e9f:	89 e5                	mov    %esp,%ebp
c0101ea1:	56                   	push   %esi
c0101ea2:	53                   	push   %ebx
c0101ea3:	83 ec 50             	sub    $0x50,%esp
c0101ea6:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ea9:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101ead:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101eb4:	77 24                	ja     c0101eda <ide_write_secs+0x3c>
c0101eb6:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101ebb:	77 1d                	ja     c0101eda <ide_write_secs+0x3c>
c0101ebd:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101ec1:	c1 e0 03             	shl    $0x3,%eax
c0101ec4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ecb:	29 c2                	sub    %eax,%edx
c0101ecd:	8d 82 60 f3 1a c0    	lea    -0x3fe50ca0(%edx),%eax
c0101ed3:	0f b6 00             	movzbl (%eax),%eax
c0101ed6:	84 c0                	test   %al,%al
c0101ed8:	75 24                	jne    c0101efe <ide_write_secs+0x60>
c0101eda:	c7 44 24 0c 38 c9 10 	movl   $0xc010c938,0xc(%esp)
c0101ee1:	c0 
c0101ee2:	c7 44 24 08 f3 c8 10 	movl   $0xc010c8f3,0x8(%esp)
c0101ee9:	c0 
c0101eea:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101ef1:	00 
c0101ef2:	c7 04 24 08 c9 10 c0 	movl   $0xc010c908,(%esp)
c0101ef9:	e8 be ee ff ff       	call   c0100dbc <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101efe:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101f05:	77 0f                	ja     c0101f16 <ide_write_secs+0x78>
c0101f07:	8b 45 14             	mov    0x14(%ebp),%eax
c0101f0a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101f0d:	01 d0                	add    %edx,%eax
c0101f0f:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101f14:	76 24                	jbe    c0101f3a <ide_write_secs+0x9c>
c0101f16:	c7 44 24 0c 60 c9 10 	movl   $0xc010c960,0xc(%esp)
c0101f1d:	c0 
c0101f1e:	c7 44 24 08 f3 c8 10 	movl   $0xc010c8f3,0x8(%esp)
c0101f25:	c0 
c0101f26:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101f2d:	00 
c0101f2e:	c7 04 24 08 c9 10 c0 	movl   $0xc010c908,(%esp)
c0101f35:	e8 82 ee ff ff       	call   c0100dbc <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101f3a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f3e:	66 d1 e8             	shr    %ax
c0101f41:	0f b7 c0             	movzwl %ax,%eax
c0101f44:	0f b7 04 85 a8 c8 10 	movzwl -0x3fef3758(,%eax,4),%eax
c0101f4b:	c0 
c0101f4c:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101f50:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f54:	66 d1 e8             	shr    %ax
c0101f57:	0f b7 c0             	movzwl %ax,%eax
c0101f5a:	0f b7 04 85 aa c8 10 	movzwl -0x3fef3756(,%eax,4),%eax
c0101f61:	c0 
c0101f62:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101f66:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101f6a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101f71:	00 
c0101f72:	89 04 24             	mov    %eax,(%esp)
c0101f75:	e8 ce f8 ff ff       	call   c0101848 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101f7a:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101f7e:	83 c0 02             	add    $0x2,%eax
c0101f81:	0f b7 c0             	movzwl %ax,%eax
c0101f84:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101f88:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101f8c:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101f90:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101f94:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101f95:	8b 45 14             	mov    0x14(%ebp),%eax
c0101f98:	0f b6 c0             	movzbl %al,%eax
c0101f9b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f9f:	83 c2 02             	add    $0x2,%edx
c0101fa2:	0f b7 d2             	movzwl %dx,%edx
c0101fa5:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101fa9:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101fac:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101fb0:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101fb4:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101fb5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101fb8:	0f b6 c0             	movzbl %al,%eax
c0101fbb:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101fbf:	83 c2 03             	add    $0x3,%edx
c0101fc2:	0f b7 d2             	movzwl %dx,%edx
c0101fc5:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101fc9:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101fcc:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101fd0:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101fd4:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101fd5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101fd8:	c1 e8 08             	shr    $0x8,%eax
c0101fdb:	0f b6 c0             	movzbl %al,%eax
c0101fde:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101fe2:	83 c2 04             	add    $0x4,%edx
c0101fe5:	0f b7 d2             	movzwl %dx,%edx
c0101fe8:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101fec:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101fef:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101ff3:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101ff7:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101ff8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101ffb:	c1 e8 10             	shr    $0x10,%eax
c0101ffe:	0f b6 c0             	movzbl %al,%eax
c0102001:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102005:	83 c2 05             	add    $0x5,%edx
c0102008:	0f b7 d2             	movzwl %dx,%edx
c010200b:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c010200f:	88 45 dd             	mov    %al,-0x23(%ebp)
c0102012:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102016:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010201a:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c010201b:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010201f:	83 e0 01             	and    $0x1,%eax
c0102022:	89 c2                	mov    %eax,%edx
c0102024:	c1 e2 04             	shl    $0x4,%edx
c0102027:	8b 45 0c             	mov    0xc(%ebp),%eax
c010202a:	c1 e8 18             	shr    $0x18,%eax
c010202d:	83 e0 0f             	and    $0xf,%eax
c0102030:	09 d0                	or     %edx,%eax
c0102032:	83 c8 e0             	or     $0xffffffe0,%eax
c0102035:	0f b6 c0             	movzbl %al,%eax
c0102038:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010203c:	83 c2 06             	add    $0x6,%edx
c010203f:	0f b7 d2             	movzwl %dx,%edx
c0102042:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0102046:	88 45 d9             	mov    %al,-0x27(%ebp)
c0102049:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010204d:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102051:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0102052:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102056:	83 c0 07             	add    $0x7,%eax
c0102059:	0f b7 c0             	movzwl %ax,%eax
c010205c:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0102060:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c0102064:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0102068:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010206c:	ee                   	out    %al,(%dx)

    int ret = 0;
c010206d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102074:	eb 58                	jmp    c01020ce <ide_write_secs+0x230>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0102076:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010207a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0102081:	00 
c0102082:	89 04 24             	mov    %eax,(%esp)
c0102085:	e8 be f7 ff ff       	call   c0101848 <ide_wait_ready>
c010208a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010208d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102091:	75 43                	jne    c01020d6 <ide_write_secs+0x238>
            goto out;
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c0102093:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102097:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010209a:	8b 45 10             	mov    0x10(%ebp),%eax
c010209d:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01020a0:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c01020a7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01020aa:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c01020ad:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01020b0:	89 ce                	mov    %ecx,%esi
c01020b2:	89 d3                	mov    %edx,%ebx
c01020b4:	89 d9                	mov    %ebx,%ecx
c01020b6:	89 c2                	mov    %eax,%edx
c01020b8:	fc                   	cld    
c01020b9:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c01020bb:	89 cb                	mov    %ecx,%ebx
c01020bd:	89 75 cc             	mov    %esi,-0x34(%ebp)
c01020c0:	89 5d c8             	mov    %ebx,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01020c3:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c01020c7:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c01020ce:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01020d2:	75 a2                	jne    c0102076 <ide_write_secs+0x1d8>
c01020d4:	eb 01                	jmp    c01020d7 <ide_write_secs+0x239>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c01020d6:	90                   	nop
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c01020d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01020da:	83 c4 50             	add    $0x50,%esp
c01020dd:	5b                   	pop    %ebx
c01020de:	5e                   	pop    %esi
c01020df:	5d                   	pop    %ebp
c01020e0:	c3                   	ret    
c01020e1:	00 00                	add    %al,(%eax)
	...

c01020e4 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01020e4:	55                   	push   %ebp
c01020e5:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c01020e7:	fb                   	sti    
    sti();
}
c01020e8:	5d                   	pop    %ebp
c01020e9:	c3                   	ret    

c01020ea <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01020ea:	55                   	push   %ebp
c01020eb:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c01020ed:	fa                   	cli    
    cli();
}
c01020ee:	5d                   	pop    %ebp
c01020ef:	c3                   	ret    

c01020f0 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c01020f0:	55                   	push   %ebp
c01020f1:	89 e5                	mov    %esp,%ebp
c01020f3:	83 ec 14             	sub    $0x14,%esp
c01020f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01020f9:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c01020fd:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102101:	66 a3 70 d5 12 c0    	mov    %ax,0xc012d570
    if (did_init) {
c0102107:	a1 40 f4 1a c0       	mov    0xc01af440,%eax
c010210c:	85 c0                	test   %eax,%eax
c010210e:	74 36                	je     c0102146 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102110:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102114:	0f b6 c0             	movzbl %al,%eax
c0102117:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010211d:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102120:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102124:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102128:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102129:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010212d:	66 c1 e8 08          	shr    $0x8,%ax
c0102131:	0f b6 c0             	movzbl %al,%eax
c0102134:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c010213a:	88 45 f9             	mov    %al,-0x7(%ebp)
c010213d:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102141:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102145:	ee                   	out    %al,(%dx)
    }
}
c0102146:	c9                   	leave  
c0102147:	c3                   	ret    

c0102148 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102148:	55                   	push   %ebp
c0102149:	89 e5                	mov    %esp,%ebp
c010214b:	53                   	push   %ebx
c010214c:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c010214f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102152:	ba 01 00 00 00       	mov    $0x1,%edx
c0102157:	89 d3                	mov    %edx,%ebx
c0102159:	89 c1                	mov    %eax,%ecx
c010215b:	d3 e3                	shl    %cl,%ebx
c010215d:	89 d8                	mov    %ebx,%eax
c010215f:	89 c2                	mov    %eax,%edx
c0102161:	f7 d2                	not    %edx
c0102163:	0f b7 05 70 d5 12 c0 	movzwl 0xc012d570,%eax
c010216a:	21 d0                	and    %edx,%eax
c010216c:	0f b7 c0             	movzwl %ax,%eax
c010216f:	89 04 24             	mov    %eax,(%esp)
c0102172:	e8 79 ff ff ff       	call   c01020f0 <pic_setmask>
}
c0102177:	83 c4 04             	add    $0x4,%esp
c010217a:	5b                   	pop    %ebx
c010217b:	5d                   	pop    %ebp
c010217c:	c3                   	ret    

c010217d <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c010217d:	55                   	push   %ebp
c010217e:	89 e5                	mov    %esp,%ebp
c0102180:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c0102183:	c7 05 40 f4 1a c0 01 	movl   $0x1,0xc01af440
c010218a:	00 00 00 
c010218d:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0102193:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c0102197:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c010219b:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010219f:	ee                   	out    %al,(%dx)
c01021a0:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01021a6:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c01021aa:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01021ae:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01021b2:	ee                   	out    %al,(%dx)
c01021b3:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c01021b9:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c01021bd:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01021c1:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01021c5:	ee                   	out    %al,(%dx)
c01021c6:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c01021cc:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c01021d0:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01021d4:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01021d8:	ee                   	out    %al,(%dx)
c01021d9:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c01021df:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c01021e3:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01021e7:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01021eb:	ee                   	out    %al,(%dx)
c01021ec:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c01021f2:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c01021f6:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01021fa:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01021fe:	ee                   	out    %al,(%dx)
c01021ff:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c0102205:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c0102209:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010220d:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102211:	ee                   	out    %al,(%dx)
c0102212:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102218:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c010221c:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102220:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102224:	ee                   	out    %al,(%dx)
c0102225:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c010222b:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c010222f:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102233:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102237:	ee                   	out    %al,(%dx)
c0102238:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c010223e:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c0102242:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102246:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010224a:	ee                   	out    %al,(%dx)
c010224b:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c0102251:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c0102255:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0102259:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010225d:	ee                   	out    %al,(%dx)
c010225e:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c0102264:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c0102268:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c010226c:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0102270:	ee                   	out    %al,(%dx)
c0102271:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c0102277:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c010227b:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c010227f:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c0102283:	ee                   	out    %al,(%dx)
c0102284:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c010228a:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c010228e:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0102292:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c0102296:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c0102297:	0f b7 05 70 d5 12 c0 	movzwl 0xc012d570,%eax
c010229e:	66 83 f8 ff          	cmp    $0xffff,%ax
c01022a2:	74 12                	je     c01022b6 <pic_init+0x139>
        pic_setmask(irq_mask);
c01022a4:	0f b7 05 70 d5 12 c0 	movzwl 0xc012d570,%eax
c01022ab:	0f b7 c0             	movzwl %ax,%eax
c01022ae:	89 04 24             	mov    %eax,(%esp)
c01022b1:	e8 3a fe ff ff       	call   c01020f0 <pic_setmask>
    }
}
c01022b6:	c9                   	leave  
c01022b7:	c3                   	ret    

c01022b8 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01022b8:	55                   	push   %ebp
c01022b9:	89 e5                	mov    %esp,%ebp
c01022bb:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01022be:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01022c5:	00 
c01022c6:	c7 04 24 a0 c9 10 c0 	movl   $0xc010c9a0,(%esp)
c01022cd:	e8 91 e0 ff ff       	call   c0100363 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c01022d2:	c7 04 24 aa c9 10 c0 	movl   $0xc010c9aa,(%esp)
c01022d9:	e8 85 e0 ff ff       	call   c0100363 <cprintf>
    panic("EOT: kernel seems ok.");
c01022de:	c7 44 24 08 b8 c9 10 	movl   $0xc010c9b8,0x8(%esp)
c01022e5:	c0 
c01022e6:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c01022ed:	00 
c01022ee:	c7 04 24 ce c9 10 c0 	movl   $0xc010c9ce,(%esp)
c01022f5:	e8 c2 ea ff ff       	call   c0100dbc <__panic>

c01022fa <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c01022fa:	55                   	push   %ebp
c01022fb:	89 e5                	mov    %esp,%ebp
c01022fd:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 2011010312 */
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for(i = 0; i < 256; i++) {
c0102300:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102307:	e9 c3 00 00 00       	jmp    c01023cf <idt_init+0xd5>
        SETGATE(idt[i], 0, KERNEL_CS, __vectors[i], DPL_KERNEL);
c010230c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010230f:	8b 04 85 00 d6 12 c0 	mov    -0x3fed2a00(,%eax,4),%eax
c0102316:	89 c2                	mov    %eax,%edx
c0102318:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010231b:	66 89 14 c5 60 f4 1a 	mov    %dx,-0x3fe50ba0(,%eax,8)
c0102322:	c0 
c0102323:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102326:	66 c7 04 c5 62 f4 1a 	movw   $0x8,-0x3fe50b9e(,%eax,8)
c010232d:	c0 08 00 
c0102330:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102333:	0f b6 14 c5 64 f4 1a 	movzbl -0x3fe50b9c(,%eax,8),%edx
c010233a:	c0 
c010233b:	83 e2 e0             	and    $0xffffffe0,%edx
c010233e:	88 14 c5 64 f4 1a c0 	mov    %dl,-0x3fe50b9c(,%eax,8)
c0102345:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102348:	0f b6 14 c5 64 f4 1a 	movzbl -0x3fe50b9c(,%eax,8),%edx
c010234f:	c0 
c0102350:	83 e2 1f             	and    $0x1f,%edx
c0102353:	88 14 c5 64 f4 1a c0 	mov    %dl,-0x3fe50b9c(,%eax,8)
c010235a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010235d:	0f b6 14 c5 65 f4 1a 	movzbl -0x3fe50b9b(,%eax,8),%edx
c0102364:	c0 
c0102365:	83 e2 f0             	and    $0xfffffff0,%edx
c0102368:	83 ca 0e             	or     $0xe,%edx
c010236b:	88 14 c5 65 f4 1a c0 	mov    %dl,-0x3fe50b9b(,%eax,8)
c0102372:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102375:	0f b6 14 c5 65 f4 1a 	movzbl -0x3fe50b9b(,%eax,8),%edx
c010237c:	c0 
c010237d:	83 e2 ef             	and    $0xffffffef,%edx
c0102380:	88 14 c5 65 f4 1a c0 	mov    %dl,-0x3fe50b9b(,%eax,8)
c0102387:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010238a:	0f b6 14 c5 65 f4 1a 	movzbl -0x3fe50b9b(,%eax,8),%edx
c0102391:	c0 
c0102392:	83 e2 9f             	and    $0xffffff9f,%edx
c0102395:	88 14 c5 65 f4 1a c0 	mov    %dl,-0x3fe50b9b(,%eax,8)
c010239c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010239f:	0f b6 14 c5 65 f4 1a 	movzbl -0x3fe50b9b(,%eax,8),%edx
c01023a6:	c0 
c01023a7:	83 ca 80             	or     $0xffffff80,%edx
c01023aa:	88 14 c5 65 f4 1a c0 	mov    %dl,-0x3fe50b9b(,%eax,8)
c01023b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023b4:	8b 04 85 00 d6 12 c0 	mov    -0x3fed2a00(,%eax,4),%eax
c01023bb:	c1 e8 10             	shr    $0x10,%eax
c01023be:	89 c2                	mov    %eax,%edx
c01023c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023c3:	66 89 14 c5 66 f4 1a 	mov    %dx,-0x3fe50b9a(,%eax,8)
c01023ca:	c0 
     /* LAB5 2011010312 */
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for(i = 0; i < 256; i++) {
c01023cb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01023cf:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c01023d6:	0f 8e 30 ff ff ff    	jle    c010230c <idt_init+0x12>
        SETGATE(idt[i], 0, KERNEL_CS, __vectors[i], DPL_KERNEL);
    }
    SETGATE(idt[T_SYSCALL], 1, KERNEL_CS, __vectors[T_SYSCALL], DPL_USER);
c01023dc:	a1 00 d8 12 c0       	mov    0xc012d800,%eax
c01023e1:	66 a3 60 f8 1a c0    	mov    %ax,0xc01af860
c01023e7:	66 c7 05 62 f8 1a c0 	movw   $0x8,0xc01af862
c01023ee:	08 00 
c01023f0:	0f b6 05 64 f8 1a c0 	movzbl 0xc01af864,%eax
c01023f7:	83 e0 e0             	and    $0xffffffe0,%eax
c01023fa:	a2 64 f8 1a c0       	mov    %al,0xc01af864
c01023ff:	0f b6 05 64 f8 1a c0 	movzbl 0xc01af864,%eax
c0102406:	83 e0 1f             	and    $0x1f,%eax
c0102409:	a2 64 f8 1a c0       	mov    %al,0xc01af864
c010240e:	0f b6 05 65 f8 1a c0 	movzbl 0xc01af865,%eax
c0102415:	83 c8 0f             	or     $0xf,%eax
c0102418:	a2 65 f8 1a c0       	mov    %al,0xc01af865
c010241d:	0f b6 05 65 f8 1a c0 	movzbl 0xc01af865,%eax
c0102424:	83 e0 ef             	and    $0xffffffef,%eax
c0102427:	a2 65 f8 1a c0       	mov    %al,0xc01af865
c010242c:	0f b6 05 65 f8 1a c0 	movzbl 0xc01af865,%eax
c0102433:	83 c8 60             	or     $0x60,%eax
c0102436:	a2 65 f8 1a c0       	mov    %al,0xc01af865
c010243b:	0f b6 05 65 f8 1a c0 	movzbl 0xc01af865,%eax
c0102442:	83 c8 80             	or     $0xffffff80,%eax
c0102445:	a2 65 f8 1a c0       	mov    %al,0xc01af865
c010244a:	a1 00 d8 12 c0       	mov    0xc012d800,%eax
c010244f:	c1 e8 10             	shr    $0x10,%eax
c0102452:	66 a3 66 f8 1a c0    	mov    %ax,0xc01af866
c0102458:	c7 45 f8 80 d5 12 c0 	movl   $0xc012d580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c010245f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102462:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);
}
c0102465:	c9                   	leave  
c0102466:	c3                   	ret    

c0102467 <trapname>:

static const char *
trapname(int trapno) {
c0102467:	55                   	push   %ebp
c0102468:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c010246a:	8b 45 08             	mov    0x8(%ebp),%eax
c010246d:	83 f8 13             	cmp    $0x13,%eax
c0102470:	77 0c                	ja     c010247e <trapname+0x17>
        return excnames[trapno];
c0102472:	8b 45 08             	mov    0x8(%ebp),%eax
c0102475:	8b 04 85 40 ce 10 c0 	mov    -0x3fef31c0(,%eax,4),%eax
c010247c:	eb 18                	jmp    c0102496 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c010247e:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0102482:	7e 0d                	jle    c0102491 <trapname+0x2a>
c0102484:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0102488:	7f 07                	jg     c0102491 <trapname+0x2a>
        return "Hardware Interrupt";
c010248a:	b8 df c9 10 c0       	mov    $0xc010c9df,%eax
c010248f:	eb 05                	jmp    c0102496 <trapname+0x2f>
    }
    return "(unknown trap)";
c0102491:	b8 f2 c9 10 c0       	mov    $0xc010c9f2,%eax
}
c0102496:	5d                   	pop    %ebp
c0102497:	c3                   	ret    

c0102498 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c0102498:	55                   	push   %ebp
c0102499:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c010249b:	8b 45 08             	mov    0x8(%ebp),%eax
c010249e:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024a2:	66 83 f8 08          	cmp    $0x8,%ax
c01024a6:	0f 94 c0             	sete   %al
c01024a9:	0f b6 c0             	movzbl %al,%eax
}
c01024ac:	5d                   	pop    %ebp
c01024ad:	c3                   	ret    

c01024ae <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c01024ae:	55                   	push   %ebp
c01024af:	89 e5                	mov    %esp,%ebp
c01024b1:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c01024b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01024b7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024bb:	c7 04 24 33 ca 10 c0 	movl   $0xc010ca33,(%esp)
c01024c2:	e8 9c de ff ff       	call   c0100363 <cprintf>
    print_regs(&tf->tf_regs);
c01024c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ca:	89 04 24             	mov    %eax,(%esp)
c01024cd:	e8 a1 01 00 00       	call   c0102673 <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c01024d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01024d5:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c01024d9:	0f b7 c0             	movzwl %ax,%eax
c01024dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024e0:	c7 04 24 44 ca 10 c0 	movl   $0xc010ca44,(%esp)
c01024e7:	e8 77 de ff ff       	call   c0100363 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c01024ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ef:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c01024f3:	0f b7 c0             	movzwl %ax,%eax
c01024f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024fa:	c7 04 24 57 ca 10 c0 	movl   $0xc010ca57,(%esp)
c0102501:	e8 5d de ff ff       	call   c0100363 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102506:	8b 45 08             	mov    0x8(%ebp),%eax
c0102509:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c010250d:	0f b7 c0             	movzwl %ax,%eax
c0102510:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102514:	c7 04 24 6a ca 10 c0 	movl   $0xc010ca6a,(%esp)
c010251b:	e8 43 de ff ff       	call   c0100363 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c0102520:	8b 45 08             	mov    0x8(%ebp),%eax
c0102523:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c0102527:	0f b7 c0             	movzwl %ax,%eax
c010252a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010252e:	c7 04 24 7d ca 10 c0 	movl   $0xc010ca7d,(%esp)
c0102535:	e8 29 de ff ff       	call   c0100363 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c010253a:	8b 45 08             	mov    0x8(%ebp),%eax
c010253d:	8b 40 30             	mov    0x30(%eax),%eax
c0102540:	89 04 24             	mov    %eax,(%esp)
c0102543:	e8 1f ff ff ff       	call   c0102467 <trapname>
c0102548:	8b 55 08             	mov    0x8(%ebp),%edx
c010254b:	8b 52 30             	mov    0x30(%edx),%edx
c010254e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102552:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102556:	c7 04 24 90 ca 10 c0 	movl   $0xc010ca90,(%esp)
c010255d:	e8 01 de ff ff       	call   c0100363 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c0102562:	8b 45 08             	mov    0x8(%ebp),%eax
c0102565:	8b 40 34             	mov    0x34(%eax),%eax
c0102568:	89 44 24 04          	mov    %eax,0x4(%esp)
c010256c:	c7 04 24 a2 ca 10 c0 	movl   $0xc010caa2,(%esp)
c0102573:	e8 eb dd ff ff       	call   c0100363 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c0102578:	8b 45 08             	mov    0x8(%ebp),%eax
c010257b:	8b 40 38             	mov    0x38(%eax),%eax
c010257e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102582:	c7 04 24 b1 ca 10 c0 	movl   $0xc010cab1,(%esp)
c0102589:	e8 d5 dd ff ff       	call   c0100363 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c010258e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102591:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102595:	0f b7 c0             	movzwl %ax,%eax
c0102598:	89 44 24 04          	mov    %eax,0x4(%esp)
c010259c:	c7 04 24 c0 ca 10 c0 	movl   $0xc010cac0,(%esp)
c01025a3:	e8 bb dd ff ff       	call   c0100363 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01025a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ab:	8b 40 40             	mov    0x40(%eax),%eax
c01025ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025b2:	c7 04 24 d3 ca 10 c0 	movl   $0xc010cad3,(%esp)
c01025b9:	e8 a5 dd ff ff       	call   c0100363 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01025be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01025c5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c01025cc:	eb 3e                	jmp    c010260c <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c01025ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01025d1:	8b 50 40             	mov    0x40(%eax),%edx
c01025d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01025d7:	21 d0                	and    %edx,%eax
c01025d9:	85 c0                	test   %eax,%eax
c01025db:	74 28                	je     c0102605 <print_trapframe+0x157>
c01025dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025e0:	8b 04 85 a0 d5 12 c0 	mov    -0x3fed2a60(,%eax,4),%eax
c01025e7:	85 c0                	test   %eax,%eax
c01025e9:	74 1a                	je     c0102605 <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c01025eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025ee:	8b 04 85 a0 d5 12 c0 	mov    -0x3fed2a60(,%eax,4),%eax
c01025f5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025f9:	c7 04 24 e2 ca 10 c0 	movl   $0xc010cae2,(%esp)
c0102600:	e8 5e dd ff ff       	call   c0100363 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102605:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102609:	d1 65 f0             	shll   -0x10(%ebp)
c010260c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010260f:	83 f8 17             	cmp    $0x17,%eax
c0102612:	76 ba                	jbe    c01025ce <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0102614:	8b 45 08             	mov    0x8(%ebp),%eax
c0102617:	8b 40 40             	mov    0x40(%eax),%eax
c010261a:	25 00 30 00 00       	and    $0x3000,%eax
c010261f:	c1 e8 0c             	shr    $0xc,%eax
c0102622:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102626:	c7 04 24 e6 ca 10 c0 	movl   $0xc010cae6,(%esp)
c010262d:	e8 31 dd ff ff       	call   c0100363 <cprintf>

    if (!trap_in_kernel(tf)) {
c0102632:	8b 45 08             	mov    0x8(%ebp),%eax
c0102635:	89 04 24             	mov    %eax,(%esp)
c0102638:	e8 5b fe ff ff       	call   c0102498 <trap_in_kernel>
c010263d:	85 c0                	test   %eax,%eax
c010263f:	75 30                	jne    c0102671 <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0102641:	8b 45 08             	mov    0x8(%ebp),%eax
c0102644:	8b 40 44             	mov    0x44(%eax),%eax
c0102647:	89 44 24 04          	mov    %eax,0x4(%esp)
c010264b:	c7 04 24 ef ca 10 c0 	movl   $0xc010caef,(%esp)
c0102652:	e8 0c dd ff ff       	call   c0100363 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c0102657:	8b 45 08             	mov    0x8(%ebp),%eax
c010265a:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c010265e:	0f b7 c0             	movzwl %ax,%eax
c0102661:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102665:	c7 04 24 fe ca 10 c0 	movl   $0xc010cafe,(%esp)
c010266c:	e8 f2 dc ff ff       	call   c0100363 <cprintf>
    }
}
c0102671:	c9                   	leave  
c0102672:	c3                   	ret    

c0102673 <print_regs>:

void
print_regs(struct pushregs *regs) {
c0102673:	55                   	push   %ebp
c0102674:	89 e5                	mov    %esp,%ebp
c0102676:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0102679:	8b 45 08             	mov    0x8(%ebp),%eax
c010267c:	8b 00                	mov    (%eax),%eax
c010267e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102682:	c7 04 24 11 cb 10 c0 	movl   $0xc010cb11,(%esp)
c0102689:	e8 d5 dc ff ff       	call   c0100363 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c010268e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102691:	8b 40 04             	mov    0x4(%eax),%eax
c0102694:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102698:	c7 04 24 20 cb 10 c0 	movl   $0xc010cb20,(%esp)
c010269f:	e8 bf dc ff ff       	call   c0100363 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01026a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01026a7:	8b 40 08             	mov    0x8(%eax),%eax
c01026aa:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026ae:	c7 04 24 2f cb 10 c0 	movl   $0xc010cb2f,(%esp)
c01026b5:	e8 a9 dc ff ff       	call   c0100363 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01026ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01026bd:	8b 40 0c             	mov    0xc(%eax),%eax
c01026c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026c4:	c7 04 24 3e cb 10 c0 	movl   $0xc010cb3e,(%esp)
c01026cb:	e8 93 dc ff ff       	call   c0100363 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c01026d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01026d3:	8b 40 10             	mov    0x10(%eax),%eax
c01026d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026da:	c7 04 24 4d cb 10 c0 	movl   $0xc010cb4d,(%esp)
c01026e1:	e8 7d dc ff ff       	call   c0100363 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c01026e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01026e9:	8b 40 14             	mov    0x14(%eax),%eax
c01026ec:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026f0:	c7 04 24 5c cb 10 c0 	movl   $0xc010cb5c,(%esp)
c01026f7:	e8 67 dc ff ff       	call   c0100363 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c01026fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01026ff:	8b 40 18             	mov    0x18(%eax),%eax
c0102702:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102706:	c7 04 24 6b cb 10 c0 	movl   $0xc010cb6b,(%esp)
c010270d:	e8 51 dc ff ff       	call   c0100363 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0102712:	8b 45 08             	mov    0x8(%ebp),%eax
c0102715:	8b 40 1c             	mov    0x1c(%eax),%eax
c0102718:	89 44 24 04          	mov    %eax,0x4(%esp)
c010271c:	c7 04 24 7a cb 10 c0 	movl   $0xc010cb7a,(%esp)
c0102723:	e8 3b dc ff ff       	call   c0100363 <cprintf>
}
c0102728:	c9                   	leave  
c0102729:	c3                   	ret    

c010272a <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c010272a:	55                   	push   %ebp
c010272b:	89 e5                	mov    %esp,%ebp
c010272d:	53                   	push   %ebx
c010272e:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0102731:	8b 45 08             	mov    0x8(%ebp),%eax
c0102734:	8b 40 34             	mov    0x34(%eax),%eax
c0102737:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010273a:	84 c0                	test   %al,%al
c010273c:	74 07                	je     c0102745 <print_pgfault+0x1b>
c010273e:	b9 89 cb 10 c0       	mov    $0xc010cb89,%ecx
c0102743:	eb 05                	jmp    c010274a <print_pgfault+0x20>
c0102745:	b9 9a cb 10 c0       	mov    $0xc010cb9a,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c010274a:	8b 45 08             	mov    0x8(%ebp),%eax
c010274d:	8b 40 34             	mov    0x34(%eax),%eax
c0102750:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102753:	85 c0                	test   %eax,%eax
c0102755:	74 07                	je     c010275e <print_pgfault+0x34>
c0102757:	ba 57 00 00 00       	mov    $0x57,%edx
c010275c:	eb 05                	jmp    c0102763 <print_pgfault+0x39>
c010275e:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c0102763:	8b 45 08             	mov    0x8(%ebp),%eax
c0102766:	8b 40 34             	mov    0x34(%eax),%eax
c0102769:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010276c:	85 c0                	test   %eax,%eax
c010276e:	74 07                	je     c0102777 <print_pgfault+0x4d>
c0102770:	b8 55 00 00 00       	mov    $0x55,%eax
c0102775:	eb 05                	jmp    c010277c <print_pgfault+0x52>
c0102777:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c010277c:	0f 20 d3             	mov    %cr2,%ebx
c010277f:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c0102782:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c0102785:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0102789:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010278d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102791:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0102795:	c7 04 24 a8 cb 10 c0 	movl   $0xc010cba8,(%esp)
c010279c:	e8 c2 db ff ff       	call   c0100363 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c01027a1:	83 c4 34             	add    $0x34,%esp
c01027a4:	5b                   	pop    %ebx
c01027a5:	5d                   	pop    %ebp
c01027a6:	c3                   	ret    

c01027a7 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01027a7:	55                   	push   %ebp
c01027a8:	89 e5                	mov    %esp,%ebp
c01027aa:	53                   	push   %ebx
c01027ab:	83 ec 24             	sub    $0x24,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c01027ae:	a1 6c 1e 1b c0       	mov    0xc01b1e6c,%eax
c01027b3:	85 c0                	test   %eax,%eax
c01027b5:	74 0b                	je     c01027c2 <pgfault_handler+0x1b>
            print_pgfault(tf);
c01027b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01027ba:	89 04 24             	mov    %eax,(%esp)
c01027bd:	e8 68 ff ff ff       	call   c010272a <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c01027c2:	a1 6c 1e 1b c0       	mov    0xc01b1e6c,%eax
c01027c7:	85 c0                	test   %eax,%eax
c01027c9:	74 3d                	je     c0102808 <pgfault_handler+0x61>
        assert(current == idleproc);
c01027cb:	8b 15 28 fd 1a c0    	mov    0xc01afd28,%edx
c01027d1:	a1 20 fd 1a c0       	mov    0xc01afd20,%eax
c01027d6:	39 c2                	cmp    %eax,%edx
c01027d8:	74 24                	je     c01027fe <pgfault_handler+0x57>
c01027da:	c7 44 24 0c cb cb 10 	movl   $0xc010cbcb,0xc(%esp)
c01027e1:	c0 
c01027e2:	c7 44 24 08 df cb 10 	movl   $0xc010cbdf,0x8(%esp)
c01027e9:	c0 
c01027ea:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c01027f1:	00 
c01027f2:	c7 04 24 ce c9 10 c0 	movl   $0xc010c9ce,(%esp)
c01027f9:	e8 be e5 ff ff       	call   c0100dbc <__panic>
        mm = check_mm_struct;
c01027fe:	a1 6c 1e 1b c0       	mov    0xc01b1e6c,%eax
c0102803:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102806:	eb 46                	jmp    c010284e <pgfault_handler+0xa7>
    }
    else {
        if (current == NULL) {
c0102808:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010280d:	85 c0                	test   %eax,%eax
c010280f:	75 32                	jne    c0102843 <pgfault_handler+0x9c>
            print_trapframe(tf);
c0102811:	8b 45 08             	mov    0x8(%ebp),%eax
c0102814:	89 04 24             	mov    %eax,(%esp)
c0102817:	e8 92 fc ff ff       	call   c01024ae <print_trapframe>
            print_pgfault(tf);
c010281c:	8b 45 08             	mov    0x8(%ebp),%eax
c010281f:	89 04 24             	mov    %eax,(%esp)
c0102822:	e8 03 ff ff ff       	call   c010272a <print_pgfault>
            panic("unhandled page fault.\n");
c0102827:	c7 44 24 08 f4 cb 10 	movl   $0xc010cbf4,0x8(%esp)
c010282e:	c0 
c010282f:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c0102836:	00 
c0102837:	c7 04 24 ce c9 10 c0 	movl   $0xc010c9ce,(%esp)
c010283e:	e8 79 e5 ff ff       	call   c0100dbc <__panic>
        }
        mm = current->mm;
c0102843:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c0102848:	8b 40 18             	mov    0x18(%eax),%eax
c010284b:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c010284e:	0f 20 d3             	mov    %cr2,%ebx
c0102851:	89 5d f0             	mov    %ebx,-0x10(%ebp)
    return cr2;
c0102854:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0102857:	89 c2                	mov    %eax,%edx
c0102859:	8b 45 08             	mov    0x8(%ebp),%eax
c010285c:	8b 40 34             	mov    0x34(%eax),%eax
c010285f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102863:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102867:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010286a:	89 04 24             	mov    %eax,(%esp)
c010286d:	e8 05 66 00 00       	call   c0108e77 <do_pgfault>
}
c0102872:	83 c4 24             	add    $0x24,%esp
c0102875:	5b                   	pop    %ebx
c0102876:	5d                   	pop    %ebp
c0102877:	c3                   	ret    

c0102878 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0102878:	55                   	push   %ebp
c0102879:	89 e5                	mov    %esp,%ebp
c010287b:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c010287e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c0102885:	8b 45 08             	mov    0x8(%ebp),%eax
c0102888:	8b 40 30             	mov    0x30(%eax),%eax
c010288b:	83 f8 2f             	cmp    $0x2f,%eax
c010288e:	77 38                	ja     c01028c8 <trap_dispatch+0x50>
c0102890:	83 f8 2e             	cmp    $0x2e,%eax
c0102893:	0f 83 dd 01 00 00    	jae    c0102a76 <trap_dispatch+0x1fe>
c0102899:	83 f8 20             	cmp    $0x20,%eax
c010289c:	0f 84 02 01 00 00    	je     c01029a4 <trap_dispatch+0x12c>
c01028a2:	83 f8 20             	cmp    $0x20,%eax
c01028a5:	77 0a                	ja     c01028b1 <trap_dispatch+0x39>
c01028a7:	83 f8 0e             	cmp    $0xe,%eax
c01028aa:	74 3e                	je     c01028ea <trap_dispatch+0x72>
c01028ac:	e9 7d 01 00 00       	jmp    c0102a2e <trap_dispatch+0x1b6>
c01028b1:	83 f8 21             	cmp    $0x21,%eax
c01028b4:	0f 84 32 01 00 00    	je     c01029ec <trap_dispatch+0x174>
c01028ba:	83 f8 24             	cmp    $0x24,%eax
c01028bd:	0f 84 00 01 00 00    	je     c01029c3 <trap_dispatch+0x14b>
c01028c3:	e9 66 01 00 00       	jmp    c0102a2e <trap_dispatch+0x1b6>
c01028c8:	83 f8 78             	cmp    $0x78,%eax
c01028cb:	0f 82 5d 01 00 00    	jb     c0102a2e <trap_dispatch+0x1b6>
c01028d1:	83 f8 79             	cmp    $0x79,%eax
c01028d4:	0f 86 38 01 00 00    	jbe    c0102a12 <trap_dispatch+0x19a>
c01028da:	3d 80 00 00 00       	cmp    $0x80,%eax
c01028df:	0f 84 b5 00 00 00    	je     c010299a <trap_dispatch+0x122>
c01028e5:	e9 44 01 00 00       	jmp    c0102a2e <trap_dispatch+0x1b6>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c01028ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01028ed:	89 04 24             	mov    %eax,(%esp)
c01028f0:	e8 b2 fe ff ff       	call   c01027a7 <pgfault_handler>
c01028f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01028f8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01028fc:	0f 84 77 01 00 00    	je     c0102a79 <trap_dispatch+0x201>
            print_trapframe(tf);
c0102902:	8b 45 08             	mov    0x8(%ebp),%eax
c0102905:	89 04 24             	mov    %eax,(%esp)
c0102908:	e8 a1 fb ff ff       	call   c01024ae <print_trapframe>
            if (current == NULL) {
c010290d:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c0102912:	85 c0                	test   %eax,%eax
c0102914:	75 23                	jne    c0102939 <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c0102916:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102919:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010291d:	c7 44 24 08 0c cc 10 	movl   $0xc010cc0c,0x8(%esp)
c0102924:	c0 
c0102925:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c010292c:	00 
c010292d:	c7 04 24 ce c9 10 c0 	movl   $0xc010c9ce,(%esp)
c0102934:	e8 83 e4 ff ff       	call   c0100dbc <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102939:	8b 45 08             	mov    0x8(%ebp),%eax
c010293c:	89 04 24             	mov    %eax,(%esp)
c010293f:	e8 54 fb ff ff       	call   c0102498 <trap_in_kernel>
c0102944:	85 c0                	test   %eax,%eax
c0102946:	74 23                	je     c010296b <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0102948:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010294b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010294f:	c7 44 24 08 2c cc 10 	movl   $0xc010cc2c,0x8(%esp)
c0102956:	c0 
c0102957:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c010295e:	00 
c010295f:	c7 04 24 ce c9 10 c0 	movl   $0xc010c9ce,(%esp)
c0102966:	e8 51 e4 ff ff       	call   c0100dbc <__panic>
                }
                cprintf("killed by kernel.\n");
c010296b:	c7 04 24 5a cc 10 c0 	movl   $0xc010cc5a,(%esp)
c0102972:	e8 ec d9 ff ff       	call   c0100363 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c0102977:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010297a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010297e:	c7 44 24 08 70 cc 10 	movl   $0xc010cc70,0x8(%esp)
c0102985:	c0 
c0102986:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c010298d:	00 
c010298e:	c7 04 24 ce c9 10 c0 	movl   $0xc010c9ce,(%esp)
c0102995:	e8 22 e4 ff ff       	call   c0100dbc <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
    case T_SYSCALL:
        syscall();
c010299a:	e8 09 8e 00 00       	call   c010b7a8 <syscall>
        break;
c010299f:	e9 d6 00 00 00       	jmp    c0102a7a <trap_dispatch+0x202>
        /* LAB6 2011010312 */
        /* you should upate you lab5 code
         * IMPORTANT FUNCTIONS:
	     * sched_class_proc_tick
         */
        ticks++;
c01029a4:	a1 78 1d 1b c0       	mov    0xc01b1d78,%eax
c01029a9:	83 c0 01             	add    $0x1,%eax
c01029ac:	a3 78 1d 1b c0       	mov    %eax,0xc01b1d78
        sched_class_proc_tick(current);
c01029b1:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c01029b6:	89 04 24             	mov    %eax,(%esp)
c01029b9:	e8 c6 8a 00 00       	call   c010b484 <sched_class_proc_tick>
        break;
c01029be:	e9 b7 00 00 00       	jmp    c0102a7a <trap_dispatch+0x202>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c01029c3:	e8 10 ee ff ff       	call   c01017d8 <cons_getc>
c01029c8:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c01029cb:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c01029cf:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c01029d3:	89 54 24 08          	mov    %edx,0x8(%esp)
c01029d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01029db:	c7 04 24 99 cc 10 c0 	movl   $0xc010cc99,(%esp)
c01029e2:	e8 7c d9 ff ff       	call   c0100363 <cprintf>
        break;
c01029e7:	e9 8e 00 00 00       	jmp    c0102a7a <trap_dispatch+0x202>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c01029ec:	e8 e7 ed ff ff       	call   c01017d8 <cons_getc>
c01029f1:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c01029f4:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c01029f8:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c01029fc:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102a00:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102a04:	c7 04 24 ab cc 10 c0 	movl   $0xc010ccab,(%esp)
c0102a0b:	e8 53 d9 ff ff       	call   c0100363 <cprintf>
        break;
c0102a10:	eb 68                	jmp    c0102a7a <trap_dispatch+0x202>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102a12:	c7 44 24 08 ba cc 10 	movl   $0xc010ccba,0x8(%esp)
c0102a19:	c0 
c0102a1a:	c7 44 24 04 fd 00 00 	movl   $0xfd,0x4(%esp)
c0102a21:	00 
c0102a22:	c7 04 24 ce c9 10 c0 	movl   $0xc010c9ce,(%esp)
c0102a29:	e8 8e e3 ff ff       	call   c0100dbc <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102a2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a31:	89 04 24             	mov    %eax,(%esp)
c0102a34:	e8 75 fa ff ff       	call   c01024ae <print_trapframe>
        if (current != NULL) {
c0102a39:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c0102a3e:	85 c0                	test   %eax,%eax
c0102a40:	74 18                	je     c0102a5a <trap_dispatch+0x1e2>
            cprintf("unhandled trap.\n");
c0102a42:	c7 04 24 ca cc 10 c0 	movl   $0xc010ccca,(%esp)
c0102a49:	e8 15 d9 ff ff       	call   c0100363 <cprintf>
            do_exit(-E_KILLED);
c0102a4e:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a55:	e8 3c 76 00 00       	call   c010a096 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102a5a:	c7 44 24 08 db cc 10 	movl   $0xc010ccdb,0x8(%esp)
c0102a61:	c0 
c0102a62:	c7 44 24 04 0a 01 00 	movl   $0x10a,0x4(%esp)
c0102a69:	00 
c0102a6a:	c7 04 24 ce c9 10 c0 	movl   $0xc010c9ce,(%esp)
c0102a71:	e8 46 e3 ff ff       	call   c0100dbc <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102a76:	90                   	nop
c0102a77:	eb 01                	jmp    c0102a7a <trap_dispatch+0x202>
                cprintf("killed by kernel.\n");
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
                do_exit(-E_KILLED);
            }
        }
        break;
c0102a79:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102a7a:	c9                   	leave  
c0102a7b:	c3                   	ret    

c0102a7c <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102a7c:	55                   	push   %ebp
c0102a7d:	89 e5                	mov    %esp,%ebp
c0102a7f:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102a82:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c0102a87:	85 c0                	test   %eax,%eax
c0102a89:	75 0d                	jne    c0102a98 <trap+0x1c>
        trap_dispatch(tf);
c0102a8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a8e:	89 04 24             	mov    %eax,(%esp)
c0102a91:	e8 e2 fd ff ff       	call   c0102878 <trap_dispatch>
c0102a96:	eb 6c                	jmp    c0102b04 <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102a98:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c0102a9d:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102aa0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102aa3:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c0102aa8:	8b 55 08             	mov    0x8(%ebp),%edx
c0102aab:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102aae:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ab1:	89 04 24             	mov    %eax,(%esp)
c0102ab4:	e8 df f9 ff ff       	call   c0102498 <trap_in_kernel>
c0102ab9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102abc:	8b 45 08             	mov    0x8(%ebp),%eax
c0102abf:	89 04 24             	mov    %eax,(%esp)
c0102ac2:	e8 b1 fd ff ff       	call   c0102878 <trap_dispatch>
    
        current->tf = otf;
c0102ac7:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c0102acc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102acf:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102ad2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102ad6:	75 2c                	jne    c0102b04 <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102ad8:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c0102add:	8b 40 44             	mov    0x44(%eax),%eax
c0102ae0:	83 e0 01             	and    $0x1,%eax
c0102ae3:	84 c0                	test   %al,%al
c0102ae5:	74 0c                	je     c0102af3 <trap+0x77>
                do_exit(-E_KILLED);
c0102ae7:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102aee:	e8 a3 75 00 00       	call   c010a096 <do_exit>
            }
            if (current->need_resched) {
c0102af3:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c0102af8:	8b 40 10             	mov    0x10(%eax),%eax
c0102afb:	85 c0                	test   %eax,%eax
c0102afd:	74 05                	je     c0102b04 <trap+0x88>
                schedule();
c0102aff:	e8 bc 8a 00 00       	call   c010b5c0 <schedule>
            }
        }
    }
}
c0102b04:	c9                   	leave  
c0102b05:	c3                   	ret    
	...

c0102b08 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102b08:	1e                   	push   %ds
    pushl %es
c0102b09:	06                   	push   %es
    pushl %fs
c0102b0a:	0f a0                	push   %fs
    pushl %gs
c0102b0c:	0f a8                	push   %gs
    pushal
c0102b0e:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102b0f:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102b14:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102b16:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102b18:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102b19:	e8 5e ff ff ff       	call   c0102a7c <trap>

    # pop the pushed stack pointer
    popl %esp
c0102b1e:	5c                   	pop    %esp

c0102b1f <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102b1f:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102b20:	0f a9                	pop    %gs
    popl %fs
c0102b22:	0f a1                	pop    %fs
    popl %es
c0102b24:	07                   	pop    %es
    popl %ds
c0102b25:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102b26:	83 c4 08             	add    $0x8,%esp
    iret
c0102b29:	cf                   	iret   

c0102b2a <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102b2a:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102b2e:	e9 ec ff ff ff       	jmp    c0102b1f <__trapret>
	...

c0102b34 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102b34:	6a 00                	push   $0x0
  pushl $0
c0102b36:	6a 00                	push   $0x0
  jmp __alltraps
c0102b38:	e9 cb ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b3d <vector1>:
.globl vector1
vector1:
  pushl $0
c0102b3d:	6a 00                	push   $0x0
  pushl $1
c0102b3f:	6a 01                	push   $0x1
  jmp __alltraps
c0102b41:	e9 c2 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b46 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102b46:	6a 00                	push   $0x0
  pushl $2
c0102b48:	6a 02                	push   $0x2
  jmp __alltraps
c0102b4a:	e9 b9 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b4f <vector3>:
.globl vector3
vector3:
  pushl $0
c0102b4f:	6a 00                	push   $0x0
  pushl $3
c0102b51:	6a 03                	push   $0x3
  jmp __alltraps
c0102b53:	e9 b0 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b58 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102b58:	6a 00                	push   $0x0
  pushl $4
c0102b5a:	6a 04                	push   $0x4
  jmp __alltraps
c0102b5c:	e9 a7 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b61 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102b61:	6a 00                	push   $0x0
  pushl $5
c0102b63:	6a 05                	push   $0x5
  jmp __alltraps
c0102b65:	e9 9e ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b6a <vector6>:
.globl vector6
vector6:
  pushl $0
c0102b6a:	6a 00                	push   $0x0
  pushl $6
c0102b6c:	6a 06                	push   $0x6
  jmp __alltraps
c0102b6e:	e9 95 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b73 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102b73:	6a 00                	push   $0x0
  pushl $7
c0102b75:	6a 07                	push   $0x7
  jmp __alltraps
c0102b77:	e9 8c ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b7c <vector8>:
.globl vector8
vector8:
  pushl $8
c0102b7c:	6a 08                	push   $0x8
  jmp __alltraps
c0102b7e:	e9 85 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b83 <vector9>:
.globl vector9
vector9:
  pushl $9
c0102b83:	6a 09                	push   $0x9
  jmp __alltraps
c0102b85:	e9 7e ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b8a <vector10>:
.globl vector10
vector10:
  pushl $10
c0102b8a:	6a 0a                	push   $0xa
  jmp __alltraps
c0102b8c:	e9 77 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b91 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102b91:	6a 0b                	push   $0xb
  jmp __alltraps
c0102b93:	e9 70 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b98 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102b98:	6a 0c                	push   $0xc
  jmp __alltraps
c0102b9a:	e9 69 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102b9f <vector13>:
.globl vector13
vector13:
  pushl $13
c0102b9f:	6a 0d                	push   $0xd
  jmp __alltraps
c0102ba1:	e9 62 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102ba6 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102ba6:	6a 0e                	push   $0xe
  jmp __alltraps
c0102ba8:	e9 5b ff ff ff       	jmp    c0102b08 <__alltraps>

c0102bad <vector15>:
.globl vector15
vector15:
  pushl $0
c0102bad:	6a 00                	push   $0x0
  pushl $15
c0102baf:	6a 0f                	push   $0xf
  jmp __alltraps
c0102bb1:	e9 52 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102bb6 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102bb6:	6a 00                	push   $0x0
  pushl $16
c0102bb8:	6a 10                	push   $0x10
  jmp __alltraps
c0102bba:	e9 49 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102bbf <vector17>:
.globl vector17
vector17:
  pushl $17
c0102bbf:	6a 11                	push   $0x11
  jmp __alltraps
c0102bc1:	e9 42 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102bc6 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102bc6:	6a 00                	push   $0x0
  pushl $18
c0102bc8:	6a 12                	push   $0x12
  jmp __alltraps
c0102bca:	e9 39 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102bcf <vector19>:
.globl vector19
vector19:
  pushl $0
c0102bcf:	6a 00                	push   $0x0
  pushl $19
c0102bd1:	6a 13                	push   $0x13
  jmp __alltraps
c0102bd3:	e9 30 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102bd8 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102bd8:	6a 00                	push   $0x0
  pushl $20
c0102bda:	6a 14                	push   $0x14
  jmp __alltraps
c0102bdc:	e9 27 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102be1 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102be1:	6a 00                	push   $0x0
  pushl $21
c0102be3:	6a 15                	push   $0x15
  jmp __alltraps
c0102be5:	e9 1e ff ff ff       	jmp    c0102b08 <__alltraps>

c0102bea <vector22>:
.globl vector22
vector22:
  pushl $0
c0102bea:	6a 00                	push   $0x0
  pushl $22
c0102bec:	6a 16                	push   $0x16
  jmp __alltraps
c0102bee:	e9 15 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102bf3 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102bf3:	6a 00                	push   $0x0
  pushl $23
c0102bf5:	6a 17                	push   $0x17
  jmp __alltraps
c0102bf7:	e9 0c ff ff ff       	jmp    c0102b08 <__alltraps>

c0102bfc <vector24>:
.globl vector24
vector24:
  pushl $0
c0102bfc:	6a 00                	push   $0x0
  pushl $24
c0102bfe:	6a 18                	push   $0x18
  jmp __alltraps
c0102c00:	e9 03 ff ff ff       	jmp    c0102b08 <__alltraps>

c0102c05 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102c05:	6a 00                	push   $0x0
  pushl $25
c0102c07:	6a 19                	push   $0x19
  jmp __alltraps
c0102c09:	e9 fa fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c0e <vector26>:
.globl vector26
vector26:
  pushl $0
c0102c0e:	6a 00                	push   $0x0
  pushl $26
c0102c10:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102c12:	e9 f1 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c17 <vector27>:
.globl vector27
vector27:
  pushl $0
c0102c17:	6a 00                	push   $0x0
  pushl $27
c0102c19:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102c1b:	e9 e8 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c20 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102c20:	6a 00                	push   $0x0
  pushl $28
c0102c22:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102c24:	e9 df fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c29 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102c29:	6a 00                	push   $0x0
  pushl $29
c0102c2b:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102c2d:	e9 d6 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c32 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102c32:	6a 00                	push   $0x0
  pushl $30
c0102c34:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102c36:	e9 cd fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c3b <vector31>:
.globl vector31
vector31:
  pushl $0
c0102c3b:	6a 00                	push   $0x0
  pushl $31
c0102c3d:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102c3f:	e9 c4 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c44 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102c44:	6a 00                	push   $0x0
  pushl $32
c0102c46:	6a 20                	push   $0x20
  jmp __alltraps
c0102c48:	e9 bb fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c4d <vector33>:
.globl vector33
vector33:
  pushl $0
c0102c4d:	6a 00                	push   $0x0
  pushl $33
c0102c4f:	6a 21                	push   $0x21
  jmp __alltraps
c0102c51:	e9 b2 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c56 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102c56:	6a 00                	push   $0x0
  pushl $34
c0102c58:	6a 22                	push   $0x22
  jmp __alltraps
c0102c5a:	e9 a9 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c5f <vector35>:
.globl vector35
vector35:
  pushl $0
c0102c5f:	6a 00                	push   $0x0
  pushl $35
c0102c61:	6a 23                	push   $0x23
  jmp __alltraps
c0102c63:	e9 a0 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c68 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102c68:	6a 00                	push   $0x0
  pushl $36
c0102c6a:	6a 24                	push   $0x24
  jmp __alltraps
c0102c6c:	e9 97 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c71 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102c71:	6a 00                	push   $0x0
  pushl $37
c0102c73:	6a 25                	push   $0x25
  jmp __alltraps
c0102c75:	e9 8e fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c7a <vector38>:
.globl vector38
vector38:
  pushl $0
c0102c7a:	6a 00                	push   $0x0
  pushl $38
c0102c7c:	6a 26                	push   $0x26
  jmp __alltraps
c0102c7e:	e9 85 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c83 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102c83:	6a 00                	push   $0x0
  pushl $39
c0102c85:	6a 27                	push   $0x27
  jmp __alltraps
c0102c87:	e9 7c fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c8c <vector40>:
.globl vector40
vector40:
  pushl $0
c0102c8c:	6a 00                	push   $0x0
  pushl $40
c0102c8e:	6a 28                	push   $0x28
  jmp __alltraps
c0102c90:	e9 73 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c95 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102c95:	6a 00                	push   $0x0
  pushl $41
c0102c97:	6a 29                	push   $0x29
  jmp __alltraps
c0102c99:	e9 6a fe ff ff       	jmp    c0102b08 <__alltraps>

c0102c9e <vector42>:
.globl vector42
vector42:
  pushl $0
c0102c9e:	6a 00                	push   $0x0
  pushl $42
c0102ca0:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102ca2:	e9 61 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102ca7 <vector43>:
.globl vector43
vector43:
  pushl $0
c0102ca7:	6a 00                	push   $0x0
  pushl $43
c0102ca9:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102cab:	e9 58 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102cb0 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102cb0:	6a 00                	push   $0x0
  pushl $44
c0102cb2:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102cb4:	e9 4f fe ff ff       	jmp    c0102b08 <__alltraps>

c0102cb9 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102cb9:	6a 00                	push   $0x0
  pushl $45
c0102cbb:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102cbd:	e9 46 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102cc2 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102cc2:	6a 00                	push   $0x0
  pushl $46
c0102cc4:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102cc6:	e9 3d fe ff ff       	jmp    c0102b08 <__alltraps>

c0102ccb <vector47>:
.globl vector47
vector47:
  pushl $0
c0102ccb:	6a 00                	push   $0x0
  pushl $47
c0102ccd:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102ccf:	e9 34 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102cd4 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102cd4:	6a 00                	push   $0x0
  pushl $48
c0102cd6:	6a 30                	push   $0x30
  jmp __alltraps
c0102cd8:	e9 2b fe ff ff       	jmp    c0102b08 <__alltraps>

c0102cdd <vector49>:
.globl vector49
vector49:
  pushl $0
c0102cdd:	6a 00                	push   $0x0
  pushl $49
c0102cdf:	6a 31                	push   $0x31
  jmp __alltraps
c0102ce1:	e9 22 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102ce6 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102ce6:	6a 00                	push   $0x0
  pushl $50
c0102ce8:	6a 32                	push   $0x32
  jmp __alltraps
c0102cea:	e9 19 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102cef <vector51>:
.globl vector51
vector51:
  pushl $0
c0102cef:	6a 00                	push   $0x0
  pushl $51
c0102cf1:	6a 33                	push   $0x33
  jmp __alltraps
c0102cf3:	e9 10 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102cf8 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102cf8:	6a 00                	push   $0x0
  pushl $52
c0102cfa:	6a 34                	push   $0x34
  jmp __alltraps
c0102cfc:	e9 07 fe ff ff       	jmp    c0102b08 <__alltraps>

c0102d01 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102d01:	6a 00                	push   $0x0
  pushl $53
c0102d03:	6a 35                	push   $0x35
  jmp __alltraps
c0102d05:	e9 fe fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d0a <vector54>:
.globl vector54
vector54:
  pushl $0
c0102d0a:	6a 00                	push   $0x0
  pushl $54
c0102d0c:	6a 36                	push   $0x36
  jmp __alltraps
c0102d0e:	e9 f5 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d13 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102d13:	6a 00                	push   $0x0
  pushl $55
c0102d15:	6a 37                	push   $0x37
  jmp __alltraps
c0102d17:	e9 ec fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d1c <vector56>:
.globl vector56
vector56:
  pushl $0
c0102d1c:	6a 00                	push   $0x0
  pushl $56
c0102d1e:	6a 38                	push   $0x38
  jmp __alltraps
c0102d20:	e9 e3 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d25 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102d25:	6a 00                	push   $0x0
  pushl $57
c0102d27:	6a 39                	push   $0x39
  jmp __alltraps
c0102d29:	e9 da fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d2e <vector58>:
.globl vector58
vector58:
  pushl $0
c0102d2e:	6a 00                	push   $0x0
  pushl $58
c0102d30:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102d32:	e9 d1 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d37 <vector59>:
.globl vector59
vector59:
  pushl $0
c0102d37:	6a 00                	push   $0x0
  pushl $59
c0102d39:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102d3b:	e9 c8 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d40 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102d40:	6a 00                	push   $0x0
  pushl $60
c0102d42:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102d44:	e9 bf fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d49 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102d49:	6a 00                	push   $0x0
  pushl $61
c0102d4b:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102d4d:	e9 b6 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d52 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102d52:	6a 00                	push   $0x0
  pushl $62
c0102d54:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102d56:	e9 ad fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d5b <vector63>:
.globl vector63
vector63:
  pushl $0
c0102d5b:	6a 00                	push   $0x0
  pushl $63
c0102d5d:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102d5f:	e9 a4 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d64 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102d64:	6a 00                	push   $0x0
  pushl $64
c0102d66:	6a 40                	push   $0x40
  jmp __alltraps
c0102d68:	e9 9b fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d6d <vector65>:
.globl vector65
vector65:
  pushl $0
c0102d6d:	6a 00                	push   $0x0
  pushl $65
c0102d6f:	6a 41                	push   $0x41
  jmp __alltraps
c0102d71:	e9 92 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d76 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102d76:	6a 00                	push   $0x0
  pushl $66
c0102d78:	6a 42                	push   $0x42
  jmp __alltraps
c0102d7a:	e9 89 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d7f <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d7f:	6a 00                	push   $0x0
  pushl $67
c0102d81:	6a 43                	push   $0x43
  jmp __alltraps
c0102d83:	e9 80 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d88 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102d88:	6a 00                	push   $0x0
  pushl $68
c0102d8a:	6a 44                	push   $0x44
  jmp __alltraps
c0102d8c:	e9 77 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d91 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102d91:	6a 00                	push   $0x0
  pushl $69
c0102d93:	6a 45                	push   $0x45
  jmp __alltraps
c0102d95:	e9 6e fd ff ff       	jmp    c0102b08 <__alltraps>

c0102d9a <vector70>:
.globl vector70
vector70:
  pushl $0
c0102d9a:	6a 00                	push   $0x0
  pushl $70
c0102d9c:	6a 46                	push   $0x46
  jmp __alltraps
c0102d9e:	e9 65 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102da3 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102da3:	6a 00                	push   $0x0
  pushl $71
c0102da5:	6a 47                	push   $0x47
  jmp __alltraps
c0102da7:	e9 5c fd ff ff       	jmp    c0102b08 <__alltraps>

c0102dac <vector72>:
.globl vector72
vector72:
  pushl $0
c0102dac:	6a 00                	push   $0x0
  pushl $72
c0102dae:	6a 48                	push   $0x48
  jmp __alltraps
c0102db0:	e9 53 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102db5 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102db5:	6a 00                	push   $0x0
  pushl $73
c0102db7:	6a 49                	push   $0x49
  jmp __alltraps
c0102db9:	e9 4a fd ff ff       	jmp    c0102b08 <__alltraps>

c0102dbe <vector74>:
.globl vector74
vector74:
  pushl $0
c0102dbe:	6a 00                	push   $0x0
  pushl $74
c0102dc0:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102dc2:	e9 41 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102dc7 <vector75>:
.globl vector75
vector75:
  pushl $0
c0102dc7:	6a 00                	push   $0x0
  pushl $75
c0102dc9:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102dcb:	e9 38 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102dd0 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102dd0:	6a 00                	push   $0x0
  pushl $76
c0102dd2:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102dd4:	e9 2f fd ff ff       	jmp    c0102b08 <__alltraps>

c0102dd9 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102dd9:	6a 00                	push   $0x0
  pushl $77
c0102ddb:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102ddd:	e9 26 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102de2 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102de2:	6a 00                	push   $0x0
  pushl $78
c0102de4:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102de6:	e9 1d fd ff ff       	jmp    c0102b08 <__alltraps>

c0102deb <vector79>:
.globl vector79
vector79:
  pushl $0
c0102deb:	6a 00                	push   $0x0
  pushl $79
c0102ded:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102def:	e9 14 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102df4 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102df4:	6a 00                	push   $0x0
  pushl $80
c0102df6:	6a 50                	push   $0x50
  jmp __alltraps
c0102df8:	e9 0b fd ff ff       	jmp    c0102b08 <__alltraps>

c0102dfd <vector81>:
.globl vector81
vector81:
  pushl $0
c0102dfd:	6a 00                	push   $0x0
  pushl $81
c0102dff:	6a 51                	push   $0x51
  jmp __alltraps
c0102e01:	e9 02 fd ff ff       	jmp    c0102b08 <__alltraps>

c0102e06 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102e06:	6a 00                	push   $0x0
  pushl $82
c0102e08:	6a 52                	push   $0x52
  jmp __alltraps
c0102e0a:	e9 f9 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e0f <vector83>:
.globl vector83
vector83:
  pushl $0
c0102e0f:	6a 00                	push   $0x0
  pushl $83
c0102e11:	6a 53                	push   $0x53
  jmp __alltraps
c0102e13:	e9 f0 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e18 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102e18:	6a 00                	push   $0x0
  pushl $84
c0102e1a:	6a 54                	push   $0x54
  jmp __alltraps
c0102e1c:	e9 e7 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e21 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102e21:	6a 00                	push   $0x0
  pushl $85
c0102e23:	6a 55                	push   $0x55
  jmp __alltraps
c0102e25:	e9 de fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e2a <vector86>:
.globl vector86
vector86:
  pushl $0
c0102e2a:	6a 00                	push   $0x0
  pushl $86
c0102e2c:	6a 56                	push   $0x56
  jmp __alltraps
c0102e2e:	e9 d5 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e33 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102e33:	6a 00                	push   $0x0
  pushl $87
c0102e35:	6a 57                	push   $0x57
  jmp __alltraps
c0102e37:	e9 cc fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e3c <vector88>:
.globl vector88
vector88:
  pushl $0
c0102e3c:	6a 00                	push   $0x0
  pushl $88
c0102e3e:	6a 58                	push   $0x58
  jmp __alltraps
c0102e40:	e9 c3 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e45 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102e45:	6a 00                	push   $0x0
  pushl $89
c0102e47:	6a 59                	push   $0x59
  jmp __alltraps
c0102e49:	e9 ba fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e4e <vector90>:
.globl vector90
vector90:
  pushl $0
c0102e4e:	6a 00                	push   $0x0
  pushl $90
c0102e50:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102e52:	e9 b1 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e57 <vector91>:
.globl vector91
vector91:
  pushl $0
c0102e57:	6a 00                	push   $0x0
  pushl $91
c0102e59:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102e5b:	e9 a8 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e60 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102e60:	6a 00                	push   $0x0
  pushl $92
c0102e62:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102e64:	e9 9f fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e69 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102e69:	6a 00                	push   $0x0
  pushl $93
c0102e6b:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102e6d:	e9 96 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e72 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102e72:	6a 00                	push   $0x0
  pushl $94
c0102e74:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102e76:	e9 8d fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e7b <vector95>:
.globl vector95
vector95:
  pushl $0
c0102e7b:	6a 00                	push   $0x0
  pushl $95
c0102e7d:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e7f:	e9 84 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e84 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102e84:	6a 00                	push   $0x0
  pushl $96
c0102e86:	6a 60                	push   $0x60
  jmp __alltraps
c0102e88:	e9 7b fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e8d <vector97>:
.globl vector97
vector97:
  pushl $0
c0102e8d:	6a 00                	push   $0x0
  pushl $97
c0102e8f:	6a 61                	push   $0x61
  jmp __alltraps
c0102e91:	e9 72 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e96 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102e96:	6a 00                	push   $0x0
  pushl $98
c0102e98:	6a 62                	push   $0x62
  jmp __alltraps
c0102e9a:	e9 69 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102e9f <vector99>:
.globl vector99
vector99:
  pushl $0
c0102e9f:	6a 00                	push   $0x0
  pushl $99
c0102ea1:	6a 63                	push   $0x63
  jmp __alltraps
c0102ea3:	e9 60 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102ea8 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102ea8:	6a 00                	push   $0x0
  pushl $100
c0102eaa:	6a 64                	push   $0x64
  jmp __alltraps
c0102eac:	e9 57 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102eb1 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102eb1:	6a 00                	push   $0x0
  pushl $101
c0102eb3:	6a 65                	push   $0x65
  jmp __alltraps
c0102eb5:	e9 4e fc ff ff       	jmp    c0102b08 <__alltraps>

c0102eba <vector102>:
.globl vector102
vector102:
  pushl $0
c0102eba:	6a 00                	push   $0x0
  pushl $102
c0102ebc:	6a 66                	push   $0x66
  jmp __alltraps
c0102ebe:	e9 45 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102ec3 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102ec3:	6a 00                	push   $0x0
  pushl $103
c0102ec5:	6a 67                	push   $0x67
  jmp __alltraps
c0102ec7:	e9 3c fc ff ff       	jmp    c0102b08 <__alltraps>

c0102ecc <vector104>:
.globl vector104
vector104:
  pushl $0
c0102ecc:	6a 00                	push   $0x0
  pushl $104
c0102ece:	6a 68                	push   $0x68
  jmp __alltraps
c0102ed0:	e9 33 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102ed5 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102ed5:	6a 00                	push   $0x0
  pushl $105
c0102ed7:	6a 69                	push   $0x69
  jmp __alltraps
c0102ed9:	e9 2a fc ff ff       	jmp    c0102b08 <__alltraps>

c0102ede <vector106>:
.globl vector106
vector106:
  pushl $0
c0102ede:	6a 00                	push   $0x0
  pushl $106
c0102ee0:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102ee2:	e9 21 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102ee7 <vector107>:
.globl vector107
vector107:
  pushl $0
c0102ee7:	6a 00                	push   $0x0
  pushl $107
c0102ee9:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102eeb:	e9 18 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102ef0 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102ef0:	6a 00                	push   $0x0
  pushl $108
c0102ef2:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102ef4:	e9 0f fc ff ff       	jmp    c0102b08 <__alltraps>

c0102ef9 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102ef9:	6a 00                	push   $0x0
  pushl $109
c0102efb:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102efd:	e9 06 fc ff ff       	jmp    c0102b08 <__alltraps>

c0102f02 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102f02:	6a 00                	push   $0x0
  pushl $110
c0102f04:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102f06:	e9 fd fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f0b <vector111>:
.globl vector111
vector111:
  pushl $0
c0102f0b:	6a 00                	push   $0x0
  pushl $111
c0102f0d:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102f0f:	e9 f4 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f14 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102f14:	6a 00                	push   $0x0
  pushl $112
c0102f16:	6a 70                	push   $0x70
  jmp __alltraps
c0102f18:	e9 eb fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f1d <vector113>:
.globl vector113
vector113:
  pushl $0
c0102f1d:	6a 00                	push   $0x0
  pushl $113
c0102f1f:	6a 71                	push   $0x71
  jmp __alltraps
c0102f21:	e9 e2 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f26 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102f26:	6a 00                	push   $0x0
  pushl $114
c0102f28:	6a 72                	push   $0x72
  jmp __alltraps
c0102f2a:	e9 d9 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f2f <vector115>:
.globl vector115
vector115:
  pushl $0
c0102f2f:	6a 00                	push   $0x0
  pushl $115
c0102f31:	6a 73                	push   $0x73
  jmp __alltraps
c0102f33:	e9 d0 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f38 <vector116>:
.globl vector116
vector116:
  pushl $0
c0102f38:	6a 00                	push   $0x0
  pushl $116
c0102f3a:	6a 74                	push   $0x74
  jmp __alltraps
c0102f3c:	e9 c7 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f41 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102f41:	6a 00                	push   $0x0
  pushl $117
c0102f43:	6a 75                	push   $0x75
  jmp __alltraps
c0102f45:	e9 be fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f4a <vector118>:
.globl vector118
vector118:
  pushl $0
c0102f4a:	6a 00                	push   $0x0
  pushl $118
c0102f4c:	6a 76                	push   $0x76
  jmp __alltraps
c0102f4e:	e9 b5 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f53 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102f53:	6a 00                	push   $0x0
  pushl $119
c0102f55:	6a 77                	push   $0x77
  jmp __alltraps
c0102f57:	e9 ac fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f5c <vector120>:
.globl vector120
vector120:
  pushl $0
c0102f5c:	6a 00                	push   $0x0
  pushl $120
c0102f5e:	6a 78                	push   $0x78
  jmp __alltraps
c0102f60:	e9 a3 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f65 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102f65:	6a 00                	push   $0x0
  pushl $121
c0102f67:	6a 79                	push   $0x79
  jmp __alltraps
c0102f69:	e9 9a fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f6e <vector122>:
.globl vector122
vector122:
  pushl $0
c0102f6e:	6a 00                	push   $0x0
  pushl $122
c0102f70:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102f72:	e9 91 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f77 <vector123>:
.globl vector123
vector123:
  pushl $0
c0102f77:	6a 00                	push   $0x0
  pushl $123
c0102f79:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102f7b:	e9 88 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f80 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102f80:	6a 00                	push   $0x0
  pushl $124
c0102f82:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102f84:	e9 7f fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f89 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102f89:	6a 00                	push   $0x0
  pushl $125
c0102f8b:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102f8d:	e9 76 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f92 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102f92:	6a 00                	push   $0x0
  pushl $126
c0102f94:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102f96:	e9 6d fb ff ff       	jmp    c0102b08 <__alltraps>

c0102f9b <vector127>:
.globl vector127
vector127:
  pushl $0
c0102f9b:	6a 00                	push   $0x0
  pushl $127
c0102f9d:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102f9f:	e9 64 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102fa4 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102fa4:	6a 00                	push   $0x0
  pushl $128
c0102fa6:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102fab:	e9 58 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102fb0 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102fb0:	6a 00                	push   $0x0
  pushl $129
c0102fb2:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102fb7:	e9 4c fb ff ff       	jmp    c0102b08 <__alltraps>

c0102fbc <vector130>:
.globl vector130
vector130:
  pushl $0
c0102fbc:	6a 00                	push   $0x0
  pushl $130
c0102fbe:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102fc3:	e9 40 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102fc8 <vector131>:
.globl vector131
vector131:
  pushl $0
c0102fc8:	6a 00                	push   $0x0
  pushl $131
c0102fca:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102fcf:	e9 34 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102fd4 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102fd4:	6a 00                	push   $0x0
  pushl $132
c0102fd6:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102fdb:	e9 28 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102fe0 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102fe0:	6a 00                	push   $0x0
  pushl $133
c0102fe2:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102fe7:	e9 1c fb ff ff       	jmp    c0102b08 <__alltraps>

c0102fec <vector134>:
.globl vector134
vector134:
  pushl $0
c0102fec:	6a 00                	push   $0x0
  pushl $134
c0102fee:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102ff3:	e9 10 fb ff ff       	jmp    c0102b08 <__alltraps>

c0102ff8 <vector135>:
.globl vector135
vector135:
  pushl $0
c0102ff8:	6a 00                	push   $0x0
  pushl $135
c0102ffa:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102fff:	e9 04 fb ff ff       	jmp    c0102b08 <__alltraps>

c0103004 <vector136>:
.globl vector136
vector136:
  pushl $0
c0103004:	6a 00                	push   $0x0
  pushl $136
c0103006:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c010300b:	e9 f8 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103010 <vector137>:
.globl vector137
vector137:
  pushl $0
c0103010:	6a 00                	push   $0x0
  pushl $137
c0103012:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0103017:	e9 ec fa ff ff       	jmp    c0102b08 <__alltraps>

c010301c <vector138>:
.globl vector138
vector138:
  pushl $0
c010301c:	6a 00                	push   $0x0
  pushl $138
c010301e:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0103023:	e9 e0 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103028 <vector139>:
.globl vector139
vector139:
  pushl $0
c0103028:	6a 00                	push   $0x0
  pushl $139
c010302a:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c010302f:	e9 d4 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103034 <vector140>:
.globl vector140
vector140:
  pushl $0
c0103034:	6a 00                	push   $0x0
  pushl $140
c0103036:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c010303b:	e9 c8 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103040 <vector141>:
.globl vector141
vector141:
  pushl $0
c0103040:	6a 00                	push   $0x0
  pushl $141
c0103042:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0103047:	e9 bc fa ff ff       	jmp    c0102b08 <__alltraps>

c010304c <vector142>:
.globl vector142
vector142:
  pushl $0
c010304c:	6a 00                	push   $0x0
  pushl $142
c010304e:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0103053:	e9 b0 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103058 <vector143>:
.globl vector143
vector143:
  pushl $0
c0103058:	6a 00                	push   $0x0
  pushl $143
c010305a:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c010305f:	e9 a4 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103064 <vector144>:
.globl vector144
vector144:
  pushl $0
c0103064:	6a 00                	push   $0x0
  pushl $144
c0103066:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c010306b:	e9 98 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103070 <vector145>:
.globl vector145
vector145:
  pushl $0
c0103070:	6a 00                	push   $0x0
  pushl $145
c0103072:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0103077:	e9 8c fa ff ff       	jmp    c0102b08 <__alltraps>

c010307c <vector146>:
.globl vector146
vector146:
  pushl $0
c010307c:	6a 00                	push   $0x0
  pushl $146
c010307e:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0103083:	e9 80 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103088 <vector147>:
.globl vector147
vector147:
  pushl $0
c0103088:	6a 00                	push   $0x0
  pushl $147
c010308a:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c010308f:	e9 74 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103094 <vector148>:
.globl vector148
vector148:
  pushl $0
c0103094:	6a 00                	push   $0x0
  pushl $148
c0103096:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c010309b:	e9 68 fa ff ff       	jmp    c0102b08 <__alltraps>

c01030a0 <vector149>:
.globl vector149
vector149:
  pushl $0
c01030a0:	6a 00                	push   $0x0
  pushl $149
c01030a2:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c01030a7:	e9 5c fa ff ff       	jmp    c0102b08 <__alltraps>

c01030ac <vector150>:
.globl vector150
vector150:
  pushl $0
c01030ac:	6a 00                	push   $0x0
  pushl $150
c01030ae:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01030b3:	e9 50 fa ff ff       	jmp    c0102b08 <__alltraps>

c01030b8 <vector151>:
.globl vector151
vector151:
  pushl $0
c01030b8:	6a 00                	push   $0x0
  pushl $151
c01030ba:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01030bf:	e9 44 fa ff ff       	jmp    c0102b08 <__alltraps>

c01030c4 <vector152>:
.globl vector152
vector152:
  pushl $0
c01030c4:	6a 00                	push   $0x0
  pushl $152
c01030c6:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01030cb:	e9 38 fa ff ff       	jmp    c0102b08 <__alltraps>

c01030d0 <vector153>:
.globl vector153
vector153:
  pushl $0
c01030d0:	6a 00                	push   $0x0
  pushl $153
c01030d2:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01030d7:	e9 2c fa ff ff       	jmp    c0102b08 <__alltraps>

c01030dc <vector154>:
.globl vector154
vector154:
  pushl $0
c01030dc:	6a 00                	push   $0x0
  pushl $154
c01030de:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01030e3:	e9 20 fa ff ff       	jmp    c0102b08 <__alltraps>

c01030e8 <vector155>:
.globl vector155
vector155:
  pushl $0
c01030e8:	6a 00                	push   $0x0
  pushl $155
c01030ea:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01030ef:	e9 14 fa ff ff       	jmp    c0102b08 <__alltraps>

c01030f4 <vector156>:
.globl vector156
vector156:
  pushl $0
c01030f4:	6a 00                	push   $0x0
  pushl $156
c01030f6:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c01030fb:	e9 08 fa ff ff       	jmp    c0102b08 <__alltraps>

c0103100 <vector157>:
.globl vector157
vector157:
  pushl $0
c0103100:	6a 00                	push   $0x0
  pushl $157
c0103102:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0103107:	e9 fc f9 ff ff       	jmp    c0102b08 <__alltraps>

c010310c <vector158>:
.globl vector158
vector158:
  pushl $0
c010310c:	6a 00                	push   $0x0
  pushl $158
c010310e:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103113:	e9 f0 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103118 <vector159>:
.globl vector159
vector159:
  pushl $0
c0103118:	6a 00                	push   $0x0
  pushl $159
c010311a:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c010311f:	e9 e4 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103124 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103124:	6a 00                	push   $0x0
  pushl $160
c0103126:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c010312b:	e9 d8 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103130 <vector161>:
.globl vector161
vector161:
  pushl $0
c0103130:	6a 00                	push   $0x0
  pushl $161
c0103132:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0103137:	e9 cc f9 ff ff       	jmp    c0102b08 <__alltraps>

c010313c <vector162>:
.globl vector162
vector162:
  pushl $0
c010313c:	6a 00                	push   $0x0
  pushl $162
c010313e:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0103143:	e9 c0 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103148 <vector163>:
.globl vector163
vector163:
  pushl $0
c0103148:	6a 00                	push   $0x0
  pushl $163
c010314a:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c010314f:	e9 b4 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103154 <vector164>:
.globl vector164
vector164:
  pushl $0
c0103154:	6a 00                	push   $0x0
  pushl $164
c0103156:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c010315b:	e9 a8 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103160 <vector165>:
.globl vector165
vector165:
  pushl $0
c0103160:	6a 00                	push   $0x0
  pushl $165
c0103162:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c0103167:	e9 9c f9 ff ff       	jmp    c0102b08 <__alltraps>

c010316c <vector166>:
.globl vector166
vector166:
  pushl $0
c010316c:	6a 00                	push   $0x0
  pushl $166
c010316e:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0103173:	e9 90 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103178 <vector167>:
.globl vector167
vector167:
  pushl $0
c0103178:	6a 00                	push   $0x0
  pushl $167
c010317a:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c010317f:	e9 84 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103184 <vector168>:
.globl vector168
vector168:
  pushl $0
c0103184:	6a 00                	push   $0x0
  pushl $168
c0103186:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c010318b:	e9 78 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103190 <vector169>:
.globl vector169
vector169:
  pushl $0
c0103190:	6a 00                	push   $0x0
  pushl $169
c0103192:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c0103197:	e9 6c f9 ff ff       	jmp    c0102b08 <__alltraps>

c010319c <vector170>:
.globl vector170
vector170:
  pushl $0
c010319c:	6a 00                	push   $0x0
  pushl $170
c010319e:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01031a3:	e9 60 f9 ff ff       	jmp    c0102b08 <__alltraps>

c01031a8 <vector171>:
.globl vector171
vector171:
  pushl $0
c01031a8:	6a 00                	push   $0x0
  pushl $171
c01031aa:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01031af:	e9 54 f9 ff ff       	jmp    c0102b08 <__alltraps>

c01031b4 <vector172>:
.globl vector172
vector172:
  pushl $0
c01031b4:	6a 00                	push   $0x0
  pushl $172
c01031b6:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01031bb:	e9 48 f9 ff ff       	jmp    c0102b08 <__alltraps>

c01031c0 <vector173>:
.globl vector173
vector173:
  pushl $0
c01031c0:	6a 00                	push   $0x0
  pushl $173
c01031c2:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01031c7:	e9 3c f9 ff ff       	jmp    c0102b08 <__alltraps>

c01031cc <vector174>:
.globl vector174
vector174:
  pushl $0
c01031cc:	6a 00                	push   $0x0
  pushl $174
c01031ce:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01031d3:	e9 30 f9 ff ff       	jmp    c0102b08 <__alltraps>

c01031d8 <vector175>:
.globl vector175
vector175:
  pushl $0
c01031d8:	6a 00                	push   $0x0
  pushl $175
c01031da:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01031df:	e9 24 f9 ff ff       	jmp    c0102b08 <__alltraps>

c01031e4 <vector176>:
.globl vector176
vector176:
  pushl $0
c01031e4:	6a 00                	push   $0x0
  pushl $176
c01031e6:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01031eb:	e9 18 f9 ff ff       	jmp    c0102b08 <__alltraps>

c01031f0 <vector177>:
.globl vector177
vector177:
  pushl $0
c01031f0:	6a 00                	push   $0x0
  pushl $177
c01031f2:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c01031f7:	e9 0c f9 ff ff       	jmp    c0102b08 <__alltraps>

c01031fc <vector178>:
.globl vector178
vector178:
  pushl $0
c01031fc:	6a 00                	push   $0x0
  pushl $178
c01031fe:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103203:	e9 00 f9 ff ff       	jmp    c0102b08 <__alltraps>

c0103208 <vector179>:
.globl vector179
vector179:
  pushl $0
c0103208:	6a 00                	push   $0x0
  pushl $179
c010320a:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c010320f:	e9 f4 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103214 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103214:	6a 00                	push   $0x0
  pushl $180
c0103216:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c010321b:	e9 e8 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103220 <vector181>:
.globl vector181
vector181:
  pushl $0
c0103220:	6a 00                	push   $0x0
  pushl $181
c0103222:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0103227:	e9 dc f8 ff ff       	jmp    c0102b08 <__alltraps>

c010322c <vector182>:
.globl vector182
vector182:
  pushl $0
c010322c:	6a 00                	push   $0x0
  pushl $182
c010322e:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103233:	e9 d0 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103238 <vector183>:
.globl vector183
vector183:
  pushl $0
c0103238:	6a 00                	push   $0x0
  pushl $183
c010323a:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c010323f:	e9 c4 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103244 <vector184>:
.globl vector184
vector184:
  pushl $0
c0103244:	6a 00                	push   $0x0
  pushl $184
c0103246:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c010324b:	e9 b8 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103250 <vector185>:
.globl vector185
vector185:
  pushl $0
c0103250:	6a 00                	push   $0x0
  pushl $185
c0103252:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c0103257:	e9 ac f8 ff ff       	jmp    c0102b08 <__alltraps>

c010325c <vector186>:
.globl vector186
vector186:
  pushl $0
c010325c:	6a 00                	push   $0x0
  pushl $186
c010325e:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0103263:	e9 a0 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103268 <vector187>:
.globl vector187
vector187:
  pushl $0
c0103268:	6a 00                	push   $0x0
  pushl $187
c010326a:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c010326f:	e9 94 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103274 <vector188>:
.globl vector188
vector188:
  pushl $0
c0103274:	6a 00                	push   $0x0
  pushl $188
c0103276:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c010327b:	e9 88 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103280 <vector189>:
.globl vector189
vector189:
  pushl $0
c0103280:	6a 00                	push   $0x0
  pushl $189
c0103282:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c0103287:	e9 7c f8 ff ff       	jmp    c0102b08 <__alltraps>

c010328c <vector190>:
.globl vector190
vector190:
  pushl $0
c010328c:	6a 00                	push   $0x0
  pushl $190
c010328e:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c0103293:	e9 70 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103298 <vector191>:
.globl vector191
vector191:
  pushl $0
c0103298:	6a 00                	push   $0x0
  pushl $191
c010329a:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c010329f:	e9 64 f8 ff ff       	jmp    c0102b08 <__alltraps>

c01032a4 <vector192>:
.globl vector192
vector192:
  pushl $0
c01032a4:	6a 00                	push   $0x0
  pushl $192
c01032a6:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01032ab:	e9 58 f8 ff ff       	jmp    c0102b08 <__alltraps>

c01032b0 <vector193>:
.globl vector193
vector193:
  pushl $0
c01032b0:	6a 00                	push   $0x0
  pushl $193
c01032b2:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01032b7:	e9 4c f8 ff ff       	jmp    c0102b08 <__alltraps>

c01032bc <vector194>:
.globl vector194
vector194:
  pushl $0
c01032bc:	6a 00                	push   $0x0
  pushl $194
c01032be:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01032c3:	e9 40 f8 ff ff       	jmp    c0102b08 <__alltraps>

c01032c8 <vector195>:
.globl vector195
vector195:
  pushl $0
c01032c8:	6a 00                	push   $0x0
  pushl $195
c01032ca:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01032cf:	e9 34 f8 ff ff       	jmp    c0102b08 <__alltraps>

c01032d4 <vector196>:
.globl vector196
vector196:
  pushl $0
c01032d4:	6a 00                	push   $0x0
  pushl $196
c01032d6:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01032db:	e9 28 f8 ff ff       	jmp    c0102b08 <__alltraps>

c01032e0 <vector197>:
.globl vector197
vector197:
  pushl $0
c01032e0:	6a 00                	push   $0x0
  pushl $197
c01032e2:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01032e7:	e9 1c f8 ff ff       	jmp    c0102b08 <__alltraps>

c01032ec <vector198>:
.globl vector198
vector198:
  pushl $0
c01032ec:	6a 00                	push   $0x0
  pushl $198
c01032ee:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c01032f3:	e9 10 f8 ff ff       	jmp    c0102b08 <__alltraps>

c01032f8 <vector199>:
.globl vector199
vector199:
  pushl $0
c01032f8:	6a 00                	push   $0x0
  pushl $199
c01032fa:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c01032ff:	e9 04 f8 ff ff       	jmp    c0102b08 <__alltraps>

c0103304 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103304:	6a 00                	push   $0x0
  pushl $200
c0103306:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c010330b:	e9 f8 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103310 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103310:	6a 00                	push   $0x0
  pushl $201
c0103312:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c0103317:	e9 ec f7 ff ff       	jmp    c0102b08 <__alltraps>

c010331c <vector202>:
.globl vector202
vector202:
  pushl $0
c010331c:	6a 00                	push   $0x0
  pushl $202
c010331e:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103323:	e9 e0 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103328 <vector203>:
.globl vector203
vector203:
  pushl $0
c0103328:	6a 00                	push   $0x0
  pushl $203
c010332a:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c010332f:	e9 d4 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103334 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103334:	6a 00                	push   $0x0
  pushl $204
c0103336:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c010333b:	e9 c8 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103340 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103340:	6a 00                	push   $0x0
  pushl $205
c0103342:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c0103347:	e9 bc f7 ff ff       	jmp    c0102b08 <__alltraps>

c010334c <vector206>:
.globl vector206
vector206:
  pushl $0
c010334c:	6a 00                	push   $0x0
  pushl $206
c010334e:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c0103353:	e9 b0 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103358 <vector207>:
.globl vector207
vector207:
  pushl $0
c0103358:	6a 00                	push   $0x0
  pushl $207
c010335a:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c010335f:	e9 a4 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103364 <vector208>:
.globl vector208
vector208:
  pushl $0
c0103364:	6a 00                	push   $0x0
  pushl $208
c0103366:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c010336b:	e9 98 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103370 <vector209>:
.globl vector209
vector209:
  pushl $0
c0103370:	6a 00                	push   $0x0
  pushl $209
c0103372:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c0103377:	e9 8c f7 ff ff       	jmp    c0102b08 <__alltraps>

c010337c <vector210>:
.globl vector210
vector210:
  pushl $0
c010337c:	6a 00                	push   $0x0
  pushl $210
c010337e:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c0103383:	e9 80 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103388 <vector211>:
.globl vector211
vector211:
  pushl $0
c0103388:	6a 00                	push   $0x0
  pushl $211
c010338a:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c010338f:	e9 74 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103394 <vector212>:
.globl vector212
vector212:
  pushl $0
c0103394:	6a 00                	push   $0x0
  pushl $212
c0103396:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c010339b:	e9 68 f7 ff ff       	jmp    c0102b08 <__alltraps>

c01033a0 <vector213>:
.globl vector213
vector213:
  pushl $0
c01033a0:	6a 00                	push   $0x0
  pushl $213
c01033a2:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01033a7:	e9 5c f7 ff ff       	jmp    c0102b08 <__alltraps>

c01033ac <vector214>:
.globl vector214
vector214:
  pushl $0
c01033ac:	6a 00                	push   $0x0
  pushl $214
c01033ae:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01033b3:	e9 50 f7 ff ff       	jmp    c0102b08 <__alltraps>

c01033b8 <vector215>:
.globl vector215
vector215:
  pushl $0
c01033b8:	6a 00                	push   $0x0
  pushl $215
c01033ba:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01033bf:	e9 44 f7 ff ff       	jmp    c0102b08 <__alltraps>

c01033c4 <vector216>:
.globl vector216
vector216:
  pushl $0
c01033c4:	6a 00                	push   $0x0
  pushl $216
c01033c6:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01033cb:	e9 38 f7 ff ff       	jmp    c0102b08 <__alltraps>

c01033d0 <vector217>:
.globl vector217
vector217:
  pushl $0
c01033d0:	6a 00                	push   $0x0
  pushl $217
c01033d2:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01033d7:	e9 2c f7 ff ff       	jmp    c0102b08 <__alltraps>

c01033dc <vector218>:
.globl vector218
vector218:
  pushl $0
c01033dc:	6a 00                	push   $0x0
  pushl $218
c01033de:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01033e3:	e9 20 f7 ff ff       	jmp    c0102b08 <__alltraps>

c01033e8 <vector219>:
.globl vector219
vector219:
  pushl $0
c01033e8:	6a 00                	push   $0x0
  pushl $219
c01033ea:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01033ef:	e9 14 f7 ff ff       	jmp    c0102b08 <__alltraps>

c01033f4 <vector220>:
.globl vector220
vector220:
  pushl $0
c01033f4:	6a 00                	push   $0x0
  pushl $220
c01033f6:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c01033fb:	e9 08 f7 ff ff       	jmp    c0102b08 <__alltraps>

c0103400 <vector221>:
.globl vector221
vector221:
  pushl $0
c0103400:	6a 00                	push   $0x0
  pushl $221
c0103402:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c0103407:	e9 fc f6 ff ff       	jmp    c0102b08 <__alltraps>

c010340c <vector222>:
.globl vector222
vector222:
  pushl $0
c010340c:	6a 00                	push   $0x0
  pushl $222
c010340e:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103413:	e9 f0 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103418 <vector223>:
.globl vector223
vector223:
  pushl $0
c0103418:	6a 00                	push   $0x0
  pushl $223
c010341a:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c010341f:	e9 e4 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103424 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103424:	6a 00                	push   $0x0
  pushl $224
c0103426:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c010342b:	e9 d8 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103430 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103430:	6a 00                	push   $0x0
  pushl $225
c0103432:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c0103437:	e9 cc f6 ff ff       	jmp    c0102b08 <__alltraps>

c010343c <vector226>:
.globl vector226
vector226:
  pushl $0
c010343c:	6a 00                	push   $0x0
  pushl $226
c010343e:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0103443:	e9 c0 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103448 <vector227>:
.globl vector227
vector227:
  pushl $0
c0103448:	6a 00                	push   $0x0
  pushl $227
c010344a:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c010344f:	e9 b4 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103454 <vector228>:
.globl vector228
vector228:
  pushl $0
c0103454:	6a 00                	push   $0x0
  pushl $228
c0103456:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c010345b:	e9 a8 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103460 <vector229>:
.globl vector229
vector229:
  pushl $0
c0103460:	6a 00                	push   $0x0
  pushl $229
c0103462:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c0103467:	e9 9c f6 ff ff       	jmp    c0102b08 <__alltraps>

c010346c <vector230>:
.globl vector230
vector230:
  pushl $0
c010346c:	6a 00                	push   $0x0
  pushl $230
c010346e:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c0103473:	e9 90 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103478 <vector231>:
.globl vector231
vector231:
  pushl $0
c0103478:	6a 00                	push   $0x0
  pushl $231
c010347a:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c010347f:	e9 84 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103484 <vector232>:
.globl vector232
vector232:
  pushl $0
c0103484:	6a 00                	push   $0x0
  pushl $232
c0103486:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c010348b:	e9 78 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103490 <vector233>:
.globl vector233
vector233:
  pushl $0
c0103490:	6a 00                	push   $0x0
  pushl $233
c0103492:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c0103497:	e9 6c f6 ff ff       	jmp    c0102b08 <__alltraps>

c010349c <vector234>:
.globl vector234
vector234:
  pushl $0
c010349c:	6a 00                	push   $0x0
  pushl $234
c010349e:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01034a3:	e9 60 f6 ff ff       	jmp    c0102b08 <__alltraps>

c01034a8 <vector235>:
.globl vector235
vector235:
  pushl $0
c01034a8:	6a 00                	push   $0x0
  pushl $235
c01034aa:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01034af:	e9 54 f6 ff ff       	jmp    c0102b08 <__alltraps>

c01034b4 <vector236>:
.globl vector236
vector236:
  pushl $0
c01034b4:	6a 00                	push   $0x0
  pushl $236
c01034b6:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01034bb:	e9 48 f6 ff ff       	jmp    c0102b08 <__alltraps>

c01034c0 <vector237>:
.globl vector237
vector237:
  pushl $0
c01034c0:	6a 00                	push   $0x0
  pushl $237
c01034c2:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01034c7:	e9 3c f6 ff ff       	jmp    c0102b08 <__alltraps>

c01034cc <vector238>:
.globl vector238
vector238:
  pushl $0
c01034cc:	6a 00                	push   $0x0
  pushl $238
c01034ce:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01034d3:	e9 30 f6 ff ff       	jmp    c0102b08 <__alltraps>

c01034d8 <vector239>:
.globl vector239
vector239:
  pushl $0
c01034d8:	6a 00                	push   $0x0
  pushl $239
c01034da:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01034df:	e9 24 f6 ff ff       	jmp    c0102b08 <__alltraps>

c01034e4 <vector240>:
.globl vector240
vector240:
  pushl $0
c01034e4:	6a 00                	push   $0x0
  pushl $240
c01034e6:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01034eb:	e9 18 f6 ff ff       	jmp    c0102b08 <__alltraps>

c01034f0 <vector241>:
.globl vector241
vector241:
  pushl $0
c01034f0:	6a 00                	push   $0x0
  pushl $241
c01034f2:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c01034f7:	e9 0c f6 ff ff       	jmp    c0102b08 <__alltraps>

c01034fc <vector242>:
.globl vector242
vector242:
  pushl $0
c01034fc:	6a 00                	push   $0x0
  pushl $242
c01034fe:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103503:	e9 00 f6 ff ff       	jmp    c0102b08 <__alltraps>

c0103508 <vector243>:
.globl vector243
vector243:
  pushl $0
c0103508:	6a 00                	push   $0x0
  pushl $243
c010350a:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c010350f:	e9 f4 f5 ff ff       	jmp    c0102b08 <__alltraps>

c0103514 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103514:	6a 00                	push   $0x0
  pushl $244
c0103516:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c010351b:	e9 e8 f5 ff ff       	jmp    c0102b08 <__alltraps>

c0103520 <vector245>:
.globl vector245
vector245:
  pushl $0
c0103520:	6a 00                	push   $0x0
  pushl $245
c0103522:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c0103527:	e9 dc f5 ff ff       	jmp    c0102b08 <__alltraps>

c010352c <vector246>:
.globl vector246
vector246:
  pushl $0
c010352c:	6a 00                	push   $0x0
  pushl $246
c010352e:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103533:	e9 d0 f5 ff ff       	jmp    c0102b08 <__alltraps>

c0103538 <vector247>:
.globl vector247
vector247:
  pushl $0
c0103538:	6a 00                	push   $0x0
  pushl $247
c010353a:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c010353f:	e9 c4 f5 ff ff       	jmp    c0102b08 <__alltraps>

c0103544 <vector248>:
.globl vector248
vector248:
  pushl $0
c0103544:	6a 00                	push   $0x0
  pushl $248
c0103546:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c010354b:	e9 b8 f5 ff ff       	jmp    c0102b08 <__alltraps>

c0103550 <vector249>:
.globl vector249
vector249:
  pushl $0
c0103550:	6a 00                	push   $0x0
  pushl $249
c0103552:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c0103557:	e9 ac f5 ff ff       	jmp    c0102b08 <__alltraps>

c010355c <vector250>:
.globl vector250
vector250:
  pushl $0
c010355c:	6a 00                	push   $0x0
  pushl $250
c010355e:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c0103563:	e9 a0 f5 ff ff       	jmp    c0102b08 <__alltraps>

c0103568 <vector251>:
.globl vector251
vector251:
  pushl $0
c0103568:	6a 00                	push   $0x0
  pushl $251
c010356a:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c010356f:	e9 94 f5 ff ff       	jmp    c0102b08 <__alltraps>

c0103574 <vector252>:
.globl vector252
vector252:
  pushl $0
c0103574:	6a 00                	push   $0x0
  pushl $252
c0103576:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c010357b:	e9 88 f5 ff ff       	jmp    c0102b08 <__alltraps>

c0103580 <vector253>:
.globl vector253
vector253:
  pushl $0
c0103580:	6a 00                	push   $0x0
  pushl $253
c0103582:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c0103587:	e9 7c f5 ff ff       	jmp    c0102b08 <__alltraps>

c010358c <vector254>:
.globl vector254
vector254:
  pushl $0
c010358c:	6a 00                	push   $0x0
  pushl $254
c010358e:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c0103593:	e9 70 f5 ff ff       	jmp    c0102b08 <__alltraps>

c0103598 <vector255>:
.globl vector255
vector255:
  pushl $0
c0103598:	6a 00                	push   $0x0
  pushl $255
c010359a:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c010359f:	e9 64 f5 ff ff       	jmp    c0102b08 <__alltraps>

c01035a4 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01035a4:	55                   	push   %ebp
c01035a5:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01035a7:	8b 55 08             	mov    0x8(%ebp),%edx
c01035aa:	a1 90 1d 1b c0       	mov    0xc01b1d90,%eax
c01035af:	89 d1                	mov    %edx,%ecx
c01035b1:	29 c1                	sub    %eax,%ecx
c01035b3:	89 c8                	mov    %ecx,%eax
c01035b5:	c1 f8 05             	sar    $0x5,%eax
}
c01035b8:	5d                   	pop    %ebp
c01035b9:	c3                   	ret    

c01035ba <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01035ba:	55                   	push   %ebp
c01035bb:	89 e5                	mov    %esp,%ebp
c01035bd:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01035c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01035c3:	89 04 24             	mov    %eax,(%esp)
c01035c6:	e8 d9 ff ff ff       	call   c01035a4 <page2ppn>
c01035cb:	c1 e0 0c             	shl    $0xc,%eax
}
c01035ce:	c9                   	leave  
c01035cf:	c3                   	ret    

c01035d0 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c01035d0:	55                   	push   %ebp
c01035d1:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01035d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01035d6:	8b 00                	mov    (%eax),%eax
}
c01035d8:	5d                   	pop    %ebp
c01035d9:	c3                   	ret    

c01035da <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01035da:	55                   	push   %ebp
c01035db:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01035dd:	8b 45 08             	mov    0x8(%ebp),%eax
c01035e0:	8b 55 0c             	mov    0xc(%ebp),%edx
c01035e3:	89 10                	mov    %edx,(%eax)
}
c01035e5:	5d                   	pop    %ebp
c01035e6:	c3                   	ret    

c01035e7 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c01035e7:	55                   	push   %ebp
c01035e8:	89 e5                	mov    %esp,%ebp
c01035ea:	83 ec 10             	sub    $0x10,%esp
c01035ed:	c7 45 fc 7c 1d 1b c0 	movl   $0xc01b1d7c,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01035f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01035f7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01035fa:	89 50 04             	mov    %edx,0x4(%eax)
c01035fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103600:	8b 50 04             	mov    0x4(%eax),%edx
c0103603:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103606:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0103608:	c7 05 84 1d 1b c0 00 	movl   $0x0,0xc01b1d84
c010360f:	00 00 00 
}
c0103612:	c9                   	leave  
c0103613:	c3                   	ret    

c0103614 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0103614:	55                   	push   %ebp
c0103615:	89 e5                	mov    %esp,%ebp
c0103617:	53                   	push   %ebx
c0103618:	83 ec 44             	sub    $0x44,%esp
    assert(n > 0);
c010361b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010361f:	75 24                	jne    c0103645 <default_init_memmap+0x31>
c0103621:	c7 44 24 0c 90 ce 10 	movl   $0xc010ce90,0xc(%esp)
c0103628:	c0 
c0103629:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103630:	c0 
c0103631:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c0103638:	00 
c0103639:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103640:	e8 77 d7 ff ff       	call   c0100dbc <__panic>
    struct Page *p = base;
c0103645:	8b 45 08             	mov    0x8(%ebp),%eax
c0103648:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c010364b:	e9 dc 00 00 00       	jmp    c010372c <default_init_memmap+0x118>
        assert(PageReserved(p));
c0103650:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103653:	83 c0 04             	add    $0x4,%eax
c0103656:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010365d:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103660:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103663:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0103666:	0f a3 10             	bt     %edx,(%eax)
c0103669:	19 db                	sbb    %ebx,%ebx
c010366b:	89 5d e8             	mov    %ebx,-0x18(%ebp)
    return oldbit != 0;
c010366e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0103672:	0f 95 c0             	setne  %al
c0103675:	0f b6 c0             	movzbl %al,%eax
c0103678:	85 c0                	test   %eax,%eax
c010367a:	75 24                	jne    c01036a0 <default_init_memmap+0x8c>
c010367c:	c7 44 24 0c c1 ce 10 	movl   $0xc010cec1,0xc(%esp)
c0103683:	c0 
c0103684:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c010368b:	c0 
c010368c:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c0103693:	00 
c0103694:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c010369b:	e8 1c d7 ff ff       	call   c0100dbc <__panic>
        p->flags = 0;
c01036a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036a3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        SetPageProperty(p);
c01036aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036ad:	83 c0 04             	add    $0x4,%eax
c01036b0:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c01036b7:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01036ba:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01036bd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01036c0:	0f ab 10             	bts    %edx,(%eax)
        p->property = 0;
c01036c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036c6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        set_page_ref(p, 0);
c01036cd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01036d4:	00 
c01036d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036d8:	89 04 24             	mov    %eax,(%esp)
c01036db:	e8 fa fe ff ff       	call   c01035da <set_page_ref>
        list_add_before(&free_list, &(p->page_link));
c01036e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036e3:	83 c0 0c             	add    $0xc,%eax
c01036e6:	c7 45 dc 7c 1d 1b c0 	movl   $0xc01b1d7c,-0x24(%ebp)
c01036ed:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01036f0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01036f3:	8b 00                	mov    (%eax),%eax
c01036f5:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01036f8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01036fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01036fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103701:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103704:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103707:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010370a:	89 10                	mov    %edx,(%eax)
c010370c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010370f:	8b 10                	mov    (%eax),%edx
c0103711:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103714:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103717:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010371a:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010371d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103720:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103723:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0103726:	89 10                	mov    %edx,(%eax)

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0103728:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c010372c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010372f:	c1 e0 05             	shl    $0x5,%eax
c0103732:	03 45 08             	add    0x8(%ebp),%eax
c0103735:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103738:	0f 85 12 ff ff ff    	jne    c0103650 <default_init_memmap+0x3c>
        p->property = 0;
        set_page_ref(p, 0);
        list_add_before(&free_list, &(p->page_link));
    }

    nr_free += n;
c010373e:	a1 84 1d 1b c0       	mov    0xc01b1d84,%eax
c0103743:	03 45 0c             	add    0xc(%ebp),%eax
c0103746:	a3 84 1d 1b c0       	mov    %eax,0xc01b1d84
    //first block
    base->property = n;
c010374b:	8b 45 08             	mov    0x8(%ebp),%eax
c010374e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103751:	89 50 08             	mov    %edx,0x8(%eax)
}
c0103754:	83 c4 44             	add    $0x44,%esp
c0103757:	5b                   	pop    %ebx
c0103758:	5d                   	pop    %ebp
c0103759:	c3                   	ret    

c010375a <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c010375a:	55                   	push   %ebp
c010375b:	89 e5                	mov    %esp,%ebp
c010375d:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c0103760:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0103764:	75 24                	jne    c010378a <default_alloc_pages+0x30>
c0103766:	c7 44 24 0c 90 ce 10 	movl   $0xc010ce90,0xc(%esp)
c010376d:	c0 
c010376e:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103775:	c0 
c0103776:	c7 44 24 04 58 00 00 	movl   $0x58,0x4(%esp)
c010377d:	00 
c010377e:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103785:	e8 32 d6 ff ff       	call   c0100dbc <__panic>
    if (n > nr_free) {
c010378a:	a1 84 1d 1b c0       	mov    0xc01b1d84,%eax
c010378f:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103792:	73 0a                	jae    c010379e <default_alloc_pages+0x44>
        return NULL;
c0103794:	b8 00 00 00 00       	mov    $0x0,%eax
c0103799:	e9 37 01 00 00       	jmp    c01038d5 <default_alloc_pages+0x17b>
    }
    list_entry_t *le, *len;
    le = &free_list;
c010379e:	c7 45 f4 7c 1d 1b c0 	movl   $0xc01b1d7c,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
c01037a5:	e9 0a 01 00 00       	jmp    c01038b4 <default_alloc_pages+0x15a>
      struct Page *p = le2page(le, page_link);
c01037aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037ad:	83 e8 0c             	sub    $0xc,%eax
c01037b0:	89 45 ec             	mov    %eax,-0x14(%ebp)
      if(p->property >= n){
c01037b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037b6:	8b 40 08             	mov    0x8(%eax),%eax
c01037b9:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037bc:	0f 82 f2 00 00 00    	jb     c01038b4 <default_alloc_pages+0x15a>
        int i;
        for(i=0;i<n;i++){
c01037c2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01037c9:	eb 7c                	jmp    c0103847 <default_alloc_pages+0xed>
c01037cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037ce:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01037d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01037d4:	8b 40 04             	mov    0x4(%eax),%eax
          len = list_next(le);
c01037d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
          struct Page *pp = le2page(le, page_link);
c01037da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037dd:	83 e8 0c             	sub    $0xc,%eax
c01037e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          SetPageReserved(pp);
c01037e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01037e6:	83 c0 04             	add    $0x4,%eax
c01037e9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01037f0:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01037f3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01037f6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01037f9:	0f ab 10             	bts    %edx,(%eax)
          ClearPageProperty(pp);
c01037fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01037ff:	83 c0 04             	add    $0x4,%eax
c0103802:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0103809:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c010380c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010380f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103812:	0f b3 10             	btr    %edx,(%eax)
c0103815:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103818:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010381b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010381e:	8b 40 04             	mov    0x4(%eax),%eax
c0103821:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103824:	8b 12                	mov    (%edx),%edx
c0103826:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0103829:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010382c:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010382f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0103832:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103835:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103838:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010383b:	89 10                	mov    %edx,(%eax)
          list_del(le);
          le = len;
c010383d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103840:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
      struct Page *p = le2page(le, page_link);
      if(p->property >= n){
        int i;
        for(i=0;i<n;i++){
c0103843:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0103847:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010384a:	3b 45 08             	cmp    0x8(%ebp),%eax
c010384d:	0f 82 78 ff ff ff    	jb     c01037cb <default_alloc_pages+0x71>
          SetPageReserved(pp);
          ClearPageProperty(pp);
          list_del(le);
          le = len;
        }
        if(p->property>n){
c0103853:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103856:	8b 40 08             	mov    0x8(%eax),%eax
c0103859:	3b 45 08             	cmp    0x8(%ebp),%eax
c010385c:	76 12                	jbe    c0103870 <default_alloc_pages+0x116>
          (le2page(le,page_link))->property = p->property - n;
c010385e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103861:	8d 50 f4             	lea    -0xc(%eax),%edx
c0103864:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103867:	8b 40 08             	mov    0x8(%eax),%eax
c010386a:	2b 45 08             	sub    0x8(%ebp),%eax
c010386d:	89 42 08             	mov    %eax,0x8(%edx)
        }
        ClearPageProperty(p);
c0103870:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103873:	83 c0 04             	add    $0x4,%eax
c0103876:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c010387d:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0103880:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103883:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103886:	0f b3 10             	btr    %edx,(%eax)
        SetPageReserved(p);
c0103889:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010388c:	83 c0 04             	add    $0x4,%eax
c010388f:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
c0103896:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103899:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010389c:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010389f:	0f ab 10             	bts    %edx,(%eax)
        nr_free -= n;
c01038a2:	a1 84 1d 1b c0       	mov    0xc01b1d84,%eax
c01038a7:	2b 45 08             	sub    0x8(%ebp),%eax
c01038aa:	a3 84 1d 1b c0       	mov    %eax,0xc01b1d84
        return p;
c01038af:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01038b2:	eb 21                	jmp    c01038d5 <default_alloc_pages+0x17b>
c01038b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038b7:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01038ba:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01038bd:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    list_entry_t *le, *len;
    le = &free_list;

    while((le=list_next(le)) != &free_list) {
c01038c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01038c3:	81 7d f4 7c 1d 1b c0 	cmpl   $0xc01b1d7c,-0xc(%ebp)
c01038ca:	0f 85 da fe ff ff    	jne    c01037aa <default_alloc_pages+0x50>
        SetPageReserved(p);
        nr_free -= n;
        return p;
      }
    }
    return NULL;
c01038d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01038d5:	c9                   	leave  
c01038d6:	c3                   	ret    

c01038d7 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c01038d7:	55                   	push   %ebp
c01038d8:	89 e5                	mov    %esp,%ebp
c01038da:	53                   	push   %ebx
c01038db:	83 ec 64             	sub    $0x64,%esp
    assert(n > 0);
c01038de:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01038e2:	75 24                	jne    c0103908 <default_free_pages+0x31>
c01038e4:	c7 44 24 0c 90 ce 10 	movl   $0xc010ce90,0xc(%esp)
c01038eb:	c0 
c01038ec:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c01038f3:	c0 
c01038f4:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c01038fb:	00 
c01038fc:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103903:	e8 b4 d4 ff ff       	call   c0100dbc <__panic>
    assert(PageReserved(base));
c0103908:	8b 45 08             	mov    0x8(%ebp),%eax
c010390b:	83 c0 04             	add    $0x4,%eax
c010390e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0103915:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103918:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010391b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010391e:	0f a3 10             	bt     %edx,(%eax)
c0103921:	19 db                	sbb    %ebx,%ebx
c0103923:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
    return oldbit != 0;
c0103926:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010392a:	0f 95 c0             	setne  %al
c010392d:	0f b6 c0             	movzbl %al,%eax
c0103930:	85 c0                	test   %eax,%eax
c0103932:	75 24                	jne    c0103958 <default_free_pages+0x81>
c0103934:	c7 44 24 0c d1 ce 10 	movl   $0xc010ced1,0xc(%esp)
c010393b:	c0 
c010393c:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103943:	c0 
c0103944:	c7 44 24 04 7a 00 00 	movl   $0x7a,0x4(%esp)
c010394b:	00 
c010394c:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103953:	e8 64 d4 ff ff       	call   c0100dbc <__panic>

    list_entry_t *le = &free_list;
c0103958:	c7 45 f4 7c 1d 1b c0 	movl   $0xc01b1d7c,-0xc(%ebp)
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c010395f:	eb 11                	jmp    c0103972 <default_free_pages+0x9b>
      p = le2page(le, page_link);
c0103961:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103964:	83 e8 0c             	sub    $0xc,%eax
c0103967:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if(p>base){
c010396a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010396d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103970:	77 1a                	ja     c010398c <default_free_pages+0xb5>
        break;
c0103972:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103975:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0103978:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010397b:	8b 40 04             	mov    0x4(%eax),%eax
    assert(n > 0);
    assert(PageReserved(base));

    list_entry_t *le = &free_list;
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c010397e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103981:	81 7d f4 7c 1d 1b c0 	cmpl   $0xc01b1d7c,-0xc(%ebp)
c0103988:	75 d7                	jne    c0103961 <default_free_pages+0x8a>
c010398a:	eb 01                	jmp    c010398d <default_free_pages+0xb6>
      p = le2page(le, page_link);
      if(p>base){
        break;
c010398c:	90                   	nop
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c010398d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103990:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103993:	eb 4b                	jmp    c01039e0 <default_free_pages+0x109>
      list_add_before(le, &(p->page_link));
c0103995:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103998:	8d 50 0c             	lea    0xc(%eax),%edx
c010399b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010399e:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01039a1:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01039a4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01039a7:	8b 00                	mov    (%eax),%eax
c01039a9:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01039ac:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01039af:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01039b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01039b5:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01039b8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01039bb:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01039be:	89 10                	mov    %edx,(%eax)
c01039c0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01039c3:	8b 10                	mov    (%eax),%edx
c01039c5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01039c8:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01039cb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01039ce:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01039d1:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01039d4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01039d7:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01039da:	89 10                	mov    %edx,(%eax)
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c01039dc:	83 45 f0 20          	addl   $0x20,-0x10(%ebp)
c01039e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01039e3:	c1 e0 05             	shl    $0x5,%eax
c01039e6:	03 45 08             	add    0x8(%ebp),%eax
c01039e9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01039ec:	77 a7                	ja     c0103995 <default_free_pages+0xbe>
      list_add_before(le, &(p->page_link));
    }
    base->flags = 0;
c01039ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01039f1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    set_page_ref(base, 0);
c01039f8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01039ff:	00 
c0103a00:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a03:	89 04 24             	mov    %eax,(%esp)
c0103a06:	e8 cf fb ff ff       	call   c01035da <set_page_ref>
    ClearPageProperty(base);
c0103a0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a0e:	83 c0 04             	add    $0x4,%eax
c0103a11:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0103a18:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a1b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103a1e:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103a21:	0f b3 10             	btr    %edx,(%eax)
    SetPageProperty(base);
c0103a24:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a27:	83 c0 04             	add    $0x4,%eax
c0103a2a:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0103a31:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a34:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103a37:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103a3a:	0f ab 10             	bts    %edx,(%eax)
    base->property = n;
c0103a3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a40:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a43:	89 50 08             	mov    %edx,0x8(%eax)
    
    p = le2page(le,page_link) ;
c0103a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a49:	83 e8 0c             	sub    $0xc,%eax
c0103a4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( base+n == p ){
c0103a4f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a52:	c1 e0 05             	shl    $0x5,%eax
c0103a55:	03 45 08             	add    0x8(%ebp),%eax
c0103a58:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103a5b:	75 1e                	jne    c0103a7b <default_free_pages+0x1a4>
      base->property += p->property;
c0103a5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a60:	8b 50 08             	mov    0x8(%eax),%edx
c0103a63:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a66:	8b 40 08             	mov    0x8(%eax),%eax
c0103a69:	01 c2                	add    %eax,%edx
c0103a6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a6e:	89 50 08             	mov    %edx,0x8(%eax)
      p->property = 0;
c0103a71:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a74:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    le = list_prev(&(base->page_link));
c0103a7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a7e:	83 c0 0c             	add    $0xc,%eax
c0103a81:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103a84:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103a87:	8b 00                	mov    (%eax),%eax
c0103a89:	89 45 f4             	mov    %eax,-0xc(%ebp)
    p = le2page(le, page_link);
c0103a8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a8f:	83 e8 0c             	sub    $0xc,%eax
c0103a92:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(le!=&free_list && p==base-1){
c0103a95:	81 7d f4 7c 1d 1b c0 	cmpl   $0xc01b1d7c,-0xc(%ebp)
c0103a9c:	74 57                	je     c0103af5 <default_free_pages+0x21e>
c0103a9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aa1:	83 e8 20             	sub    $0x20,%eax
c0103aa4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103aa7:	75 4c                	jne    c0103af5 <default_free_pages+0x21e>
      while(le!=&free_list){
c0103aa9:	eb 41                	jmp    c0103aec <default_free_pages+0x215>
        if(p->property){
c0103aab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103aae:	8b 40 08             	mov    0x8(%eax),%eax
c0103ab1:	85 c0                	test   %eax,%eax
c0103ab3:	74 20                	je     c0103ad5 <default_free_pages+0x1fe>
          p->property += base->property;
c0103ab5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ab8:	8b 50 08             	mov    0x8(%eax),%edx
c0103abb:	8b 45 08             	mov    0x8(%ebp),%eax
c0103abe:	8b 40 08             	mov    0x8(%eax),%eax
c0103ac1:	01 c2                	add    %eax,%edx
c0103ac3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ac6:	89 50 08             	mov    %edx,0x8(%eax)
          base->property = 0;
c0103ac9:	8b 45 08             	mov    0x8(%ebp),%eax
c0103acc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
          break;
c0103ad3:	eb 20                	jmp    c0103af5 <default_free_pages+0x21e>
c0103ad5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ad8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0103adb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103ade:	8b 00                	mov    (%eax),%eax
        }
        le = list_prev(le);
c0103ae0:	89 45 f4             	mov    %eax,-0xc(%ebp)
        p = le2page(le,page_link);
c0103ae3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ae6:	83 e8 0c             	sub    $0xc,%eax
c0103ae9:	89 45 f0             	mov    %eax,-0x10(%ebp)
      p->property = 0;
    }
    le = list_prev(&(base->page_link));
    p = le2page(le, page_link);
    if(le!=&free_list && p==base-1){
      while(le!=&free_list){
c0103aec:	81 7d f4 7c 1d 1b c0 	cmpl   $0xc01b1d7c,-0xc(%ebp)
c0103af3:	75 b6                	jne    c0103aab <default_free_pages+0x1d4>
        }
        le = list_prev(le);
        p = le2page(le,page_link);
      }
    }
    nr_free += n;
c0103af5:	a1 84 1d 1b c0       	mov    0xc01b1d84,%eax
c0103afa:	03 45 0c             	add    0xc(%ebp),%eax
c0103afd:	a3 84 1d 1b c0       	mov    %eax,0xc01b1d84
    return ;
}
c0103b02:	83 c4 64             	add    $0x64,%esp
c0103b05:	5b                   	pop    %ebx
c0103b06:	5d                   	pop    %ebp
c0103b07:	c3                   	ret    

c0103b08 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103b08:	55                   	push   %ebp
c0103b09:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103b0b:	a1 84 1d 1b c0       	mov    0xc01b1d84,%eax
}
c0103b10:	5d                   	pop    %ebp
c0103b11:	c3                   	ret    

c0103b12 <basic_check>:

static void
basic_check(void) {
c0103b12:	55                   	push   %ebp
c0103b13:	89 e5                	mov    %esp,%ebp
c0103b15:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103b18:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b22:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b28:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103b2b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b32:	e8 0e 16 00 00       	call   c0105145 <alloc_pages>
c0103b37:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103b3a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103b3e:	75 24                	jne    c0103b64 <basic_check+0x52>
c0103b40:	c7 44 24 0c e4 ce 10 	movl   $0xc010cee4,0xc(%esp)
c0103b47:	c0 
c0103b48:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103b4f:	c0 
c0103b50:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c0103b57:	00 
c0103b58:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103b5f:	e8 58 d2 ff ff       	call   c0100dbc <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103b64:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b6b:	e8 d5 15 00 00       	call   c0105145 <alloc_pages>
c0103b70:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b73:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103b77:	75 24                	jne    c0103b9d <basic_check+0x8b>
c0103b79:	c7 44 24 0c 00 cf 10 	movl   $0xc010cf00,0xc(%esp)
c0103b80:	c0 
c0103b81:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103b88:	c0 
c0103b89:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
c0103b90:	00 
c0103b91:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103b98:	e8 1f d2 ff ff       	call   c0100dbc <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103b9d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ba4:	e8 9c 15 00 00       	call   c0105145 <alloc_pages>
c0103ba9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103bac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103bb0:	75 24                	jne    c0103bd6 <basic_check+0xc4>
c0103bb2:	c7 44 24 0c 1c cf 10 	movl   $0xc010cf1c,0xc(%esp)
c0103bb9:	c0 
c0103bba:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103bc1:	c0 
c0103bc2:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
c0103bc9:	00 
c0103bca:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103bd1:	e8 e6 d1 ff ff       	call   c0100dbc <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103bd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bd9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103bdc:	74 10                	je     c0103bee <basic_check+0xdc>
c0103bde:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103be1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103be4:	74 08                	je     c0103bee <basic_check+0xdc>
c0103be6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103be9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103bec:	75 24                	jne    c0103c12 <basic_check+0x100>
c0103bee:	c7 44 24 0c 38 cf 10 	movl   $0xc010cf38,0xc(%esp)
c0103bf5:	c0 
c0103bf6:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103bfd:	c0 
c0103bfe:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0103c05:	00 
c0103c06:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103c0d:	e8 aa d1 ff ff       	call   c0100dbc <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103c12:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c15:	89 04 24             	mov    %eax,(%esp)
c0103c18:	e8 b3 f9 ff ff       	call   c01035d0 <page_ref>
c0103c1d:	85 c0                	test   %eax,%eax
c0103c1f:	75 1e                	jne    c0103c3f <basic_check+0x12d>
c0103c21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c24:	89 04 24             	mov    %eax,(%esp)
c0103c27:	e8 a4 f9 ff ff       	call   c01035d0 <page_ref>
c0103c2c:	85 c0                	test   %eax,%eax
c0103c2e:	75 0f                	jne    c0103c3f <basic_check+0x12d>
c0103c30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c33:	89 04 24             	mov    %eax,(%esp)
c0103c36:	e8 95 f9 ff ff       	call   c01035d0 <page_ref>
c0103c3b:	85 c0                	test   %eax,%eax
c0103c3d:	74 24                	je     c0103c63 <basic_check+0x151>
c0103c3f:	c7 44 24 0c 5c cf 10 	movl   $0xc010cf5c,0xc(%esp)
c0103c46:	c0 
c0103c47:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103c4e:	c0 
c0103c4f:	c7 44 24 04 b2 00 00 	movl   $0xb2,0x4(%esp)
c0103c56:	00 
c0103c57:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103c5e:	e8 59 d1 ff ff       	call   c0100dbc <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103c63:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c66:	89 04 24             	mov    %eax,(%esp)
c0103c69:	e8 4c f9 ff ff       	call   c01035ba <page2pa>
c0103c6e:	8b 15 80 fc 1a c0    	mov    0xc01afc80,%edx
c0103c74:	c1 e2 0c             	shl    $0xc,%edx
c0103c77:	39 d0                	cmp    %edx,%eax
c0103c79:	72 24                	jb     c0103c9f <basic_check+0x18d>
c0103c7b:	c7 44 24 0c 98 cf 10 	movl   $0xc010cf98,0xc(%esp)
c0103c82:	c0 
c0103c83:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103c8a:	c0 
c0103c8b:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
c0103c92:	00 
c0103c93:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103c9a:	e8 1d d1 ff ff       	call   c0100dbc <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103c9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ca2:	89 04 24             	mov    %eax,(%esp)
c0103ca5:	e8 10 f9 ff ff       	call   c01035ba <page2pa>
c0103caa:	8b 15 80 fc 1a c0    	mov    0xc01afc80,%edx
c0103cb0:	c1 e2 0c             	shl    $0xc,%edx
c0103cb3:	39 d0                	cmp    %edx,%eax
c0103cb5:	72 24                	jb     c0103cdb <basic_check+0x1c9>
c0103cb7:	c7 44 24 0c b5 cf 10 	movl   $0xc010cfb5,0xc(%esp)
c0103cbe:	c0 
c0103cbf:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103cc6:	c0 
c0103cc7:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
c0103cce:	00 
c0103ccf:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103cd6:	e8 e1 d0 ff ff       	call   c0100dbc <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103cdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cde:	89 04 24             	mov    %eax,(%esp)
c0103ce1:	e8 d4 f8 ff ff       	call   c01035ba <page2pa>
c0103ce6:	8b 15 80 fc 1a c0    	mov    0xc01afc80,%edx
c0103cec:	c1 e2 0c             	shl    $0xc,%edx
c0103cef:	39 d0                	cmp    %edx,%eax
c0103cf1:	72 24                	jb     c0103d17 <basic_check+0x205>
c0103cf3:	c7 44 24 0c d2 cf 10 	movl   $0xc010cfd2,0xc(%esp)
c0103cfa:	c0 
c0103cfb:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103d02:	c0 
c0103d03:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c0103d0a:	00 
c0103d0b:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103d12:	e8 a5 d0 ff ff       	call   c0100dbc <__panic>

    list_entry_t free_list_store = free_list;
c0103d17:	a1 7c 1d 1b c0       	mov    0xc01b1d7c,%eax
c0103d1c:	8b 15 80 1d 1b c0    	mov    0xc01b1d80,%edx
c0103d22:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103d25:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103d28:	c7 45 e0 7c 1d 1b c0 	movl   $0xc01b1d7c,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103d2f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d32:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103d35:	89 50 04             	mov    %edx,0x4(%eax)
c0103d38:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d3b:	8b 50 04             	mov    0x4(%eax),%edx
c0103d3e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d41:	89 10                	mov    %edx,(%eax)
c0103d43:	c7 45 dc 7c 1d 1b c0 	movl   $0xc01b1d7c,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103d4a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103d4d:	8b 40 04             	mov    0x4(%eax),%eax
c0103d50:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103d53:	0f 94 c0             	sete   %al
c0103d56:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103d59:	85 c0                	test   %eax,%eax
c0103d5b:	75 24                	jne    c0103d81 <basic_check+0x26f>
c0103d5d:	c7 44 24 0c ef cf 10 	movl   $0xc010cfef,0xc(%esp)
c0103d64:	c0 
c0103d65:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103d6c:	c0 
c0103d6d:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
c0103d74:	00 
c0103d75:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103d7c:	e8 3b d0 ff ff       	call   c0100dbc <__panic>

    unsigned int nr_free_store = nr_free;
c0103d81:	a1 84 1d 1b c0       	mov    0xc01b1d84,%eax
c0103d86:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103d89:	c7 05 84 1d 1b c0 00 	movl   $0x0,0xc01b1d84
c0103d90:	00 00 00 

    assert(alloc_page() == NULL);
c0103d93:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103d9a:	e8 a6 13 00 00       	call   c0105145 <alloc_pages>
c0103d9f:	85 c0                	test   %eax,%eax
c0103da1:	74 24                	je     c0103dc7 <basic_check+0x2b5>
c0103da3:	c7 44 24 0c 06 d0 10 	movl   $0xc010d006,0xc(%esp)
c0103daa:	c0 
c0103dab:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103db2:	c0 
c0103db3:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
c0103dba:	00 
c0103dbb:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103dc2:	e8 f5 cf ff ff       	call   c0100dbc <__panic>

    free_page(p0);
c0103dc7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103dce:	00 
c0103dcf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103dd2:	89 04 24             	mov    %eax,(%esp)
c0103dd5:	e8 d6 13 00 00       	call   c01051b0 <free_pages>
    free_page(p1);
c0103dda:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103de1:	00 
c0103de2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103de5:	89 04 24             	mov    %eax,(%esp)
c0103de8:	e8 c3 13 00 00       	call   c01051b0 <free_pages>
    free_page(p2);
c0103ded:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103df4:	00 
c0103df5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103df8:	89 04 24             	mov    %eax,(%esp)
c0103dfb:	e8 b0 13 00 00       	call   c01051b0 <free_pages>
    assert(nr_free == 3);
c0103e00:	a1 84 1d 1b c0       	mov    0xc01b1d84,%eax
c0103e05:	83 f8 03             	cmp    $0x3,%eax
c0103e08:	74 24                	je     c0103e2e <basic_check+0x31c>
c0103e0a:	c7 44 24 0c 1b d0 10 	movl   $0xc010d01b,0xc(%esp)
c0103e11:	c0 
c0103e12:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103e19:	c0 
c0103e1a:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
c0103e21:	00 
c0103e22:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103e29:	e8 8e cf ff ff       	call   c0100dbc <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103e2e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e35:	e8 0b 13 00 00       	call   c0105145 <alloc_pages>
c0103e3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103e3d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103e41:	75 24                	jne    c0103e67 <basic_check+0x355>
c0103e43:	c7 44 24 0c e4 ce 10 	movl   $0xc010cee4,0xc(%esp)
c0103e4a:	c0 
c0103e4b:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103e52:	c0 
c0103e53:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0103e5a:	00 
c0103e5b:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103e62:	e8 55 cf ff ff       	call   c0100dbc <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103e67:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e6e:	e8 d2 12 00 00       	call   c0105145 <alloc_pages>
c0103e73:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103e76:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103e7a:	75 24                	jne    c0103ea0 <basic_check+0x38e>
c0103e7c:	c7 44 24 0c 00 cf 10 	movl   $0xc010cf00,0xc(%esp)
c0103e83:	c0 
c0103e84:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103e8b:	c0 
c0103e8c:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
c0103e93:	00 
c0103e94:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103e9b:	e8 1c cf ff ff       	call   c0100dbc <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103ea0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ea7:	e8 99 12 00 00       	call   c0105145 <alloc_pages>
c0103eac:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103eaf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103eb3:	75 24                	jne    c0103ed9 <basic_check+0x3c7>
c0103eb5:	c7 44 24 0c 1c cf 10 	movl   $0xc010cf1c,0xc(%esp)
c0103ebc:	c0 
c0103ebd:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103ec4:	c0 
c0103ec5:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c0103ecc:	00 
c0103ecd:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103ed4:	e8 e3 ce ff ff       	call   c0100dbc <__panic>

    assert(alloc_page() == NULL);
c0103ed9:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ee0:	e8 60 12 00 00       	call   c0105145 <alloc_pages>
c0103ee5:	85 c0                	test   %eax,%eax
c0103ee7:	74 24                	je     c0103f0d <basic_check+0x3fb>
c0103ee9:	c7 44 24 0c 06 d0 10 	movl   $0xc010d006,0xc(%esp)
c0103ef0:	c0 
c0103ef1:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103ef8:	c0 
c0103ef9:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0103f00:	00 
c0103f01:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103f08:	e8 af ce ff ff       	call   c0100dbc <__panic>

    free_page(p0);
c0103f0d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f14:	00 
c0103f15:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103f18:	89 04 24             	mov    %eax,(%esp)
c0103f1b:	e8 90 12 00 00       	call   c01051b0 <free_pages>
c0103f20:	c7 45 d8 7c 1d 1b c0 	movl   $0xc01b1d7c,-0x28(%ebp)
c0103f27:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103f2a:	8b 40 04             	mov    0x4(%eax),%eax
c0103f2d:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0103f30:	0f 94 c0             	sete   %al
c0103f33:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0103f36:	85 c0                	test   %eax,%eax
c0103f38:	74 24                	je     c0103f5e <basic_check+0x44c>
c0103f3a:	c7 44 24 0c 28 d0 10 	movl   $0xc010d028,0xc(%esp)
c0103f41:	c0 
c0103f42:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103f49:	c0 
c0103f4a:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c0103f51:	00 
c0103f52:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103f59:	e8 5e ce ff ff       	call   c0100dbc <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0103f5e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f65:	e8 db 11 00 00       	call   c0105145 <alloc_pages>
c0103f6a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103f6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103f70:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103f73:	74 24                	je     c0103f99 <basic_check+0x487>
c0103f75:	c7 44 24 0c 40 d0 10 	movl   $0xc010d040,0xc(%esp)
c0103f7c:	c0 
c0103f7d:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103f84:	c0 
c0103f85:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0103f8c:	00 
c0103f8d:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103f94:	e8 23 ce ff ff       	call   c0100dbc <__panic>
    assert(alloc_page() == NULL);
c0103f99:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103fa0:	e8 a0 11 00 00       	call   c0105145 <alloc_pages>
c0103fa5:	85 c0                	test   %eax,%eax
c0103fa7:	74 24                	je     c0103fcd <basic_check+0x4bb>
c0103fa9:	c7 44 24 0c 06 d0 10 	movl   $0xc010d006,0xc(%esp)
c0103fb0:	c0 
c0103fb1:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103fb8:	c0 
c0103fb9:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c0103fc0:	00 
c0103fc1:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103fc8:	e8 ef cd ff ff       	call   c0100dbc <__panic>

    assert(nr_free == 0);
c0103fcd:	a1 84 1d 1b c0       	mov    0xc01b1d84,%eax
c0103fd2:	85 c0                	test   %eax,%eax
c0103fd4:	74 24                	je     c0103ffa <basic_check+0x4e8>
c0103fd6:	c7 44 24 0c 59 d0 10 	movl   $0xc010d059,0xc(%esp)
c0103fdd:	c0 
c0103fde:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0103fe5:	c0 
c0103fe6:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c0103fed:	00 
c0103fee:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0103ff5:	e8 c2 cd ff ff       	call   c0100dbc <__panic>
    free_list = free_list_store;
c0103ffa:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103ffd:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104000:	a3 7c 1d 1b c0       	mov    %eax,0xc01b1d7c
c0104005:	89 15 80 1d 1b c0    	mov    %edx,0xc01b1d80
    nr_free = nr_free_store;
c010400b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010400e:	a3 84 1d 1b c0       	mov    %eax,0xc01b1d84

    free_page(p);
c0104013:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010401a:	00 
c010401b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010401e:	89 04 24             	mov    %eax,(%esp)
c0104021:	e8 8a 11 00 00       	call   c01051b0 <free_pages>
    free_page(p1);
c0104026:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010402d:	00 
c010402e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104031:	89 04 24             	mov    %eax,(%esp)
c0104034:	e8 77 11 00 00       	call   c01051b0 <free_pages>
    free_page(p2);
c0104039:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104040:	00 
c0104041:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104044:	89 04 24             	mov    %eax,(%esp)
c0104047:	e8 64 11 00 00       	call   c01051b0 <free_pages>
}
c010404c:	c9                   	leave  
c010404d:	c3                   	ret    

c010404e <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c010404e:	55                   	push   %ebp
c010404f:	89 e5                	mov    %esp,%ebp
c0104051:	53                   	push   %ebx
c0104052:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0104058:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010405f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0104066:	c7 45 ec 7c 1d 1b c0 	movl   $0xc01b1d7c,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010406d:	eb 6b                	jmp    c01040da <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c010406f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104072:	83 e8 0c             	sub    $0xc,%eax
c0104075:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0104078:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010407b:	83 c0 04             	add    $0x4,%eax
c010407e:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0104085:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104088:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010408b:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010408e:	0f a3 10             	bt     %edx,(%eax)
c0104091:	19 db                	sbb    %ebx,%ebx
c0104093:	89 5d c8             	mov    %ebx,-0x38(%ebp)
    return oldbit != 0;
c0104096:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c010409a:	0f 95 c0             	setne  %al
c010409d:	0f b6 c0             	movzbl %al,%eax
c01040a0:	85 c0                	test   %eax,%eax
c01040a2:	75 24                	jne    c01040c8 <default_check+0x7a>
c01040a4:	c7 44 24 0c 66 d0 10 	movl   $0xc010d066,0xc(%esp)
c01040ab:	c0 
c01040ac:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c01040b3:	c0 
c01040b4:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c01040bb:	00 
c01040bc:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c01040c3:	e8 f4 cc ff ff       	call   c0100dbc <__panic>
        count ++, total += p->property;
c01040c8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01040cc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01040cf:	8b 50 08             	mov    0x8(%eax),%edx
c01040d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01040d5:	01 d0                	add    %edx,%eax
c01040d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01040da:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01040dd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01040e0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01040e3:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01040e6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01040e9:	81 7d ec 7c 1d 1b c0 	cmpl   $0xc01b1d7c,-0x14(%ebp)
c01040f0:	0f 85 79 ff ff ff    	jne    c010406f <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c01040f6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01040f9:	e8 e4 10 00 00       	call   c01051e2 <nr_free_pages>
c01040fe:	39 c3                	cmp    %eax,%ebx
c0104100:	74 24                	je     c0104126 <default_check+0xd8>
c0104102:	c7 44 24 0c 76 d0 10 	movl   $0xc010d076,0xc(%esp)
c0104109:	c0 
c010410a:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0104111:	c0 
c0104112:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
c0104119:	00 
c010411a:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0104121:	e8 96 cc ff ff       	call   c0100dbc <__panic>

    basic_check();
c0104126:	e8 e7 f9 ff ff       	call   c0103b12 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c010412b:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104132:	e8 0e 10 00 00       	call   c0105145 <alloc_pages>
c0104137:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c010413a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010413e:	75 24                	jne    c0104164 <default_check+0x116>
c0104140:	c7 44 24 0c 8f d0 10 	movl   $0xc010d08f,0xc(%esp)
c0104147:	c0 
c0104148:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c010414f:	c0 
c0104150:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
c0104157:	00 
c0104158:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c010415f:	e8 58 cc ff ff       	call   c0100dbc <__panic>
    assert(!PageProperty(p0));
c0104164:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104167:	83 c0 04             	add    $0x4,%eax
c010416a:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0104171:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104174:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104177:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010417a:	0f a3 10             	bt     %edx,(%eax)
c010417d:	19 db                	sbb    %ebx,%ebx
c010417f:	89 5d b8             	mov    %ebx,-0x48(%ebp)
    return oldbit != 0;
c0104182:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0104186:	0f 95 c0             	setne  %al
c0104189:	0f b6 c0             	movzbl %al,%eax
c010418c:	85 c0                	test   %eax,%eax
c010418e:	74 24                	je     c01041b4 <default_check+0x166>
c0104190:	c7 44 24 0c 9a d0 10 	movl   $0xc010d09a,0xc(%esp)
c0104197:	c0 
c0104198:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c010419f:	c0 
c01041a0:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c01041a7:	00 
c01041a8:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c01041af:	e8 08 cc ff ff       	call   c0100dbc <__panic>

    list_entry_t free_list_store = free_list;
c01041b4:	a1 7c 1d 1b c0       	mov    0xc01b1d7c,%eax
c01041b9:	8b 15 80 1d 1b c0    	mov    0xc01b1d80,%edx
c01041bf:	89 45 80             	mov    %eax,-0x80(%ebp)
c01041c2:	89 55 84             	mov    %edx,-0x7c(%ebp)
c01041c5:	c7 45 b4 7c 1d 1b c0 	movl   $0xc01b1d7c,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01041cc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01041cf:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01041d2:	89 50 04             	mov    %edx,0x4(%eax)
c01041d5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01041d8:	8b 50 04             	mov    0x4(%eax),%edx
c01041db:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01041de:	89 10                	mov    %edx,(%eax)
c01041e0:	c7 45 b0 7c 1d 1b c0 	movl   $0xc01b1d7c,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01041e7:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01041ea:	8b 40 04             	mov    0x4(%eax),%eax
c01041ed:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c01041f0:	0f 94 c0             	sete   %al
c01041f3:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01041f6:	85 c0                	test   %eax,%eax
c01041f8:	75 24                	jne    c010421e <default_check+0x1d0>
c01041fa:	c7 44 24 0c ef cf 10 	movl   $0xc010cfef,0xc(%esp)
c0104201:	c0 
c0104202:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0104209:	c0 
c010420a:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
c0104211:	00 
c0104212:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0104219:	e8 9e cb ff ff       	call   c0100dbc <__panic>
    assert(alloc_page() == NULL);
c010421e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104225:	e8 1b 0f 00 00       	call   c0105145 <alloc_pages>
c010422a:	85 c0                	test   %eax,%eax
c010422c:	74 24                	je     c0104252 <default_check+0x204>
c010422e:	c7 44 24 0c 06 d0 10 	movl   $0xc010d006,0xc(%esp)
c0104235:	c0 
c0104236:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c010423d:	c0 
c010423e:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0104245:	00 
c0104246:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c010424d:	e8 6a cb ff ff       	call   c0100dbc <__panic>

    unsigned int nr_free_store = nr_free;
c0104252:	a1 84 1d 1b c0       	mov    0xc01b1d84,%eax
c0104257:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c010425a:	c7 05 84 1d 1b c0 00 	movl   $0x0,0xc01b1d84
c0104261:	00 00 00 

    free_pages(p0 + 2, 3);
c0104264:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104267:	83 c0 40             	add    $0x40,%eax
c010426a:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0104271:	00 
c0104272:	89 04 24             	mov    %eax,(%esp)
c0104275:	e8 36 0f 00 00       	call   c01051b0 <free_pages>
    assert(alloc_pages(4) == NULL);
c010427a:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0104281:	e8 bf 0e 00 00       	call   c0105145 <alloc_pages>
c0104286:	85 c0                	test   %eax,%eax
c0104288:	74 24                	je     c01042ae <default_check+0x260>
c010428a:	c7 44 24 0c ac d0 10 	movl   $0xc010d0ac,0xc(%esp)
c0104291:	c0 
c0104292:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0104299:	c0 
c010429a:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
c01042a1:	00 
c01042a2:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c01042a9:	e8 0e cb ff ff       	call   c0100dbc <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01042ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042b1:	83 c0 40             	add    $0x40,%eax
c01042b4:	83 c0 04             	add    $0x4,%eax
c01042b7:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c01042be:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01042c1:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01042c4:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01042c7:	0f a3 10             	bt     %edx,(%eax)
c01042ca:	19 db                	sbb    %ebx,%ebx
c01042cc:	89 5d a4             	mov    %ebx,-0x5c(%ebp)
    return oldbit != 0;
c01042cf:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c01042d3:	0f 95 c0             	setne  %al
c01042d6:	0f b6 c0             	movzbl %al,%eax
c01042d9:	85 c0                	test   %eax,%eax
c01042db:	74 0e                	je     c01042eb <default_check+0x29d>
c01042dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042e0:	83 c0 40             	add    $0x40,%eax
c01042e3:	8b 40 08             	mov    0x8(%eax),%eax
c01042e6:	83 f8 03             	cmp    $0x3,%eax
c01042e9:	74 24                	je     c010430f <default_check+0x2c1>
c01042eb:	c7 44 24 0c c4 d0 10 	movl   $0xc010d0c4,0xc(%esp)
c01042f2:	c0 
c01042f3:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c01042fa:	c0 
c01042fb:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
c0104302:	00 
c0104303:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c010430a:	e8 ad ca ff ff       	call   c0100dbc <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c010430f:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c0104316:	e8 2a 0e 00 00       	call   c0105145 <alloc_pages>
c010431b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010431e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0104322:	75 24                	jne    c0104348 <default_check+0x2fa>
c0104324:	c7 44 24 0c f0 d0 10 	movl   $0xc010d0f0,0xc(%esp)
c010432b:	c0 
c010432c:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0104333:	c0 
c0104334:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c010433b:	00 
c010433c:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0104343:	e8 74 ca ff ff       	call   c0100dbc <__panic>
    assert(alloc_page() == NULL);
c0104348:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010434f:	e8 f1 0d 00 00       	call   c0105145 <alloc_pages>
c0104354:	85 c0                	test   %eax,%eax
c0104356:	74 24                	je     c010437c <default_check+0x32e>
c0104358:	c7 44 24 0c 06 d0 10 	movl   $0xc010d006,0xc(%esp)
c010435f:	c0 
c0104360:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0104367:	c0 
c0104368:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c010436f:	00 
c0104370:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0104377:	e8 40 ca ff ff       	call   c0100dbc <__panic>
    assert(p0 + 2 == p1);
c010437c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010437f:	83 c0 40             	add    $0x40,%eax
c0104382:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0104385:	74 24                	je     c01043ab <default_check+0x35d>
c0104387:	c7 44 24 0c 0e d1 10 	movl   $0xc010d10e,0xc(%esp)
c010438e:	c0 
c010438f:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0104396:	c0 
c0104397:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c010439e:	00 
c010439f:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c01043a6:	e8 11 ca ff ff       	call   c0100dbc <__panic>

    p2 = p0 + 1;
c01043ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043ae:	83 c0 20             	add    $0x20,%eax
c01043b1:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c01043b4:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01043bb:	00 
c01043bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043bf:	89 04 24             	mov    %eax,(%esp)
c01043c2:	e8 e9 0d 00 00       	call   c01051b0 <free_pages>
    free_pages(p1, 3);
c01043c7:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01043ce:	00 
c01043cf:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01043d2:	89 04 24             	mov    %eax,(%esp)
c01043d5:	e8 d6 0d 00 00       	call   c01051b0 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c01043da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043dd:	83 c0 04             	add    $0x4,%eax
c01043e0:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c01043e7:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01043ea:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01043ed:	8b 55 a0             	mov    -0x60(%ebp),%edx
c01043f0:	0f a3 10             	bt     %edx,(%eax)
c01043f3:	19 db                	sbb    %ebx,%ebx
c01043f5:	89 5d 98             	mov    %ebx,-0x68(%ebp)
    return oldbit != 0;
c01043f8:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c01043fc:	0f 95 c0             	setne  %al
c01043ff:	0f b6 c0             	movzbl %al,%eax
c0104402:	85 c0                	test   %eax,%eax
c0104404:	74 0b                	je     c0104411 <default_check+0x3c3>
c0104406:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104409:	8b 40 08             	mov    0x8(%eax),%eax
c010440c:	83 f8 01             	cmp    $0x1,%eax
c010440f:	74 24                	je     c0104435 <default_check+0x3e7>
c0104411:	c7 44 24 0c 1c d1 10 	movl   $0xc010d11c,0xc(%esp)
c0104418:	c0 
c0104419:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0104420:	c0 
c0104421:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0104428:	00 
c0104429:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0104430:	e8 87 c9 ff ff       	call   c0100dbc <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0104435:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104438:	83 c0 04             	add    $0x4,%eax
c010443b:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c0104442:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104445:	8b 45 90             	mov    -0x70(%ebp),%eax
c0104448:	8b 55 94             	mov    -0x6c(%ebp),%edx
c010444b:	0f a3 10             	bt     %edx,(%eax)
c010444e:	19 db                	sbb    %ebx,%ebx
c0104450:	89 5d 8c             	mov    %ebx,-0x74(%ebp)
    return oldbit != 0;
c0104453:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c0104457:	0f 95 c0             	setne  %al
c010445a:	0f b6 c0             	movzbl %al,%eax
c010445d:	85 c0                	test   %eax,%eax
c010445f:	74 0b                	je     c010446c <default_check+0x41e>
c0104461:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104464:	8b 40 08             	mov    0x8(%eax),%eax
c0104467:	83 f8 03             	cmp    $0x3,%eax
c010446a:	74 24                	je     c0104490 <default_check+0x442>
c010446c:	c7 44 24 0c 44 d1 10 	movl   $0xc010d144,0xc(%esp)
c0104473:	c0 
c0104474:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c010447b:	c0 
c010447c:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c0104483:	00 
c0104484:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c010448b:	e8 2c c9 ff ff       	call   c0100dbc <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0104490:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104497:	e8 a9 0c 00 00       	call   c0105145 <alloc_pages>
c010449c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010449f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01044a2:	83 e8 20             	sub    $0x20,%eax
c01044a5:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01044a8:	74 24                	je     c01044ce <default_check+0x480>
c01044aa:	c7 44 24 0c 6a d1 10 	movl   $0xc010d16a,0xc(%esp)
c01044b1:	c0 
c01044b2:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c01044b9:	c0 
c01044ba:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c01044c1:	00 
c01044c2:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c01044c9:	e8 ee c8 ff ff       	call   c0100dbc <__panic>
    free_page(p0);
c01044ce:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01044d5:	00 
c01044d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044d9:	89 04 24             	mov    %eax,(%esp)
c01044dc:	e8 cf 0c 00 00       	call   c01051b0 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c01044e1:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01044e8:	e8 58 0c 00 00       	call   c0105145 <alloc_pages>
c01044ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01044f0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01044f3:	83 c0 20             	add    $0x20,%eax
c01044f6:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01044f9:	74 24                	je     c010451f <default_check+0x4d1>
c01044fb:	c7 44 24 0c 88 d1 10 	movl   $0xc010d188,0xc(%esp)
c0104502:	c0 
c0104503:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c010450a:	c0 
c010450b:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
c0104512:	00 
c0104513:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c010451a:	e8 9d c8 ff ff       	call   c0100dbc <__panic>

    free_pages(p0, 2);
c010451f:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0104526:	00 
c0104527:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010452a:	89 04 24             	mov    %eax,(%esp)
c010452d:	e8 7e 0c 00 00       	call   c01051b0 <free_pages>
    free_page(p2);
c0104532:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104539:	00 
c010453a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010453d:	89 04 24             	mov    %eax,(%esp)
c0104540:	e8 6b 0c 00 00       	call   c01051b0 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c0104545:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010454c:	e8 f4 0b 00 00       	call   c0105145 <alloc_pages>
c0104551:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104554:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104558:	75 24                	jne    c010457e <default_check+0x530>
c010455a:	c7 44 24 0c a8 d1 10 	movl   $0xc010d1a8,0xc(%esp)
c0104561:	c0 
c0104562:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0104569:	c0 
c010456a:	c7 44 24 04 0b 01 00 	movl   $0x10b,0x4(%esp)
c0104571:	00 
c0104572:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0104579:	e8 3e c8 ff ff       	call   c0100dbc <__panic>
    assert(alloc_page() == NULL);
c010457e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104585:	e8 bb 0b 00 00       	call   c0105145 <alloc_pages>
c010458a:	85 c0                	test   %eax,%eax
c010458c:	74 24                	je     c01045b2 <default_check+0x564>
c010458e:	c7 44 24 0c 06 d0 10 	movl   $0xc010d006,0xc(%esp)
c0104595:	c0 
c0104596:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c010459d:	c0 
c010459e:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c01045a5:	00 
c01045a6:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c01045ad:	e8 0a c8 ff ff       	call   c0100dbc <__panic>

    assert(nr_free == 0);
c01045b2:	a1 84 1d 1b c0       	mov    0xc01b1d84,%eax
c01045b7:	85 c0                	test   %eax,%eax
c01045b9:	74 24                	je     c01045df <default_check+0x591>
c01045bb:	c7 44 24 0c 59 d0 10 	movl   $0xc010d059,0xc(%esp)
c01045c2:	c0 
c01045c3:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c01045ca:	c0 
c01045cb:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c01045d2:	00 
c01045d3:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c01045da:	e8 dd c7 ff ff       	call   c0100dbc <__panic>
    nr_free = nr_free_store;
c01045df:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01045e2:	a3 84 1d 1b c0       	mov    %eax,0xc01b1d84

    free_list = free_list_store;
c01045e7:	8b 45 80             	mov    -0x80(%ebp),%eax
c01045ea:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01045ed:	a3 7c 1d 1b c0       	mov    %eax,0xc01b1d7c
c01045f2:	89 15 80 1d 1b c0    	mov    %edx,0xc01b1d80
    free_pages(p0, 5);
c01045f8:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c01045ff:	00 
c0104600:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104603:	89 04 24             	mov    %eax,(%esp)
c0104606:	e8 a5 0b 00 00       	call   c01051b0 <free_pages>

    le = &free_list;
c010460b:	c7 45 ec 7c 1d 1b c0 	movl   $0xc01b1d7c,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104612:	eb 1f                	jmp    c0104633 <default_check+0x5e5>
        struct Page *p = le2page(le, page_link);
c0104614:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104617:	83 e8 0c             	sub    $0xc,%eax
c010461a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c010461d:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0104621:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104624:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104627:	8b 40 08             	mov    0x8(%eax),%eax
c010462a:	89 d1                	mov    %edx,%ecx
c010462c:	29 c1                	sub    %eax,%ecx
c010462e:	89 c8                	mov    %ecx,%eax
c0104630:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104633:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104636:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104639:	8b 45 88             	mov    -0x78(%ebp),%eax
c010463c:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010463f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104642:	81 7d ec 7c 1d 1b c0 	cmpl   $0xc01b1d7c,-0x14(%ebp)
c0104649:	75 c9                	jne    c0104614 <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c010464b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010464f:	74 24                	je     c0104675 <default_check+0x627>
c0104651:	c7 44 24 0c c6 d1 10 	movl   $0xc010d1c6,0xc(%esp)
c0104658:	c0 
c0104659:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c0104660:	c0 
c0104661:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0104668:	00 
c0104669:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c0104670:	e8 47 c7 ff ff       	call   c0100dbc <__panic>
    assert(total == 0);
c0104675:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104679:	74 24                	je     c010469f <default_check+0x651>
c010467b:	c7 44 24 0c d1 d1 10 	movl   $0xc010d1d1,0xc(%esp)
c0104682:	c0 
c0104683:	c7 44 24 08 96 ce 10 	movl   $0xc010ce96,0x8(%esp)
c010468a:	c0 
c010468b:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c0104692:	00 
c0104693:	c7 04 24 ab ce 10 c0 	movl   $0xc010ceab,(%esp)
c010469a:	e8 1d c7 ff ff       	call   c0100dbc <__panic>
}
c010469f:	81 c4 94 00 00 00    	add    $0x94,%esp
c01046a5:	5b                   	pop    %ebx
c01046a6:	5d                   	pop    %ebp
c01046a7:	c3                   	ret    

c01046a8 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01046a8:	55                   	push   %ebp
c01046a9:	89 e5                	mov    %esp,%ebp
c01046ab:	53                   	push   %ebx
c01046ac:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01046af:	9c                   	pushf  
c01046b0:	5b                   	pop    %ebx
c01046b1:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c01046b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01046b7:	25 00 02 00 00       	and    $0x200,%eax
c01046bc:	85 c0                	test   %eax,%eax
c01046be:	74 0c                	je     c01046cc <__intr_save+0x24>
        intr_disable();
c01046c0:	e8 25 da ff ff       	call   c01020ea <intr_disable>
        return 1;
c01046c5:	b8 01 00 00 00       	mov    $0x1,%eax
c01046ca:	eb 05                	jmp    c01046d1 <__intr_save+0x29>
    }
    return 0;
c01046cc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01046d1:	83 c4 14             	add    $0x14,%esp
c01046d4:	5b                   	pop    %ebx
c01046d5:	5d                   	pop    %ebp
c01046d6:	c3                   	ret    

c01046d7 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01046d7:	55                   	push   %ebp
c01046d8:	89 e5                	mov    %esp,%ebp
c01046da:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01046dd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01046e1:	74 05                	je     c01046e8 <__intr_restore+0x11>
        intr_enable();
c01046e3:	e8 fc d9 ff ff       	call   c01020e4 <intr_enable>
    }
}
c01046e8:	c9                   	leave  
c01046e9:	c3                   	ret    

c01046ea <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01046ea:	55                   	push   %ebp
c01046eb:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01046ed:	8b 55 08             	mov    0x8(%ebp),%edx
c01046f0:	a1 90 1d 1b c0       	mov    0xc01b1d90,%eax
c01046f5:	89 d1                	mov    %edx,%ecx
c01046f7:	29 c1                	sub    %eax,%ecx
c01046f9:	89 c8                	mov    %ecx,%eax
c01046fb:	c1 f8 05             	sar    $0x5,%eax
}
c01046fe:	5d                   	pop    %ebp
c01046ff:	c3                   	ret    

c0104700 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104700:	55                   	push   %ebp
c0104701:	89 e5                	mov    %esp,%ebp
c0104703:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104706:	8b 45 08             	mov    0x8(%ebp),%eax
c0104709:	89 04 24             	mov    %eax,(%esp)
c010470c:	e8 d9 ff ff ff       	call   c01046ea <page2ppn>
c0104711:	c1 e0 0c             	shl    $0xc,%eax
}
c0104714:	c9                   	leave  
c0104715:	c3                   	ret    

c0104716 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104716:	55                   	push   %ebp
c0104717:	89 e5                	mov    %esp,%ebp
c0104719:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010471c:	8b 45 08             	mov    0x8(%ebp),%eax
c010471f:	89 c2                	mov    %eax,%edx
c0104721:	c1 ea 0c             	shr    $0xc,%edx
c0104724:	a1 80 fc 1a c0       	mov    0xc01afc80,%eax
c0104729:	39 c2                	cmp    %eax,%edx
c010472b:	72 1c                	jb     c0104749 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010472d:	c7 44 24 08 0c d2 10 	movl   $0xc010d20c,0x8(%esp)
c0104734:	c0 
c0104735:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010473c:	00 
c010473d:	c7 04 24 2b d2 10 c0 	movl   $0xc010d22b,(%esp)
c0104744:	e8 73 c6 ff ff       	call   c0100dbc <__panic>
    }
    return &pages[PPN(pa)];
c0104749:	a1 90 1d 1b c0       	mov    0xc01b1d90,%eax
c010474e:	8b 55 08             	mov    0x8(%ebp),%edx
c0104751:	c1 ea 0c             	shr    $0xc,%edx
c0104754:	c1 e2 05             	shl    $0x5,%edx
c0104757:	01 d0                	add    %edx,%eax
}
c0104759:	c9                   	leave  
c010475a:	c3                   	ret    

c010475b <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010475b:	55                   	push   %ebp
c010475c:	89 e5                	mov    %esp,%ebp
c010475e:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104761:	8b 45 08             	mov    0x8(%ebp),%eax
c0104764:	89 04 24             	mov    %eax,(%esp)
c0104767:	e8 94 ff ff ff       	call   c0104700 <page2pa>
c010476c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010476f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104772:	c1 e8 0c             	shr    $0xc,%eax
c0104775:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104778:	a1 80 fc 1a c0       	mov    0xc01afc80,%eax
c010477d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104780:	72 23                	jb     c01047a5 <page2kva+0x4a>
c0104782:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104785:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104789:	c7 44 24 08 3c d2 10 	movl   $0xc010d23c,0x8(%esp)
c0104790:	c0 
c0104791:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104798:	00 
c0104799:	c7 04 24 2b d2 10 c0 	movl   $0xc010d22b,(%esp)
c01047a0:	e8 17 c6 ff ff       	call   c0100dbc <__panic>
c01047a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047a8:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01047ad:	c9                   	leave  
c01047ae:	c3                   	ret    

c01047af <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c01047af:	55                   	push   %ebp
c01047b0:	89 e5                	mov    %esp,%ebp
c01047b2:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c01047b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01047b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01047bb:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01047c2:	77 23                	ja     c01047e7 <kva2page+0x38>
c01047c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01047cb:	c7 44 24 08 60 d2 10 	movl   $0xc010d260,0x8(%esp)
c01047d2:	c0 
c01047d3:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c01047da:	00 
c01047db:	c7 04 24 2b d2 10 c0 	movl   $0xc010d22b,(%esp)
c01047e2:	e8 d5 c5 ff ff       	call   c0100dbc <__panic>
c01047e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047ea:	05 00 00 00 40       	add    $0x40000000,%eax
c01047ef:	89 04 24             	mov    %eax,(%esp)
c01047f2:	e8 1f ff ff ff       	call   c0104716 <pa2page>
}
c01047f7:	c9                   	leave  
c01047f8:	c3                   	ret    

c01047f9 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c01047f9:	55                   	push   %ebp
c01047fa:	89 e5                	mov    %esp,%ebp
c01047fc:	53                   	push   %ebx
c01047fd:	83 ec 24             	sub    $0x24,%esp
  struct Page * page = alloc_pages(1 << order);
c0104800:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104803:	ba 01 00 00 00       	mov    $0x1,%edx
c0104808:	89 d3                	mov    %edx,%ebx
c010480a:	89 c1                	mov    %eax,%ecx
c010480c:	d3 e3                	shl    %cl,%ebx
c010480e:	89 d8                	mov    %ebx,%eax
c0104810:	89 04 24             	mov    %eax,(%esp)
c0104813:	e8 2d 09 00 00       	call   c0105145 <alloc_pages>
c0104818:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c010481b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010481f:	75 07                	jne    c0104828 <__slob_get_free_pages+0x2f>
    return NULL;
c0104821:	b8 00 00 00 00       	mov    $0x0,%eax
c0104826:	eb 0b                	jmp    c0104833 <__slob_get_free_pages+0x3a>
  return page2kva(page);
c0104828:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010482b:	89 04 24             	mov    %eax,(%esp)
c010482e:	e8 28 ff ff ff       	call   c010475b <page2kva>
}
c0104833:	83 c4 24             	add    $0x24,%esp
c0104836:	5b                   	pop    %ebx
c0104837:	5d                   	pop    %ebp
c0104838:	c3                   	ret    

c0104839 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104839:	55                   	push   %ebp
c010483a:	89 e5                	mov    %esp,%ebp
c010483c:	53                   	push   %ebx
c010483d:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c0104840:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104843:	ba 01 00 00 00       	mov    $0x1,%edx
c0104848:	89 d3                	mov    %edx,%ebx
c010484a:	89 c1                	mov    %eax,%ecx
c010484c:	d3 e3                	shl    %cl,%ebx
c010484e:	89 d8                	mov    %ebx,%eax
c0104850:	89 c3                	mov    %eax,%ebx
c0104852:	8b 45 08             	mov    0x8(%ebp),%eax
c0104855:	89 04 24             	mov    %eax,(%esp)
c0104858:	e8 52 ff ff ff       	call   c01047af <kva2page>
c010485d:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0104861:	89 04 24             	mov    %eax,(%esp)
c0104864:	e8 47 09 00 00       	call   c01051b0 <free_pages>
}
c0104869:	83 c4 14             	add    $0x14,%esp
c010486c:	5b                   	pop    %ebx
c010486d:	5d                   	pop    %ebp
c010486e:	c3                   	ret    

c010486f <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c010486f:	55                   	push   %ebp
c0104870:	89 e5                	mov    %esp,%ebp
c0104872:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0104875:	8b 45 08             	mov    0x8(%ebp),%eax
c0104878:	83 c0 08             	add    $0x8,%eax
c010487b:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0104880:	76 24                	jbe    c01048a6 <slob_alloc+0x37>
c0104882:	c7 44 24 0c 84 d2 10 	movl   $0xc010d284,0xc(%esp)
c0104889:	c0 
c010488a:	c7 44 24 08 a3 d2 10 	movl   $0xc010d2a3,0x8(%esp)
c0104891:	c0 
c0104892:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0104899:	00 
c010489a:	c7 04 24 b8 d2 10 c0 	movl   $0xc010d2b8,(%esp)
c01048a1:	e8 16 c5 ff ff       	call   c0100dbc <__panic>

	slob_t *prev, *cur, *aligned = 0;
c01048a6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c01048ad:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01048b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01048b7:	83 c0 07             	add    $0x7,%eax
c01048ba:	c1 e8 03             	shr    $0x3,%eax
c01048bd:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c01048c0:	e8 e3 fd ff ff       	call   c01046a8 <__intr_save>
c01048c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c01048c8:	a1 08 da 12 c0       	mov    0xc012da08,%eax
c01048cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c01048d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048d3:	8b 40 04             	mov    0x4(%eax),%eax
c01048d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c01048d9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01048dd:	74 27                	je     c0104906 <slob_alloc+0x97>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c01048df:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01048e2:	8b 45 10             	mov    0x10(%ebp),%eax
c01048e5:	01 d0                	add    %edx,%eax
c01048e7:	8d 50 ff             	lea    -0x1(%eax),%edx
c01048ea:	8b 45 10             	mov    0x10(%ebp),%eax
c01048ed:	f7 d8                	neg    %eax
c01048ef:	21 d0                	and    %edx,%eax
c01048f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c01048f4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01048f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048fa:	89 d1                	mov    %edx,%ecx
c01048fc:	29 c1                	sub    %eax,%ecx
c01048fe:	89 c8                	mov    %ecx,%eax
c0104900:	c1 f8 03             	sar    $0x3,%eax
c0104903:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0104906:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104909:	8b 00                	mov    (%eax),%eax
c010490b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010490e:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104911:	01 ca                	add    %ecx,%edx
c0104913:	39 d0                	cmp    %edx,%eax
c0104915:	0f 8c a6 00 00 00    	jl     c01049c1 <slob_alloc+0x152>
			if (delta) { /* need to fragment head to align? */
c010491b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010491f:	74 38                	je     c0104959 <slob_alloc+0xea>
				aligned->units = cur->units - delta;
c0104921:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104924:	8b 00                	mov    (%eax),%eax
c0104926:	89 c2                	mov    %eax,%edx
c0104928:	2b 55 e8             	sub    -0x18(%ebp),%edx
c010492b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010492e:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104930:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104933:	8b 50 04             	mov    0x4(%eax),%edx
c0104936:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104939:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c010493c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010493f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104942:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104945:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104948:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010494b:	89 10                	mov    %edx,(%eax)
				prev = cur;
c010494d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104950:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104953:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104956:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104959:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010495c:	8b 00                	mov    (%eax),%eax
c010495e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104961:	75 0e                	jne    c0104971 <slob_alloc+0x102>
				prev->next = cur->next; /* unlink */
c0104963:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104966:	8b 50 04             	mov    0x4(%eax),%edx
c0104969:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010496c:	89 50 04             	mov    %edx,0x4(%eax)
c010496f:	eb 38                	jmp    c01049a9 <slob_alloc+0x13a>
			else { /* fragment */
				prev->next = cur + units;
c0104971:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104974:	c1 e0 03             	shl    $0x3,%eax
c0104977:	89 c2                	mov    %eax,%edx
c0104979:	03 55 f0             	add    -0x10(%ebp),%edx
c010497c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010497f:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0104982:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104985:	8b 40 04             	mov    0x4(%eax),%eax
c0104988:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010498b:	8b 12                	mov    (%edx),%edx
c010498d:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0104990:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0104992:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104995:	8b 40 04             	mov    0x4(%eax),%eax
c0104998:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010499b:	8b 52 04             	mov    0x4(%edx),%edx
c010499e:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c01049a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049a4:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01049a7:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c01049a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049ac:	a3 08 da 12 c0       	mov    %eax,0xc012da08
			spin_unlock_irqrestore(&slob_lock, flags);
c01049b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049b4:	89 04 24             	mov    %eax,(%esp)
c01049b7:	e8 1b fd ff ff       	call   c01046d7 <__intr_restore>
			return cur;
c01049bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049bf:	eb 7f                	jmp    c0104a40 <slob_alloc+0x1d1>
		}
		if (cur == slobfree) {
c01049c1:	a1 08 da 12 c0       	mov    0xc012da08,%eax
c01049c6:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01049c9:	75 61                	jne    c0104a2c <slob_alloc+0x1bd>
			spin_unlock_irqrestore(&slob_lock, flags);
c01049cb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049ce:	89 04 24             	mov    %eax,(%esp)
c01049d1:	e8 01 fd ff ff       	call   c01046d7 <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c01049d6:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c01049dd:	75 07                	jne    c01049e6 <slob_alloc+0x177>
				return 0;
c01049df:	b8 00 00 00 00       	mov    $0x0,%eax
c01049e4:	eb 5a                	jmp    c0104a40 <slob_alloc+0x1d1>

			cur = (slob_t *)__slob_get_free_page(gfp);
c01049e6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01049ed:	00 
c01049ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c01049f1:	89 04 24             	mov    %eax,(%esp)
c01049f4:	e8 00 fe ff ff       	call   c01047f9 <__slob_get_free_pages>
c01049f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c01049fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104a00:	75 07                	jne    c0104a09 <slob_alloc+0x19a>
				return 0;
c0104a02:	b8 00 00 00 00       	mov    $0x0,%eax
c0104a07:	eb 37                	jmp    c0104a40 <slob_alloc+0x1d1>

			slob_free(cur, PAGE_SIZE);
c0104a09:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0104a10:	00 
c0104a11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a14:	89 04 24             	mov    %eax,(%esp)
c0104a17:	e8 26 00 00 00       	call   c0104a42 <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0104a1c:	e8 87 fc ff ff       	call   c01046a8 <__intr_save>
c0104a21:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104a24:	a1 08 da 12 c0       	mov    0xc012da08,%eax
c0104a29:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104a2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a32:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a35:	8b 40 04             	mov    0x4(%eax),%eax
c0104a38:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104a3b:	e9 99 fe ff ff       	jmp    c01048d9 <slob_alloc+0x6a>
}
c0104a40:	c9                   	leave  
c0104a41:	c3                   	ret    

c0104a42 <slob_free>:

static void slob_free(void *block, int size)
{
c0104a42:	55                   	push   %ebp
c0104a43:	89 e5                	mov    %esp,%ebp
c0104a45:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104a48:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104a4e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104a52:	0f 84 f7 00 00 00    	je     c0104b4f <slob_free+0x10d>
		return;

	if (size)
c0104a58:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104a5c:	74 10                	je     c0104a6e <slob_free+0x2c>
		b->units = SLOB_UNITS(size);
c0104a5e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104a61:	83 c0 07             	add    $0x7,%eax
c0104a64:	c1 e8 03             	shr    $0x3,%eax
c0104a67:	89 c2                	mov    %eax,%edx
c0104a69:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a6c:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104a6e:	e8 35 fc ff ff       	call   c01046a8 <__intr_save>
c0104a73:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104a76:	a1 08 da 12 c0       	mov    0xc012da08,%eax
c0104a7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a7e:	eb 27                	jmp    c0104aa7 <slob_free+0x65>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104a80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a83:	8b 40 04             	mov    0x4(%eax),%eax
c0104a86:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104a89:	77 13                	ja     c0104a9e <slob_free+0x5c>
c0104a8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a8e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104a91:	77 27                	ja     c0104aba <slob_free+0x78>
c0104a93:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a96:	8b 40 04             	mov    0x4(%eax),%eax
c0104a99:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104a9c:	77 1c                	ja     c0104aba <slob_free+0x78>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104a9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aa1:	8b 40 04             	mov    0x4(%eax),%eax
c0104aa4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104aa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104aaa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104aad:	76 d1                	jbe    c0104a80 <slob_free+0x3e>
c0104aaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ab2:	8b 40 04             	mov    0x4(%eax),%eax
c0104ab5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104ab8:	76 c6                	jbe    c0104a80 <slob_free+0x3e>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104aba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104abd:	8b 00                	mov    (%eax),%eax
c0104abf:	c1 e0 03             	shl    $0x3,%eax
c0104ac2:	89 c2                	mov    %eax,%edx
c0104ac4:	03 55 f0             	add    -0x10(%ebp),%edx
c0104ac7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aca:	8b 40 04             	mov    0x4(%eax),%eax
c0104acd:	39 c2                	cmp    %eax,%edx
c0104acf:	75 25                	jne    c0104af6 <slob_free+0xb4>
		b->units += cur->next->units;
c0104ad1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ad4:	8b 10                	mov    (%eax),%edx
c0104ad6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ad9:	8b 40 04             	mov    0x4(%eax),%eax
c0104adc:	8b 00                	mov    (%eax),%eax
c0104ade:	01 c2                	add    %eax,%edx
c0104ae0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ae3:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ae8:	8b 40 04             	mov    0x4(%eax),%eax
c0104aeb:	8b 50 04             	mov    0x4(%eax),%edx
c0104aee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104af1:	89 50 04             	mov    %edx,0x4(%eax)
c0104af4:	eb 0c                	jmp    c0104b02 <slob_free+0xc0>
	} else
		b->next = cur->next;
c0104af6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104af9:	8b 50 04             	mov    0x4(%eax),%edx
c0104afc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104aff:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104b02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b05:	8b 00                	mov    (%eax),%eax
c0104b07:	c1 e0 03             	shl    $0x3,%eax
c0104b0a:	03 45 f4             	add    -0xc(%ebp),%eax
c0104b0d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104b10:	75 1f                	jne    c0104b31 <slob_free+0xef>
		cur->units += b->units;
c0104b12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b15:	8b 10                	mov    (%eax),%edx
c0104b17:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b1a:	8b 00                	mov    (%eax),%eax
c0104b1c:	01 c2                	add    %eax,%edx
c0104b1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b21:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104b23:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b26:	8b 50 04             	mov    0x4(%eax),%edx
c0104b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b2c:	89 50 04             	mov    %edx,0x4(%eax)
c0104b2f:	eb 09                	jmp    c0104b3a <slob_free+0xf8>
	} else
		cur->next = b;
c0104b31:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b34:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104b37:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104b3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b3d:	a3 08 da 12 c0       	mov    %eax,0xc012da08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104b42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104b45:	89 04 24             	mov    %eax,(%esp)
c0104b48:	e8 8a fb ff ff       	call   c01046d7 <__intr_restore>
c0104b4d:	eb 01                	jmp    c0104b50 <slob_free+0x10e>
{
	slob_t *cur, *b = (slob_t *)block;
	unsigned long flags;

	if (!block)
		return;
c0104b4f:	90                   	nop
		cur->next = b;

	slobfree = cur;

	spin_unlock_irqrestore(&slob_lock, flags);
}
c0104b50:	c9                   	leave  
c0104b51:	c3                   	ret    

c0104b52 <check_slab>:



void check_slab(void) {
c0104b52:	55                   	push   %ebp
c0104b53:	89 e5                	mov    %esp,%ebp
c0104b55:	83 ec 18             	sub    $0x18,%esp
  cprintf("check_slab() success\n");
c0104b58:	c7 04 24 ca d2 10 c0 	movl   $0xc010d2ca,(%esp)
c0104b5f:	e8 ff b7 ff ff       	call   c0100363 <cprintf>
}
c0104b64:	c9                   	leave  
c0104b65:	c3                   	ret    

c0104b66 <slab_init>:
void
slab_init(void) {
c0104b66:	55                   	push   %ebp
c0104b67:	89 e5                	mov    %esp,%ebp
c0104b69:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104b6c:	c7 04 24 e0 d2 10 c0 	movl   $0xc010d2e0,(%esp)
c0104b73:	e8 eb b7 ff ff       	call   c0100363 <cprintf>
  check_slab();
c0104b78:	e8 d5 ff ff ff       	call   c0104b52 <check_slab>
}
c0104b7d:	c9                   	leave  
c0104b7e:	c3                   	ret    

c0104b7f <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104b7f:	55                   	push   %ebp
c0104b80:	89 e5                	mov    %esp,%ebp
c0104b82:	83 ec 18             	sub    $0x18,%esp
    slab_init();
c0104b85:	e8 dc ff ff ff       	call   c0104b66 <slab_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104b8a:	c7 04 24 f4 d2 10 c0 	movl   $0xc010d2f4,(%esp)
c0104b91:	e8 cd b7 ff ff       	call   c0100363 <cprintf>
}
c0104b96:	c9                   	leave  
c0104b97:	c3                   	ret    

c0104b98 <slab_allocated>:

size_t
slab_allocated(void) {
c0104b98:	55                   	push   %ebp
c0104b99:	89 e5                	mov    %esp,%ebp
  return 0;
c0104b9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104ba0:	5d                   	pop    %ebp
c0104ba1:	c3                   	ret    

c0104ba2 <kallocated>:

size_t
kallocated(void) {
c0104ba2:	55                   	push   %ebp
c0104ba3:	89 e5                	mov    %esp,%ebp
   return slab_allocated();
c0104ba5:	e8 ee ff ff ff       	call   c0104b98 <slab_allocated>
}
c0104baa:	5d                   	pop    %ebp
c0104bab:	c3                   	ret    

c0104bac <find_order>:

static int find_order(int size)
{
c0104bac:	55                   	push   %ebp
c0104bad:	89 e5                	mov    %esp,%ebp
c0104baf:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104bb2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104bb9:	eb 07                	jmp    c0104bc2 <find_order+0x16>
		order++;
c0104bbb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0104bbf:	d1 7d 08             	sarl   0x8(%ebp)
c0104bc2:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104bc9:	7f f0                	jg     c0104bbb <find_order+0xf>
		order++;
	return order;
c0104bcb:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104bce:	c9                   	leave  
c0104bcf:	c3                   	ret    

c0104bd0 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104bd0:	55                   	push   %ebp
c0104bd1:	89 e5                	mov    %esp,%ebp
c0104bd3:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104bd6:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104bdd:	77 38                	ja     c0104c17 <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104bdf:	8b 45 08             	mov    0x8(%ebp),%eax
c0104be2:	8d 50 08             	lea    0x8(%eax),%edx
c0104be5:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104bec:	00 
c0104bed:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104bf0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104bf4:	89 14 24             	mov    %edx,(%esp)
c0104bf7:	e8 73 fc ff ff       	call   c010486f <slob_alloc>
c0104bfc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104bff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104c03:	74 08                	je     c0104c0d <__kmalloc+0x3d>
c0104c05:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c08:	83 c0 08             	add    $0x8,%eax
c0104c0b:	eb 05                	jmp    c0104c12 <__kmalloc+0x42>
c0104c0d:	b8 00 00 00 00       	mov    $0x0,%eax
c0104c12:	e9 a6 00 00 00       	jmp    c0104cbd <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104c17:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104c1e:	00 
c0104c1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c22:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c26:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104c2d:	e8 3d fc ff ff       	call   c010486f <slob_alloc>
c0104c32:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104c35:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104c39:	75 07                	jne    c0104c42 <__kmalloc+0x72>
		return 0;
c0104c3b:	b8 00 00 00 00       	mov    $0x0,%eax
c0104c40:	eb 7b                	jmp    c0104cbd <__kmalloc+0xed>

	bb->order = find_order(size);
c0104c42:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c45:	89 04 24             	mov    %eax,(%esp)
c0104c48:	e8 5f ff ff ff       	call   c0104bac <find_order>
c0104c4d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c50:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104c52:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c55:	8b 00                	mov    (%eax),%eax
c0104c57:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c5b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c5e:	89 04 24             	mov    %eax,(%esp)
c0104c61:	e8 93 fb ff ff       	call   c01047f9 <__slob_get_free_pages>
c0104c66:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c69:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104c6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c6f:	8b 40 04             	mov    0x4(%eax),%eax
c0104c72:	85 c0                	test   %eax,%eax
c0104c74:	74 2f                	je     c0104ca5 <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104c76:	e8 2d fa ff ff       	call   c01046a8 <__intr_save>
c0104c7b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104c7e:	8b 15 64 fc 1a c0    	mov    0xc01afc64,%edx
c0104c84:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c87:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104c8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c8d:	a3 64 fc 1a c0       	mov    %eax,0xc01afc64
		spin_unlock_irqrestore(&block_lock, flags);
c0104c92:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c95:	89 04 24             	mov    %eax,(%esp)
c0104c98:	e8 3a fa ff ff       	call   c01046d7 <__intr_restore>
		return bb->pages;
c0104c9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ca0:	8b 40 04             	mov    0x4(%eax),%eax
c0104ca3:	eb 18                	jmp    c0104cbd <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104ca5:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104cac:	00 
c0104cad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cb0:	89 04 24             	mov    %eax,(%esp)
c0104cb3:	e8 8a fd ff ff       	call   c0104a42 <slob_free>
	return 0;
c0104cb8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104cbd:	c9                   	leave  
c0104cbe:	c3                   	ret    

c0104cbf <kmalloc>:

void *
kmalloc(size_t size)
{
c0104cbf:	55                   	push   %ebp
c0104cc0:	89 e5                	mov    %esp,%ebp
c0104cc2:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104cc5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104ccc:	00 
c0104ccd:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cd0:	89 04 24             	mov    %eax,(%esp)
c0104cd3:	e8 f8 fe ff ff       	call   c0104bd0 <__kmalloc>
}
c0104cd8:	c9                   	leave  
c0104cd9:	c3                   	ret    

c0104cda <kfree>:


void kfree(void *block)
{
c0104cda:	55                   	push   %ebp
c0104cdb:	89 e5                	mov    %esp,%ebp
c0104cdd:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104ce0:	c7 45 f0 64 fc 1a c0 	movl   $0xc01afc64,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104ce7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104ceb:	0f 84 a4 00 00 00    	je     c0104d95 <kfree+0xbb>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104cf1:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cf4:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104cf9:	85 c0                	test   %eax,%eax
c0104cfb:	75 7f                	jne    c0104d7c <kfree+0xa2>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104cfd:	e8 a6 f9 ff ff       	call   c01046a8 <__intr_save>
c0104d02:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104d05:	a1 64 fc 1a c0       	mov    0xc01afc64,%eax
c0104d0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d0d:	eb 5c                	jmp    c0104d6b <kfree+0x91>
			if (bb->pages == block) {
c0104d0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d12:	8b 40 04             	mov    0x4(%eax),%eax
c0104d15:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104d18:	75 3f                	jne    c0104d59 <kfree+0x7f>
				*last = bb->next;
c0104d1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d1d:	8b 50 08             	mov    0x8(%eax),%edx
c0104d20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d23:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104d25:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d28:	89 04 24             	mov    %eax,(%esp)
c0104d2b:	e8 a7 f9 ff ff       	call   c01046d7 <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d33:	8b 10                	mov    (%eax),%edx
c0104d35:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d38:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104d3c:	89 04 24             	mov    %eax,(%esp)
c0104d3f:	e8 f5 fa ff ff       	call   c0104839 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104d44:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104d4b:	00 
c0104d4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d4f:	89 04 24             	mov    %eax,(%esp)
c0104d52:	e8 eb fc ff ff       	call   c0104a42 <slob_free>
				return;
c0104d57:	eb 3d                	jmp    c0104d96 <kfree+0xbc>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104d59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d5c:	83 c0 08             	add    $0x8,%eax
c0104d5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104d62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d65:	8b 40 08             	mov    0x8(%eax),%eax
c0104d68:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d6b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104d6f:	75 9e                	jne    c0104d0f <kfree+0x35>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104d71:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d74:	89 04 24             	mov    %eax,(%esp)
c0104d77:	e8 5b f9 ff ff       	call   c01046d7 <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104d7c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d7f:	83 e8 08             	sub    $0x8,%eax
c0104d82:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104d89:	00 
c0104d8a:	89 04 24             	mov    %eax,(%esp)
c0104d8d:	e8 b0 fc ff ff       	call   c0104a42 <slob_free>
	return;
c0104d92:	90                   	nop
c0104d93:	eb 01                	jmp    c0104d96 <kfree+0xbc>
{
	bigblock_t *bb, **last = &bigblocks;
	unsigned long flags;

	if (!block)
		return;
c0104d95:	90                   	nop
		spin_unlock_irqrestore(&block_lock, flags);
	}

	slob_free((slob_t *)block - 1, 0);
	return;
}
c0104d96:	c9                   	leave  
c0104d97:	c3                   	ret    

c0104d98 <ksize>:


unsigned int ksize(const void *block)
{
c0104d98:	55                   	push   %ebp
c0104d99:	89 e5                	mov    %esp,%ebp
c0104d9b:	53                   	push   %ebx
c0104d9c:	83 ec 24             	sub    $0x24,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104d9f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104da3:	75 07                	jne    c0104dac <ksize+0x14>
		return 0;
c0104da5:	b8 00 00 00 00       	mov    $0x0,%eax
c0104daa:	eb 6d                	jmp    c0104e19 <ksize+0x81>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104dac:	8b 45 08             	mov    0x8(%ebp),%eax
c0104daf:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104db4:	85 c0                	test   %eax,%eax
c0104db6:	75 56                	jne    c0104e0e <ksize+0x76>
		spin_lock_irqsave(&block_lock, flags);
c0104db8:	e8 eb f8 ff ff       	call   c01046a8 <__intr_save>
c0104dbd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104dc0:	a1 64 fc 1a c0       	mov    0xc01afc64,%eax
c0104dc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104dc8:	eb 33                	jmp    c0104dfd <ksize+0x65>
			if (bb->pages == block) {
c0104dca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dcd:	8b 40 04             	mov    0x4(%eax),%eax
c0104dd0:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104dd3:	75 1f                	jne    c0104df4 <ksize+0x5c>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104dd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dd8:	89 04 24             	mov    %eax,(%esp)
c0104ddb:	e8 f7 f8 ff ff       	call   c01046d7 <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104de0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104de3:	8b 00                	mov    (%eax),%eax
c0104de5:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104dea:	89 d3                	mov    %edx,%ebx
c0104dec:	89 c1                	mov    %eax,%ecx
c0104dee:	d3 e3                	shl    %cl,%ebx
c0104df0:	89 d8                	mov    %ebx,%eax
c0104df2:	eb 25                	jmp    c0104e19 <ksize+0x81>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104df4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104df7:	8b 40 08             	mov    0x8(%eax),%eax
c0104dfa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104dfd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104e01:	75 c7                	jne    c0104dca <ksize+0x32>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104e03:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e06:	89 04 24             	mov    %eax,(%esp)
c0104e09:	e8 c9 f8 ff ff       	call   c01046d7 <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104e0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e11:	83 e8 08             	sub    $0x8,%eax
c0104e14:	8b 00                	mov    (%eax),%eax
c0104e16:	c1 e0 03             	shl    $0x3,%eax
}
c0104e19:	83 c4 24             	add    $0x24,%esp
c0104e1c:	5b                   	pop    %ebx
c0104e1d:	5d                   	pop    %ebp
c0104e1e:	c3                   	ret    
	...

c0104e20 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104e20:	55                   	push   %ebp
c0104e21:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104e23:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e26:	a1 90 1d 1b c0       	mov    0xc01b1d90,%eax
c0104e2b:	89 d1                	mov    %edx,%ecx
c0104e2d:	29 c1                	sub    %eax,%ecx
c0104e2f:	89 c8                	mov    %ecx,%eax
c0104e31:	c1 f8 05             	sar    $0x5,%eax
}
c0104e34:	5d                   	pop    %ebp
c0104e35:	c3                   	ret    

c0104e36 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104e36:	55                   	push   %ebp
c0104e37:	89 e5                	mov    %esp,%ebp
c0104e39:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104e3c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e3f:	89 04 24             	mov    %eax,(%esp)
c0104e42:	e8 d9 ff ff ff       	call   c0104e20 <page2ppn>
c0104e47:	c1 e0 0c             	shl    $0xc,%eax
}
c0104e4a:	c9                   	leave  
c0104e4b:	c3                   	ret    

c0104e4c <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104e4c:	55                   	push   %ebp
c0104e4d:	89 e5                	mov    %esp,%ebp
c0104e4f:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104e52:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e55:	89 c2                	mov    %eax,%edx
c0104e57:	c1 ea 0c             	shr    $0xc,%edx
c0104e5a:	a1 80 fc 1a c0       	mov    0xc01afc80,%eax
c0104e5f:	39 c2                	cmp    %eax,%edx
c0104e61:	72 1c                	jb     c0104e7f <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104e63:	c7 44 24 08 10 d3 10 	movl   $0xc010d310,0x8(%esp)
c0104e6a:	c0 
c0104e6b:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104e72:	00 
c0104e73:	c7 04 24 2f d3 10 c0 	movl   $0xc010d32f,(%esp)
c0104e7a:	e8 3d bf ff ff       	call   c0100dbc <__panic>
    }
    return &pages[PPN(pa)];
c0104e7f:	a1 90 1d 1b c0       	mov    0xc01b1d90,%eax
c0104e84:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e87:	c1 ea 0c             	shr    $0xc,%edx
c0104e8a:	c1 e2 05             	shl    $0x5,%edx
c0104e8d:	01 d0                	add    %edx,%eax
}
c0104e8f:	c9                   	leave  
c0104e90:	c3                   	ret    

c0104e91 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104e91:	55                   	push   %ebp
c0104e92:	89 e5                	mov    %esp,%ebp
c0104e94:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104e97:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e9a:	89 04 24             	mov    %eax,(%esp)
c0104e9d:	e8 94 ff ff ff       	call   c0104e36 <page2pa>
c0104ea2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ea5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ea8:	c1 e8 0c             	shr    $0xc,%eax
c0104eab:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104eae:	a1 80 fc 1a c0       	mov    0xc01afc80,%eax
c0104eb3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104eb6:	72 23                	jb     c0104edb <page2kva+0x4a>
c0104eb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ebb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104ebf:	c7 44 24 08 40 d3 10 	movl   $0xc010d340,0x8(%esp)
c0104ec6:	c0 
c0104ec7:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104ece:	00 
c0104ecf:	c7 04 24 2f d3 10 c0 	movl   $0xc010d32f,(%esp)
c0104ed6:	e8 e1 be ff ff       	call   c0100dbc <__panic>
c0104edb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ede:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104ee3:	c9                   	leave  
c0104ee4:	c3                   	ret    

c0104ee5 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104ee5:	55                   	push   %ebp
c0104ee6:	89 e5                	mov    %esp,%ebp
c0104ee8:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0104eeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0104eee:	83 e0 01             	and    $0x1,%eax
c0104ef1:	85 c0                	test   %eax,%eax
c0104ef3:	75 1c                	jne    c0104f11 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0104ef5:	c7 44 24 08 64 d3 10 	movl   $0xc010d364,0x8(%esp)
c0104efc:	c0 
c0104efd:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104f04:	00 
c0104f05:	c7 04 24 2f d3 10 c0 	movl   $0xc010d32f,(%esp)
c0104f0c:	e8 ab be ff ff       	call   c0100dbc <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104f11:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f14:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104f19:	89 04 24             	mov    %eax,(%esp)
c0104f1c:	e8 2b ff ff ff       	call   c0104e4c <pa2page>
}
c0104f21:	c9                   	leave  
c0104f22:	c3                   	ret    

c0104f23 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0104f23:	55                   	push   %ebp
c0104f24:	89 e5                	mov    %esp,%ebp
c0104f26:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0104f29:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f2c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104f31:	89 04 24             	mov    %eax,(%esp)
c0104f34:	e8 13 ff ff ff       	call   c0104e4c <pa2page>
}
c0104f39:	c9                   	leave  
c0104f3a:	c3                   	ret    

c0104f3b <page_ref>:

static inline int
page_ref(struct Page *page) {
c0104f3b:	55                   	push   %ebp
c0104f3c:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0104f3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f41:	8b 00                	mov    (%eax),%eax
}
c0104f43:	5d                   	pop    %ebp
c0104f44:	c3                   	ret    

c0104f45 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0104f45:	55                   	push   %ebp
c0104f46:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0104f48:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f4b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104f4e:	89 10                	mov    %edx,(%eax)
}
c0104f50:	5d                   	pop    %ebp
c0104f51:	c3                   	ret    

c0104f52 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0104f52:	55                   	push   %ebp
c0104f53:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0104f55:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f58:	8b 00                	mov    (%eax),%eax
c0104f5a:	8d 50 01             	lea    0x1(%eax),%edx
c0104f5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f60:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104f62:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f65:	8b 00                	mov    (%eax),%eax
}
c0104f67:	5d                   	pop    %ebp
c0104f68:	c3                   	ret    

c0104f69 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0104f69:	55                   	push   %ebp
c0104f6a:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0104f6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f6f:	8b 00                	mov    (%eax),%eax
c0104f71:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104f74:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f77:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104f79:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f7c:	8b 00                	mov    (%eax),%eax
}
c0104f7e:	5d                   	pop    %ebp
c0104f7f:	c3                   	ret    

c0104f80 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104f80:	55                   	push   %ebp
c0104f81:	89 e5                	mov    %esp,%ebp
c0104f83:	53                   	push   %ebx
c0104f84:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104f87:	9c                   	pushf  
c0104f88:	5b                   	pop    %ebx
c0104f89:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c0104f8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104f8f:	25 00 02 00 00       	and    $0x200,%eax
c0104f94:	85 c0                	test   %eax,%eax
c0104f96:	74 0c                	je     c0104fa4 <__intr_save+0x24>
        intr_disable();
c0104f98:	e8 4d d1 ff ff       	call   c01020ea <intr_disable>
        return 1;
c0104f9d:	b8 01 00 00 00       	mov    $0x1,%eax
c0104fa2:	eb 05                	jmp    c0104fa9 <__intr_save+0x29>
    }
    return 0;
c0104fa4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104fa9:	83 c4 14             	add    $0x14,%esp
c0104fac:	5b                   	pop    %ebx
c0104fad:	5d                   	pop    %ebp
c0104fae:	c3                   	ret    

c0104faf <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104faf:	55                   	push   %ebp
c0104fb0:	89 e5                	mov    %esp,%ebp
c0104fb2:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104fb5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104fb9:	74 05                	je     c0104fc0 <__intr_restore+0x11>
        intr_enable();
c0104fbb:	e8 24 d1 ff ff       	call   c01020e4 <intr_enable>
    }
}
c0104fc0:	c9                   	leave  
c0104fc1:	c3                   	ret    

c0104fc2 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0104fc2:	55                   	push   %ebp
c0104fc3:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0104fc5:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fc8:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0104fcb:	b8 23 00 00 00       	mov    $0x23,%eax
c0104fd0:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0104fd2:	b8 23 00 00 00       	mov    $0x23,%eax
c0104fd7:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0104fd9:	b8 10 00 00 00       	mov    $0x10,%eax
c0104fde:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0104fe0:	b8 10 00 00 00       	mov    $0x10,%eax
c0104fe5:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0104fe7:	b8 10 00 00 00       	mov    $0x10,%eax
c0104fec:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0104fee:	ea f5 4f 10 c0 08 00 	ljmp   $0x8,$0xc0104ff5
}
c0104ff5:	5d                   	pop    %ebp
c0104ff6:	c3                   	ret    

c0104ff7 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0104ff7:	55                   	push   %ebp
c0104ff8:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0104ffa:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ffd:	a3 a4 fc 1a c0       	mov    %eax,0xc01afca4
}
c0105002:	5d                   	pop    %ebp
c0105003:	c3                   	ret    

c0105004 <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0105004:	55                   	push   %ebp
c0105005:	89 e5                	mov    %esp,%ebp
c0105007:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c010500a:	b8 00 d0 12 c0       	mov    $0xc012d000,%eax
c010500f:	89 04 24             	mov    %eax,(%esp)
c0105012:	e8 e0 ff ff ff       	call   c0104ff7 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c0105017:	66 c7 05 a8 fc 1a c0 	movw   $0x10,0xc01afca8
c010501e:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0105020:	66 c7 05 48 da 12 c0 	movw   $0x68,0xc012da48
c0105027:	68 00 
c0105029:	b8 a0 fc 1a c0       	mov    $0xc01afca0,%eax
c010502e:	66 a3 4a da 12 c0    	mov    %ax,0xc012da4a
c0105034:	b8 a0 fc 1a c0       	mov    $0xc01afca0,%eax
c0105039:	c1 e8 10             	shr    $0x10,%eax
c010503c:	a2 4c da 12 c0       	mov    %al,0xc012da4c
c0105041:	0f b6 05 4d da 12 c0 	movzbl 0xc012da4d,%eax
c0105048:	83 e0 f0             	and    $0xfffffff0,%eax
c010504b:	83 c8 09             	or     $0x9,%eax
c010504e:	a2 4d da 12 c0       	mov    %al,0xc012da4d
c0105053:	0f b6 05 4d da 12 c0 	movzbl 0xc012da4d,%eax
c010505a:	83 e0 ef             	and    $0xffffffef,%eax
c010505d:	a2 4d da 12 c0       	mov    %al,0xc012da4d
c0105062:	0f b6 05 4d da 12 c0 	movzbl 0xc012da4d,%eax
c0105069:	83 e0 9f             	and    $0xffffff9f,%eax
c010506c:	a2 4d da 12 c0       	mov    %al,0xc012da4d
c0105071:	0f b6 05 4d da 12 c0 	movzbl 0xc012da4d,%eax
c0105078:	83 c8 80             	or     $0xffffff80,%eax
c010507b:	a2 4d da 12 c0       	mov    %al,0xc012da4d
c0105080:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c0105087:	83 e0 f0             	and    $0xfffffff0,%eax
c010508a:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c010508f:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c0105096:	83 e0 ef             	and    $0xffffffef,%eax
c0105099:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c010509e:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c01050a5:	83 e0 df             	and    $0xffffffdf,%eax
c01050a8:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c01050ad:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c01050b4:	83 c8 40             	or     $0x40,%eax
c01050b7:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c01050bc:	0f b6 05 4e da 12 c0 	movzbl 0xc012da4e,%eax
c01050c3:	83 e0 7f             	and    $0x7f,%eax
c01050c6:	a2 4e da 12 c0       	mov    %al,0xc012da4e
c01050cb:	b8 a0 fc 1a c0       	mov    $0xc01afca0,%eax
c01050d0:	c1 e8 18             	shr    $0x18,%eax
c01050d3:	a2 4f da 12 c0       	mov    %al,0xc012da4f

    // reload all segment registers
    lgdt(&gdt_pd);
c01050d8:	c7 04 24 50 da 12 c0 	movl   $0xc012da50,(%esp)
c01050df:	e8 de fe ff ff       	call   c0104fc2 <lgdt>
c01050e4:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c01050ea:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01050ee:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c01050f1:	c9                   	leave  
c01050f2:	c3                   	ret    

c01050f3 <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c01050f3:	55                   	push   %ebp
c01050f4:	89 e5                	mov    %esp,%ebp
c01050f6:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c01050f9:	c7 05 88 1d 1b c0 f0 	movl   $0xc010d1f0,0xc01b1d88
c0105100:	d1 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c0105103:	a1 88 1d 1b c0       	mov    0xc01b1d88,%eax
c0105108:	8b 00                	mov    (%eax),%eax
c010510a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010510e:	c7 04 24 90 d3 10 c0 	movl   $0xc010d390,(%esp)
c0105115:	e8 49 b2 ff ff       	call   c0100363 <cprintf>
    pmm_manager->init();
c010511a:	a1 88 1d 1b c0       	mov    0xc01b1d88,%eax
c010511f:	8b 40 04             	mov    0x4(%eax),%eax
c0105122:	ff d0                	call   *%eax
}
c0105124:	c9                   	leave  
c0105125:	c3                   	ret    

c0105126 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c0105126:	55                   	push   %ebp
c0105127:	89 e5                	mov    %esp,%ebp
c0105129:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c010512c:	a1 88 1d 1b c0       	mov    0xc01b1d88,%eax
c0105131:	8b 50 08             	mov    0x8(%eax),%edx
c0105134:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105137:	89 44 24 04          	mov    %eax,0x4(%esp)
c010513b:	8b 45 08             	mov    0x8(%ebp),%eax
c010513e:	89 04 24             	mov    %eax,(%esp)
c0105141:	ff d2                	call   *%edx
}
c0105143:	c9                   	leave  
c0105144:	c3                   	ret    

c0105145 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c0105145:	55                   	push   %ebp
c0105146:	89 e5                	mov    %esp,%ebp
c0105148:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c010514b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c0105152:	e8 29 fe ff ff       	call   c0104f80 <__intr_save>
c0105157:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c010515a:	a1 88 1d 1b c0       	mov    0xc01b1d88,%eax
c010515f:	8b 50 0c             	mov    0xc(%eax),%edx
c0105162:	8b 45 08             	mov    0x8(%ebp),%eax
c0105165:	89 04 24             	mov    %eax,(%esp)
c0105168:	ff d2                	call   *%edx
c010516a:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c010516d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105170:	89 04 24             	mov    %eax,(%esp)
c0105173:	e8 37 fe ff ff       	call   c0104faf <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0105178:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010517c:	75 2d                	jne    c01051ab <alloc_pages+0x66>
c010517e:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0105182:	77 27                	ja     c01051ab <alloc_pages+0x66>
c0105184:	a1 0c fd 1a c0       	mov    0xc01afd0c,%eax
c0105189:	85 c0                	test   %eax,%eax
c010518b:	74 1e                	je     c01051ab <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c010518d:	8b 55 08             	mov    0x8(%ebp),%edx
c0105190:	a1 6c 1e 1b c0       	mov    0xc01b1e6c,%eax
c0105195:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010519c:	00 
c010519d:	89 54 24 04          	mov    %edx,0x4(%esp)
c01051a1:	89 04 24             	mov    %eax,(%esp)
c01051a4:	e8 a2 1d 00 00       	call   c0106f4b <swap_out>
    }
c01051a9:	eb a7                	jmp    c0105152 <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c01051ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01051ae:	c9                   	leave  
c01051af:	c3                   	ret    

c01051b0 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c01051b0:	55                   	push   %ebp
c01051b1:	89 e5                	mov    %esp,%ebp
c01051b3:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01051b6:	e8 c5 fd ff ff       	call   c0104f80 <__intr_save>
c01051bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c01051be:	a1 88 1d 1b c0       	mov    0xc01b1d88,%eax
c01051c3:	8b 50 10             	mov    0x10(%eax),%edx
c01051c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01051c9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01051cd:	8b 45 08             	mov    0x8(%ebp),%eax
c01051d0:	89 04 24             	mov    %eax,(%esp)
c01051d3:	ff d2                	call   *%edx
    }
    local_intr_restore(intr_flag);
c01051d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051d8:	89 04 24             	mov    %eax,(%esp)
c01051db:	e8 cf fd ff ff       	call   c0104faf <__intr_restore>
}
c01051e0:	c9                   	leave  
c01051e1:	c3                   	ret    

c01051e2 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c01051e2:	55                   	push   %ebp
c01051e3:	89 e5                	mov    %esp,%ebp
c01051e5:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c01051e8:	e8 93 fd ff ff       	call   c0104f80 <__intr_save>
c01051ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c01051f0:	a1 88 1d 1b c0       	mov    0xc01b1d88,%eax
c01051f5:	8b 40 14             	mov    0x14(%eax),%eax
c01051f8:	ff d0                	call   *%eax
c01051fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c01051fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105200:	89 04 24             	mov    %eax,(%esp)
c0105203:	e8 a7 fd ff ff       	call   c0104faf <__intr_restore>
    return ret;
c0105208:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010520b:	c9                   	leave  
c010520c:	c3                   	ret    

c010520d <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c010520d:	55                   	push   %ebp
c010520e:	89 e5                	mov    %esp,%ebp
c0105210:	57                   	push   %edi
c0105211:	56                   	push   %esi
c0105212:	53                   	push   %ebx
c0105213:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0105219:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c0105220:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0105227:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c010522e:	c7 04 24 a7 d3 10 c0 	movl   $0xc010d3a7,(%esp)
c0105235:	e8 29 b1 ff ff       	call   c0100363 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c010523a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105241:	e9 0b 01 00 00       	jmp    c0105351 <page_init+0x144>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105246:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105249:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010524c:	89 d0                	mov    %edx,%eax
c010524e:	c1 e0 02             	shl    $0x2,%eax
c0105251:	01 d0                	add    %edx,%eax
c0105253:	c1 e0 02             	shl    $0x2,%eax
c0105256:	01 c8                	add    %ecx,%eax
c0105258:	8b 50 08             	mov    0x8(%eax),%edx
c010525b:	8b 40 04             	mov    0x4(%eax),%eax
c010525e:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0105261:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0105264:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105267:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010526a:	89 d0                	mov    %edx,%eax
c010526c:	c1 e0 02             	shl    $0x2,%eax
c010526f:	01 d0                	add    %edx,%eax
c0105271:	c1 e0 02             	shl    $0x2,%eax
c0105274:	01 c8                	add    %ecx,%eax
c0105276:	8b 50 10             	mov    0x10(%eax),%edx
c0105279:	8b 40 0c             	mov    0xc(%eax),%eax
c010527c:	03 45 b8             	add    -0x48(%ebp),%eax
c010527f:	13 55 bc             	adc    -0x44(%ebp),%edx
c0105282:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0105285:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
c0105288:	8b 4d c4             	mov    -0x3c(%ebp),%ecx

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c010528b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010528e:	89 d0                	mov    %edx,%eax
c0105290:	c1 e0 02             	shl    $0x2,%eax
c0105293:	01 d0                	add    %edx,%eax
c0105295:	c1 e0 02             	shl    $0x2,%eax
c0105298:	01 c8                	add    %ecx,%eax
c010529a:	83 c0 14             	add    $0x14,%eax
c010529d:	8b 00                	mov    (%eax),%eax
c010529f:	89 45 84             	mov    %eax,-0x7c(%ebp)
c01052a2:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01052a5:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01052a8:	89 c6                	mov    %eax,%esi
c01052aa:	89 d7                	mov    %edx,%edi
c01052ac:	83 c6 ff             	add    $0xffffffff,%esi
c01052af:	83 d7 ff             	adc    $0xffffffff,%edi
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
c01052b2:	8b 4d c4             	mov    -0x3c(%ebp),%ecx

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c01052b5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052b8:	89 d0                	mov    %edx,%eax
c01052ba:	c1 e0 02             	shl    $0x2,%eax
c01052bd:	01 d0                	add    %edx,%eax
c01052bf:	c1 e0 02             	shl    $0x2,%eax
c01052c2:	01 c8                	add    %ecx,%eax
c01052c4:	8b 48 0c             	mov    0xc(%eax),%ecx
c01052c7:	8b 58 10             	mov    0x10(%eax),%ebx
c01052ca:	8b 45 84             	mov    -0x7c(%ebp),%eax
c01052cd:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c01052d1:	89 74 24 14          	mov    %esi,0x14(%esp)
c01052d5:	89 7c 24 18          	mov    %edi,0x18(%esp)
c01052d9:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01052dc:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01052df:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01052e3:	89 54 24 10          	mov    %edx,0x10(%esp)
c01052e7:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01052eb:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c01052ef:	c7 04 24 b4 d3 10 c0 	movl   $0xc010d3b4,(%esp)
c01052f6:	e8 68 b0 ff ff       	call   c0100363 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c01052fb:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01052fe:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105301:	89 d0                	mov    %edx,%eax
c0105303:	c1 e0 02             	shl    $0x2,%eax
c0105306:	01 d0                	add    %edx,%eax
c0105308:	c1 e0 02             	shl    $0x2,%eax
c010530b:	01 c8                	add    %ecx,%eax
c010530d:	83 c0 14             	add    $0x14,%eax
c0105310:	8b 00                	mov    (%eax),%eax
c0105312:	83 f8 01             	cmp    $0x1,%eax
c0105315:	75 36                	jne    c010534d <page_init+0x140>
            if (maxpa < end && begin < KMEMSIZE) {
c0105317:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010531a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010531d:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105320:	77 2b                	ja     c010534d <page_init+0x140>
c0105322:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105325:	72 05                	jb     c010532c <page_init+0x11f>
c0105327:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c010532a:	73 21                	jae    c010534d <page_init+0x140>
c010532c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105330:	77 1b                	ja     c010534d <page_init+0x140>
c0105332:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105336:	72 09                	jb     c0105341 <page_init+0x134>
c0105338:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c010533f:	77 0c                	ja     c010534d <page_init+0x140>
                maxpa = end;
c0105341:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105344:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105347:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010534a:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c010534d:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105351:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105354:	8b 00                	mov    (%eax),%eax
c0105356:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0105359:	0f 8f e7 fe ff ff    	jg     c0105246 <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c010535f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105363:	72 1d                	jb     c0105382 <page_init+0x175>
c0105365:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105369:	77 09                	ja     c0105374 <page_init+0x167>
c010536b:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c0105372:	76 0e                	jbe    c0105382 <page_init+0x175>
        maxpa = KMEMSIZE;
c0105374:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c010537b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c0105382:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105385:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105388:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010538c:	c1 ea 0c             	shr    $0xc,%edx
c010538f:	a3 80 fc 1a c0       	mov    %eax,0xc01afc80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0105394:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c010539b:	b8 78 1e 1b c0       	mov    $0xc01b1e78,%eax
c01053a0:	83 e8 01             	sub    $0x1,%eax
c01053a3:	03 45 ac             	add    -0x54(%ebp),%eax
c01053a6:	89 45 a8             	mov    %eax,-0x58(%ebp)
c01053a9:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01053ac:	ba 00 00 00 00       	mov    $0x0,%edx
c01053b1:	f7 75 ac             	divl   -0x54(%ebp)
c01053b4:	89 d0                	mov    %edx,%eax
c01053b6:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01053b9:	89 d1                	mov    %edx,%ecx
c01053bb:	29 c1                	sub    %eax,%ecx
c01053bd:	89 c8                	mov    %ecx,%eax
c01053bf:	a3 90 1d 1b c0       	mov    %eax,0xc01b1d90

    for (i = 0; i < npage; i ++) {
c01053c4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01053cb:	eb 27                	jmp    c01053f4 <page_init+0x1e7>
        SetPageReserved(pages + i);
c01053cd:	a1 90 1d 1b c0       	mov    0xc01b1d90,%eax
c01053d2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053d5:	c1 e2 05             	shl    $0x5,%edx
c01053d8:	01 d0                	add    %edx,%eax
c01053da:	83 c0 04             	add    $0x4,%eax
c01053dd:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c01053e4:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01053e7:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01053ea:	8b 55 90             	mov    -0x70(%ebp),%edx
c01053ed:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c01053f0:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01053f4:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053f7:	a1 80 fc 1a c0       	mov    0xc01afc80,%eax
c01053fc:	39 c2                	cmp    %eax,%edx
c01053fe:	72 cd                	jb     c01053cd <page_init+0x1c0>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c0105400:	a1 80 fc 1a c0       	mov    0xc01afc80,%eax
c0105405:	89 c2                	mov    %eax,%edx
c0105407:	c1 e2 05             	shl    $0x5,%edx
c010540a:	a1 90 1d 1b c0       	mov    0xc01b1d90,%eax
c010540f:	01 d0                	add    %edx,%eax
c0105411:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c0105414:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c010541b:	77 23                	ja     c0105440 <page_init+0x233>
c010541d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105420:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105424:	c7 44 24 08 e4 d3 10 	movl   $0xc010d3e4,0x8(%esp)
c010542b:	c0 
c010542c:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0105433:	00 
c0105434:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c010543b:	e8 7c b9 ff ff       	call   c0100dbc <__panic>
c0105440:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105443:	05 00 00 00 40       	add    $0x40000000,%eax
c0105448:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c010544b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105452:	e9 7c 01 00 00       	jmp    c01055d3 <page_init+0x3c6>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c0105457:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010545a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010545d:	89 d0                	mov    %edx,%eax
c010545f:	c1 e0 02             	shl    $0x2,%eax
c0105462:	01 d0                	add    %edx,%eax
c0105464:	c1 e0 02             	shl    $0x2,%eax
c0105467:	01 c8                	add    %ecx,%eax
c0105469:	8b 50 08             	mov    0x8(%eax),%edx
c010546c:	8b 40 04             	mov    0x4(%eax),%eax
c010546f:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105472:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0105475:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105478:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010547b:	89 d0                	mov    %edx,%eax
c010547d:	c1 e0 02             	shl    $0x2,%eax
c0105480:	01 d0                	add    %edx,%eax
c0105482:	c1 e0 02             	shl    $0x2,%eax
c0105485:	01 c8                	add    %ecx,%eax
c0105487:	8b 50 10             	mov    0x10(%eax),%edx
c010548a:	8b 40 0c             	mov    0xc(%eax),%eax
c010548d:	03 45 d0             	add    -0x30(%ebp),%eax
c0105490:	13 55 d4             	adc    -0x2c(%ebp),%edx
c0105493:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105496:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0105499:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010549c:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010549f:	89 d0                	mov    %edx,%eax
c01054a1:	c1 e0 02             	shl    $0x2,%eax
c01054a4:	01 d0                	add    %edx,%eax
c01054a6:	c1 e0 02             	shl    $0x2,%eax
c01054a9:	01 c8                	add    %ecx,%eax
c01054ab:	83 c0 14             	add    $0x14,%eax
c01054ae:	8b 00                	mov    (%eax),%eax
c01054b0:	83 f8 01             	cmp    $0x1,%eax
c01054b3:	0f 85 16 01 00 00    	jne    c01055cf <page_init+0x3c2>
            if (begin < freemem) {
c01054b9:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01054bc:	ba 00 00 00 00       	mov    $0x0,%edx
c01054c1:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01054c4:	72 17                	jb     c01054dd <page_init+0x2d0>
c01054c6:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01054c9:	77 05                	ja     c01054d0 <page_init+0x2c3>
c01054cb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01054ce:	76 0d                	jbe    c01054dd <page_init+0x2d0>
                begin = freemem;
c01054d0:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01054d3:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01054d6:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c01054dd:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01054e1:	72 1d                	jb     c0105500 <page_init+0x2f3>
c01054e3:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01054e7:	77 09                	ja     c01054f2 <page_init+0x2e5>
c01054e9:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c01054f0:	76 0e                	jbe    c0105500 <page_init+0x2f3>
                end = KMEMSIZE;
c01054f2:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c01054f9:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c0105500:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105503:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105506:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105509:	0f 87 c0 00 00 00    	ja     c01055cf <page_init+0x3c2>
c010550f:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105512:	72 09                	jb     c010551d <page_init+0x310>
c0105514:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105517:	0f 83 b2 00 00 00    	jae    c01055cf <page_init+0x3c2>
                begin = ROUNDUP(begin, PGSIZE);
c010551d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c0105524:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105527:	03 45 9c             	add    -0x64(%ebp),%eax
c010552a:	83 e8 01             	sub    $0x1,%eax
c010552d:	89 45 98             	mov    %eax,-0x68(%ebp)
c0105530:	8b 45 98             	mov    -0x68(%ebp),%eax
c0105533:	ba 00 00 00 00       	mov    $0x0,%edx
c0105538:	f7 75 9c             	divl   -0x64(%ebp)
c010553b:	89 d0                	mov    %edx,%eax
c010553d:	8b 55 98             	mov    -0x68(%ebp),%edx
c0105540:	89 d1                	mov    %edx,%ecx
c0105542:	29 c1                	sub    %eax,%ecx
c0105544:	89 c8                	mov    %ecx,%eax
c0105546:	ba 00 00 00 00       	mov    $0x0,%edx
c010554b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010554e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0105551:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105554:	89 45 94             	mov    %eax,-0x6c(%ebp)
c0105557:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010555a:	ba 00 00 00 00       	mov    $0x0,%edx
c010555f:	89 c1                	mov    %eax,%ecx
c0105561:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
c0105567:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%ebp)
c010556d:	89 d1                	mov    %edx,%ecx
c010556f:	83 e1 00             	and    $0x0,%ecx
c0105572:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
c0105578:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c010557e:	8b 95 7c ff ff ff    	mov    -0x84(%ebp),%edx
c0105584:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105587:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c010558a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010558d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105590:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105593:	77 3a                	ja     c01055cf <page_init+0x3c2>
c0105595:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105598:	72 05                	jb     c010559f <page_init+0x392>
c010559a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010559d:	73 30                	jae    c01055cf <page_init+0x3c2>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c010559f:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c01055a2:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c01055a5:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01055a8:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01055ab:	29 c8                	sub    %ecx,%eax
c01055ad:	19 da                	sbb    %ebx,%edx
c01055af:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01055b3:	c1 ea 0c             	shr    $0xc,%edx
c01055b6:	89 c3                	mov    %eax,%ebx
c01055b8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01055bb:	89 04 24             	mov    %eax,(%esp)
c01055be:	e8 89 f8 ff ff       	call   c0104e4c <pa2page>
c01055c3:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01055c7:	89 04 24             	mov    %eax,(%esp)
c01055ca:	e8 57 fb ff ff       	call   c0105126 <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c01055cf:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01055d3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01055d6:	8b 00                	mov    (%eax),%eax
c01055d8:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01055db:	0f 8f 76 fe ff ff    	jg     c0105457 <page_init+0x24a>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c01055e1:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c01055e7:	5b                   	pop    %ebx
c01055e8:	5e                   	pop    %esi
c01055e9:	5f                   	pop    %edi
c01055ea:	5d                   	pop    %ebp
c01055eb:	c3                   	ret    

c01055ec <enable_paging>:

static void
enable_paging(void) {
c01055ec:	55                   	push   %ebp
c01055ed:	89 e5                	mov    %esp,%ebp
c01055ef:	53                   	push   %ebx
c01055f0:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c01055f3:	a1 8c 1d 1b c0       	mov    0xc01b1d8c,%eax
c01055f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c01055fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01055fe:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c0105601:	0f 20 c3             	mov    %cr0,%ebx
c0105604:	89 5d f0             	mov    %ebx,-0x10(%ebp)
    return cr0;
c0105607:	8b 45 f0             	mov    -0x10(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c010560a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c010560d:	81 4d f8 2f 00 05 80 	orl    $0x8005002f,-0x8(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c0105614:	83 65 f8 f3          	andl   $0xfffffff3,-0x8(%ebp)
c0105618:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010561b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c010561e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105621:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c0105624:	83 c4 10             	add    $0x10,%esp
c0105627:	5b                   	pop    %ebx
c0105628:	5d                   	pop    %ebp
c0105629:	c3                   	ret    

c010562a <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c010562a:	55                   	push   %ebp
c010562b:	89 e5                	mov    %esp,%ebp
c010562d:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0105630:	8b 45 14             	mov    0x14(%ebp),%eax
c0105633:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105636:	31 d0                	xor    %edx,%eax
c0105638:	25 ff 0f 00 00       	and    $0xfff,%eax
c010563d:	85 c0                	test   %eax,%eax
c010563f:	74 24                	je     c0105665 <boot_map_segment+0x3b>
c0105641:	c7 44 24 0c 16 d4 10 	movl   $0xc010d416,0xc(%esp)
c0105648:	c0 
c0105649:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0105650:	c0 
c0105651:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c0105658:	00 
c0105659:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0105660:	e8 57 b7 ff ff       	call   c0100dbc <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0105665:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c010566c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010566f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105674:	03 45 10             	add    0x10(%ebp),%eax
c0105677:	03 45 f0             	add    -0x10(%ebp),%eax
c010567a:	83 e8 01             	sub    $0x1,%eax
c010567d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105680:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105683:	ba 00 00 00 00       	mov    $0x0,%edx
c0105688:	f7 75 f0             	divl   -0x10(%ebp)
c010568b:	89 d0                	mov    %edx,%eax
c010568d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105690:	89 d1                	mov    %edx,%ecx
c0105692:	29 c1                	sub    %eax,%ecx
c0105694:	89 c8                	mov    %ecx,%eax
c0105696:	c1 e8 0c             	shr    $0xc,%eax
c0105699:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c010569c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010569f:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01056a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01056a5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01056aa:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c01056ad:	8b 45 14             	mov    0x14(%ebp),%eax
c01056b0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01056b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056b6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01056bb:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01056be:	eb 6b                	jmp    c010572b <boot_map_segment+0x101>
        pte_t *ptep = get_pte(pgdir, la, 1);
c01056c0:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01056c7:	00 
c01056c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01056cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01056cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01056d2:	89 04 24             	mov    %eax,(%esp)
c01056d5:	e8 d1 01 00 00       	call   c01058ab <get_pte>
c01056da:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c01056dd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01056e1:	75 24                	jne    c0105707 <boot_map_segment+0xdd>
c01056e3:	c7 44 24 0c 42 d4 10 	movl   $0xc010d442,0xc(%esp)
c01056ea:	c0 
c01056eb:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c01056f2:	c0 
c01056f3:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c01056fa:	00 
c01056fb:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0105702:	e8 b5 b6 ff ff       	call   c0100dbc <__panic>
        *ptep = pa | PTE_P | perm;
c0105707:	8b 45 18             	mov    0x18(%ebp),%eax
c010570a:	8b 55 14             	mov    0x14(%ebp),%edx
c010570d:	09 d0                	or     %edx,%eax
c010570f:	89 c2                	mov    %eax,%edx
c0105711:	83 ca 01             	or     $0x1,%edx
c0105714:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105717:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0105719:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010571d:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c0105724:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c010572b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010572f:	75 8f                	jne    c01056c0 <boot_map_segment+0x96>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c0105731:	c9                   	leave  
c0105732:	c3                   	ret    

c0105733 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0105733:	55                   	push   %ebp
c0105734:	89 e5                	mov    %esp,%ebp
c0105736:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c0105739:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105740:	e8 00 fa ff ff       	call   c0105145 <alloc_pages>
c0105745:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0105748:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010574c:	75 1c                	jne    c010576a <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c010574e:	c7 44 24 08 4f d4 10 	movl   $0xc010d44f,0x8(%esp)
c0105755:	c0 
c0105756:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c010575d:	00 
c010575e:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0105765:	e8 52 b6 ff ff       	call   c0100dbc <__panic>
    }
    return page2kva(p);
c010576a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010576d:	89 04 24             	mov    %eax,(%esp)
c0105770:	e8 1c f7 ff ff       	call   c0104e91 <page2kva>
}
c0105775:	c9                   	leave  
c0105776:	c3                   	ret    

c0105777 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0105777:	55                   	push   %ebp
c0105778:	89 e5                	mov    %esp,%ebp
c010577a:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c010577d:	e8 71 f9 ff ff       	call   c01050f3 <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0105782:	e8 86 fa ff ff       	call   c010520d <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0105787:	e8 64 09 00 00       	call   c01060f0 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c010578c:	e8 a2 ff ff ff       	call   c0105733 <boot_alloc_page>
c0105791:	a3 84 fc 1a c0       	mov    %eax,0xc01afc84
    memset(boot_pgdir, 0, PGSIZE);
c0105796:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c010579b:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01057a2:	00 
c01057a3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01057aa:	00 
c01057ab:	89 04 24             	mov    %eax,(%esp)
c01057ae:	e8 f0 6b 00 00       	call   c010c3a3 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c01057b3:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c01057b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01057bb:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01057c2:	77 23                	ja     c01057e7 <pmm_init+0x70>
c01057c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057c7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01057cb:	c7 44 24 08 e4 d3 10 	movl   $0xc010d3e4,0x8(%esp)
c01057d2:	c0 
c01057d3:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c01057da:	00 
c01057db:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c01057e2:	e8 d5 b5 ff ff       	call   c0100dbc <__panic>
c01057e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057ea:	05 00 00 00 40       	add    $0x40000000,%eax
c01057ef:	a3 8c 1d 1b c0       	mov    %eax,0xc01b1d8c

    check_pgdir();
c01057f4:	e8 15 09 00 00       	call   c010610e <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c01057f9:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c01057fe:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0105804:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c0105809:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010580c:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0105813:	77 23                	ja     c0105838 <pmm_init+0xc1>
c0105815:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105818:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010581c:	c7 44 24 08 e4 d3 10 	movl   $0xc010d3e4,0x8(%esp)
c0105823:	c0 
c0105824:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c010582b:	00 
c010582c:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0105833:	e8 84 b5 ff ff       	call   c0100dbc <__panic>
c0105838:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010583b:	05 00 00 00 40       	add    $0x40000000,%eax
c0105840:	83 c8 03             	or     $0x3,%eax
c0105843:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0105845:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c010584a:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0105851:	00 
c0105852:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105859:	00 
c010585a:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c0105861:	38 
c0105862:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c0105869:	c0 
c010586a:	89 04 24             	mov    %eax,(%esp)
c010586d:	e8 b8 fd ff ff       	call   c010562a <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c0105872:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c0105877:	8b 15 84 fc 1a c0    	mov    0xc01afc84,%edx
c010587d:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c0105883:	89 10                	mov    %edx,(%eax)

    enable_paging();
c0105885:	e8 62 fd ff ff       	call   c01055ec <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c010588a:	e8 75 f7 ff ff       	call   c0105004 <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c010588f:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c0105894:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c010589a:	e8 0a 0f 00 00       	call   c01067a9 <check_boot_pgdir>

    print_pgdir();
c010589f:	e8 7e 13 00 00       	call   c0106c22 <print_pgdir>
    
    kmalloc_init();
c01058a4:	e8 d6 f2 ff ff       	call   c0104b7f <kmalloc_init>

}
c01058a9:	c9                   	leave  
c01058aa:	c3                   	ret    

c01058ab <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c01058ab:	55                   	push   %ebp
c01058ac:	89 e5                	mov    %esp,%ebp
c01058ae:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c01058b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01058b4:	c1 e8 16             	shr    $0x16,%eax
c01058b7:	c1 e0 02             	shl    $0x2,%eax
c01058ba:	03 45 08             	add    0x8(%ebp),%eax
c01058bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(*pdep & PTE_P)) {
c01058c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01058c3:	8b 00                	mov    (%eax),%eax
c01058c5:	83 e0 01             	and    $0x1,%eax
c01058c8:	85 c0                	test   %eax,%eax
c01058ca:	0f 85 c4 00 00 00    	jne    c0105994 <get_pte+0xe9>
        if (!create)
c01058d0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01058d4:	75 0a                	jne    c01058e0 <get_pte+0x35>
            return NULL;
c01058d6:	b8 00 00 00 00       	mov    $0x0,%eax
c01058db:	e9 10 01 00 00       	jmp    c01059f0 <get_pte+0x145>
        struct Page* page;
        if (create && (page = alloc_pages(1)) == NULL)
c01058e0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01058e4:	74 1f                	je     c0105905 <get_pte+0x5a>
c01058e6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01058ed:	e8 53 f8 ff ff       	call   c0105145 <alloc_pages>
c01058f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01058f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01058f9:	75 0a                	jne    c0105905 <get_pte+0x5a>
            return NULL;
c01058fb:	b8 00 00 00 00       	mov    $0x0,%eax
c0105900:	e9 eb 00 00 00       	jmp    c01059f0 <get_pte+0x145>
        set_page_ref(page, 1);
c0105905:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010590c:	00 
c010590d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105910:	89 04 24             	mov    %eax,(%esp)
c0105913:	e8 2d f6 ff ff       	call   c0104f45 <set_page_ref>
        uintptr_t phia = page2pa(page);
c0105918:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010591b:	89 04 24             	mov    %eax,(%esp)
c010591e:	e8 13 f5 ff ff       	call   c0104e36 <page2pa>
c0105923:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(phia), 0, PGSIZE);
c0105926:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105929:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010592c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010592f:	c1 e8 0c             	shr    $0xc,%eax
c0105932:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105935:	a1 80 fc 1a c0       	mov    0xc01afc80,%eax
c010593a:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010593d:	72 23                	jb     c0105962 <get_pte+0xb7>
c010593f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105942:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105946:	c7 44 24 08 40 d3 10 	movl   $0xc010d340,0x8(%esp)
c010594d:	c0 
c010594e:	c7 44 24 04 98 01 00 	movl   $0x198,0x4(%esp)
c0105955:	00 
c0105956:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c010595d:	e8 5a b4 ff ff       	call   c0100dbc <__panic>
c0105962:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105965:	2d 00 00 00 40       	sub    $0x40000000,%eax
c010596a:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105971:	00 
c0105972:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105979:	00 
c010597a:	89 04 24             	mov    %eax,(%esp)
c010597d:	e8 21 6a 00 00       	call   c010c3a3 <memset>
        *pdep = PDE_ADDR(phia) | PTE_U | PTE_W | PTE_P;
c0105982:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105985:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010598a:	89 c2                	mov    %eax,%edx
c010598c:	83 ca 07             	or     $0x7,%edx
c010598f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105992:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c0105994:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105997:	8b 00                	mov    (%eax),%eax
c0105999:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010599e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01059a1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059a4:	c1 e8 0c             	shr    $0xc,%eax
c01059a7:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01059aa:	a1 80 fc 1a c0       	mov    0xc01afc80,%eax
c01059af:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c01059b2:	72 23                	jb     c01059d7 <get_pte+0x12c>
c01059b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01059bb:	c7 44 24 08 40 d3 10 	movl   $0xc010d340,0x8(%esp)
c01059c2:	c0 
c01059c3:	c7 44 24 04 9b 01 00 	movl   $0x19b,0x4(%esp)
c01059ca:	00 
c01059cb:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c01059d2:	e8 e5 b3 ff ff       	call   c0100dbc <__panic>
c01059d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059da:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01059df:	8b 55 0c             	mov    0xc(%ebp),%edx
c01059e2:	c1 ea 0c             	shr    $0xc,%edx
c01059e5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c01059eb:	c1 e2 02             	shl    $0x2,%edx
c01059ee:	01 d0                	add    %edx,%eax
}
c01059f0:	c9                   	leave  
c01059f1:	c3                   	ret    

c01059f2 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c01059f2:	55                   	push   %ebp
c01059f3:	89 e5                	mov    %esp,%ebp
c01059f5:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c01059f8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01059ff:	00 
c0105a00:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a03:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a07:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a0a:	89 04 24             	mov    %eax,(%esp)
c0105a0d:	e8 99 fe ff ff       	call   c01058ab <get_pte>
c0105a12:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0105a15:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105a19:	74 08                	je     c0105a23 <get_page+0x31>
        *ptep_store = ptep;
c0105a1b:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a1e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105a21:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0105a23:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a27:	74 1b                	je     c0105a44 <get_page+0x52>
c0105a29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a2c:	8b 00                	mov    (%eax),%eax
c0105a2e:	83 e0 01             	and    $0x1,%eax
c0105a31:	84 c0                	test   %al,%al
c0105a33:	74 0f                	je     c0105a44 <get_page+0x52>
        return pte2page(*ptep);
c0105a35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a38:	8b 00                	mov    (%eax),%eax
c0105a3a:	89 04 24             	mov    %eax,(%esp)
c0105a3d:	e8 a3 f4 ff ff       	call   c0104ee5 <pte2page>
c0105a42:	eb 05                	jmp    c0105a49 <get_page+0x57>
    }
    return NULL;
c0105a44:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105a49:	c9                   	leave  
c0105a4a:	c3                   	ret    

c0105a4b <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0105a4b:	55                   	push   %ebp
c0105a4c:	89 e5                	mov    %esp,%ebp
c0105a4e:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c0105a51:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a54:	8b 00                	mov    (%eax),%eax
c0105a56:	83 e0 01             	and    $0x1,%eax
c0105a59:	84 c0                	test   %al,%al
c0105a5b:	74 52                	je     c0105aaf <page_remove_pte+0x64>
        struct Page *page = pte2page(*ptep);
c0105a5d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a60:	8b 00                	mov    (%eax),%eax
c0105a62:	89 04 24             	mov    %eax,(%esp)
c0105a65:	e8 7b f4 ff ff       	call   c0104ee5 <pte2page>
c0105a6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        page_ref_dec(page);
c0105a6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a70:	89 04 24             	mov    %eax,(%esp)
c0105a73:	e8 f1 f4 ff ff       	call   c0104f69 <page_ref_dec>
        if(page->ref == 0) {
c0105a78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a7b:	8b 00                	mov    (%eax),%eax
c0105a7d:	85 c0                	test   %eax,%eax
c0105a7f:	75 13                	jne    c0105a94 <page_remove_pte+0x49>
            free_page(page);
c0105a81:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105a88:	00 
c0105a89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a8c:	89 04 24             	mov    %eax,(%esp)
c0105a8f:	e8 1c f7 ff ff       	call   c01051b0 <free_pages>
        }
        *ptep = 0;
c0105a94:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a97:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c0105a9d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105aa0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105aa4:	8b 45 08             	mov    0x8(%ebp),%eax
c0105aa7:	89 04 24             	mov    %eax,(%esp)
c0105aaa:	e8 0b 05 00 00       	call   c0105fba <tlb_invalidate>
    }
}
c0105aaf:	c9                   	leave  
c0105ab0:	c3                   	ret    

c0105ab1 <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105ab1:	55                   	push   %ebp
c0105ab2:	89 e5                	mov    %esp,%ebp
c0105ab4:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105ab7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105aba:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105abf:	85 c0                	test   %eax,%eax
c0105ac1:	75 0c                	jne    c0105acf <unmap_range+0x1e>
c0105ac3:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ac6:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105acb:	85 c0                	test   %eax,%eax
c0105acd:	74 24                	je     c0105af3 <unmap_range+0x42>
c0105acf:	c7 44 24 0c 68 d4 10 	movl   $0xc010d468,0xc(%esp)
c0105ad6:	c0 
c0105ad7:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0105ade:	c0 
c0105adf:	c7 44 24 04 d6 01 00 	movl   $0x1d6,0x4(%esp)
c0105ae6:	00 
c0105ae7:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0105aee:	e8 c9 b2 ff ff       	call   c0100dbc <__panic>
    assert(USER_ACCESS(start, end));
c0105af3:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105afa:	76 11                	jbe    c0105b0d <unmap_range+0x5c>
c0105afc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105aff:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105b02:	73 09                	jae    c0105b0d <unmap_range+0x5c>
c0105b04:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105b0b:	76 24                	jbe    c0105b31 <unmap_range+0x80>
c0105b0d:	c7 44 24 0c 91 d4 10 	movl   $0xc010d491,0xc(%esp)
c0105b14:	c0 
c0105b15:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0105b1c:	c0 
c0105b1d:	c7 44 24 04 d7 01 00 	movl   $0x1d7,0x4(%esp)
c0105b24:	00 
c0105b25:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0105b2c:	e8 8b b2 ff ff       	call   c0100dbc <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105b31:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105b38:	00 
c0105b39:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b40:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b43:	89 04 24             	mov    %eax,(%esp)
c0105b46:	e8 60 fd ff ff       	call   c01058ab <get_pte>
c0105b4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105b4e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105b52:	75 18                	jne    c0105b6c <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105b54:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b57:	05 00 00 40 00       	add    $0x400000,%eax
c0105b5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105b5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b62:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105b67:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105b6a:	eb 29                	jmp    c0105b95 <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105b6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b6f:	8b 00                	mov    (%eax),%eax
c0105b71:	85 c0                	test   %eax,%eax
c0105b73:	74 19                	je     c0105b8e <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105b75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b78:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105b7c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b7f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b83:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b86:	89 04 24             	mov    %eax,(%esp)
c0105b89:	e8 bd fe ff ff       	call   c0105a4b <page_remove_pte>
        }
        start += PGSIZE;
c0105b8e:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105b95:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105b99:	74 08                	je     c0105ba3 <unmap_range+0xf2>
c0105b9b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b9e:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105ba1:	72 8e                	jb     c0105b31 <unmap_range+0x80>
}
c0105ba3:	c9                   	leave  
c0105ba4:	c3                   	ret    

c0105ba5 <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105ba5:	55                   	push   %ebp
c0105ba6:	89 e5                	mov    %esp,%ebp
c0105ba8:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105bab:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bae:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105bb3:	85 c0                	test   %eax,%eax
c0105bb5:	75 0c                	jne    c0105bc3 <exit_range+0x1e>
c0105bb7:	8b 45 10             	mov    0x10(%ebp),%eax
c0105bba:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105bbf:	85 c0                	test   %eax,%eax
c0105bc1:	74 24                	je     c0105be7 <exit_range+0x42>
c0105bc3:	c7 44 24 0c 68 d4 10 	movl   $0xc010d468,0xc(%esp)
c0105bca:	c0 
c0105bcb:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0105bd2:	c0 
c0105bd3:	c7 44 24 04 e8 01 00 	movl   $0x1e8,0x4(%esp)
c0105bda:	00 
c0105bdb:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0105be2:	e8 d5 b1 ff ff       	call   c0100dbc <__panic>
    assert(USER_ACCESS(start, end));
c0105be7:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105bee:	76 11                	jbe    c0105c01 <exit_range+0x5c>
c0105bf0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bf3:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105bf6:	73 09                	jae    c0105c01 <exit_range+0x5c>
c0105bf8:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105bff:	76 24                	jbe    c0105c25 <exit_range+0x80>
c0105c01:	c7 44 24 0c 91 d4 10 	movl   $0xc010d491,0xc(%esp)
c0105c08:	c0 
c0105c09:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0105c10:	c0 
c0105c11:	c7 44 24 04 e9 01 00 	movl   $0x1e9,0x4(%esp)
c0105c18:	00 
c0105c19:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0105c20:	e8 97 b1 ff ff       	call   c0100dbc <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105c25:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c28:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105c2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c2e:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105c33:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105c36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c39:	c1 e8 16             	shr    $0x16,%eax
c0105c3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105c3f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c42:	c1 e0 02             	shl    $0x2,%eax
c0105c45:	03 45 08             	add    0x8(%ebp),%eax
c0105c48:	8b 00                	mov    (%eax),%eax
c0105c4a:	83 e0 01             	and    $0x1,%eax
c0105c4d:	84 c0                	test   %al,%al
c0105c4f:	74 32                	je     c0105c83 <exit_range+0xde>
            free_page(pde2page(pgdir[pde_idx]));
c0105c51:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c54:	c1 e0 02             	shl    $0x2,%eax
c0105c57:	03 45 08             	add    0x8(%ebp),%eax
c0105c5a:	8b 00                	mov    (%eax),%eax
c0105c5c:	89 04 24             	mov    %eax,(%esp)
c0105c5f:	e8 bf f2 ff ff       	call   c0104f23 <pde2page>
c0105c64:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105c6b:	00 
c0105c6c:	89 04 24             	mov    %eax,(%esp)
c0105c6f:	e8 3c f5 ff ff       	call   c01051b0 <free_pages>
            pgdir[pde_idx] = 0;
c0105c74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c77:	c1 e0 02             	shl    $0x2,%eax
c0105c7a:	03 45 08             	add    0x8(%ebp),%eax
c0105c7d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105c83:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105c8a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105c8e:	74 08                	je     c0105c98 <exit_range+0xf3>
c0105c90:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c93:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105c96:	72 9e                	jb     c0105c36 <exit_range+0x91>
}
c0105c98:	c9                   	leave  
c0105c99:	c3                   	ret    

c0105c9a <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105c9a:	55                   	push   %ebp
c0105c9b:	89 e5                	mov    %esp,%ebp
c0105c9d:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105ca0:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ca3:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105ca8:	85 c0                	test   %eax,%eax
c0105caa:	75 0c                	jne    c0105cb8 <copy_range+0x1e>
c0105cac:	8b 45 14             	mov    0x14(%ebp),%eax
c0105caf:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105cb4:	85 c0                	test   %eax,%eax
c0105cb6:	74 24                	je     c0105cdc <copy_range+0x42>
c0105cb8:	c7 44 24 0c 68 d4 10 	movl   $0xc010d468,0xc(%esp)
c0105cbf:	c0 
c0105cc0:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0105cc7:	c0 
c0105cc8:	c7 44 24 04 fe 01 00 	movl   $0x1fe,0x4(%esp)
c0105ccf:	00 
c0105cd0:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0105cd7:	e8 e0 b0 ff ff       	call   c0100dbc <__panic>
    assert(USER_ACCESS(start, end));
c0105cdc:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105ce3:	76 11                	jbe    c0105cf6 <copy_range+0x5c>
c0105ce5:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ce8:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105ceb:	73 09                	jae    c0105cf6 <copy_range+0x5c>
c0105ced:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105cf4:	76 24                	jbe    c0105d1a <copy_range+0x80>
c0105cf6:	c7 44 24 0c 91 d4 10 	movl   $0xc010d491,0xc(%esp)
c0105cfd:	c0 
c0105cfe:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0105d05:	c0 
c0105d06:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
c0105d0d:	00 
c0105d0e:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0105d15:	e8 a2 b0 ff ff       	call   c0100dbc <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105d1a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105d21:	00 
c0105d22:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d25:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d29:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d2c:	89 04 24             	mov    %eax,(%esp)
c0105d2f:	e8 77 fb ff ff       	call   c01058ab <get_pte>
c0105d34:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105d37:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105d3b:	75 1b                	jne    c0105d58 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105d3d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d40:	05 00 00 40 00       	add    $0x400000,%eax
c0105d45:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105d48:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d4b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105d50:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105d53:	e9 4c 01 00 00       	jmp    c0105ea4 <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105d58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d5b:	8b 00                	mov    (%eax),%eax
c0105d5d:	83 e0 01             	and    $0x1,%eax
c0105d60:	84 c0                	test   %al,%al
c0105d62:	0f 84 35 01 00 00    	je     c0105e9d <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105d68:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105d6f:	00 
c0105d70:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d73:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d77:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d7a:	89 04 24             	mov    %eax,(%esp)
c0105d7d:	e8 29 fb ff ff       	call   c01058ab <get_pte>
c0105d82:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105d85:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105d89:	75 0a                	jne    c0105d95 <copy_range+0xfb>
                return -E_NO_MEM;
c0105d8b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105d90:	e9 26 01 00 00       	jmp    c0105ebb <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0105d95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d98:	8b 00                	mov    (%eax),%eax
c0105d9a:	83 e0 07             	and    $0x7,%eax
c0105d9d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105da0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105da3:	8b 00                	mov    (%eax),%eax
c0105da5:	89 04 24             	mov    %eax,(%esp)
c0105da8:	e8 38 f1 ff ff       	call   c0104ee5 <pte2page>
c0105dad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105db0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105db7:	e8 89 f3 ff ff       	call   c0105145 <alloc_pages>
c0105dbc:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105dbf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105dc3:	75 24                	jne    c0105de9 <copy_range+0x14f>
c0105dc5:	c7 44 24 0c a9 d4 10 	movl   $0xc010d4a9,0xc(%esp)
c0105dcc:	c0 
c0105dcd:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0105dd4:	c0 
c0105dd5:	c7 44 24 04 12 02 00 	movl   $0x212,0x4(%esp)
c0105ddc:	00 
c0105ddd:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0105de4:	e8 d3 af ff ff       	call   c0100dbc <__panic>
        assert(npage!=NULL);
c0105de9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105ded:	75 24                	jne    c0105e13 <copy_range+0x179>
c0105def:	c7 44 24 0c b4 d4 10 	movl   $0xc010d4b4,0xc(%esp)
c0105df6:	c0 
c0105df7:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0105dfe:	c0 
c0105dff:	c7 44 24 04 13 02 00 	movl   $0x213,0x4(%esp)
c0105e06:	00 
c0105e07:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0105e0e:	e8 a9 af ff ff       	call   c0100dbc <__panic>
        int ret=0;
c0105e13:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
            void * src_kvaddr = page2kva(page);
c0105e1a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e1d:	89 04 24             	mov    %eax,(%esp)
c0105e20:	e8 6c f0 ff ff       	call   c0104e91 <page2kva>
c0105e25:	89 45 d8             	mov    %eax,-0x28(%ebp)
            void * dst_kvaddr = page2kva(npage);
c0105e28:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105e2b:	89 04 24             	mov    %eax,(%esp)
c0105e2e:	e8 5e f0 ff ff       	call   c0104e91 <page2kva>
c0105e33:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
c0105e36:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105e3d:	00 
c0105e3e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105e41:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e45:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105e48:	89 04 24             	mov    %eax,(%esp)
c0105e4b:	e8 52 66 00 00       	call   c010c4a2 <memcpy>
        ret = page_insert(to, npage, start, perm);
c0105e50:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105e53:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105e57:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e5a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e5e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105e61:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e65:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e68:	89 04 24             	mov    %eax,(%esp)
c0105e6b:	e8 91 00 00 00       	call   c0105f01 <page_insert>
c0105e70:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c0105e73:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105e77:	74 24                	je     c0105e9d <copy_range+0x203>
c0105e79:	c7 44 24 0c c0 d4 10 	movl   $0xc010d4c0,0xc(%esp)
c0105e80:	c0 
c0105e81:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0105e88:	c0 
c0105e89:	c7 44 24 04 27 02 00 	movl   $0x227,0x4(%esp)
c0105e90:	00 
c0105e91:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0105e98:	e8 1f af ff ff       	call   c0100dbc <__panic>
        }
        start += PGSIZE;
c0105e9d:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105ea4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105ea8:	74 0c                	je     c0105eb6 <copy_range+0x21c>
c0105eaa:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ead:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105eb0:	0f 82 64 fe ff ff    	jb     c0105d1a <copy_range+0x80>
    return 0;
c0105eb6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105ebb:	c9                   	leave  
c0105ebc:	c3                   	ret    

c0105ebd <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0105ebd:	55                   	push   %ebp
c0105ebe:	89 e5                	mov    %esp,%ebp
c0105ec0:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105ec3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105eca:	00 
c0105ecb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ece:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ed2:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ed5:	89 04 24             	mov    %eax,(%esp)
c0105ed8:	e8 ce f9 ff ff       	call   c01058ab <get_pte>
c0105edd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105ee0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105ee4:	74 19                	je     c0105eff <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0105ee6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ee9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105eed:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ef0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ef4:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ef7:	89 04 24             	mov    %eax,(%esp)
c0105efa:	e8 4c fb ff ff       	call   c0105a4b <page_remove_pte>
    }
}
c0105eff:	c9                   	leave  
c0105f00:	c3                   	ret    

c0105f01 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0105f01:	55                   	push   %ebp
c0105f02:	89 e5                	mov    %esp,%ebp
c0105f04:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0105f07:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105f0e:	00 
c0105f0f:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f12:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f16:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f19:	89 04 24             	mov    %eax,(%esp)
c0105f1c:	e8 8a f9 ff ff       	call   c01058ab <get_pte>
c0105f21:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0105f24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105f28:	75 0a                	jne    c0105f34 <page_insert+0x33>
        return -E_NO_MEM;
c0105f2a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105f2f:	e9 84 00 00 00       	jmp    c0105fb8 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0105f34:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f37:	89 04 24             	mov    %eax,(%esp)
c0105f3a:	e8 13 f0 ff ff       	call   c0104f52 <page_ref_inc>
    if (*ptep & PTE_P) {
c0105f3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f42:	8b 00                	mov    (%eax),%eax
c0105f44:	83 e0 01             	and    $0x1,%eax
c0105f47:	84 c0                	test   %al,%al
c0105f49:	74 3e                	je     c0105f89 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0105f4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f4e:	8b 00                	mov    (%eax),%eax
c0105f50:	89 04 24             	mov    %eax,(%esp)
c0105f53:	e8 8d ef ff ff       	call   c0104ee5 <pte2page>
c0105f58:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0105f5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f5e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105f61:	75 0d                	jne    c0105f70 <page_insert+0x6f>
            page_ref_dec(page);
c0105f63:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f66:	89 04 24             	mov    %eax,(%esp)
c0105f69:	e8 fb ef ff ff       	call   c0104f69 <page_ref_dec>
c0105f6e:	eb 19                	jmp    c0105f89 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0105f70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f73:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f77:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f7a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f7e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f81:	89 04 24             	mov    %eax,(%esp)
c0105f84:	e8 c2 fa ff ff       	call   c0105a4b <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0105f89:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f8c:	89 04 24             	mov    %eax,(%esp)
c0105f8f:	e8 a2 ee ff ff       	call   c0104e36 <page2pa>
c0105f94:	0b 45 14             	or     0x14(%ebp),%eax
c0105f97:	89 c2                	mov    %eax,%edx
c0105f99:	83 ca 01             	or     $0x1,%edx
c0105f9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f9f:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0105fa1:	8b 45 10             	mov    0x10(%ebp),%eax
c0105fa4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105fa8:	8b 45 08             	mov    0x8(%ebp),%eax
c0105fab:	89 04 24             	mov    %eax,(%esp)
c0105fae:	e8 07 00 00 00       	call   c0105fba <tlb_invalidate>
    return 0;
c0105fb3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105fb8:	c9                   	leave  
c0105fb9:	c3                   	ret    

c0105fba <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0105fba:	55                   	push   %ebp
c0105fbb:	89 e5                	mov    %esp,%ebp
c0105fbd:	53                   	push   %ebx
c0105fbe:	83 ec 24             	sub    $0x24,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0105fc1:	0f 20 db             	mov    %cr3,%ebx
c0105fc4:	89 5d f0             	mov    %ebx,-0x10(%ebp)
    return cr3;
c0105fc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c0105fca:	89 c2                	mov    %eax,%edx
c0105fcc:	8b 45 08             	mov    0x8(%ebp),%eax
c0105fcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105fd2:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105fd9:	77 23                	ja     c0105ffe <tlb_invalidate+0x44>
c0105fdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fde:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105fe2:	c7 44 24 08 e4 d3 10 	movl   $0xc010d3e4,0x8(%esp)
c0105fe9:	c0 
c0105fea:	c7 44 24 04 58 02 00 	movl   $0x258,0x4(%esp)
c0105ff1:	00 
c0105ff2:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0105ff9:	e8 be ad ff ff       	call   c0100dbc <__panic>
c0105ffe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106001:	05 00 00 00 40       	add    $0x40000000,%eax
c0106006:	39 c2                	cmp    %eax,%edx
c0106008:	75 0c                	jne    c0106016 <tlb_invalidate+0x5c>
        invlpg((void *)la);
c010600a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010600d:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0106010:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106013:	0f 01 38             	invlpg (%eax)
    }
}
c0106016:	83 c4 24             	add    $0x24,%esp
c0106019:	5b                   	pop    %ebx
c010601a:	5d                   	pop    %ebp
c010601b:	c3                   	ret    

c010601c <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c010601c:	55                   	push   %ebp
c010601d:	89 e5                	mov    %esp,%ebp
c010601f:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0106022:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106029:	e8 17 f1 ff ff       	call   c0105145 <alloc_pages>
c010602e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0106031:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106035:	0f 84 b0 00 00 00    	je     c01060eb <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c010603b:	8b 45 10             	mov    0x10(%ebp),%eax
c010603e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106042:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106045:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106049:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010604c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106050:	8b 45 08             	mov    0x8(%ebp),%eax
c0106053:	89 04 24             	mov    %eax,(%esp)
c0106056:	e8 a6 fe ff ff       	call   c0105f01 <page_insert>
c010605b:	85 c0                	test   %eax,%eax
c010605d:	74 1a                	je     c0106079 <pgdir_alloc_page+0x5d>
            free_page(page);
c010605f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106066:	00 
c0106067:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010606a:	89 04 24             	mov    %eax,(%esp)
c010606d:	e8 3e f1 ff ff       	call   c01051b0 <free_pages>
            return NULL;
c0106072:	b8 00 00 00 00       	mov    $0x0,%eax
c0106077:	eb 75                	jmp    c01060ee <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c0106079:	a1 0c fd 1a c0       	mov    0xc01afd0c,%eax
c010607e:	85 c0                	test   %eax,%eax
c0106080:	74 69                	je     c01060eb <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c0106082:	a1 6c 1e 1b c0       	mov    0xc01b1e6c,%eax
c0106087:	85 c0                	test   %eax,%eax
c0106089:	74 60                	je     c01060eb <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c010608b:	a1 6c 1e 1b c0       	mov    0xc01b1e6c,%eax
c0106090:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0106097:	00 
c0106098:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010609b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010609f:	8b 55 0c             	mov    0xc(%ebp),%edx
c01060a2:	89 54 24 04          	mov    %edx,0x4(%esp)
c01060a6:	89 04 24             	mov    %eax,(%esp)
c01060a9:	e8 51 0e 00 00       	call   c0106eff <swap_map_swappable>
                page->pra_vaddr=la;
c01060ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060b1:	8b 55 0c             	mov    0xc(%ebp),%edx
c01060b4:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c01060b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060ba:	89 04 24             	mov    %eax,(%esp)
c01060bd:	e8 79 ee ff ff       	call   c0104f3b <page_ref>
c01060c2:	83 f8 01             	cmp    $0x1,%eax
c01060c5:	74 24                	je     c01060eb <pgdir_alloc_page+0xcf>
c01060c7:	c7 44 24 0c c9 d4 10 	movl   $0xc010d4c9,0xc(%esp)
c01060ce:	c0 
c01060cf:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c01060d6:	c0 
c01060d7:	c7 44 24 04 6c 02 00 	movl   $0x26c,0x4(%esp)
c01060de:	00 
c01060df:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c01060e6:	e8 d1 ac ff ff       	call   c0100dbc <__panic>
            }
        }

    }

    return page;
c01060eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01060ee:	c9                   	leave  
c01060ef:	c3                   	ret    

c01060f0 <check_alloc_page>:

static void
check_alloc_page(void) {
c01060f0:	55                   	push   %ebp
c01060f1:	89 e5                	mov    %esp,%ebp
c01060f3:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c01060f6:	a1 88 1d 1b c0       	mov    0xc01b1d88,%eax
c01060fb:	8b 40 18             	mov    0x18(%eax),%eax
c01060fe:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0106100:	c7 04 24 e0 d4 10 c0 	movl   $0xc010d4e0,(%esp)
c0106107:	e8 57 a2 ff ff       	call   c0100363 <cprintf>
}
c010610c:	c9                   	leave  
c010610d:	c3                   	ret    

c010610e <check_pgdir>:

static void
check_pgdir(void) {
c010610e:	55                   	push   %ebp
c010610f:	89 e5                	mov    %esp,%ebp
c0106111:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c0106114:	a1 80 fc 1a c0       	mov    0xc01afc80,%eax
c0106119:	3d 00 80 03 00       	cmp    $0x38000,%eax
c010611e:	76 24                	jbe    c0106144 <check_pgdir+0x36>
c0106120:	c7 44 24 0c ff d4 10 	movl   $0xc010d4ff,0xc(%esp)
c0106127:	c0 
c0106128:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c010612f:	c0 
c0106130:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
c0106137:	00 
c0106138:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c010613f:	e8 78 ac ff ff       	call   c0100dbc <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c0106144:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c0106149:	85 c0                	test   %eax,%eax
c010614b:	74 0e                	je     c010615b <check_pgdir+0x4d>
c010614d:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c0106152:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106157:	85 c0                	test   %eax,%eax
c0106159:	74 24                	je     c010617f <check_pgdir+0x71>
c010615b:	c7 44 24 0c 1c d5 10 	movl   $0xc010d51c,0xc(%esp)
c0106162:	c0 
c0106163:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c010616a:	c0 
c010616b:	c7 44 24 04 85 02 00 	movl   $0x285,0x4(%esp)
c0106172:	00 
c0106173:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c010617a:	e8 3d ac ff ff       	call   c0100dbc <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c010617f:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c0106184:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010618b:	00 
c010618c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106193:	00 
c0106194:	89 04 24             	mov    %eax,(%esp)
c0106197:	e8 56 f8 ff ff       	call   c01059f2 <get_page>
c010619c:	85 c0                	test   %eax,%eax
c010619e:	74 24                	je     c01061c4 <check_pgdir+0xb6>
c01061a0:	c7 44 24 0c 54 d5 10 	movl   $0xc010d554,0xc(%esp)
c01061a7:	c0 
c01061a8:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c01061af:	c0 
c01061b0:	c7 44 24 04 86 02 00 	movl   $0x286,0x4(%esp)
c01061b7:	00 
c01061b8:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c01061bf:	e8 f8 ab ff ff       	call   c0100dbc <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c01061c4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01061cb:	e8 75 ef ff ff       	call   c0105145 <alloc_pages>
c01061d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c01061d3:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c01061d8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01061df:	00 
c01061e0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01061e7:	00 
c01061e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01061eb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01061ef:	89 04 24             	mov    %eax,(%esp)
c01061f2:	e8 0a fd ff ff       	call   c0105f01 <page_insert>
c01061f7:	85 c0                	test   %eax,%eax
c01061f9:	74 24                	je     c010621f <check_pgdir+0x111>
c01061fb:	c7 44 24 0c 7c d5 10 	movl   $0xc010d57c,0xc(%esp)
c0106202:	c0 
c0106203:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c010620a:	c0 
c010620b:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c0106212:	00 
c0106213:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c010621a:	e8 9d ab ff ff       	call   c0100dbc <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c010621f:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c0106224:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010622b:	00 
c010622c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106233:	00 
c0106234:	89 04 24             	mov    %eax,(%esp)
c0106237:	e8 6f f6 ff ff       	call   c01058ab <get_pte>
c010623c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010623f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106243:	75 24                	jne    c0106269 <check_pgdir+0x15b>
c0106245:	c7 44 24 0c a8 d5 10 	movl   $0xc010d5a8,0xc(%esp)
c010624c:	c0 
c010624d:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0106254:	c0 
c0106255:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c010625c:	00 
c010625d:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0106264:	e8 53 ab ff ff       	call   c0100dbc <__panic>
    assert(pte2page(*ptep) == p1);
c0106269:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010626c:	8b 00                	mov    (%eax),%eax
c010626e:	89 04 24             	mov    %eax,(%esp)
c0106271:	e8 6f ec ff ff       	call   c0104ee5 <pte2page>
c0106276:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106279:	74 24                	je     c010629f <check_pgdir+0x191>
c010627b:	c7 44 24 0c d5 d5 10 	movl   $0xc010d5d5,0xc(%esp)
c0106282:	c0 
c0106283:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c010628a:	c0 
c010628b:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
c0106292:	00 
c0106293:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c010629a:	e8 1d ab ff ff       	call   c0100dbc <__panic>
    assert(page_ref(p1) == 1);
c010629f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062a2:	89 04 24             	mov    %eax,(%esp)
c01062a5:	e8 91 ec ff ff       	call   c0104f3b <page_ref>
c01062aa:	83 f8 01             	cmp    $0x1,%eax
c01062ad:	74 24                	je     c01062d3 <check_pgdir+0x1c5>
c01062af:	c7 44 24 0c eb d5 10 	movl   $0xc010d5eb,0xc(%esp)
c01062b6:	c0 
c01062b7:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c01062be:	c0 
c01062bf:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
c01062c6:	00 
c01062c7:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c01062ce:	e8 e9 aa ff ff       	call   c0100dbc <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c01062d3:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c01062d8:	8b 00                	mov    (%eax),%eax
c01062da:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01062df:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01062e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062e5:	c1 e8 0c             	shr    $0xc,%eax
c01062e8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01062eb:	a1 80 fc 1a c0       	mov    0xc01afc80,%eax
c01062f0:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01062f3:	72 23                	jb     c0106318 <check_pgdir+0x20a>
c01062f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062f8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01062fc:	c7 44 24 08 40 d3 10 	movl   $0xc010d340,0x8(%esp)
c0106303:	c0 
c0106304:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
c010630b:	00 
c010630c:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0106313:	e8 a4 aa ff ff       	call   c0100dbc <__panic>
c0106318:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010631b:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106320:	83 c0 04             	add    $0x4,%eax
c0106323:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c0106326:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c010632b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106332:	00 
c0106333:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010633a:	00 
c010633b:	89 04 24             	mov    %eax,(%esp)
c010633e:	e8 68 f5 ff ff       	call   c01058ab <get_pte>
c0106343:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106346:	74 24                	je     c010636c <check_pgdir+0x25e>
c0106348:	c7 44 24 0c 00 d6 10 	movl   $0xc010d600,0xc(%esp)
c010634f:	c0 
c0106350:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0106357:	c0 
c0106358:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
c010635f:	00 
c0106360:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0106367:	e8 50 aa ff ff       	call   c0100dbc <__panic>

    p2 = alloc_page();
c010636c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106373:	e8 cd ed ff ff       	call   c0105145 <alloc_pages>
c0106378:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c010637b:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c0106380:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c0106387:	00 
c0106388:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010638f:	00 
c0106390:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106393:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106397:	89 04 24             	mov    %eax,(%esp)
c010639a:	e8 62 fb ff ff       	call   c0105f01 <page_insert>
c010639f:	85 c0                	test   %eax,%eax
c01063a1:	74 24                	je     c01063c7 <check_pgdir+0x2b9>
c01063a3:	c7 44 24 0c 28 d6 10 	movl   $0xc010d628,0xc(%esp)
c01063aa:	c0 
c01063ab:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c01063b2:	c0 
c01063b3:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c01063ba:	00 
c01063bb:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c01063c2:	e8 f5 a9 ff ff       	call   c0100dbc <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01063c7:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c01063cc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01063d3:	00 
c01063d4:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01063db:	00 
c01063dc:	89 04 24             	mov    %eax,(%esp)
c01063df:	e8 c7 f4 ff ff       	call   c01058ab <get_pte>
c01063e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01063e7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01063eb:	75 24                	jne    c0106411 <check_pgdir+0x303>
c01063ed:	c7 44 24 0c 60 d6 10 	movl   $0xc010d660,0xc(%esp)
c01063f4:	c0 
c01063f5:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c01063fc:	c0 
c01063fd:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c0106404:	00 
c0106405:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c010640c:	e8 ab a9 ff ff       	call   c0100dbc <__panic>
    assert(*ptep & PTE_U);
c0106411:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106414:	8b 00                	mov    (%eax),%eax
c0106416:	83 e0 04             	and    $0x4,%eax
c0106419:	85 c0                	test   %eax,%eax
c010641b:	75 24                	jne    c0106441 <check_pgdir+0x333>
c010641d:	c7 44 24 0c 90 d6 10 	movl   $0xc010d690,0xc(%esp)
c0106424:	c0 
c0106425:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c010642c:	c0 
c010642d:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
c0106434:	00 
c0106435:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c010643c:	e8 7b a9 ff ff       	call   c0100dbc <__panic>
    assert(*ptep & PTE_W);
c0106441:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106444:	8b 00                	mov    (%eax),%eax
c0106446:	83 e0 02             	and    $0x2,%eax
c0106449:	85 c0                	test   %eax,%eax
c010644b:	75 24                	jne    c0106471 <check_pgdir+0x363>
c010644d:	c7 44 24 0c 9e d6 10 	movl   $0xc010d69e,0xc(%esp)
c0106454:	c0 
c0106455:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c010645c:	c0 
c010645d:	c7 44 24 04 98 02 00 	movl   $0x298,0x4(%esp)
c0106464:	00 
c0106465:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c010646c:	e8 4b a9 ff ff       	call   c0100dbc <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0106471:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c0106476:	8b 00                	mov    (%eax),%eax
c0106478:	83 e0 04             	and    $0x4,%eax
c010647b:	85 c0                	test   %eax,%eax
c010647d:	75 24                	jne    c01064a3 <check_pgdir+0x395>
c010647f:	c7 44 24 0c ac d6 10 	movl   $0xc010d6ac,0xc(%esp)
c0106486:	c0 
c0106487:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c010648e:	c0 
c010648f:	c7 44 24 04 99 02 00 	movl   $0x299,0x4(%esp)
c0106496:	00 
c0106497:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c010649e:	e8 19 a9 ff ff       	call   c0100dbc <__panic>
    assert(page_ref(p2) == 1);
c01064a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01064a6:	89 04 24             	mov    %eax,(%esp)
c01064a9:	e8 8d ea ff ff       	call   c0104f3b <page_ref>
c01064ae:	83 f8 01             	cmp    $0x1,%eax
c01064b1:	74 24                	je     c01064d7 <check_pgdir+0x3c9>
c01064b3:	c7 44 24 0c c2 d6 10 	movl   $0xc010d6c2,0xc(%esp)
c01064ba:	c0 
c01064bb:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c01064c2:	c0 
c01064c3:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
c01064ca:	00 
c01064cb:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c01064d2:	e8 e5 a8 ff ff       	call   c0100dbc <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c01064d7:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c01064dc:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01064e3:	00 
c01064e4:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01064eb:	00 
c01064ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01064ef:	89 54 24 04          	mov    %edx,0x4(%esp)
c01064f3:	89 04 24             	mov    %eax,(%esp)
c01064f6:	e8 06 fa ff ff       	call   c0105f01 <page_insert>
c01064fb:	85 c0                	test   %eax,%eax
c01064fd:	74 24                	je     c0106523 <check_pgdir+0x415>
c01064ff:	c7 44 24 0c d4 d6 10 	movl   $0xc010d6d4,0xc(%esp)
c0106506:	c0 
c0106507:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c010650e:	c0 
c010650f:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c0106516:	00 
c0106517:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c010651e:	e8 99 a8 ff ff       	call   c0100dbc <__panic>
    assert(page_ref(p1) == 2);
c0106523:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106526:	89 04 24             	mov    %eax,(%esp)
c0106529:	e8 0d ea ff ff       	call   c0104f3b <page_ref>
c010652e:	83 f8 02             	cmp    $0x2,%eax
c0106531:	74 24                	je     c0106557 <check_pgdir+0x449>
c0106533:	c7 44 24 0c 00 d7 10 	movl   $0xc010d700,0xc(%esp)
c010653a:	c0 
c010653b:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0106542:	c0 
c0106543:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c010654a:	00 
c010654b:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0106552:	e8 65 a8 ff ff       	call   c0100dbc <__panic>
    assert(page_ref(p2) == 0);
c0106557:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010655a:	89 04 24             	mov    %eax,(%esp)
c010655d:	e8 d9 e9 ff ff       	call   c0104f3b <page_ref>
c0106562:	85 c0                	test   %eax,%eax
c0106564:	74 24                	je     c010658a <check_pgdir+0x47c>
c0106566:	c7 44 24 0c 12 d7 10 	movl   $0xc010d712,0xc(%esp)
c010656d:	c0 
c010656e:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0106575:	c0 
c0106576:	c7 44 24 04 9e 02 00 	movl   $0x29e,0x4(%esp)
c010657d:	00 
c010657e:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0106585:	e8 32 a8 ff ff       	call   c0100dbc <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c010658a:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c010658f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106596:	00 
c0106597:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010659e:	00 
c010659f:	89 04 24             	mov    %eax,(%esp)
c01065a2:	e8 04 f3 ff ff       	call   c01058ab <get_pte>
c01065a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01065aa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01065ae:	75 24                	jne    c01065d4 <check_pgdir+0x4c6>
c01065b0:	c7 44 24 0c 60 d6 10 	movl   $0xc010d660,0xc(%esp)
c01065b7:	c0 
c01065b8:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c01065bf:	c0 
c01065c0:	c7 44 24 04 9f 02 00 	movl   $0x29f,0x4(%esp)
c01065c7:	00 
c01065c8:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c01065cf:	e8 e8 a7 ff ff       	call   c0100dbc <__panic>
    assert(pte2page(*ptep) == p1);
c01065d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01065d7:	8b 00                	mov    (%eax),%eax
c01065d9:	89 04 24             	mov    %eax,(%esp)
c01065dc:	e8 04 e9 ff ff       	call   c0104ee5 <pte2page>
c01065e1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01065e4:	74 24                	je     c010660a <check_pgdir+0x4fc>
c01065e6:	c7 44 24 0c d5 d5 10 	movl   $0xc010d5d5,0xc(%esp)
c01065ed:	c0 
c01065ee:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c01065f5:	c0 
c01065f6:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
c01065fd:	00 
c01065fe:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0106605:	e8 b2 a7 ff ff       	call   c0100dbc <__panic>
    assert((*ptep & PTE_U) == 0);
c010660a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010660d:	8b 00                	mov    (%eax),%eax
c010660f:	83 e0 04             	and    $0x4,%eax
c0106612:	85 c0                	test   %eax,%eax
c0106614:	74 24                	je     c010663a <check_pgdir+0x52c>
c0106616:	c7 44 24 0c 24 d7 10 	movl   $0xc010d724,0xc(%esp)
c010661d:	c0 
c010661e:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0106625:	c0 
c0106626:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
c010662d:	00 
c010662e:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0106635:	e8 82 a7 ff ff       	call   c0100dbc <__panic>

    page_remove(boot_pgdir, 0x0);
c010663a:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c010663f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106646:	00 
c0106647:	89 04 24             	mov    %eax,(%esp)
c010664a:	e8 6e f8 ff ff       	call   c0105ebd <page_remove>
    assert(page_ref(p1) == 1);
c010664f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106652:	89 04 24             	mov    %eax,(%esp)
c0106655:	e8 e1 e8 ff ff       	call   c0104f3b <page_ref>
c010665a:	83 f8 01             	cmp    $0x1,%eax
c010665d:	74 24                	je     c0106683 <check_pgdir+0x575>
c010665f:	c7 44 24 0c eb d5 10 	movl   $0xc010d5eb,0xc(%esp)
c0106666:	c0 
c0106667:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c010666e:	c0 
c010666f:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c0106676:	00 
c0106677:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c010667e:	e8 39 a7 ff ff       	call   c0100dbc <__panic>
    assert(page_ref(p2) == 0);
c0106683:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106686:	89 04 24             	mov    %eax,(%esp)
c0106689:	e8 ad e8 ff ff       	call   c0104f3b <page_ref>
c010668e:	85 c0                	test   %eax,%eax
c0106690:	74 24                	je     c01066b6 <check_pgdir+0x5a8>
c0106692:	c7 44 24 0c 12 d7 10 	movl   $0xc010d712,0xc(%esp)
c0106699:	c0 
c010669a:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c01066a1:	c0 
c01066a2:	c7 44 24 04 a5 02 00 	movl   $0x2a5,0x4(%esp)
c01066a9:	00 
c01066aa:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c01066b1:	e8 06 a7 ff ff       	call   c0100dbc <__panic>

    page_remove(boot_pgdir, PGSIZE);
c01066b6:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c01066bb:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01066c2:	00 
c01066c3:	89 04 24             	mov    %eax,(%esp)
c01066c6:	e8 f2 f7 ff ff       	call   c0105ebd <page_remove>
    assert(page_ref(p1) == 0);
c01066cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01066ce:	89 04 24             	mov    %eax,(%esp)
c01066d1:	e8 65 e8 ff ff       	call   c0104f3b <page_ref>
c01066d6:	85 c0                	test   %eax,%eax
c01066d8:	74 24                	je     c01066fe <check_pgdir+0x5f0>
c01066da:	c7 44 24 0c 39 d7 10 	movl   $0xc010d739,0xc(%esp)
c01066e1:	c0 
c01066e2:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c01066e9:	c0 
c01066ea:	c7 44 24 04 a8 02 00 	movl   $0x2a8,0x4(%esp)
c01066f1:	00 
c01066f2:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c01066f9:	e8 be a6 ff ff       	call   c0100dbc <__panic>
    assert(page_ref(p2) == 0);
c01066fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106701:	89 04 24             	mov    %eax,(%esp)
c0106704:	e8 32 e8 ff ff       	call   c0104f3b <page_ref>
c0106709:	85 c0                	test   %eax,%eax
c010670b:	74 24                	je     c0106731 <check_pgdir+0x623>
c010670d:	c7 44 24 0c 12 d7 10 	movl   $0xc010d712,0xc(%esp)
c0106714:	c0 
c0106715:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c010671c:	c0 
c010671d:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
c0106724:	00 
c0106725:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c010672c:	e8 8b a6 ff ff       	call   c0100dbc <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0106731:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c0106736:	8b 00                	mov    (%eax),%eax
c0106738:	89 04 24             	mov    %eax,(%esp)
c010673b:	e8 e3 e7 ff ff       	call   c0104f23 <pde2page>
c0106740:	89 04 24             	mov    %eax,(%esp)
c0106743:	e8 f3 e7 ff ff       	call   c0104f3b <page_ref>
c0106748:	83 f8 01             	cmp    $0x1,%eax
c010674b:	74 24                	je     c0106771 <check_pgdir+0x663>
c010674d:	c7 44 24 0c 4c d7 10 	movl   $0xc010d74c,0xc(%esp)
c0106754:	c0 
c0106755:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c010675c:	c0 
c010675d:	c7 44 24 04 ab 02 00 	movl   $0x2ab,0x4(%esp)
c0106764:	00 
c0106765:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c010676c:	e8 4b a6 ff ff       	call   c0100dbc <__panic>
    free_page(pde2page(boot_pgdir[0]));
c0106771:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c0106776:	8b 00                	mov    (%eax),%eax
c0106778:	89 04 24             	mov    %eax,(%esp)
c010677b:	e8 a3 e7 ff ff       	call   c0104f23 <pde2page>
c0106780:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106787:	00 
c0106788:	89 04 24             	mov    %eax,(%esp)
c010678b:	e8 20 ea ff ff       	call   c01051b0 <free_pages>
    boot_pgdir[0] = 0;
c0106790:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c0106795:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c010679b:	c7 04 24 73 d7 10 c0 	movl   $0xc010d773,(%esp)
c01067a2:	e8 bc 9b ff ff       	call   c0100363 <cprintf>
}
c01067a7:	c9                   	leave  
c01067a8:	c3                   	ret    

c01067a9 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c01067a9:	55                   	push   %ebp
c01067aa:	89 e5                	mov    %esp,%ebp
c01067ac:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01067af:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01067b6:	e9 cb 00 00 00       	jmp    c0106886 <check_boot_pgdir+0xdd>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c01067bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067be:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01067c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067c4:	c1 e8 0c             	shr    $0xc,%eax
c01067c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01067ca:	a1 80 fc 1a c0       	mov    0xc01afc80,%eax
c01067cf:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01067d2:	72 23                	jb     c01067f7 <check_boot_pgdir+0x4e>
c01067d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01067db:	c7 44 24 08 40 d3 10 	movl   $0xc010d340,0x8(%esp)
c01067e2:	c0 
c01067e3:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c01067ea:	00 
c01067eb:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c01067f2:	e8 c5 a5 ff ff       	call   c0100dbc <__panic>
c01067f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067fa:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01067ff:	89 c2                	mov    %eax,%edx
c0106801:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c0106806:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010680d:	00 
c010680e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106812:	89 04 24             	mov    %eax,(%esp)
c0106815:	e8 91 f0 ff ff       	call   c01058ab <get_pte>
c010681a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010681d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106821:	75 24                	jne    c0106847 <check_boot_pgdir+0x9e>
c0106823:	c7 44 24 0c 90 d7 10 	movl   $0xc010d790,0xc(%esp)
c010682a:	c0 
c010682b:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0106832:	c0 
c0106833:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c010683a:	00 
c010683b:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0106842:	e8 75 a5 ff ff       	call   c0100dbc <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0106847:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010684a:	8b 00                	mov    (%eax),%eax
c010684c:	89 c2                	mov    %eax,%edx
c010684e:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
c0106854:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106857:	39 c2                	cmp    %eax,%edx
c0106859:	74 24                	je     c010687f <check_boot_pgdir+0xd6>
c010685b:	c7 44 24 0c cd d7 10 	movl   $0xc010d7cd,0xc(%esp)
c0106862:	c0 
c0106863:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c010686a:	c0 
c010686b:	c7 44 24 04 b8 02 00 	movl   $0x2b8,0x4(%esp)
c0106872:	00 
c0106873:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c010687a:	e8 3d a5 ff ff       	call   c0100dbc <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c010687f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c0106886:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106889:	a1 80 fc 1a c0       	mov    0xc01afc80,%eax
c010688e:	39 c2                	cmp    %eax,%edx
c0106890:	0f 82 25 ff ff ff    	jb     c01067bb <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c0106896:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c010689b:	05 ac 0f 00 00       	add    $0xfac,%eax
c01068a0:	8b 00                	mov    (%eax),%eax
c01068a2:	89 c2                	mov    %eax,%edx
c01068a4:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
c01068aa:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c01068af:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01068b2:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c01068b9:	77 23                	ja     c01068de <check_boot_pgdir+0x135>
c01068bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01068be:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01068c2:	c7 44 24 08 e4 d3 10 	movl   $0xc010d3e4,0x8(%esp)
c01068c9:	c0 
c01068ca:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c01068d1:	00 
c01068d2:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c01068d9:	e8 de a4 ff ff       	call   c0100dbc <__panic>
c01068de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01068e1:	05 00 00 00 40       	add    $0x40000000,%eax
c01068e6:	39 c2                	cmp    %eax,%edx
c01068e8:	74 24                	je     c010690e <check_boot_pgdir+0x165>
c01068ea:	c7 44 24 0c e4 d7 10 	movl   $0xc010d7e4,0xc(%esp)
c01068f1:	c0 
c01068f2:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c01068f9:	c0 
c01068fa:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c0106901:	00 
c0106902:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0106909:	e8 ae a4 ff ff       	call   c0100dbc <__panic>

    assert(boot_pgdir[0] == 0);
c010690e:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c0106913:	8b 00                	mov    (%eax),%eax
c0106915:	85 c0                	test   %eax,%eax
c0106917:	74 24                	je     c010693d <check_boot_pgdir+0x194>
c0106919:	c7 44 24 0c 18 d8 10 	movl   $0xc010d818,0xc(%esp)
c0106920:	c0 
c0106921:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0106928:	c0 
c0106929:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c0106930:	00 
c0106931:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0106938:	e8 7f a4 ff ff       	call   c0100dbc <__panic>

    struct Page *p;
    p = alloc_page();
c010693d:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106944:	e8 fc e7 ff ff       	call   c0105145 <alloc_pages>
c0106949:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c010694c:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c0106951:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106958:	00 
c0106959:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0106960:	00 
c0106961:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106964:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106968:	89 04 24             	mov    %eax,(%esp)
c010696b:	e8 91 f5 ff ff       	call   c0105f01 <page_insert>
c0106970:	85 c0                	test   %eax,%eax
c0106972:	74 24                	je     c0106998 <check_boot_pgdir+0x1ef>
c0106974:	c7 44 24 0c 2c d8 10 	movl   $0xc010d82c,0xc(%esp)
c010697b:	c0 
c010697c:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0106983:	c0 
c0106984:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
c010698b:	00 
c010698c:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0106993:	e8 24 a4 ff ff       	call   c0100dbc <__panic>
    assert(page_ref(p) == 1);
c0106998:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010699b:	89 04 24             	mov    %eax,(%esp)
c010699e:	e8 98 e5 ff ff       	call   c0104f3b <page_ref>
c01069a3:	83 f8 01             	cmp    $0x1,%eax
c01069a6:	74 24                	je     c01069cc <check_boot_pgdir+0x223>
c01069a8:	c7 44 24 0c 5a d8 10 	movl   $0xc010d85a,0xc(%esp)
c01069af:	c0 
c01069b0:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c01069b7:	c0 
c01069b8:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c01069bf:	00 
c01069c0:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c01069c7:	e8 f0 a3 ff ff       	call   c0100dbc <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c01069cc:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c01069d1:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c01069d8:	00 
c01069d9:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c01069e0:	00 
c01069e1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01069e4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01069e8:	89 04 24             	mov    %eax,(%esp)
c01069eb:	e8 11 f5 ff ff       	call   c0105f01 <page_insert>
c01069f0:	85 c0                	test   %eax,%eax
c01069f2:	74 24                	je     c0106a18 <check_boot_pgdir+0x26f>
c01069f4:	c7 44 24 0c 6c d8 10 	movl   $0xc010d86c,0xc(%esp)
c01069fb:	c0 
c01069fc:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0106a03:	c0 
c0106a04:	c7 44 24 04 c3 02 00 	movl   $0x2c3,0x4(%esp)
c0106a0b:	00 
c0106a0c:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0106a13:	e8 a4 a3 ff ff       	call   c0100dbc <__panic>
    assert(page_ref(p) == 2);
c0106a18:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a1b:	89 04 24             	mov    %eax,(%esp)
c0106a1e:	e8 18 e5 ff ff       	call   c0104f3b <page_ref>
c0106a23:	83 f8 02             	cmp    $0x2,%eax
c0106a26:	74 24                	je     c0106a4c <check_boot_pgdir+0x2a3>
c0106a28:	c7 44 24 0c a3 d8 10 	movl   $0xc010d8a3,0xc(%esp)
c0106a2f:	c0 
c0106a30:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0106a37:	c0 
c0106a38:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
c0106a3f:	00 
c0106a40:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0106a47:	e8 70 a3 ff ff       	call   c0100dbc <__panic>

    const char *str = "ucore: Hello world!!";
c0106a4c:	c7 45 dc b4 d8 10 c0 	movl   $0xc010d8b4,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0106a53:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a56:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106a5a:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106a61:	e8 60 56 00 00       	call   c010c0c6 <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0106a66:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106a6d:	00 
c0106a6e:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106a75:	e8 c9 56 00 00       	call   c010c143 <strcmp>
c0106a7a:	85 c0                	test   %eax,%eax
c0106a7c:	74 24                	je     c0106aa2 <check_boot_pgdir+0x2f9>
c0106a7e:	c7 44 24 0c cc d8 10 	movl   $0xc010d8cc,0xc(%esp)
c0106a85:	c0 
c0106a86:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0106a8d:	c0 
c0106a8e:	c7 44 24 04 c8 02 00 	movl   $0x2c8,0x4(%esp)
c0106a95:	00 
c0106a96:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0106a9d:	e8 1a a3 ff ff       	call   c0100dbc <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0106aa2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106aa5:	89 04 24             	mov    %eax,(%esp)
c0106aa8:	e8 e4 e3 ff ff       	call   c0104e91 <page2kva>
c0106aad:	05 00 01 00 00       	add    $0x100,%eax
c0106ab2:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106ab5:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106abc:	e8 a7 55 00 00       	call   c010c068 <strlen>
c0106ac1:	85 c0                	test   %eax,%eax
c0106ac3:	74 24                	je     c0106ae9 <check_boot_pgdir+0x340>
c0106ac5:	c7 44 24 0c 04 d9 10 	movl   $0xc010d904,0xc(%esp)
c0106acc:	c0 
c0106acd:	c7 44 24 08 2d d4 10 	movl   $0xc010d42d,0x8(%esp)
c0106ad4:	c0 
c0106ad5:	c7 44 24 04 cb 02 00 	movl   $0x2cb,0x4(%esp)
c0106adc:	00 
c0106add:	c7 04 24 08 d4 10 c0 	movl   $0xc010d408,(%esp)
c0106ae4:	e8 d3 a2 ff ff       	call   c0100dbc <__panic>

    free_page(p);
c0106ae9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106af0:	00 
c0106af1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106af4:	89 04 24             	mov    %eax,(%esp)
c0106af7:	e8 b4 e6 ff ff       	call   c01051b0 <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c0106afc:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c0106b01:	8b 00                	mov    (%eax),%eax
c0106b03:	89 04 24             	mov    %eax,(%esp)
c0106b06:	e8 18 e4 ff ff       	call   c0104f23 <pde2page>
c0106b0b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106b12:	00 
c0106b13:	89 04 24             	mov    %eax,(%esp)
c0106b16:	e8 95 e6 ff ff       	call   c01051b0 <free_pages>
    boot_pgdir[0] = 0;
c0106b1b:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c0106b20:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0106b26:	c7 04 24 28 d9 10 c0 	movl   $0xc010d928,(%esp)
c0106b2d:	e8 31 98 ff ff       	call   c0100363 <cprintf>
}
c0106b32:	c9                   	leave  
c0106b33:	c3                   	ret    

c0106b34 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106b34:	55                   	push   %ebp
c0106b35:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106b37:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b3a:	83 e0 04             	and    $0x4,%eax
c0106b3d:	85 c0                	test   %eax,%eax
c0106b3f:	74 07                	je     c0106b48 <perm2str+0x14>
c0106b41:	b8 75 00 00 00       	mov    $0x75,%eax
c0106b46:	eb 05                	jmp    c0106b4d <perm2str+0x19>
c0106b48:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106b4d:	a2 08 fd 1a c0       	mov    %al,0xc01afd08
    str[1] = 'r';
c0106b52:	c6 05 09 fd 1a c0 72 	movb   $0x72,0xc01afd09
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106b59:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b5c:	83 e0 02             	and    $0x2,%eax
c0106b5f:	85 c0                	test   %eax,%eax
c0106b61:	74 07                	je     c0106b6a <perm2str+0x36>
c0106b63:	b8 77 00 00 00       	mov    $0x77,%eax
c0106b68:	eb 05                	jmp    c0106b6f <perm2str+0x3b>
c0106b6a:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106b6f:	a2 0a fd 1a c0       	mov    %al,0xc01afd0a
    str[3] = '\0';
c0106b74:	c6 05 0b fd 1a c0 00 	movb   $0x0,0xc01afd0b
    return str;
c0106b7b:	b8 08 fd 1a c0       	mov    $0xc01afd08,%eax
}
c0106b80:	5d                   	pop    %ebp
c0106b81:	c3                   	ret    

c0106b82 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106b82:	55                   	push   %ebp
c0106b83:	89 e5                	mov    %esp,%ebp
c0106b85:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106b88:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b8b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b8e:	72 0e                	jb     c0106b9e <get_pgtable_items+0x1c>
        return 0;
c0106b90:	b8 00 00 00 00       	mov    $0x0,%eax
c0106b95:	e9 86 00 00 00       	jmp    c0106c20 <get_pgtable_items+0x9e>
    }
    while (start < right && !(table[start] & PTE_P)) {
        start ++;
c0106b9a:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106b9e:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ba1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106ba4:	73 12                	jae    c0106bb8 <get_pgtable_items+0x36>
c0106ba6:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ba9:	c1 e0 02             	shl    $0x2,%eax
c0106bac:	03 45 14             	add    0x14(%ebp),%eax
c0106baf:	8b 00                	mov    (%eax),%eax
c0106bb1:	83 e0 01             	and    $0x1,%eax
c0106bb4:	85 c0                	test   %eax,%eax
c0106bb6:	74 e2                	je     c0106b9a <get_pgtable_items+0x18>
        start ++;
    }
    if (start < right) {
c0106bb8:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bbb:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106bbe:	73 5b                	jae    c0106c1b <get_pgtable_items+0x99>
        if (left_store != NULL) {
c0106bc0:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106bc4:	74 08                	je     c0106bce <get_pgtable_items+0x4c>
            *left_store = start;
c0106bc6:	8b 45 18             	mov    0x18(%ebp),%eax
c0106bc9:	8b 55 10             	mov    0x10(%ebp),%edx
c0106bcc:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106bce:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bd1:	c1 e0 02             	shl    $0x2,%eax
c0106bd4:	03 45 14             	add    0x14(%ebp),%eax
c0106bd7:	8b 00                	mov    (%eax),%eax
c0106bd9:	83 e0 07             	and    $0x7,%eax
c0106bdc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0106bdf:	83 45 10 01          	addl   $0x1,0x10(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106be3:	eb 04                	jmp    c0106be9 <get_pgtable_items+0x67>
            start ++;
c0106be5:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106be9:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bec:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106bef:	73 17                	jae    c0106c08 <get_pgtable_items+0x86>
c0106bf1:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bf4:	c1 e0 02             	shl    $0x2,%eax
c0106bf7:	03 45 14             	add    0x14(%ebp),%eax
c0106bfa:	8b 00                	mov    (%eax),%eax
c0106bfc:	89 c2                	mov    %eax,%edx
c0106bfe:	83 e2 07             	and    $0x7,%edx
c0106c01:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c04:	39 c2                	cmp    %eax,%edx
c0106c06:	74 dd                	je     c0106be5 <get_pgtable_items+0x63>
            start ++;
        }
        if (right_store != NULL) {
c0106c08:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106c0c:	74 08                	je     c0106c16 <get_pgtable_items+0x94>
            *right_store = start;
c0106c0e:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106c11:	8b 55 10             	mov    0x10(%ebp),%edx
c0106c14:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106c16:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c19:	eb 05                	jmp    c0106c20 <get_pgtable_items+0x9e>
    }
    return 0;
c0106c1b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106c20:	c9                   	leave  
c0106c21:	c3                   	ret    

c0106c22 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106c22:	55                   	push   %ebp
c0106c23:	89 e5                	mov    %esp,%ebp
c0106c25:	57                   	push   %edi
c0106c26:	56                   	push   %esi
c0106c27:	53                   	push   %ebx
c0106c28:	83 ec 5c             	sub    $0x5c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106c2b:	c7 04 24 48 d9 10 c0 	movl   $0xc010d948,(%esp)
c0106c32:	e8 2c 97 ff ff       	call   c0100363 <cprintf>
    size_t left, right = 0, perm;
c0106c37:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106c3e:	e9 0b 01 00 00       	jmp    c0106d4e <print_pgdir+0x12c>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106c43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c46:	89 04 24             	mov    %eax,(%esp)
c0106c49:	e8 e6 fe ff ff       	call   c0106b34 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106c4e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106c51:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c54:	89 cb                	mov    %ecx,%ebx
c0106c56:	29 d3                	sub    %edx,%ebx
c0106c58:	89 da                	mov    %ebx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106c5a:	89 d6                	mov    %edx,%esi
c0106c5c:	c1 e6 16             	shl    $0x16,%esi
c0106c5f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106c62:	89 d3                	mov    %edx,%ebx
c0106c64:	c1 e3 16             	shl    $0x16,%ebx
c0106c67:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c6a:	89 d1                	mov    %edx,%ecx
c0106c6c:	c1 e1 16             	shl    $0x16,%ecx
c0106c6f:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106c72:	89 7d c4             	mov    %edi,-0x3c(%ebp)
c0106c75:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c78:	8b 7d c4             	mov    -0x3c(%ebp),%edi
c0106c7b:	29 d7                	sub    %edx,%edi
c0106c7d:	89 fa                	mov    %edi,%edx
c0106c7f:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106c83:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106c87:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106c8b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106c8f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106c93:	c7 04 24 79 d9 10 c0 	movl   $0xc010d979,(%esp)
c0106c9a:	e8 c4 96 ff ff       	call   c0100363 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106c9f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106ca2:	c1 e0 0a             	shl    $0xa,%eax
c0106ca5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106ca8:	eb 5c                	jmp    c0106d06 <print_pgdir+0xe4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106caa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106cad:	89 04 24             	mov    %eax,(%esp)
c0106cb0:	e8 7f fe ff ff       	call   c0106b34 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106cb5:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106cb8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106cbb:	89 cb                	mov    %ecx,%ebx
c0106cbd:	29 d3                	sub    %edx,%ebx
c0106cbf:	89 da                	mov    %ebx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106cc1:	89 d6                	mov    %edx,%esi
c0106cc3:	c1 e6 0c             	shl    $0xc,%esi
c0106cc6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106cc9:	89 d3                	mov    %edx,%ebx
c0106ccb:	c1 e3 0c             	shl    $0xc,%ebx
c0106cce:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106cd1:	89 d1                	mov    %edx,%ecx
c0106cd3:	c1 e1 0c             	shl    $0xc,%ecx
c0106cd6:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106cd9:	89 7d c4             	mov    %edi,-0x3c(%ebp)
c0106cdc:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106cdf:	8b 7d c4             	mov    -0x3c(%ebp),%edi
c0106ce2:	29 d7                	sub    %edx,%edi
c0106ce4:	89 fa                	mov    %edi,%edx
c0106ce6:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106cea:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106cee:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106cf2:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106cf6:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106cfa:	c7 04 24 98 d9 10 c0 	movl   $0xc010d998,(%esp)
c0106d01:	e8 5d 96 ff ff       	call   c0100363 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106d06:	8b 15 88 d3 10 c0    	mov    0xc010d388,%edx
c0106d0c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106d0f:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106d12:	89 ce                	mov    %ecx,%esi
c0106d14:	c1 e6 0a             	shl    $0xa,%esi
c0106d17:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106d1a:	89 cb                	mov    %ecx,%ebx
c0106d1c:	c1 e3 0a             	shl    $0xa,%ebx
c0106d1f:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0106d22:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106d26:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106d29:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106d2d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106d31:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106d35:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106d39:	89 1c 24             	mov    %ebx,(%esp)
c0106d3c:	e8 41 fe ff ff       	call   c0106b82 <get_pgtable_items>
c0106d41:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106d44:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106d48:	0f 85 5c ff ff ff    	jne    c0106caa <print_pgdir+0x88>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106d4e:	8b 15 8c d3 10 c0    	mov    0xc010d38c,%edx
c0106d54:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106d57:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106d5a:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106d5e:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106d61:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106d65:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106d69:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106d6d:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106d74:	00 
c0106d75:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106d7c:	e8 01 fe ff ff       	call   c0106b82 <get_pgtable_items>
c0106d81:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106d84:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106d88:	0f 85 b5 fe ff ff    	jne    c0106c43 <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106d8e:	c7 04 24 bc d9 10 c0 	movl   $0xc010d9bc,(%esp)
c0106d95:	e8 c9 95 ff ff       	call   c0100363 <cprintf>
}
c0106d9a:	83 c4 5c             	add    $0x5c,%esp
c0106d9d:	5b                   	pop    %ebx
c0106d9e:	5e                   	pop    %esi
c0106d9f:	5f                   	pop    %edi
c0106da0:	5d                   	pop    %ebp
c0106da1:	c3                   	ret    
	...

c0106da4 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106da4:	55                   	push   %ebp
c0106da5:	89 e5                	mov    %esp,%ebp
c0106da7:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106daa:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dad:	89 c2                	mov    %eax,%edx
c0106daf:	c1 ea 0c             	shr    $0xc,%edx
c0106db2:	a1 80 fc 1a c0       	mov    0xc01afc80,%eax
c0106db7:	39 c2                	cmp    %eax,%edx
c0106db9:	72 1c                	jb     c0106dd7 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106dbb:	c7 44 24 08 f0 d9 10 	movl   $0xc010d9f0,0x8(%esp)
c0106dc2:	c0 
c0106dc3:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106dca:	00 
c0106dcb:	c7 04 24 0f da 10 c0 	movl   $0xc010da0f,(%esp)
c0106dd2:	e8 e5 9f ff ff       	call   c0100dbc <__panic>
    }
    return &pages[PPN(pa)];
c0106dd7:	a1 90 1d 1b c0       	mov    0xc01b1d90,%eax
c0106ddc:	8b 55 08             	mov    0x8(%ebp),%edx
c0106ddf:	c1 ea 0c             	shr    $0xc,%edx
c0106de2:	c1 e2 05             	shl    $0x5,%edx
c0106de5:	01 d0                	add    %edx,%eax
}
c0106de7:	c9                   	leave  
c0106de8:	c3                   	ret    

c0106de9 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106de9:	55                   	push   %ebp
c0106dea:	89 e5                	mov    %esp,%ebp
c0106dec:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106def:	8b 45 08             	mov    0x8(%ebp),%eax
c0106df2:	83 e0 01             	and    $0x1,%eax
c0106df5:	85 c0                	test   %eax,%eax
c0106df7:	75 1c                	jne    c0106e15 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106df9:	c7 44 24 08 20 da 10 	movl   $0xc010da20,0x8(%esp)
c0106e00:	c0 
c0106e01:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106e08:	00 
c0106e09:	c7 04 24 0f da 10 c0 	movl   $0xc010da0f,(%esp)
c0106e10:	e8 a7 9f ff ff       	call   c0100dbc <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106e15:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e18:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e1d:	89 04 24             	mov    %eax,(%esp)
c0106e20:	e8 7f ff ff ff       	call   c0106da4 <pa2page>
}
c0106e25:	c9                   	leave  
c0106e26:	c3                   	ret    

c0106e27 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0106e27:	55                   	push   %ebp
c0106e28:	89 e5                	mov    %esp,%ebp
c0106e2a:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0106e2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e30:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e35:	89 04 24             	mov    %eax,(%esp)
c0106e38:	e8 67 ff ff ff       	call   c0106da4 <pa2page>
}
c0106e3d:	c9                   	leave  
c0106e3e:	c3                   	ret    

c0106e3f <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106e3f:	55                   	push   %ebp
c0106e40:	89 e5                	mov    %esp,%ebp
c0106e42:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106e45:	e8 06 24 00 00       	call   c0109250 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106e4a:	a1 3c 1e 1b c0       	mov    0xc01b1e3c,%eax
c0106e4f:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106e54:	76 0c                	jbe    c0106e62 <swap_init+0x23>
c0106e56:	a1 3c 1e 1b c0       	mov    0xc01b1e3c,%eax
c0106e5b:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106e60:	76 25                	jbe    c0106e87 <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106e62:	a1 3c 1e 1b c0       	mov    0xc01b1e3c,%eax
c0106e67:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106e6b:	c7 44 24 08 41 da 10 	movl   $0xc010da41,0x8(%esp)
c0106e72:	c0 
c0106e73:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106e7a:	00 
c0106e7b:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c0106e82:	e8 35 9f ff ff       	call   c0100dbc <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106e87:	c7 05 14 fd 1a c0 60 	movl   $0xc012da60,0xc01afd14
c0106e8e:	da 12 c0 
     int r = sm->init();
c0106e91:	a1 14 fd 1a c0       	mov    0xc01afd14,%eax
c0106e96:	8b 40 04             	mov    0x4(%eax),%eax
c0106e99:	ff d0                	call   *%eax
c0106e9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106e9e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106ea2:	75 26                	jne    c0106eca <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106ea4:	c7 05 0c fd 1a c0 01 	movl   $0x1,0xc01afd0c
c0106eab:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0106eae:	a1 14 fd 1a c0       	mov    0xc01afd14,%eax
c0106eb3:	8b 00                	mov    (%eax),%eax
c0106eb5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106eb9:	c7 04 24 6b da 10 c0 	movl   $0xc010da6b,(%esp)
c0106ec0:	e8 9e 94 ff ff       	call   c0100363 <cprintf>
          check_swap();
c0106ec5:	e8 a4 04 00 00       	call   c010736e <check_swap>
     }

     return r;
c0106eca:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106ecd:	c9                   	leave  
c0106ece:	c3                   	ret    

c0106ecf <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0106ecf:	55                   	push   %ebp
c0106ed0:	89 e5                	mov    %esp,%ebp
c0106ed2:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0106ed5:	a1 14 fd 1a c0       	mov    0xc01afd14,%eax
c0106eda:	8b 50 08             	mov    0x8(%eax),%edx
c0106edd:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ee0:	89 04 24             	mov    %eax,(%esp)
c0106ee3:	ff d2                	call   *%edx
}
c0106ee5:	c9                   	leave  
c0106ee6:	c3                   	ret    

c0106ee7 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0106ee7:	55                   	push   %ebp
c0106ee8:	89 e5                	mov    %esp,%ebp
c0106eea:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0106eed:	a1 14 fd 1a c0       	mov    0xc01afd14,%eax
c0106ef2:	8b 50 0c             	mov    0xc(%eax),%edx
c0106ef5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ef8:	89 04 24             	mov    %eax,(%esp)
c0106efb:	ff d2                	call   *%edx
}
c0106efd:	c9                   	leave  
c0106efe:	c3                   	ret    

c0106eff <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0106eff:	55                   	push   %ebp
c0106f00:	89 e5                	mov    %esp,%ebp
c0106f02:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0106f05:	a1 14 fd 1a c0       	mov    0xc01afd14,%eax
c0106f0a:	8b 50 10             	mov    0x10(%eax),%edx
c0106f0d:	8b 45 14             	mov    0x14(%ebp),%eax
c0106f10:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106f14:	8b 45 10             	mov    0x10(%ebp),%eax
c0106f17:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106f1b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f1e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f22:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f25:	89 04 24             	mov    %eax,(%esp)
c0106f28:	ff d2                	call   *%edx
}
c0106f2a:	c9                   	leave  
c0106f2b:	c3                   	ret    

c0106f2c <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0106f2c:	55                   	push   %ebp
c0106f2d:	89 e5                	mov    %esp,%ebp
c0106f2f:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0106f32:	a1 14 fd 1a c0       	mov    0xc01afd14,%eax
c0106f37:	8b 50 14             	mov    0x14(%eax),%edx
c0106f3a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f3d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f41:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f44:	89 04 24             	mov    %eax,(%esp)
c0106f47:	ff d2                	call   *%edx
}
c0106f49:	c9                   	leave  
c0106f4a:	c3                   	ret    

c0106f4b <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0106f4b:	55                   	push   %ebp
c0106f4c:	89 e5                	mov    %esp,%ebp
c0106f4e:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0106f51:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106f58:	e9 5a 01 00 00       	jmp    c01070b7 <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0106f5d:	a1 14 fd 1a c0       	mov    0xc01afd14,%eax
c0106f62:	8b 50 18             	mov    0x18(%eax),%edx
c0106f65:	8b 45 10             	mov    0x10(%ebp),%eax
c0106f68:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106f6c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0106f6f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f73:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f76:	89 04 24             	mov    %eax,(%esp)
c0106f79:	ff d2                	call   *%edx
c0106f7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0106f7e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106f82:	74 18                	je     c0106f9c <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0106f84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f87:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f8b:	c7 04 24 80 da 10 c0 	movl   $0xc010da80,(%esp)
c0106f92:	e8 cc 93 ff ff       	call   c0100363 <cprintf>
                  break;
c0106f97:	e9 27 01 00 00       	jmp    c01070c3 <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0106f9c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f9f:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106fa2:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0106fa5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fa8:	8b 40 0c             	mov    0xc(%eax),%eax
c0106fab:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106fb2:	00 
c0106fb3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106fb6:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106fba:	89 04 24             	mov    %eax,(%esp)
c0106fbd:	e8 e9 e8 ff ff       	call   c01058ab <get_pte>
c0106fc2:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0106fc5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106fc8:	8b 00                	mov    (%eax),%eax
c0106fca:	83 e0 01             	and    $0x1,%eax
c0106fcd:	85 c0                	test   %eax,%eax
c0106fcf:	75 24                	jne    c0106ff5 <swap_out+0xaa>
c0106fd1:	c7 44 24 0c ad da 10 	movl   $0xc010daad,0xc(%esp)
c0106fd8:	c0 
c0106fd9:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c0106fe0:	c0 
c0106fe1:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0106fe8:	00 
c0106fe9:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c0106ff0:	e8 c7 9d ff ff       	call   c0100dbc <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0106ff5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106ff8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106ffb:	8b 52 1c             	mov    0x1c(%edx),%edx
c0106ffe:	c1 ea 0c             	shr    $0xc,%edx
c0107001:	83 c2 01             	add    $0x1,%edx
c0107004:	c1 e2 08             	shl    $0x8,%edx
c0107007:	89 44 24 04          	mov    %eax,0x4(%esp)
c010700b:	89 14 24             	mov    %edx,(%esp)
c010700e:	e8 f7 22 00 00       	call   c010930a <swapfs_write>
c0107013:	85 c0                	test   %eax,%eax
c0107015:	74 34                	je     c010704b <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c0107017:	c7 04 24 d7 da 10 c0 	movl   $0xc010dad7,(%esp)
c010701e:	e8 40 93 ff ff       	call   c0100363 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c0107023:	a1 14 fd 1a c0       	mov    0xc01afd14,%eax
c0107028:	8b 50 10             	mov    0x10(%eax),%edx
c010702b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010702e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0107035:	00 
c0107036:	89 44 24 08          	mov    %eax,0x8(%esp)
c010703a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010703d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107041:	8b 45 08             	mov    0x8(%ebp),%eax
c0107044:	89 04 24             	mov    %eax,(%esp)
c0107047:	ff d2                	call   *%edx
                    continue;
c0107049:	eb 68                	jmp    c01070b3 <swap_out+0x168>
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c010704b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010704e:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107051:	c1 e8 0c             	shr    $0xc,%eax
c0107054:	83 c0 01             	add    $0x1,%eax
c0107057:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010705b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010705e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107069:	c7 04 24 f0 da 10 c0 	movl   $0xc010daf0,(%esp)
c0107070:	e8 ee 92 ff ff       	call   c0100363 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0107075:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107078:	8b 40 1c             	mov    0x1c(%eax),%eax
c010707b:	c1 e8 0c             	shr    $0xc,%eax
c010707e:	83 c0 01             	add    $0x1,%eax
c0107081:	89 c2                	mov    %eax,%edx
c0107083:	c1 e2 08             	shl    $0x8,%edx
c0107086:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107089:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c010708b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010708e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107095:	00 
c0107096:	89 04 24             	mov    %eax,(%esp)
c0107099:	e8 12 e1 ff ff       	call   c01051b0 <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c010709e:	8b 45 08             	mov    0x8(%ebp),%eax
c01070a1:	8b 40 0c             	mov    0xc(%eax),%eax
c01070a4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01070a7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01070ab:	89 04 24             	mov    %eax,(%esp)
c01070ae:	e8 07 ef ff ff       	call   c0105fba <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c01070b3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01070b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070ba:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01070bd:	0f 85 9a fe ff ff    	jne    c0106f5d <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c01070c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01070c6:	c9                   	leave  
c01070c7:	c3                   	ret    

c01070c8 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c01070c8:	55                   	push   %ebp
c01070c9:	89 e5                	mov    %esp,%ebp
c01070cb:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c01070ce:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01070d5:	e8 6b e0 ff ff       	call   c0105145 <alloc_pages>
c01070da:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c01070dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01070e1:	75 24                	jne    c0107107 <swap_in+0x3f>
c01070e3:	c7 44 24 0c 30 db 10 	movl   $0xc010db30,0xc(%esp)
c01070ea:	c0 
c01070eb:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c01070f2:	c0 
c01070f3:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c01070fa:	00 
c01070fb:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c0107102:	e8 b5 9c ff ff       	call   c0100dbc <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0107107:	8b 45 08             	mov    0x8(%ebp),%eax
c010710a:	8b 40 0c             	mov    0xc(%eax),%eax
c010710d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107114:	00 
c0107115:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107118:	89 54 24 04          	mov    %edx,0x4(%esp)
c010711c:	89 04 24             	mov    %eax,(%esp)
c010711f:	e8 87 e7 ff ff       	call   c01058ab <get_pte>
c0107124:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c0107127:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010712a:	8b 00                	mov    (%eax),%eax
c010712c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010712f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107133:	89 04 24             	mov    %eax,(%esp)
c0107136:	e8 5d 21 00 00       	call   c0109298 <swapfs_read>
c010713b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010713e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107142:	74 2a                	je     c010716e <swap_in+0xa6>
     {
        assert(r!=0);
c0107144:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107148:	75 24                	jne    c010716e <swap_in+0xa6>
c010714a:	c7 44 24 0c 3d db 10 	movl   $0xc010db3d,0xc(%esp)
c0107151:	c0 
c0107152:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c0107159:	c0 
c010715a:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c0107161:	00 
c0107162:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c0107169:	e8 4e 9c ff ff       	call   c0100dbc <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c010716e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107171:	8b 00                	mov    (%eax),%eax
c0107173:	89 c2                	mov    %eax,%edx
c0107175:	c1 ea 08             	shr    $0x8,%edx
c0107178:	8b 45 0c             	mov    0xc(%ebp),%eax
c010717b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010717f:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107183:	c7 04 24 44 db 10 c0 	movl   $0xc010db44,(%esp)
c010718a:	e8 d4 91 ff ff       	call   c0100363 <cprintf>
     *ptr_result=result;
c010718f:	8b 45 10             	mov    0x10(%ebp),%eax
c0107192:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107195:	89 10                	mov    %edx,(%eax)
     return 0;
c0107197:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010719c:	c9                   	leave  
c010719d:	c3                   	ret    

c010719e <check_content_set>:



static inline void
check_content_set(void)
{
c010719e:	55                   	push   %ebp
c010719f:	89 e5                	mov    %esp,%ebp
c01071a1:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c01071a4:	b8 00 10 00 00       	mov    $0x1000,%eax
c01071a9:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01071ac:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c01071b1:	83 f8 01             	cmp    $0x1,%eax
c01071b4:	74 24                	je     c01071da <check_content_set+0x3c>
c01071b6:	c7 44 24 0c 82 db 10 	movl   $0xc010db82,0xc(%esp)
c01071bd:	c0 
c01071be:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c01071c5:	c0 
c01071c6:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c01071cd:	00 
c01071ce:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c01071d5:	e8 e2 9b ff ff       	call   c0100dbc <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c01071da:	b8 10 10 00 00       	mov    $0x1010,%eax
c01071df:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01071e2:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c01071e7:	83 f8 01             	cmp    $0x1,%eax
c01071ea:	74 24                	je     c0107210 <check_content_set+0x72>
c01071ec:	c7 44 24 0c 82 db 10 	movl   $0xc010db82,0xc(%esp)
c01071f3:	c0 
c01071f4:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c01071fb:	c0 
c01071fc:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0107203:	00 
c0107204:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c010720b:	e8 ac 9b ff ff       	call   c0100dbc <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0107210:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107215:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107218:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c010721d:	83 f8 02             	cmp    $0x2,%eax
c0107220:	74 24                	je     c0107246 <check_content_set+0xa8>
c0107222:	c7 44 24 0c 91 db 10 	movl   $0xc010db91,0xc(%esp)
c0107229:	c0 
c010722a:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c0107231:	c0 
c0107232:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c0107239:	00 
c010723a:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c0107241:	e8 76 9b ff ff       	call   c0100dbc <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c0107246:	b8 10 20 00 00       	mov    $0x2010,%eax
c010724b:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c010724e:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c0107253:	83 f8 02             	cmp    $0x2,%eax
c0107256:	74 24                	je     c010727c <check_content_set+0xde>
c0107258:	c7 44 24 0c 91 db 10 	movl   $0xc010db91,0xc(%esp)
c010725f:	c0 
c0107260:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c0107267:	c0 
c0107268:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c010726f:	00 
c0107270:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c0107277:	e8 40 9b ff ff       	call   c0100dbc <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c010727c:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107281:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c0107284:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c0107289:	83 f8 03             	cmp    $0x3,%eax
c010728c:	74 24                	je     c01072b2 <check_content_set+0x114>
c010728e:	c7 44 24 0c a0 db 10 	movl   $0xc010dba0,0xc(%esp)
c0107295:	c0 
c0107296:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c010729d:	c0 
c010729e:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c01072a5:	00 
c01072a6:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c01072ad:	e8 0a 9b ff ff       	call   c0100dbc <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c01072b2:	b8 10 30 00 00       	mov    $0x3010,%eax
c01072b7:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01072ba:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c01072bf:	83 f8 03             	cmp    $0x3,%eax
c01072c2:	74 24                	je     c01072e8 <check_content_set+0x14a>
c01072c4:	c7 44 24 0c a0 db 10 	movl   $0xc010dba0,0xc(%esp)
c01072cb:	c0 
c01072cc:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c01072d3:	c0 
c01072d4:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c01072db:	00 
c01072dc:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c01072e3:	e8 d4 9a ff ff       	call   c0100dbc <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c01072e8:	b8 00 40 00 00       	mov    $0x4000,%eax
c01072ed:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01072f0:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c01072f5:	83 f8 04             	cmp    $0x4,%eax
c01072f8:	74 24                	je     c010731e <check_content_set+0x180>
c01072fa:	c7 44 24 0c af db 10 	movl   $0xc010dbaf,0xc(%esp)
c0107301:	c0 
c0107302:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c0107309:	c0 
c010730a:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c0107311:	00 
c0107312:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c0107319:	e8 9e 9a ff ff       	call   c0100dbc <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c010731e:	b8 10 40 00 00       	mov    $0x4010,%eax
c0107323:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0107326:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c010732b:	83 f8 04             	cmp    $0x4,%eax
c010732e:	74 24                	je     c0107354 <check_content_set+0x1b6>
c0107330:	c7 44 24 0c af db 10 	movl   $0xc010dbaf,0xc(%esp)
c0107337:	c0 
c0107338:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c010733f:	c0 
c0107340:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0107347:	00 
c0107348:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c010734f:	e8 68 9a ff ff       	call   c0100dbc <__panic>
}
c0107354:	c9                   	leave  
c0107355:	c3                   	ret    

c0107356 <check_content_access>:

static inline int
check_content_access(void)
{
c0107356:	55                   	push   %ebp
c0107357:	89 e5                	mov    %esp,%ebp
c0107359:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c010735c:	a1 14 fd 1a c0       	mov    0xc01afd14,%eax
c0107361:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107364:	ff d0                	call   *%eax
c0107366:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c0107369:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010736c:	c9                   	leave  
c010736d:	c3                   	ret    

c010736e <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c010736e:	55                   	push   %ebp
c010736f:	89 e5                	mov    %esp,%ebp
c0107371:	53                   	push   %ebx
c0107372:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c0107375:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010737c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0107383:	c7 45 e8 7c 1d 1b c0 	movl   $0xc01b1d7c,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c010738a:	eb 6b                	jmp    c01073f7 <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c010738c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010738f:	83 e8 0c             	sub    $0xc,%eax
c0107392:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c0107395:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107398:	83 c0 04             	add    $0x4,%eax
c010739b:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c01073a2:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01073a5:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01073a8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01073ab:	0f a3 10             	bt     %edx,(%eax)
c01073ae:	19 db                	sbb    %ebx,%ebx
c01073b0:	89 5d bc             	mov    %ebx,-0x44(%ebp)
    return oldbit != 0;
c01073b3:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01073b7:	0f 95 c0             	setne  %al
c01073ba:	0f b6 c0             	movzbl %al,%eax
c01073bd:	85 c0                	test   %eax,%eax
c01073bf:	75 24                	jne    c01073e5 <check_swap+0x77>
c01073c1:	c7 44 24 0c be db 10 	movl   $0xc010dbbe,0xc(%esp)
c01073c8:	c0 
c01073c9:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c01073d0:	c0 
c01073d1:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c01073d8:	00 
c01073d9:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c01073e0:	e8 d7 99 ff ff       	call   c0100dbc <__panic>
        count ++, total += p->property;
c01073e5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01073e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01073ec:	8b 50 08             	mov    0x8(%eax),%edx
c01073ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01073f2:	01 d0                	add    %edx,%eax
c01073f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01073f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01073fa:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01073fd:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0107400:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0107403:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107406:	81 7d e8 7c 1d 1b c0 	cmpl   $0xc01b1d7c,-0x18(%ebp)
c010740d:	0f 85 79 ff ff ff    	jne    c010738c <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c0107413:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0107416:	e8 c7 dd ff ff       	call   c01051e2 <nr_free_pages>
c010741b:	39 c3                	cmp    %eax,%ebx
c010741d:	74 24                	je     c0107443 <check_swap+0xd5>
c010741f:	c7 44 24 0c ce db 10 	movl   $0xc010dbce,0xc(%esp)
c0107426:	c0 
c0107427:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c010742e:	c0 
c010742f:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c0107436:	00 
c0107437:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c010743e:	e8 79 99 ff ff       	call   c0100dbc <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0107443:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107446:	89 44 24 08          	mov    %eax,0x8(%esp)
c010744a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010744d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107451:	c7 04 24 e8 db 10 c0 	movl   $0xc010dbe8,(%esp)
c0107458:	e8 06 8f ff ff       	call   c0100363 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c010745d:	e8 72 0b 00 00       	call   c0107fd4 <mm_create>
c0107462:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c0107465:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107469:	75 24                	jne    c010748f <check_swap+0x121>
c010746b:	c7 44 24 0c 0e dc 10 	movl   $0xc010dc0e,0xc(%esp)
c0107472:	c0 
c0107473:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c010747a:	c0 
c010747b:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c0107482:	00 
c0107483:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c010748a:	e8 2d 99 ff ff       	call   c0100dbc <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c010748f:	a1 6c 1e 1b c0       	mov    0xc01b1e6c,%eax
c0107494:	85 c0                	test   %eax,%eax
c0107496:	74 24                	je     c01074bc <check_swap+0x14e>
c0107498:	c7 44 24 0c 19 dc 10 	movl   $0xc010dc19,0xc(%esp)
c010749f:	c0 
c01074a0:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c01074a7:	c0 
c01074a8:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c01074af:	00 
c01074b0:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c01074b7:	e8 00 99 ff ff       	call   c0100dbc <__panic>

     check_mm_struct = mm;
c01074bc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01074bf:	a3 6c 1e 1b c0       	mov    %eax,0xc01b1e6c

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c01074c4:	8b 15 84 fc 1a c0    	mov    0xc01afc84,%edx
c01074ca:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01074cd:	89 50 0c             	mov    %edx,0xc(%eax)
c01074d0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01074d3:	8b 40 0c             	mov    0xc(%eax),%eax
c01074d6:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c01074d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01074dc:	8b 00                	mov    (%eax),%eax
c01074de:	85 c0                	test   %eax,%eax
c01074e0:	74 24                	je     c0107506 <check_swap+0x198>
c01074e2:	c7 44 24 0c 31 dc 10 	movl   $0xc010dc31,0xc(%esp)
c01074e9:	c0 
c01074ea:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c01074f1:	c0 
c01074f2:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c01074f9:	00 
c01074fa:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c0107501:	e8 b6 98 ff ff       	call   c0100dbc <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c0107506:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c010750d:	00 
c010750e:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c0107515:	00 
c0107516:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c010751d:	e8 4b 0b 00 00       	call   c010806d <vma_create>
c0107522:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c0107525:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0107529:	75 24                	jne    c010754f <check_swap+0x1e1>
c010752b:	c7 44 24 0c 3f dc 10 	movl   $0xc010dc3f,0xc(%esp)
c0107532:	c0 
c0107533:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c010753a:	c0 
c010753b:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0107542:	00 
c0107543:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c010754a:	e8 6d 98 ff ff       	call   c0100dbc <__panic>

     insert_vma_struct(mm, vma);
c010754f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107552:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107556:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107559:	89 04 24             	mov    %eax,(%esp)
c010755c:	e8 9c 0c 00 00       	call   c01081fd <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0107561:	c7 04 24 4c dc 10 c0 	movl   $0xc010dc4c,(%esp)
c0107568:	e8 f6 8d ff ff       	call   c0100363 <cprintf>
     pte_t *temp_ptep=NULL;
c010756d:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0107574:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107577:	8b 40 0c             	mov    0xc(%eax),%eax
c010757a:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0107581:	00 
c0107582:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0107589:	00 
c010758a:	89 04 24             	mov    %eax,(%esp)
c010758d:	e8 19 e3 ff ff       	call   c01058ab <get_pte>
c0107592:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c0107595:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0107599:	75 24                	jne    c01075bf <check_swap+0x251>
c010759b:	c7 44 24 0c 80 dc 10 	movl   $0xc010dc80,0xc(%esp)
c01075a2:	c0 
c01075a3:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c01075aa:	c0 
c01075ab:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01075b2:	00 
c01075b3:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c01075ba:	e8 fd 97 ff ff       	call   c0100dbc <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c01075bf:	c7 04 24 94 dc 10 c0 	movl   $0xc010dc94,(%esp)
c01075c6:	e8 98 8d ff ff       	call   c0100363 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01075cb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01075d2:	e9 a3 00 00 00       	jmp    c010767a <check_swap+0x30c>
          check_rp[i] = alloc_page();
c01075d7:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01075de:	e8 62 db ff ff       	call   c0105145 <alloc_pages>
c01075e3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01075e6:	89 04 95 a0 1d 1b c0 	mov    %eax,-0x3fe4e260(,%edx,4)
          assert(check_rp[i] != NULL );
c01075ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01075f0:	8b 04 85 a0 1d 1b c0 	mov    -0x3fe4e260(,%eax,4),%eax
c01075f7:	85 c0                	test   %eax,%eax
c01075f9:	75 24                	jne    c010761f <check_swap+0x2b1>
c01075fb:	c7 44 24 0c b8 dc 10 	movl   $0xc010dcb8,0xc(%esp)
c0107602:	c0 
c0107603:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c010760a:	c0 
c010760b:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c0107612:	00 
c0107613:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c010761a:	e8 9d 97 ff ff       	call   c0100dbc <__panic>
          assert(!PageProperty(check_rp[i]));
c010761f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107622:	8b 04 85 a0 1d 1b c0 	mov    -0x3fe4e260(,%eax,4),%eax
c0107629:	83 c0 04             	add    $0x4,%eax
c010762c:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c0107633:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107636:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0107639:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010763c:	0f a3 10             	bt     %edx,(%eax)
c010763f:	19 db                	sbb    %ebx,%ebx
c0107641:	89 5d ac             	mov    %ebx,-0x54(%ebp)
    return oldbit != 0;
c0107644:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c0107648:	0f 95 c0             	setne  %al
c010764b:	0f b6 c0             	movzbl %al,%eax
c010764e:	85 c0                	test   %eax,%eax
c0107650:	74 24                	je     c0107676 <check_swap+0x308>
c0107652:	c7 44 24 0c cc dc 10 	movl   $0xc010dccc,0xc(%esp)
c0107659:	c0 
c010765a:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c0107661:	c0 
c0107662:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c0107669:	00 
c010766a:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c0107671:	e8 46 97 ff ff       	call   c0100dbc <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107676:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010767a:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010767e:	0f 8e 53 ff ff ff    	jle    c01075d7 <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0107684:	a1 7c 1d 1b c0       	mov    0xc01b1d7c,%eax
c0107689:	8b 15 80 1d 1b c0    	mov    0xc01b1d80,%edx
c010768f:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107692:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0107695:	c7 45 a8 7c 1d 1b c0 	movl   $0xc01b1d7c,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010769c:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010769f:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01076a2:	89 50 04             	mov    %edx,0x4(%eax)
c01076a5:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01076a8:	8b 50 04             	mov    0x4(%eax),%edx
c01076ab:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01076ae:	89 10                	mov    %edx,(%eax)
c01076b0:	c7 45 a4 7c 1d 1b c0 	movl   $0xc01b1d7c,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01076b7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01076ba:	8b 40 04             	mov    0x4(%eax),%eax
c01076bd:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c01076c0:	0f 94 c0             	sete   %al
c01076c3:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c01076c6:	85 c0                	test   %eax,%eax
c01076c8:	75 24                	jne    c01076ee <check_swap+0x380>
c01076ca:	c7 44 24 0c e7 dc 10 	movl   $0xc010dce7,0xc(%esp)
c01076d1:	c0 
c01076d2:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c01076d9:	c0 
c01076da:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c01076e1:	00 
c01076e2:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c01076e9:	e8 ce 96 ff ff       	call   c0100dbc <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c01076ee:	a1 84 1d 1b c0       	mov    0xc01b1d84,%eax
c01076f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c01076f6:	c7 05 84 1d 1b c0 00 	movl   $0x0,0xc01b1d84
c01076fd:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107700:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107707:	eb 1e                	jmp    c0107727 <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c0107709:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010770c:	8b 04 85 a0 1d 1b c0 	mov    -0x3fe4e260(,%eax,4),%eax
c0107713:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010771a:	00 
c010771b:	89 04 24             	mov    %eax,(%esp)
c010771e:	e8 8d da ff ff       	call   c01051b0 <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107723:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107727:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010772b:	7e dc                	jle    c0107709 <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c010772d:	a1 84 1d 1b c0       	mov    0xc01b1d84,%eax
c0107732:	83 f8 04             	cmp    $0x4,%eax
c0107735:	74 24                	je     c010775b <check_swap+0x3ed>
c0107737:	c7 44 24 0c 00 dd 10 	movl   $0xc010dd00,0xc(%esp)
c010773e:	c0 
c010773f:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c0107746:	c0 
c0107747:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c010774e:	00 
c010774f:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c0107756:	e8 61 96 ff ff       	call   c0100dbc <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c010775b:	c7 04 24 24 dd 10 c0 	movl   $0xc010dd24,(%esp)
c0107762:	e8 fc 8b ff ff       	call   c0100363 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c0107767:	c7 05 18 fd 1a c0 00 	movl   $0x0,0xc01afd18
c010776e:	00 00 00 
     
     check_content_set();
c0107771:	e8 28 fa ff ff       	call   c010719e <check_content_set>
     assert( nr_free == 0);         
c0107776:	a1 84 1d 1b c0       	mov    0xc01b1d84,%eax
c010777b:	85 c0                	test   %eax,%eax
c010777d:	74 24                	je     c01077a3 <check_swap+0x435>
c010777f:	c7 44 24 0c 4b dd 10 	movl   $0xc010dd4b,0xc(%esp)
c0107786:	c0 
c0107787:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c010778e:	c0 
c010778f:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0107796:	00 
c0107797:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c010779e:	e8 19 96 ff ff       	call   c0100dbc <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01077a3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01077aa:	eb 26                	jmp    c01077d2 <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c01077ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077af:	c7 04 85 c0 1d 1b c0 	movl   $0xffffffff,-0x3fe4e240(,%eax,4)
c01077b6:	ff ff ff ff 
c01077ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077bd:	8b 14 85 c0 1d 1b c0 	mov    -0x3fe4e240(,%eax,4),%edx
c01077c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077c7:	89 14 85 00 1e 1b c0 	mov    %edx,-0x3fe4e200(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01077ce:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01077d2:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c01077d6:	7e d4                	jle    c01077ac <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01077d8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01077df:	e9 eb 00 00 00       	jmp    c01078cf <check_swap+0x561>
         check_ptep[i]=0;
c01077e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077e7:	c7 04 85 54 1e 1b c0 	movl   $0x0,-0x3fe4e1ac(,%eax,4)
c01077ee:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c01077f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077f5:	83 c0 01             	add    $0x1,%eax
c01077f8:	c1 e0 0c             	shl    $0xc,%eax
c01077fb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107802:	00 
c0107803:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107807:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010780a:	89 04 24             	mov    %eax,(%esp)
c010780d:	e8 99 e0 ff ff       	call   c01058ab <get_pte>
c0107812:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107815:	89 04 95 54 1e 1b c0 	mov    %eax,-0x3fe4e1ac(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c010781c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010781f:	8b 04 85 54 1e 1b c0 	mov    -0x3fe4e1ac(,%eax,4),%eax
c0107826:	85 c0                	test   %eax,%eax
c0107828:	75 24                	jne    c010784e <check_swap+0x4e0>
c010782a:	c7 44 24 0c 58 dd 10 	movl   $0xc010dd58,0xc(%esp)
c0107831:	c0 
c0107832:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c0107839:	c0 
c010783a:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0107841:	00 
c0107842:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c0107849:	e8 6e 95 ff ff       	call   c0100dbc <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c010784e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107851:	8b 04 85 54 1e 1b c0 	mov    -0x3fe4e1ac(,%eax,4),%eax
c0107858:	8b 00                	mov    (%eax),%eax
c010785a:	89 04 24             	mov    %eax,(%esp)
c010785d:	e8 87 f5 ff ff       	call   c0106de9 <pte2page>
c0107862:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107865:	8b 14 95 a0 1d 1b c0 	mov    -0x3fe4e260(,%edx,4),%edx
c010786c:	39 d0                	cmp    %edx,%eax
c010786e:	74 24                	je     c0107894 <check_swap+0x526>
c0107870:	c7 44 24 0c 70 dd 10 	movl   $0xc010dd70,0xc(%esp)
c0107877:	c0 
c0107878:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c010787f:	c0 
c0107880:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c0107887:	00 
c0107888:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c010788f:	e8 28 95 ff ff       	call   c0100dbc <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0107894:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107897:	8b 04 85 54 1e 1b c0 	mov    -0x3fe4e1ac(,%eax,4),%eax
c010789e:	8b 00                	mov    (%eax),%eax
c01078a0:	83 e0 01             	and    $0x1,%eax
c01078a3:	85 c0                	test   %eax,%eax
c01078a5:	75 24                	jne    c01078cb <check_swap+0x55d>
c01078a7:	c7 44 24 0c 98 dd 10 	movl   $0xc010dd98,0xc(%esp)
c01078ae:	c0 
c01078af:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c01078b6:	c0 
c01078b7:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c01078be:	00 
c01078bf:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c01078c6:	e8 f1 94 ff ff       	call   c0100dbc <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01078cb:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01078cf:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01078d3:	0f 8e 0b ff ff ff    	jle    c01077e4 <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c01078d9:	c7 04 24 b4 dd 10 c0 	movl   $0xc010ddb4,(%esp)
c01078e0:	e8 7e 8a ff ff       	call   c0100363 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c01078e5:	e8 6c fa ff ff       	call   c0107356 <check_content_access>
c01078ea:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c01078ed:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01078f1:	74 24                	je     c0107917 <check_swap+0x5a9>
c01078f3:	c7 44 24 0c da dd 10 	movl   $0xc010ddda,0xc(%esp)
c01078fa:	c0 
c01078fb:	c7 44 24 08 c2 da 10 	movl   $0xc010dac2,0x8(%esp)
c0107902:	c0 
c0107903:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c010790a:	00 
c010790b:	c7 04 24 5c da 10 c0 	movl   $0xc010da5c,(%esp)
c0107912:	e8 a5 94 ff ff       	call   c0100dbc <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107917:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010791e:	eb 1e                	jmp    c010793e <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c0107920:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107923:	8b 04 85 a0 1d 1b c0 	mov    -0x3fe4e260(,%eax,4),%eax
c010792a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107931:	00 
c0107932:	89 04 24             	mov    %eax,(%esp)
c0107935:	e8 76 d8 ff ff       	call   c01051b0 <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010793a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010793e:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107942:	7e dc                	jle    c0107920 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0107944:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107947:	8b 00                	mov    (%eax),%eax
c0107949:	89 04 24             	mov    %eax,(%esp)
c010794c:	e8 d6 f4 ff ff       	call   c0106e27 <pde2page>
c0107951:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107958:	00 
c0107959:	89 04 24             	mov    %eax,(%esp)
c010795c:	e8 4f d8 ff ff       	call   c01051b0 <free_pages>
     pgdir[0] = 0;
c0107961:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107964:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c010796a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010796d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0107974:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107977:	89 04 24             	mov    %eax,(%esp)
c010797a:	e8 af 09 00 00       	call   c010832e <mm_destroy>
     check_mm_struct = NULL;
c010797f:	c7 05 6c 1e 1b c0 00 	movl   $0x0,0xc01b1e6c
c0107986:	00 00 00 
     
     nr_free = nr_free_store;
c0107989:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010798c:	a3 84 1d 1b c0       	mov    %eax,0xc01b1d84
     free_list = free_list_store;
c0107991:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107994:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0107997:	a3 7c 1d 1b c0       	mov    %eax,0xc01b1d7c
c010799c:	89 15 80 1d 1b c0    	mov    %edx,0xc01b1d80

     
     le = &free_list;
c01079a2:	c7 45 e8 7c 1d 1b c0 	movl   $0xc01b1d7c,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01079a9:	eb 1f                	jmp    c01079ca <check_swap+0x65c>
         struct Page *p = le2page(le, page_link);
c01079ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01079ae:	83 e8 0c             	sub    $0xc,%eax
c01079b1:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c01079b4:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01079b8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01079bb:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01079be:	8b 40 08             	mov    0x8(%eax),%eax
c01079c1:	89 d1                	mov    %edx,%ecx
c01079c3:	29 c1                	sub    %eax,%ecx
c01079c5:	89 c8                	mov    %ecx,%eax
c01079c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01079ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01079cd:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01079d0:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01079d3:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01079d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01079d9:	81 7d e8 7c 1d 1b c0 	cmpl   $0xc01b1d7c,-0x18(%ebp)
c01079e0:	75 c9                	jne    c01079ab <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c01079e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01079e5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01079e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01079ec:	89 44 24 04          	mov    %eax,0x4(%esp)
c01079f0:	c7 04 24 e1 dd 10 c0 	movl   $0xc010dde1,(%esp)
c01079f7:	e8 67 89 ff ff       	call   c0100363 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c01079fc:	c7 04 24 fb dd 10 c0 	movl   $0xc010ddfb,(%esp)
c0107a03:	e8 5b 89 ff ff       	call   c0100363 <cprintf>
}
c0107a08:	83 c4 74             	add    $0x74,%esp
c0107a0b:	5b                   	pop    %ebx
c0107a0c:	5d                   	pop    %ebp
c0107a0d:	c3                   	ret    
	...

c0107a10 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0107a10:	55                   	push   %ebp
c0107a11:	89 e5                	mov    %esp,%ebp
c0107a13:	83 ec 10             	sub    $0x10,%esp
c0107a16:	c7 45 fc 64 1e 1b c0 	movl   $0xc01b1e64,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107a1d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107a20:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107a23:	89 50 04             	mov    %edx,0x4(%eax)
c0107a26:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107a29:	8b 50 04             	mov    0x4(%eax),%edx
c0107a2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107a2f:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0107a31:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a34:	c7 40 14 64 1e 1b c0 	movl   $0xc01b1e64,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0107a3b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107a40:	c9                   	leave  
c0107a41:	c3                   	ret    

c0107a42 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107a42:	55                   	push   %ebp
c0107a43:	89 e5                	mov    %esp,%ebp
c0107a45:	83 ec 38             	sub    $0x38,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107a48:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a4b:	8b 40 14             	mov    0x14(%eax),%eax
c0107a4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0107a51:	8b 45 10             	mov    0x10(%ebp),%eax
c0107a54:	83 c0 14             	add    $0x14,%eax
c0107a57:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0107a5a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107a5e:	74 06                	je     c0107a66 <_fifo_map_swappable+0x24>
c0107a60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107a64:	75 24                	jne    c0107a8a <_fifo_map_swappable+0x48>
c0107a66:	c7 44 24 0c 14 de 10 	movl   $0xc010de14,0xc(%esp)
c0107a6d:	c0 
c0107a6e:	c7 44 24 08 32 de 10 	movl   $0xc010de32,0x8(%esp)
c0107a75:	c0 
c0107a76:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0107a7d:	00 
c0107a7e:	c7 04 24 47 de 10 c0 	movl   $0xc010de47,(%esp)
c0107a85:	e8 32 93 ff ff       	call   c0100dbc <__panic>
c0107a8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a8d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107a90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a93:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0107a96:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107a99:	8b 00                	mov    (%eax),%eax
c0107a9b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107a9e:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107aa1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107aa4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107aa7:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107aaa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107aad:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107ab0:	89 10                	mov    %edx,(%eax)
c0107ab2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107ab5:	8b 10                	mov    (%eax),%edx
c0107ab7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107aba:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107abd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107ac0:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107ac3:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107ac6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107ac9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107acc:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: 2011010312*/
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
	list_add_before(head, entry);
	return 0;
c0107ace:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107ad3:	c9                   	leave  
c0107ad4:	c3                   	ret    

c0107ad5 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0107ad5:	55                   	push   %ebp
c0107ad6:	89 e5                	mov    %esp,%ebp
c0107ad8:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107adb:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ade:	8b 40 14             	mov    0x14(%eax),%eax
c0107ae1:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0107ae4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107ae8:	75 24                	jne    c0107b0e <_fifo_swap_out_victim+0x39>
c0107aea:	c7 44 24 0c 5b de 10 	movl   $0xc010de5b,0xc(%esp)
c0107af1:	c0 
c0107af2:	c7 44 24 08 32 de 10 	movl   $0xc010de32,0x8(%esp)
c0107af9:	c0 
c0107afa:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107b01:	00 
c0107b02:	c7 04 24 47 de 10 c0 	movl   $0xc010de47,(%esp)
c0107b09:	e8 ae 92 ff ff       	call   c0100dbc <__panic>
     assert(in_tick==0);
c0107b0e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107b12:	74 24                	je     c0107b38 <_fifo_swap_out_victim+0x63>
c0107b14:	c7 44 24 0c 68 de 10 	movl   $0xc010de68,0xc(%esp)
c0107b1b:	c0 
c0107b1c:	c7 44 24 08 32 de 10 	movl   $0xc010de32,0x8(%esp)
c0107b23:	c0 
c0107b24:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0107b2b:	00 
c0107b2c:	c7 04 24 47 de 10 c0 	movl   $0xc010de47,(%esp)
c0107b33:	e8 84 92 ff ff       	call   c0100dbc <__panic>
c0107b38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b3b:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107b3e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107b41:	8b 40 04             	mov    0x4(%eax),%eax
     /* Select the victim */
     /*LAB3 EXERCISE 2: 2011010312*/
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     list_entry_t *le = list_next(head);
c0107b44:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c0107b47:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b4a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107b4d:	75 24                	jne    c0107b73 <_fifo_swap_out_victim+0x9e>
c0107b4f:	c7 44 24 0c 73 de 10 	movl   $0xc010de73,0xc(%esp)
c0107b56:	c0 
c0107b57:	c7 44 24 08 32 de 10 	movl   $0xc010de32,0x8(%esp)
c0107b5e:	c0 
c0107b5f:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c0107b66:	00 
c0107b67:	c7 04 24 47 de 10 c0 	movl   $0xc010de47,(%esp)
c0107b6e:	e8 49 92 ff ff       	call   c0100dbc <__panic>
     struct Page *p = le2page(le, pra_page_link);
c0107b73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b76:	83 e8 14             	sub    $0x14,%eax
c0107b79:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107b7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b7f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107b82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107b85:	8b 40 04             	mov    0x4(%eax),%eax
c0107b88:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107b8b:	8b 12                	mov    (%edx),%edx
c0107b8d:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0107b90:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107b93:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107b96:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107b99:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107b9c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107b9f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107ba2:	89 10                	mov    %edx,(%eax)
     list_del(le);
     assert(p !=NULL);
c0107ba4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107ba8:	75 24                	jne    c0107bce <_fifo_swap_out_victim+0xf9>
c0107baa:	c7 44 24 0c 7c de 10 	movl   $0xc010de7c,0xc(%esp)
c0107bb1:	c0 
c0107bb2:	c7 44 24 08 32 de 10 	movl   $0xc010de32,0x8(%esp)
c0107bb9:	c0 
c0107bba:	c7 44 24 04 4b 00 00 	movl   $0x4b,0x4(%esp)
c0107bc1:	00 
c0107bc2:	c7 04 24 47 de 10 c0 	movl   $0xc010de47,(%esp)
c0107bc9:	e8 ee 91 ff ff       	call   c0100dbc <__panic>
     *ptr_page = p;
c0107bce:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107bd1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107bd4:	89 10                	mov    %edx,(%eax)
     return 0;
c0107bd6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107bdb:	c9                   	leave  
c0107bdc:	c3                   	ret    

c0107bdd <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107bdd:	55                   	push   %ebp
c0107bde:	89 e5                	mov    %esp,%ebp
c0107be0:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107be3:	c7 04 24 88 de 10 c0 	movl   $0xc010de88,(%esp)
c0107bea:	e8 74 87 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107bef:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107bf4:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107bf7:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c0107bfc:	83 f8 04             	cmp    $0x4,%eax
c0107bff:	74 24                	je     c0107c25 <_fifo_check_swap+0x48>
c0107c01:	c7 44 24 0c ae de 10 	movl   $0xc010deae,0xc(%esp)
c0107c08:	c0 
c0107c09:	c7 44 24 08 32 de 10 	movl   $0xc010de32,0x8(%esp)
c0107c10:	c0 
c0107c11:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0107c18:	00 
c0107c19:	c7 04 24 47 de 10 c0 	movl   $0xc010de47,(%esp)
c0107c20:	e8 97 91 ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107c25:	c7 04 24 c0 de 10 c0 	movl   $0xc010dec0,(%esp)
c0107c2c:	e8 32 87 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107c31:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107c36:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107c39:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c0107c3e:	83 f8 04             	cmp    $0x4,%eax
c0107c41:	74 24                	je     c0107c67 <_fifo_check_swap+0x8a>
c0107c43:	c7 44 24 0c ae de 10 	movl   $0xc010deae,0xc(%esp)
c0107c4a:	c0 
c0107c4b:	c7 44 24 08 32 de 10 	movl   $0xc010de32,0x8(%esp)
c0107c52:	c0 
c0107c53:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0107c5a:	00 
c0107c5b:	c7 04 24 47 de 10 c0 	movl   $0xc010de47,(%esp)
c0107c62:	e8 55 91 ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107c67:	c7 04 24 e8 de 10 c0 	movl   $0xc010dee8,(%esp)
c0107c6e:	e8 f0 86 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107c73:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107c78:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107c7b:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c0107c80:	83 f8 04             	cmp    $0x4,%eax
c0107c83:	74 24                	je     c0107ca9 <_fifo_check_swap+0xcc>
c0107c85:	c7 44 24 0c ae de 10 	movl   $0xc010deae,0xc(%esp)
c0107c8c:	c0 
c0107c8d:	c7 44 24 08 32 de 10 	movl   $0xc010de32,0x8(%esp)
c0107c94:	c0 
c0107c95:	c7 44 24 04 5a 00 00 	movl   $0x5a,0x4(%esp)
c0107c9c:	00 
c0107c9d:	c7 04 24 47 de 10 c0 	movl   $0xc010de47,(%esp)
c0107ca4:	e8 13 91 ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107ca9:	c7 04 24 10 df 10 c0 	movl   $0xc010df10,(%esp)
c0107cb0:	e8 ae 86 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107cb5:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107cba:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107cbd:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c0107cc2:	83 f8 04             	cmp    $0x4,%eax
c0107cc5:	74 24                	je     c0107ceb <_fifo_check_swap+0x10e>
c0107cc7:	c7 44 24 0c ae de 10 	movl   $0xc010deae,0xc(%esp)
c0107cce:	c0 
c0107ccf:	c7 44 24 08 32 de 10 	movl   $0xc010de32,0x8(%esp)
c0107cd6:	c0 
c0107cd7:	c7 44 24 04 5d 00 00 	movl   $0x5d,0x4(%esp)
c0107cde:	00 
c0107cdf:	c7 04 24 47 de 10 c0 	movl   $0xc010de47,(%esp)
c0107ce6:	e8 d1 90 ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107ceb:	c7 04 24 38 df 10 c0 	movl   $0xc010df38,(%esp)
c0107cf2:	e8 6c 86 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107cf7:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107cfc:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107cff:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c0107d04:	83 f8 05             	cmp    $0x5,%eax
c0107d07:	74 24                	je     c0107d2d <_fifo_check_swap+0x150>
c0107d09:	c7 44 24 0c 5e df 10 	movl   $0xc010df5e,0xc(%esp)
c0107d10:	c0 
c0107d11:	c7 44 24 08 32 de 10 	movl   $0xc010de32,0x8(%esp)
c0107d18:	c0 
c0107d19:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c0107d20:	00 
c0107d21:	c7 04 24 47 de 10 c0 	movl   $0xc010de47,(%esp)
c0107d28:	e8 8f 90 ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107d2d:	c7 04 24 10 df 10 c0 	movl   $0xc010df10,(%esp)
c0107d34:	e8 2a 86 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107d39:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107d3e:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107d41:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c0107d46:	83 f8 05             	cmp    $0x5,%eax
c0107d49:	74 24                	je     c0107d6f <_fifo_check_swap+0x192>
c0107d4b:	c7 44 24 0c 5e df 10 	movl   $0xc010df5e,0xc(%esp)
c0107d52:	c0 
c0107d53:	c7 44 24 08 32 de 10 	movl   $0xc010de32,0x8(%esp)
c0107d5a:	c0 
c0107d5b:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c0107d62:	00 
c0107d63:	c7 04 24 47 de 10 c0 	movl   $0xc010de47,(%esp)
c0107d6a:	e8 4d 90 ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107d6f:	c7 04 24 c0 de 10 c0 	movl   $0xc010dec0,(%esp)
c0107d76:	e8 e8 85 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107d7b:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107d80:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107d83:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c0107d88:	83 f8 06             	cmp    $0x6,%eax
c0107d8b:	74 24                	je     c0107db1 <_fifo_check_swap+0x1d4>
c0107d8d:	c7 44 24 0c 6d df 10 	movl   $0xc010df6d,0xc(%esp)
c0107d94:	c0 
c0107d95:	c7 44 24 08 32 de 10 	movl   $0xc010de32,0x8(%esp)
c0107d9c:	c0 
c0107d9d:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
c0107da4:	00 
c0107da5:	c7 04 24 47 de 10 c0 	movl   $0xc010de47,(%esp)
c0107dac:	e8 0b 90 ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107db1:	c7 04 24 10 df 10 c0 	movl   $0xc010df10,(%esp)
c0107db8:	e8 a6 85 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107dbd:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107dc2:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107dc5:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c0107dca:	83 f8 07             	cmp    $0x7,%eax
c0107dcd:	74 24                	je     c0107df3 <_fifo_check_swap+0x216>
c0107dcf:	c7 44 24 0c 7c df 10 	movl   $0xc010df7c,0xc(%esp)
c0107dd6:	c0 
c0107dd7:	c7 44 24 08 32 de 10 	movl   $0xc010de32,0x8(%esp)
c0107dde:	c0 
c0107ddf:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
c0107de6:	00 
c0107de7:	c7 04 24 47 de 10 c0 	movl   $0xc010de47,(%esp)
c0107dee:	e8 c9 8f ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107df3:	c7 04 24 88 de 10 c0 	movl   $0xc010de88,(%esp)
c0107dfa:	e8 64 85 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107dff:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107e04:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107e07:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c0107e0c:	83 f8 08             	cmp    $0x8,%eax
c0107e0f:	74 24                	je     c0107e35 <_fifo_check_swap+0x258>
c0107e11:	c7 44 24 0c 8b df 10 	movl   $0xc010df8b,0xc(%esp)
c0107e18:	c0 
c0107e19:	c7 44 24 08 32 de 10 	movl   $0xc010de32,0x8(%esp)
c0107e20:	c0 
c0107e21:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0107e28:	00 
c0107e29:	c7 04 24 47 de 10 c0 	movl   $0xc010de47,(%esp)
c0107e30:	e8 87 8f ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107e35:	c7 04 24 e8 de 10 c0 	movl   $0xc010dee8,(%esp)
c0107e3c:	e8 22 85 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107e41:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107e46:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107e49:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c0107e4e:	83 f8 09             	cmp    $0x9,%eax
c0107e51:	74 24                	je     c0107e77 <_fifo_check_swap+0x29a>
c0107e53:	c7 44 24 0c 9a df 10 	movl   $0xc010df9a,0xc(%esp)
c0107e5a:	c0 
c0107e5b:	c7 44 24 08 32 de 10 	movl   $0xc010de32,0x8(%esp)
c0107e62:	c0 
c0107e63:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c0107e6a:	00 
c0107e6b:	c7 04 24 47 de 10 c0 	movl   $0xc010de47,(%esp)
c0107e72:	e8 45 8f ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107e77:	c7 04 24 38 df 10 c0 	movl   $0xc010df38,(%esp)
c0107e7e:	e8 e0 84 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107e83:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107e88:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0107e8b:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c0107e90:	83 f8 0a             	cmp    $0xa,%eax
c0107e93:	74 24                	je     c0107eb9 <_fifo_check_swap+0x2dc>
c0107e95:	c7 44 24 0c a9 df 10 	movl   $0xc010dfa9,0xc(%esp)
c0107e9c:	c0 
c0107e9d:	c7 44 24 08 32 de 10 	movl   $0xc010de32,0x8(%esp)
c0107ea4:	c0 
c0107ea5:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c0107eac:	00 
c0107ead:	c7 04 24 47 de 10 c0 	movl   $0xc010de47,(%esp)
c0107eb4:	e8 03 8f ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107eb9:	c7 04 24 c0 de 10 c0 	movl   $0xc010dec0,(%esp)
c0107ec0:	e8 9e 84 ff ff       	call   c0100363 <cprintf>
    assert(*(unsigned char *)0x1000 == 0x0a);
c0107ec5:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107eca:	0f b6 00             	movzbl (%eax),%eax
c0107ecd:	3c 0a                	cmp    $0xa,%al
c0107ecf:	74 24                	je     c0107ef5 <_fifo_check_swap+0x318>
c0107ed1:	c7 44 24 0c bc df 10 	movl   $0xc010dfbc,0xc(%esp)
c0107ed8:	c0 
c0107ed9:	c7 44 24 08 32 de 10 	movl   $0xc010de32,0x8(%esp)
c0107ee0:	c0 
c0107ee1:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0107ee8:	00 
c0107ee9:	c7 04 24 47 de 10 c0 	movl   $0xc010de47,(%esp)
c0107ef0:	e8 c7 8e ff ff       	call   c0100dbc <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c0107ef5:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107efa:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c0107efd:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c0107f02:	83 f8 0b             	cmp    $0xb,%eax
c0107f05:	74 24                	je     c0107f2b <_fifo_check_swap+0x34e>
c0107f07:	c7 44 24 0c dd df 10 	movl   $0xc010dfdd,0xc(%esp)
c0107f0e:	c0 
c0107f0f:	c7 44 24 08 32 de 10 	movl   $0xc010de32,0x8(%esp)
c0107f16:	c0 
c0107f17:	c7 44 24 04 76 00 00 	movl   $0x76,0x4(%esp)
c0107f1e:	00 
c0107f1f:	c7 04 24 47 de 10 c0 	movl   $0xc010de47,(%esp)
c0107f26:	e8 91 8e ff ff       	call   c0100dbc <__panic>
    return 0;
c0107f2b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107f30:	c9                   	leave  
c0107f31:	c3                   	ret    

c0107f32 <_fifo_init>:


static int
_fifo_init(void)
{
c0107f32:	55                   	push   %ebp
c0107f33:	89 e5                	mov    %esp,%ebp
    return 0;
c0107f35:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107f3a:	5d                   	pop    %ebp
c0107f3b:	c3                   	ret    

c0107f3c <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107f3c:	55                   	push   %ebp
c0107f3d:	89 e5                	mov    %esp,%ebp
    return 0;
c0107f3f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107f44:	5d                   	pop    %ebp
c0107f45:	c3                   	ret    

c0107f46 <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0107f46:	55                   	push   %ebp
c0107f47:	89 e5                	mov    %esp,%ebp
c0107f49:	b8 00 00 00 00       	mov    $0x0,%eax
c0107f4e:	5d                   	pop    %ebp
c0107f4f:	c3                   	ret    

c0107f50 <lock_init>:
#define local_intr_restore(x)   __intr_restore(x);

typedef volatile bool lock_t;

static inline void
lock_init(lock_t *lock) {
c0107f50:	55                   	push   %ebp
c0107f51:	89 e5                	mov    %esp,%ebp
    *lock = 0;
c0107f53:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f56:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c0107f5c:	5d                   	pop    %ebp
c0107f5d:	c3                   	ret    

c0107f5e <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c0107f5e:	55                   	push   %ebp
c0107f5f:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0107f61:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f64:	8b 40 18             	mov    0x18(%eax),%eax
}
c0107f67:	5d                   	pop    %ebp
c0107f68:	c3                   	ret    

c0107f69 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0107f69:	55                   	push   %ebp
c0107f6a:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0107f6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f6f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107f72:	89 50 18             	mov    %edx,0x18(%eax)
}
c0107f75:	5d                   	pop    %ebp
c0107f76:	c3                   	ret    

c0107f77 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0107f77:	55                   	push   %ebp
c0107f78:	89 e5                	mov    %esp,%ebp
c0107f7a:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107f7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f80:	89 c2                	mov    %eax,%edx
c0107f82:	c1 ea 0c             	shr    $0xc,%edx
c0107f85:	a1 80 fc 1a c0       	mov    0xc01afc80,%eax
c0107f8a:	39 c2                	cmp    %eax,%edx
c0107f8c:	72 1c                	jb     c0107faa <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0107f8e:	c7 44 24 08 00 e0 10 	movl   $0xc010e000,0x8(%esp)
c0107f95:	c0 
c0107f96:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107f9d:	00 
c0107f9e:	c7 04 24 1f e0 10 c0 	movl   $0xc010e01f,(%esp)
c0107fa5:	e8 12 8e ff ff       	call   c0100dbc <__panic>
    }
    return &pages[PPN(pa)];
c0107faa:	a1 90 1d 1b c0       	mov    0xc01b1d90,%eax
c0107faf:	8b 55 08             	mov    0x8(%ebp),%edx
c0107fb2:	c1 ea 0c             	shr    $0xc,%edx
c0107fb5:	c1 e2 05             	shl    $0x5,%edx
c0107fb8:	01 d0                	add    %edx,%eax
}
c0107fba:	c9                   	leave  
c0107fbb:	c3                   	ret    

c0107fbc <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0107fbc:	55                   	push   %ebp
c0107fbd:	89 e5                	mov    %esp,%ebp
c0107fbf:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0107fc2:	8b 45 08             	mov    0x8(%ebp),%eax
c0107fc5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107fca:	89 04 24             	mov    %eax,(%esp)
c0107fcd:	e8 a5 ff ff ff       	call   c0107f77 <pa2page>
}
c0107fd2:	c9                   	leave  
c0107fd3:	c3                   	ret    

c0107fd4 <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0107fd4:	55                   	push   %ebp
c0107fd5:	89 e5                	mov    %esp,%ebp
c0107fd7:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0107fda:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0107fe1:	e8 d9 cc ff ff       	call   c0104cbf <kmalloc>
c0107fe6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0107fe9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107fed:	74 79                	je     c0108068 <mm_create+0x94>
        list_init(&(mm->mmap_list));
c0107fef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ff2:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107ff5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ff8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107ffb:	89 50 04             	mov    %edx,0x4(%eax)
c0107ffe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108001:	8b 50 04             	mov    0x4(%eax),%edx
c0108004:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108007:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0108009:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010800c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0108013:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108016:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c010801d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108020:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0108027:	a1 0c fd 1a c0       	mov    0xc01afd0c,%eax
c010802c:	85 c0                	test   %eax,%eax
c010802e:	74 0d                	je     c010803d <mm_create+0x69>
c0108030:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108033:	89 04 24             	mov    %eax,(%esp)
c0108036:	e8 94 ee ff ff       	call   c0106ecf <swap_init_mm>
c010803b:	eb 0a                	jmp    c0108047 <mm_create+0x73>
        else mm->sm_priv = NULL;
c010803d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108040:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0108047:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010804e:	00 
c010804f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108052:	89 04 24             	mov    %eax,(%esp)
c0108055:	e8 0f ff ff ff       	call   c0107f69 <set_mm_count>
        lock_init(&(mm->mm_lock));
c010805a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010805d:	83 c0 1c             	add    $0x1c,%eax
c0108060:	89 04 24             	mov    %eax,(%esp)
c0108063:	e8 e8 fe ff ff       	call   c0107f50 <lock_init>
    }    
    return mm;
c0108068:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010806b:	c9                   	leave  
c010806c:	c3                   	ret    

c010806d <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c010806d:	55                   	push   %ebp
c010806e:	89 e5                	mov    %esp,%ebp
c0108070:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0108073:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010807a:	e8 40 cc ff ff       	call   c0104cbf <kmalloc>
c010807f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0108082:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108086:	74 1b                	je     c01080a3 <vma_create+0x36>
        vma->vm_start = vm_start;
c0108088:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010808b:	8b 55 08             	mov    0x8(%ebp),%edx
c010808e:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0108091:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108094:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108097:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c010809a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010809d:	8b 55 10             	mov    0x10(%ebp),%edx
c01080a0:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c01080a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01080a6:	c9                   	leave  
c01080a7:	c3                   	ret    

c01080a8 <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c01080a8:	55                   	push   %ebp
c01080a9:	89 e5                	mov    %esp,%ebp
c01080ab:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c01080ae:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c01080b5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01080b9:	0f 84 95 00 00 00    	je     c0108154 <find_vma+0xac>
        vma = mm->mmap_cache;
c01080bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01080c2:	8b 40 08             	mov    0x8(%eax),%eax
c01080c5:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c01080c8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01080cc:	74 16                	je     c01080e4 <find_vma+0x3c>
c01080ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01080d1:	8b 40 04             	mov    0x4(%eax),%eax
c01080d4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01080d7:	77 0b                	ja     c01080e4 <find_vma+0x3c>
c01080d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01080dc:	8b 40 08             	mov    0x8(%eax),%eax
c01080df:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01080e2:	77 61                	ja     c0108145 <find_vma+0x9d>
                bool found = 0;
c01080e4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c01080eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01080ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01080f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01080f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c01080f7:	eb 28                	jmp    c0108121 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c01080f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080fc:	83 e8 10             	sub    $0x10,%eax
c01080ff:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0108102:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108105:	8b 40 04             	mov    0x4(%eax),%eax
c0108108:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010810b:	77 14                	ja     c0108121 <find_vma+0x79>
c010810d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108110:	8b 40 08             	mov    0x8(%eax),%eax
c0108113:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108116:	76 09                	jbe    c0108121 <find_vma+0x79>
                        found = 1;
c0108118:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c010811f:	eb 17                	jmp    c0108138 <find_vma+0x90>
c0108121:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108124:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108127:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010812a:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c010812d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108130:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108133:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108136:	75 c1                	jne    c01080f9 <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c0108138:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c010813c:	75 07                	jne    c0108145 <find_vma+0x9d>
                    vma = NULL;
c010813e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0108145:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0108149:	74 09                	je     c0108154 <find_vma+0xac>
            mm->mmap_cache = vma;
c010814b:	8b 45 08             	mov    0x8(%ebp),%eax
c010814e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0108151:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0108154:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0108157:	c9                   	leave  
c0108158:	c3                   	ret    

c0108159 <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0108159:	55                   	push   %ebp
c010815a:	89 e5                	mov    %esp,%ebp
c010815c:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c010815f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108162:	8b 50 04             	mov    0x4(%eax),%edx
c0108165:	8b 45 08             	mov    0x8(%ebp),%eax
c0108168:	8b 40 08             	mov    0x8(%eax),%eax
c010816b:	39 c2                	cmp    %eax,%edx
c010816d:	72 24                	jb     c0108193 <check_vma_overlap+0x3a>
c010816f:	c7 44 24 0c 2d e0 10 	movl   $0xc010e02d,0xc(%esp)
c0108176:	c0 
c0108177:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c010817e:	c0 
c010817f:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c0108186:	00 
c0108187:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c010818e:	e8 29 8c ff ff       	call   c0100dbc <__panic>
    assert(prev->vm_end <= next->vm_start);
c0108193:	8b 45 08             	mov    0x8(%ebp),%eax
c0108196:	8b 50 08             	mov    0x8(%eax),%edx
c0108199:	8b 45 0c             	mov    0xc(%ebp),%eax
c010819c:	8b 40 04             	mov    0x4(%eax),%eax
c010819f:	39 c2                	cmp    %eax,%edx
c01081a1:	76 24                	jbe    c01081c7 <check_vma_overlap+0x6e>
c01081a3:	c7 44 24 0c 70 e0 10 	movl   $0xc010e070,0xc(%esp)
c01081aa:	c0 
c01081ab:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c01081b2:	c0 
c01081b3:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c01081ba:	00 
c01081bb:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c01081c2:	e8 f5 8b ff ff       	call   c0100dbc <__panic>
    assert(next->vm_start < next->vm_end);
c01081c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081ca:	8b 50 04             	mov    0x4(%eax),%edx
c01081cd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081d0:	8b 40 08             	mov    0x8(%eax),%eax
c01081d3:	39 c2                	cmp    %eax,%edx
c01081d5:	72 24                	jb     c01081fb <check_vma_overlap+0xa2>
c01081d7:	c7 44 24 0c 8f e0 10 	movl   $0xc010e08f,0xc(%esp)
c01081de:	c0 
c01081df:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c01081e6:	c0 
c01081e7:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c01081ee:	00 
c01081ef:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c01081f6:	e8 c1 8b ff ff       	call   c0100dbc <__panic>
}
c01081fb:	c9                   	leave  
c01081fc:	c3                   	ret    

c01081fd <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c01081fd:	55                   	push   %ebp
c01081fe:	89 e5                	mov    %esp,%ebp
c0108200:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c0108203:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108206:	8b 50 04             	mov    0x4(%eax),%edx
c0108209:	8b 45 0c             	mov    0xc(%ebp),%eax
c010820c:	8b 40 08             	mov    0x8(%eax),%eax
c010820f:	39 c2                	cmp    %eax,%edx
c0108211:	72 24                	jb     c0108237 <insert_vma_struct+0x3a>
c0108213:	c7 44 24 0c ad e0 10 	movl   $0xc010e0ad,0xc(%esp)
c010821a:	c0 
c010821b:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108222:	c0 
c0108223:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010822a:	00 
c010822b:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108232:	e8 85 8b ff ff       	call   c0100dbc <__panic>
    list_entry_t *list = &(mm->mmap_list);
c0108237:	8b 45 08             	mov    0x8(%ebp),%eax
c010823a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c010823d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108240:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0108243:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108246:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0108249:	eb 1f                	jmp    c010826a <insert_vma_struct+0x6d>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c010824b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010824e:	83 e8 10             	sub    $0x10,%eax
c0108251:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c0108254:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108257:	8b 50 04             	mov    0x4(%eax),%edx
c010825a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010825d:	8b 40 04             	mov    0x4(%eax),%eax
c0108260:	39 c2                	cmp    %eax,%edx
c0108262:	77 1f                	ja     c0108283 <insert_vma_struct+0x86>
                break;
            }
            le_prev = le;
c0108264:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108267:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010826a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010826d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0108270:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108273:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c0108276:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108279:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010827c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010827f:	75 ca                	jne    c010824b <insert_vma_struct+0x4e>
c0108281:	eb 01                	jmp    c0108284 <insert_vma_struct+0x87>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
            if (mmap_prev->vm_start > vma->vm_start) {
                break;
c0108283:	90                   	nop
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c0108284:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108287:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010828a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010828d:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0108290:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0108293:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108296:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108299:	74 15                	je     c01082b0 <insert_vma_struct+0xb3>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c010829b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010829e:	8d 50 f0             	lea    -0x10(%eax),%edx
c01082a1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082a4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01082a8:	89 14 24             	mov    %edx,(%esp)
c01082ab:	e8 a9 fe ff ff       	call   c0108159 <check_vma_overlap>
    }
    if (le_next != list) {
c01082b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01082b3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01082b6:	74 15                	je     c01082cd <insert_vma_struct+0xd0>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c01082b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01082bb:	83 e8 10             	sub    $0x10,%eax
c01082be:	89 44 24 04          	mov    %eax,0x4(%esp)
c01082c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082c5:	89 04 24             	mov    %eax,(%esp)
c01082c8:	e8 8c fe ff ff       	call   c0108159 <check_vma_overlap>
    }

    vma->vm_mm = mm;
c01082cd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082d0:	8b 55 08             	mov    0x8(%ebp),%edx
c01082d3:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c01082d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082d8:	8d 50 10             	lea    0x10(%eax),%edx
c01082db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082de:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01082e1:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01082e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01082e7:	8b 40 04             	mov    0x4(%eax),%eax
c01082ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01082ed:	89 55 d0             	mov    %edx,-0x30(%ebp)
c01082f0:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01082f3:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01082f6:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01082f9:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01082fc:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01082ff:	89 10                	mov    %edx,(%eax)
c0108301:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0108304:	8b 10                	mov    (%eax),%edx
c0108306:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108309:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010830c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010830f:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0108312:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0108315:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108318:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010831b:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c010831d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108320:	8b 40 10             	mov    0x10(%eax),%eax
c0108323:	8d 50 01             	lea    0x1(%eax),%edx
c0108326:	8b 45 08             	mov    0x8(%ebp),%eax
c0108329:	89 50 10             	mov    %edx,0x10(%eax)
}
c010832c:	c9                   	leave  
c010832d:	c3                   	ret    

c010832e <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c010832e:	55                   	push   %ebp
c010832f:	89 e5                	mov    %esp,%ebp
c0108331:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c0108334:	8b 45 08             	mov    0x8(%ebp),%eax
c0108337:	89 04 24             	mov    %eax,(%esp)
c010833a:	e8 1f fc ff ff       	call   c0107f5e <mm_count>
c010833f:	85 c0                	test   %eax,%eax
c0108341:	74 24                	je     c0108367 <mm_destroy+0x39>
c0108343:	c7 44 24 0c c9 e0 10 	movl   $0xc010e0c9,0xc(%esp)
c010834a:	c0 
c010834b:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108352:	c0 
c0108353:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c010835a:	00 
c010835b:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108362:	e8 55 8a ff ff       	call   c0100dbc <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c0108367:	8b 45 08             	mov    0x8(%ebp),%eax
c010836a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c010836d:	eb 36                	jmp    c01083a5 <mm_destroy+0x77>
c010836f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108372:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0108375:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108378:	8b 40 04             	mov    0x4(%eax),%eax
c010837b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010837e:	8b 12                	mov    (%edx),%edx
c0108380:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0108383:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0108386:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108389:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010838c:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010838f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108392:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108395:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c0108397:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010839a:	83 e8 10             	sub    $0x10,%eax
c010839d:	89 04 24             	mov    %eax,(%esp)
c01083a0:	e8 35 c9 ff ff       	call   c0104cda <kfree>
c01083a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083a8:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01083ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01083ae:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c01083b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01083b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01083b7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01083ba:	75 b3                	jne    c010836f <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c01083bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01083bf:	89 04 24             	mov    %eax,(%esp)
c01083c2:	e8 13 c9 ff ff       	call   c0104cda <kfree>
    mm=NULL;
c01083c7:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c01083ce:	c9                   	leave  
c01083cf:	c3                   	ret    

c01083d0 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c01083d0:	55                   	push   %ebp
c01083d1:	89 e5                	mov    %esp,%ebp
c01083d3:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c01083d6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01083d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01083dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01083df:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01083e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01083e7:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c01083ee:	8b 45 10             	mov    0x10(%ebp),%eax
c01083f1:	8b 55 0c             	mov    0xc(%ebp),%edx
c01083f4:	01 d0                	add    %edx,%eax
c01083f6:	03 45 e8             	add    -0x18(%ebp),%eax
c01083f9:	83 e8 01             	sub    $0x1,%eax
c01083fc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01083ff:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108402:	ba 00 00 00 00       	mov    $0x0,%edx
c0108407:	f7 75 e8             	divl   -0x18(%ebp)
c010840a:	89 d0                	mov    %edx,%eax
c010840c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010840f:	89 d1                	mov    %edx,%ecx
c0108411:	29 c1                	sub    %eax,%ecx
c0108413:	89 c8                	mov    %ecx,%eax
c0108415:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c0108418:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c010841f:	76 11                	jbe    c0108432 <mm_map+0x62>
c0108421:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108424:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108427:	73 09                	jae    c0108432 <mm_map+0x62>
c0108429:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0108430:	76 0a                	jbe    c010843c <mm_map+0x6c>
        return -E_INVAL;
c0108432:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0108437:	e9 b0 00 00 00       	jmp    c01084ec <mm_map+0x11c>
    }

    assert(mm != NULL);
c010843c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108440:	75 24                	jne    c0108466 <mm_map+0x96>
c0108442:	c7 44 24 0c db e0 10 	movl   $0xc010e0db,0xc(%esp)
c0108449:	c0 
c010844a:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108451:	c0 
c0108452:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c0108459:	00 
c010845a:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108461:	e8 56 89 ff ff       	call   c0100dbc <__panic>

    int ret = -E_INVAL;
c0108466:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c010846d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108470:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108474:	8b 45 08             	mov    0x8(%ebp),%eax
c0108477:	89 04 24             	mov    %eax,(%esp)
c010847a:	e8 29 fc ff ff       	call   c01080a8 <find_vma>
c010847f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108482:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108486:	74 0b                	je     c0108493 <mm_map+0xc3>
c0108488:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010848b:	8b 40 04             	mov    0x4(%eax),%eax
c010848e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108491:	72 52                	jb     c01084e5 <mm_map+0x115>
        goto out;
    }
    ret = -E_NO_MEM;
c0108493:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c010849a:	8b 45 14             	mov    0x14(%ebp),%eax
c010849d:	89 44 24 08          	mov    %eax,0x8(%esp)
c01084a1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01084a4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084ab:	89 04 24             	mov    %eax,(%esp)
c01084ae:	e8 ba fb ff ff       	call   c010806d <vma_create>
c01084b3:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01084b6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01084ba:	74 2c                	je     c01084e8 <mm_map+0x118>
        goto out;
    }
    insert_vma_struct(mm, vma);
c01084bc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01084bf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01084c6:	89 04 24             	mov    %eax,(%esp)
c01084c9:	e8 2f fd ff ff       	call   c01081fd <insert_vma_struct>
    if (vma_store != NULL) {
c01084ce:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01084d2:	74 08                	je     c01084dc <mm_map+0x10c>
        *vma_store = vma;
c01084d4:	8b 45 18             	mov    0x18(%ebp),%eax
c01084d7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01084da:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c01084dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01084e3:	eb 04                	jmp    c01084e9 <mm_map+0x119>

    int ret = -E_INVAL;

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
        goto out;
c01084e5:	90                   	nop
c01084e6:	eb 01                	jmp    c01084e9 <mm_map+0x119>
    }
    ret = -E_NO_MEM;

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
        goto out;
c01084e8:	90                   	nop
        *vma_store = vma;
    }
    ret = 0;

out:
    return ret;
c01084e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01084ec:	c9                   	leave  
c01084ed:	c3                   	ret    

c01084ee <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c01084ee:	55                   	push   %ebp
c01084ef:	89 e5                	mov    %esp,%ebp
c01084f1:	56                   	push   %esi
c01084f2:	53                   	push   %ebx
c01084f3:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c01084f6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01084fa:	74 06                	je     c0108502 <dup_mmap+0x14>
c01084fc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108500:	75 24                	jne    c0108526 <dup_mmap+0x38>
c0108502:	c7 44 24 0c e6 e0 10 	movl   $0xc010e0e6,0xc(%esp)
c0108509:	c0 
c010850a:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108511:	c0 
c0108512:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c0108519:	00 
c010851a:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108521:	e8 96 88 ff ff       	call   c0100dbc <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c0108526:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108529:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010852c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010852f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0108532:	e9 92 00 00 00       	jmp    c01085c9 <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c0108537:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010853a:	83 e8 10             	sub    $0x10,%eax
c010853d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0108540:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108543:	8b 48 0c             	mov    0xc(%eax),%ecx
c0108546:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108549:	8b 50 08             	mov    0x8(%eax),%edx
c010854c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010854f:	8b 40 04             	mov    0x4(%eax),%eax
c0108552:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108556:	89 54 24 04          	mov    %edx,0x4(%esp)
c010855a:	89 04 24             	mov    %eax,(%esp)
c010855d:	e8 0b fb ff ff       	call   c010806d <vma_create>
c0108562:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0108565:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108569:	75 07                	jne    c0108572 <dup_mmap+0x84>
            return -E_NO_MEM;
c010856b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108570:	eb 76                	jmp    c01085e8 <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c0108572:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108575:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108579:	8b 45 08             	mov    0x8(%ebp),%eax
c010857c:	89 04 24             	mov    %eax,(%esp)
c010857f:	e8 79 fc ff ff       	call   c01081fd <insert_vma_struct>

        bool share = 0;
c0108584:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c010858b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010858e:	8b 58 08             	mov    0x8(%eax),%ebx
c0108591:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108594:	8b 48 04             	mov    0x4(%eax),%ecx
c0108597:	8b 45 0c             	mov    0xc(%ebp),%eax
c010859a:	8b 50 0c             	mov    0xc(%eax),%edx
c010859d:	8b 45 08             	mov    0x8(%ebp),%eax
c01085a0:	8b 40 0c             	mov    0xc(%eax),%eax
c01085a3:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c01085a6:	89 74 24 10          	mov    %esi,0x10(%esp)
c01085aa:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01085ae:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01085b2:	89 54 24 04          	mov    %edx,0x4(%esp)
c01085b6:	89 04 24             	mov    %eax,(%esp)
c01085b9:	e8 dc d6 ff ff       	call   c0105c9a <copy_range>
c01085be:	85 c0                	test   %eax,%eax
c01085c0:	74 07                	je     c01085c9 <dup_mmap+0xdb>
            return -E_NO_MEM;
c01085c2:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01085c7:	eb 1f                	jmp    c01085e8 <dup_mmap+0xfa>
c01085c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085cc:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c01085cf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01085d2:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c01085d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01085d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085da:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01085dd:	0f 85 54 ff ff ff    	jne    c0108537 <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c01085e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01085e8:	83 c4 40             	add    $0x40,%esp
c01085eb:	5b                   	pop    %ebx
c01085ec:	5e                   	pop    %esi
c01085ed:	5d                   	pop    %ebp
c01085ee:	c3                   	ret    

c01085ef <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c01085ef:	55                   	push   %ebp
c01085f0:	89 e5                	mov    %esp,%ebp
c01085f2:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c01085f5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01085f9:	74 0f                	je     c010860a <exit_mmap+0x1b>
c01085fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01085fe:	89 04 24             	mov    %eax,(%esp)
c0108601:	e8 58 f9 ff ff       	call   c0107f5e <mm_count>
c0108606:	85 c0                	test   %eax,%eax
c0108608:	74 24                	je     c010862e <exit_mmap+0x3f>
c010860a:	c7 44 24 0c 04 e1 10 	movl   $0xc010e104,0xc(%esp)
c0108611:	c0 
c0108612:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108619:	c0 
c010861a:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0108621:	00 
c0108622:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108629:	e8 8e 87 ff ff       	call   c0100dbc <__panic>
    pde_t *pgdir = mm->pgdir;
c010862e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108631:	8b 40 0c             	mov    0xc(%eax),%eax
c0108634:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c0108637:	8b 45 08             	mov    0x8(%ebp),%eax
c010863a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010863d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108640:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0108643:	eb 28                	jmp    c010866d <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c0108645:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108648:	83 e8 10             	sub    $0x10,%eax
c010864b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c010864e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108651:	8b 50 08             	mov    0x8(%eax),%edx
c0108654:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108657:	8b 40 04             	mov    0x4(%eax),%eax
c010865a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010865e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108662:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108665:	89 04 24             	mov    %eax,(%esp)
c0108668:	e8 44 d4 ff ff       	call   c0105ab1 <unmap_range>
c010866d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108670:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108673:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108676:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c0108679:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010867c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010867f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108682:	75 c1                	jne    c0108645 <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108684:	eb 28                	jmp    c01086ae <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c0108686:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108689:	83 e8 10             	sub    $0x10,%eax
c010868c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c010868f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108692:	8b 50 08             	mov    0x8(%eax),%edx
c0108695:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108698:	8b 40 04             	mov    0x4(%eax),%eax
c010869b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010869f:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01086a6:	89 04 24             	mov    %eax,(%esp)
c01086a9:	e8 f7 d4 ff ff       	call   c0105ba5 <exit_range>
c01086ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086b1:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01086b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01086b7:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c01086ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01086bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086c0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01086c3:	75 c1                	jne    c0108686 <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c01086c5:	c9                   	leave  
c01086c6:	c3                   	ret    

c01086c7 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c01086c7:	55                   	push   %ebp
c01086c8:	89 e5                	mov    %esp,%ebp
c01086ca:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c01086cd:	8b 45 10             	mov    0x10(%ebp),%eax
c01086d0:	8b 55 18             	mov    0x18(%ebp),%edx
c01086d3:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01086d7:	8b 55 14             	mov    0x14(%ebp),%edx
c01086da:	89 54 24 08          	mov    %edx,0x8(%esp)
c01086de:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01086e5:	89 04 24             	mov    %eax,(%esp)
c01086e8:	e8 c0 09 00 00       	call   c01090ad <user_mem_check>
c01086ed:	85 c0                	test   %eax,%eax
c01086ef:	75 07                	jne    c01086f8 <copy_from_user+0x31>
        return 0;
c01086f1:	b8 00 00 00 00       	mov    $0x0,%eax
c01086f6:	eb 1e                	jmp    c0108716 <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c01086f8:	8b 45 14             	mov    0x14(%ebp),%eax
c01086fb:	89 44 24 08          	mov    %eax,0x8(%esp)
c01086ff:	8b 45 10             	mov    0x10(%ebp),%eax
c0108702:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108706:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108709:	89 04 24             	mov    %eax,(%esp)
c010870c:	e8 91 3d 00 00       	call   c010c4a2 <memcpy>
    return 1;
c0108711:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0108716:	c9                   	leave  
c0108717:	c3                   	ret    

c0108718 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0108718:	55                   	push   %ebp
c0108719:	89 e5                	mov    %esp,%ebp
c010871b:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c010871e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108721:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0108728:	00 
c0108729:	8b 55 14             	mov    0x14(%ebp),%edx
c010872c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108730:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108734:	8b 45 08             	mov    0x8(%ebp),%eax
c0108737:	89 04 24             	mov    %eax,(%esp)
c010873a:	e8 6e 09 00 00       	call   c01090ad <user_mem_check>
c010873f:	85 c0                	test   %eax,%eax
c0108741:	75 07                	jne    c010874a <copy_to_user+0x32>
        return 0;
c0108743:	b8 00 00 00 00       	mov    $0x0,%eax
c0108748:	eb 1e                	jmp    c0108768 <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c010874a:	8b 45 14             	mov    0x14(%ebp),%eax
c010874d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108751:	8b 45 10             	mov    0x10(%ebp),%eax
c0108754:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108758:	8b 45 0c             	mov    0xc(%ebp),%eax
c010875b:	89 04 24             	mov    %eax,(%esp)
c010875e:	e8 3f 3d 00 00       	call   c010c4a2 <memcpy>
    return 1;
c0108763:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0108768:	c9                   	leave  
c0108769:	c3                   	ret    

c010876a <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c010876a:	55                   	push   %ebp
c010876b:	89 e5                	mov    %esp,%ebp
c010876d:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0108770:	e8 02 00 00 00       	call   c0108777 <check_vmm>
}
c0108775:	c9                   	leave  
c0108776:	c3                   	ret    

c0108777 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0108777:	55                   	push   %ebp
c0108778:	89 e5                	mov    %esp,%ebp
c010877a:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010877d:	e8 60 ca ff ff       	call   c01051e2 <nr_free_pages>
c0108782:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c0108785:	e8 13 00 00 00       	call   c010879d <check_vma_struct>
    check_pgfault();
c010878a:	e8 a7 04 00 00       	call   c0108c36 <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c010878f:	c7 04 24 24 e1 10 c0 	movl   $0xc010e124,(%esp)
c0108796:	e8 c8 7b ff ff       	call   c0100363 <cprintf>
}
c010879b:	c9                   	leave  
c010879c:	c3                   	ret    

c010879d <check_vma_struct>:

static void
check_vma_struct(void) {
c010879d:	55                   	push   %ebp
c010879e:	89 e5                	mov    %esp,%ebp
c01087a0:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c01087a3:	e8 3a ca ff ff       	call   c01051e2 <nr_free_pages>
c01087a8:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c01087ab:	e8 24 f8 ff ff       	call   c0107fd4 <mm_create>
c01087b0:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c01087b3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01087b7:	75 24                	jne    c01087dd <check_vma_struct+0x40>
c01087b9:	c7 44 24 0c db e0 10 	movl   $0xc010e0db,0xc(%esp)
c01087c0:	c0 
c01087c1:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c01087c8:	c0 
c01087c9:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c01087d0:	00 
c01087d1:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c01087d8:	e8 df 85 ff ff       	call   c0100dbc <__panic>

    int step1 = 10, step2 = step1 * 10;
c01087dd:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c01087e4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01087e7:	89 d0                	mov    %edx,%eax
c01087e9:	c1 e0 02             	shl    $0x2,%eax
c01087ec:	01 d0                	add    %edx,%eax
c01087ee:	01 c0                	add    %eax,%eax
c01087f0:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c01087f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01087f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01087f9:	eb 70                	jmp    c010886b <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c01087fb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087fe:	89 d0                	mov    %edx,%eax
c0108800:	c1 e0 02             	shl    $0x2,%eax
c0108803:	01 d0                	add    %edx,%eax
c0108805:	83 c0 02             	add    $0x2,%eax
c0108808:	89 c1                	mov    %eax,%ecx
c010880a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010880d:	89 d0                	mov    %edx,%eax
c010880f:	c1 e0 02             	shl    $0x2,%eax
c0108812:	01 d0                	add    %edx,%eax
c0108814:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010881b:	00 
c010881c:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108820:	89 04 24             	mov    %eax,(%esp)
c0108823:	e8 45 f8 ff ff       	call   c010806d <vma_create>
c0108828:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c010882b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010882f:	75 24                	jne    c0108855 <check_vma_struct+0xb8>
c0108831:	c7 44 24 0c 3c e1 10 	movl   $0xc010e13c,0xc(%esp)
c0108838:	c0 
c0108839:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108840:	c0 
c0108841:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c0108848:	00 
c0108849:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108850:	e8 67 85 ff ff       	call   c0100dbc <__panic>
        insert_vma_struct(mm, vma);
c0108855:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108858:	89 44 24 04          	mov    %eax,0x4(%esp)
c010885c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010885f:	89 04 24             	mov    %eax,(%esp)
c0108862:	e8 96 f9 ff ff       	call   c01081fd <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0108867:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010886b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010886f:	7f 8a                	jg     c01087fb <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108871:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108874:	83 c0 01             	add    $0x1,%eax
c0108877:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010887a:	eb 70                	jmp    c01088ec <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c010887c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010887f:	89 d0                	mov    %edx,%eax
c0108881:	c1 e0 02             	shl    $0x2,%eax
c0108884:	01 d0                	add    %edx,%eax
c0108886:	83 c0 02             	add    $0x2,%eax
c0108889:	89 c1                	mov    %eax,%ecx
c010888b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010888e:	89 d0                	mov    %edx,%eax
c0108890:	c1 e0 02             	shl    $0x2,%eax
c0108893:	01 d0                	add    %edx,%eax
c0108895:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010889c:	00 
c010889d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01088a1:	89 04 24             	mov    %eax,(%esp)
c01088a4:	e8 c4 f7 ff ff       	call   c010806d <vma_create>
c01088a9:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c01088ac:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01088b0:	75 24                	jne    c01088d6 <check_vma_struct+0x139>
c01088b2:	c7 44 24 0c 3c e1 10 	movl   $0xc010e13c,0xc(%esp)
c01088b9:	c0 
c01088ba:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c01088c1:	c0 
c01088c2:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c01088c9:	00 
c01088ca:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c01088d1:	e8 e6 84 ff ff       	call   c0100dbc <__panic>
        insert_vma_struct(mm, vma);
c01088d6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01088d9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01088dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088e0:	89 04 24             	mov    %eax,(%esp)
c01088e3:	e8 15 f9 ff ff       	call   c01081fd <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c01088e8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01088ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088ef:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01088f2:	7e 88                	jle    c010887c <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c01088f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088f7:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01088fa:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01088fd:	8b 40 04             	mov    0x4(%eax),%eax
c0108900:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0108903:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c010890a:	e9 97 00 00 00       	jmp    c01089a6 <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c010890f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108912:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108915:	75 24                	jne    c010893b <check_vma_struct+0x19e>
c0108917:	c7 44 24 0c 48 e1 10 	movl   $0xc010e148,0xc(%esp)
c010891e:	c0 
c010891f:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108926:	c0 
c0108927:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c010892e:	00 
c010892f:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108936:	e8 81 84 ff ff       	call   c0100dbc <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c010893b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010893e:	83 e8 10             	sub    $0x10,%eax
c0108941:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0108944:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108947:	8b 48 04             	mov    0x4(%eax),%ecx
c010894a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010894d:	89 d0                	mov    %edx,%eax
c010894f:	c1 e0 02             	shl    $0x2,%eax
c0108952:	01 d0                	add    %edx,%eax
c0108954:	39 c1                	cmp    %eax,%ecx
c0108956:	75 17                	jne    c010896f <check_vma_struct+0x1d2>
c0108958:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010895b:	8b 48 08             	mov    0x8(%eax),%ecx
c010895e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108961:	89 d0                	mov    %edx,%eax
c0108963:	c1 e0 02             	shl    $0x2,%eax
c0108966:	01 d0                	add    %edx,%eax
c0108968:	83 c0 02             	add    $0x2,%eax
c010896b:	39 c1                	cmp    %eax,%ecx
c010896d:	74 24                	je     c0108993 <check_vma_struct+0x1f6>
c010896f:	c7 44 24 0c 60 e1 10 	movl   $0xc010e160,0xc(%esp)
c0108976:	c0 
c0108977:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c010897e:	c0 
c010897f:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0108986:	00 
c0108987:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c010898e:	e8 29 84 ff ff       	call   c0100dbc <__panic>
c0108993:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108996:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0108999:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010899c:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c010899f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c01089a2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01089a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089a9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01089ac:	0f 8e 5d ff ff ff    	jle    c010890f <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c01089b2:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c01089b9:	e9 cd 01 00 00       	jmp    c0108b8b <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c01089be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089c8:	89 04 24             	mov    %eax,(%esp)
c01089cb:	e8 d8 f6 ff ff       	call   c01080a8 <find_vma>
c01089d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c01089d3:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c01089d7:	75 24                	jne    c01089fd <check_vma_struct+0x260>
c01089d9:	c7 44 24 0c 95 e1 10 	movl   $0xc010e195,0xc(%esp)
c01089e0:	c0 
c01089e1:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c01089e8:	c0 
c01089e9:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c01089f0:	00 
c01089f1:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c01089f8:	e8 bf 83 ff ff       	call   c0100dbc <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c01089fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a00:	83 c0 01             	add    $0x1,%eax
c0108a03:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a07:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a0a:	89 04 24             	mov    %eax,(%esp)
c0108a0d:	e8 96 f6 ff ff       	call   c01080a8 <find_vma>
c0108a12:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c0108a15:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0108a19:	75 24                	jne    c0108a3f <check_vma_struct+0x2a2>
c0108a1b:	c7 44 24 0c a2 e1 10 	movl   $0xc010e1a2,0xc(%esp)
c0108a22:	c0 
c0108a23:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108a2a:	c0 
c0108a2b:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c0108a32:	00 
c0108a33:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108a3a:	e8 7d 83 ff ff       	call   c0100dbc <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0108a3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a42:	83 c0 02             	add    $0x2,%eax
c0108a45:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a49:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a4c:	89 04 24             	mov    %eax,(%esp)
c0108a4f:	e8 54 f6 ff ff       	call   c01080a8 <find_vma>
c0108a54:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c0108a57:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0108a5b:	74 24                	je     c0108a81 <check_vma_struct+0x2e4>
c0108a5d:	c7 44 24 0c af e1 10 	movl   $0xc010e1af,0xc(%esp)
c0108a64:	c0 
c0108a65:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108a6c:	c0 
c0108a6d:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c0108a74:	00 
c0108a75:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108a7c:	e8 3b 83 ff ff       	call   c0100dbc <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0108a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a84:	83 c0 03             	add    $0x3,%eax
c0108a87:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a8b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a8e:	89 04 24             	mov    %eax,(%esp)
c0108a91:	e8 12 f6 ff ff       	call   c01080a8 <find_vma>
c0108a96:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c0108a99:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0108a9d:	74 24                	je     c0108ac3 <check_vma_struct+0x326>
c0108a9f:	c7 44 24 0c bc e1 10 	movl   $0xc010e1bc,0xc(%esp)
c0108aa6:	c0 
c0108aa7:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108aae:	c0 
c0108aaf:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0108ab6:	00 
c0108ab7:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108abe:	e8 f9 82 ff ff       	call   c0100dbc <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0108ac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ac6:	83 c0 04             	add    $0x4,%eax
c0108ac9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108acd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ad0:	89 04 24             	mov    %eax,(%esp)
c0108ad3:	e8 d0 f5 ff ff       	call   c01080a8 <find_vma>
c0108ad8:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c0108adb:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0108adf:	74 24                	je     c0108b05 <check_vma_struct+0x368>
c0108ae1:	c7 44 24 0c c9 e1 10 	movl   $0xc010e1c9,0xc(%esp)
c0108ae8:	c0 
c0108ae9:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108af0:	c0 
c0108af1:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0108af8:	00 
c0108af9:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108b00:	e8 b7 82 ff ff       	call   c0100dbc <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0108b05:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108b08:	8b 50 04             	mov    0x4(%eax),%edx
c0108b0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b0e:	39 c2                	cmp    %eax,%edx
c0108b10:	75 10                	jne    c0108b22 <check_vma_struct+0x385>
c0108b12:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108b15:	8b 50 08             	mov    0x8(%eax),%edx
c0108b18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b1b:	83 c0 02             	add    $0x2,%eax
c0108b1e:	39 c2                	cmp    %eax,%edx
c0108b20:	74 24                	je     c0108b46 <check_vma_struct+0x3a9>
c0108b22:	c7 44 24 0c d8 e1 10 	movl   $0xc010e1d8,0xc(%esp)
c0108b29:	c0 
c0108b2a:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108b31:	c0 
c0108b32:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0108b39:	00 
c0108b3a:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108b41:	e8 76 82 ff ff       	call   c0100dbc <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0108b46:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108b49:	8b 50 04             	mov    0x4(%eax),%edx
c0108b4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b4f:	39 c2                	cmp    %eax,%edx
c0108b51:	75 10                	jne    c0108b63 <check_vma_struct+0x3c6>
c0108b53:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108b56:	8b 50 08             	mov    0x8(%eax),%edx
c0108b59:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b5c:	83 c0 02             	add    $0x2,%eax
c0108b5f:	39 c2                	cmp    %eax,%edx
c0108b61:	74 24                	je     c0108b87 <check_vma_struct+0x3ea>
c0108b63:	c7 44 24 0c 08 e2 10 	movl   $0xc010e208,0xc(%esp)
c0108b6a:	c0 
c0108b6b:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108b72:	c0 
c0108b73:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c0108b7a:	00 
c0108b7b:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108b82:	e8 35 82 ff ff       	call   c0100dbc <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108b87:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0108b8b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108b8e:	89 d0                	mov    %edx,%eax
c0108b90:	c1 e0 02             	shl    $0x2,%eax
c0108b93:	01 d0                	add    %edx,%eax
c0108b95:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108b98:	0f 8d 20 fe ff ff    	jge    c01089be <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108b9e:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0108ba5:	eb 70                	jmp    c0108c17 <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0108ba7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108baa:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108bae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108bb1:	89 04 24             	mov    %eax,(%esp)
c0108bb4:	e8 ef f4 ff ff       	call   c01080a8 <find_vma>
c0108bb9:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0108bbc:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108bc0:	74 27                	je     c0108be9 <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0108bc2:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108bc5:	8b 50 08             	mov    0x8(%eax),%edx
c0108bc8:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108bcb:	8b 40 04             	mov    0x4(%eax),%eax
c0108bce:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108bd2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108bd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108bd9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108bdd:	c7 04 24 38 e2 10 c0 	movl   $0xc010e238,(%esp)
c0108be4:	e8 7a 77 ff ff       	call   c0100363 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0108be9:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108bed:	74 24                	je     c0108c13 <check_vma_struct+0x476>
c0108bef:	c7 44 24 0c 5d e2 10 	movl   $0xc010e25d,0xc(%esp)
c0108bf6:	c0 
c0108bf7:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108bfe:	c0 
c0108bff:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c0108c06:	00 
c0108c07:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108c0e:	e8 a9 81 ff ff       	call   c0100dbc <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108c13:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108c17:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108c1b:	79 8a                	jns    c0108ba7 <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0108c1d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c20:	89 04 24             	mov    %eax,(%esp)
c0108c23:	e8 06 f7 ff ff       	call   c010832e <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c0108c28:	c7 04 24 74 e2 10 c0 	movl   $0xc010e274,(%esp)
c0108c2f:	e8 2f 77 ff ff       	call   c0100363 <cprintf>
}
c0108c34:	c9                   	leave  
c0108c35:	c3                   	ret    

c0108c36 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0108c36:	55                   	push   %ebp
c0108c37:	89 e5                	mov    %esp,%ebp
c0108c39:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108c3c:	e8 a1 c5 ff ff       	call   c01051e2 <nr_free_pages>
c0108c41:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108c44:	e8 8b f3 ff ff       	call   c0107fd4 <mm_create>
c0108c49:	a3 6c 1e 1b c0       	mov    %eax,0xc01b1e6c
    assert(check_mm_struct != NULL);
c0108c4e:	a1 6c 1e 1b c0       	mov    0xc01b1e6c,%eax
c0108c53:	85 c0                	test   %eax,%eax
c0108c55:	75 24                	jne    c0108c7b <check_pgfault+0x45>
c0108c57:	c7 44 24 0c 93 e2 10 	movl   $0xc010e293,0xc(%esp)
c0108c5e:	c0 
c0108c5f:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108c66:	c0 
c0108c67:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c0108c6e:	00 
c0108c6f:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108c76:	e8 41 81 ff ff       	call   c0100dbc <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108c7b:	a1 6c 1e 1b c0       	mov    0xc01b1e6c,%eax
c0108c80:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108c83:	8b 15 84 fc 1a c0    	mov    0xc01afc84,%edx
c0108c89:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c8c:	89 50 0c             	mov    %edx,0xc(%eax)
c0108c8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c92:	8b 40 0c             	mov    0xc(%eax),%eax
c0108c95:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108c98:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c9b:	8b 00                	mov    (%eax),%eax
c0108c9d:	85 c0                	test   %eax,%eax
c0108c9f:	74 24                	je     c0108cc5 <check_pgfault+0x8f>
c0108ca1:	c7 44 24 0c ab e2 10 	movl   $0xc010e2ab,0xc(%esp)
c0108ca8:	c0 
c0108ca9:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108cb0:	c0 
c0108cb1:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108cb8:	00 
c0108cb9:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108cc0:	e8 f7 80 ff ff       	call   c0100dbc <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108cc5:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108ccc:	00 
c0108ccd:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108cd4:	00 
c0108cd5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108cdc:	e8 8c f3 ff ff       	call   c010806d <vma_create>
c0108ce1:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108ce4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108ce8:	75 24                	jne    c0108d0e <check_pgfault+0xd8>
c0108cea:	c7 44 24 0c 3c e1 10 	movl   $0xc010e13c,0xc(%esp)
c0108cf1:	c0 
c0108cf2:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108cf9:	c0 
c0108cfa:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c0108d01:	00 
c0108d02:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108d09:	e8 ae 80 ff ff       	call   c0100dbc <__panic>

    insert_vma_struct(mm, vma);
c0108d0e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108d11:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d15:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d18:	89 04 24             	mov    %eax,(%esp)
c0108d1b:	e8 dd f4 ff ff       	call   c01081fd <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108d20:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108d27:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d2a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d2e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d31:	89 04 24             	mov    %eax,(%esp)
c0108d34:	e8 6f f3 ff ff       	call   c01080a8 <find_vma>
c0108d39:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108d3c:	74 24                	je     c0108d62 <check_pgfault+0x12c>
c0108d3e:	c7 44 24 0c b9 e2 10 	movl   $0xc010e2b9,0xc(%esp)
c0108d45:	c0 
c0108d46:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108d4d:	c0 
c0108d4e:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c0108d55:	00 
c0108d56:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108d5d:	e8 5a 80 ff ff       	call   c0100dbc <__panic>

    int i, sum = 0;
c0108d62:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108d69:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108d70:	eb 15                	jmp    c0108d87 <check_pgfault+0x151>
        *(char *)(addr + i) = i;
c0108d72:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d75:	03 45 dc             	add    -0x24(%ebp),%eax
c0108d78:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108d7b:	88 10                	mov    %dl,(%eax)
        sum += i;
c0108d7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d80:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0108d83:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108d87:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108d8b:	7e e5                	jle    c0108d72 <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108d8d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108d94:	eb 13                	jmp    c0108da9 <check_pgfault+0x173>
        sum -= *(char *)(addr + i);
c0108d96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d99:	03 45 dc             	add    -0x24(%ebp),%eax
c0108d9c:	0f b6 00             	movzbl (%eax),%eax
c0108d9f:	0f be c0             	movsbl %al,%eax
c0108da2:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108da5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108da9:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108dad:	7e e7                	jle    c0108d96 <check_pgfault+0x160>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108daf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108db3:	74 24                	je     c0108dd9 <check_pgfault+0x1a3>
c0108db5:	c7 44 24 0c d3 e2 10 	movl   $0xc010e2d3,0xc(%esp)
c0108dbc:	c0 
c0108dbd:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108dc4:	c0 
c0108dc5:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c0108dcc:	00 
c0108dcd:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108dd4:	e8 e3 7f ff ff       	call   c0100dbc <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0108dd9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108ddc:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108ddf:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108de2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108de7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108deb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108dee:	89 04 24             	mov    %eax,(%esp)
c0108df1:	e8 c7 d0 ff ff       	call   c0105ebd <page_remove>
    free_page(pde2page(pgdir[0]));
c0108df6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108df9:	8b 00                	mov    (%eax),%eax
c0108dfb:	89 04 24             	mov    %eax,(%esp)
c0108dfe:	e8 b9 f1 ff ff       	call   c0107fbc <pde2page>
c0108e03:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108e0a:	00 
c0108e0b:	89 04 24             	mov    %eax,(%esp)
c0108e0e:	e8 9d c3 ff ff       	call   c01051b0 <free_pages>
    pgdir[0] = 0;
c0108e13:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108e16:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0108e1c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108e1f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0108e26:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108e29:	89 04 24             	mov    %eax,(%esp)
c0108e2c:	e8 fd f4 ff ff       	call   c010832e <mm_destroy>
    check_mm_struct = NULL;
c0108e31:	c7 05 6c 1e 1b c0 00 	movl   $0x0,0xc01b1e6c
c0108e38:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0108e3b:	e8 a2 c3 ff ff       	call   c01051e2 <nr_free_pages>
c0108e40:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108e43:	74 24                	je     c0108e69 <check_pgfault+0x233>
c0108e45:	c7 44 24 0c dc e2 10 	movl   $0xc010e2dc,0xc(%esp)
c0108e4c:	c0 
c0108e4d:	c7 44 24 08 4b e0 10 	movl   $0xc010e04b,0x8(%esp)
c0108e54:	c0 
c0108e55:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0108e5c:	00 
c0108e5d:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c0108e64:	e8 53 7f ff ff       	call   c0100dbc <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108e69:	c7 04 24 03 e3 10 c0 	movl   $0xc010e303,(%esp)
c0108e70:	e8 ee 74 ff ff       	call   c0100363 <cprintf>
}
c0108e75:	c9                   	leave  
c0108e76:	c3                   	ret    

c0108e77 <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108e77:	55                   	push   %ebp
c0108e78:	89 e5                	mov    %esp,%ebp
c0108e7a:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108e7d:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108e84:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e87:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e8b:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e8e:	89 04 24             	mov    %eax,(%esp)
c0108e91:	e8 12 f2 ff ff       	call   c01080a8 <find_vma>
c0108e96:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108e99:	a1 18 fd 1a c0       	mov    0xc01afd18,%eax
c0108e9e:	83 c0 01             	add    $0x1,%eax
c0108ea1:	a3 18 fd 1a c0       	mov    %eax,0xc01afd18
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108ea6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108eaa:	74 0b                	je     c0108eb7 <do_pgfault+0x40>
c0108eac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108eaf:	8b 40 04             	mov    0x4(%eax),%eax
c0108eb2:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108eb5:	76 18                	jbe    c0108ecf <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108eb7:	8b 45 10             	mov    0x10(%ebp),%eax
c0108eba:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ebe:	c7 04 24 20 e3 10 c0 	movl   $0xc010e320,(%esp)
c0108ec5:	e8 99 74 ff ff       	call   c0100363 <cprintf>
        goto failed;
c0108eca:	e9 d9 01 00 00       	jmp    c01090a8 <do_pgfault+0x231>
    }
    //check the error_code
    switch (error_code & 3) {
c0108ecf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108ed2:	83 e0 03             	and    $0x3,%eax
c0108ed5:	85 c0                	test   %eax,%eax
c0108ed7:	74 34                	je     c0108f0d <do_pgfault+0x96>
c0108ed9:	83 f8 01             	cmp    $0x1,%eax
c0108edc:	74 1e                	je     c0108efc <do_pgfault+0x85>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0108ede:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108ee1:	8b 40 0c             	mov    0xc(%eax),%eax
c0108ee4:	83 e0 02             	and    $0x2,%eax
c0108ee7:	85 c0                	test   %eax,%eax
c0108ee9:	75 40                	jne    c0108f2b <do_pgfault+0xb4>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0108eeb:	c7 04 24 50 e3 10 c0 	movl   $0xc010e350,(%esp)
c0108ef2:	e8 6c 74 ff ff       	call   c0100363 <cprintf>
            goto failed;
c0108ef7:	e9 ac 01 00 00       	jmp    c01090a8 <do_pgfault+0x231>
        }
        break;
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0108efc:	c7 04 24 b0 e3 10 c0 	movl   $0xc010e3b0,(%esp)
c0108f03:	e8 5b 74 ff ff       	call   c0100363 <cprintf>
        goto failed;
c0108f08:	e9 9b 01 00 00       	jmp    c01090a8 <do_pgfault+0x231>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0108f0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f10:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f13:	83 e0 05             	and    $0x5,%eax
c0108f16:	85 c0                	test   %eax,%eax
c0108f18:	75 12                	jne    c0108f2c <do_pgfault+0xb5>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0108f1a:	c7 04 24 e8 e3 10 c0 	movl   $0xc010e3e8,(%esp)
c0108f21:	e8 3d 74 ff ff       	call   c0100363 <cprintf>
            goto failed;
c0108f26:	e9 7d 01 00 00       	jmp    c01090a8 <do_pgfault+0x231>
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
            goto failed;
        }
        break;
c0108f2b:	90                   	nop
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0108f2c:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0108f33:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f36:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f39:	83 e0 02             	and    $0x2,%eax
c0108f3c:	85 c0                	test   %eax,%eax
c0108f3e:	74 04                	je     c0108f44 <do_pgfault+0xcd>
        perm |= PTE_W;
c0108f40:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0108f44:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f47:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108f4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108f4d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108f52:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0108f55:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0108f5c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
            goto failed;
        }
   }
#endif
    ptep = get_pte(mm->pgdir, addr, 1);
c0108f63:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f66:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f69:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108f70:	00 
c0108f71:	8b 55 10             	mov    0x10(%ebp),%edx
c0108f74:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108f78:	89 04 24             	mov    %eax,(%esp)
c0108f7b:	e8 2b c9 ff ff       	call   c01058ab <get_pte>
c0108f80:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (ptep == NULL) {
c0108f83:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108f87:	75 11                	jne    c0108f9a <do_pgfault+0x123>
        cprintf("get_pte in do_pgfault failed\n");
c0108f89:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0108f90:	e8 ce 73 ff ff       	call   c0100363 <cprintf>
        goto failed;
c0108f95:	e9 0e 01 00 00       	jmp    c01090a8 <do_pgfault+0x231>
    }

    if (*ptep == 0) {
c0108f9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f9d:	8b 00                	mov    (%eax),%eax
c0108f9f:	85 c0                	test   %eax,%eax
c0108fa1:	75 3a                	jne    c0108fdd <do_pgfault+0x166>
        struct Page* page = pgdir_alloc_page(mm->pgdir, addr, perm);
c0108fa3:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fa6:	8b 40 0c             	mov    0xc(%eax),%eax
c0108fa9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108fac:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108fb0:	8b 55 10             	mov    0x10(%ebp),%edx
c0108fb3:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108fb7:	89 04 24             	mov    %eax,(%esp)
c0108fba:	e8 5d d0 ff ff       	call   c010601c <pgdir_alloc_page>
c0108fbf:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (page == NULL) {
c0108fc2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108fc6:	0f 85 d5 00 00 00    	jne    c01090a1 <do_pgfault+0x22a>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c0108fcc:	c7 04 24 6c e4 10 c0 	movl   $0xc010e46c,(%esp)
c0108fd3:	e8 8b 73 ff ff       	call   c0100363 <cprintf>
            goto failed;
c0108fd8:	e9 cb 00 00 00       	jmp    c01090a8 <do_pgfault+0x231>
        }
    }

    else {
        if(swap_init_ok) {
c0108fdd:	a1 0c fd 1a c0       	mov    0xc01afd0c,%eax
c0108fe2:	85 c0                	test   %eax,%eax
c0108fe4:	0f 84 a0 00 00 00    	je     c010908a <do_pgfault+0x213>
            struct Page *page = NULL;
c0108fea:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
            ret = swap_in(mm, addr, &page);
c0108ff1:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0108ff4:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108ff8:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ffb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108fff:	8b 45 08             	mov    0x8(%ebp),%eax
c0109002:	89 04 24             	mov    %eax,(%esp)
c0109005:	e8 be e0 ff ff       	call   c01070c8 <swap_in>
c010900a:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (ret != 0) {
c010900d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109011:	74 11                	je     c0109024 <do_pgfault+0x1ad>
                cprintf("swap_in in do_pgfault failed\n");
c0109013:	c7 04 24 93 e4 10 c0 	movl   $0xc010e493,(%esp)
c010901a:	e8 44 73 ff ff       	call   c0100363 <cprintf>
                goto failed;
c010901f:	e9 84 00 00 00       	jmp    c01090a8 <do_pgfault+0x231>
            }
            ret = page_insert(mm->pgdir, page, addr, perm);
c0109024:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0109027:	8b 45 08             	mov    0x8(%ebp),%eax
c010902a:	8b 40 0c             	mov    0xc(%eax),%eax
c010902d:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0109030:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0109034:	8b 4d 10             	mov    0x10(%ebp),%ecx
c0109037:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010903b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010903f:	89 04 24             	mov    %eax,(%esp)
c0109042:	e8 ba ce ff ff       	call   c0105f01 <page_insert>
c0109047:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (ret != 0) {
c010904a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010904e:	74 0e                	je     c010905e <do_pgfault+0x1e7>
                cprintf("page_insert in do_pgfault failed\n");
c0109050:	c7 04 24 b4 e4 10 c0 	movl   $0xc010e4b4,(%esp)
c0109057:	e8 07 73 ff ff       	call   c0100363 <cprintf>
                goto failed;
c010905c:	eb 4a                	jmp    c01090a8 <do_pgfault+0x231>
            }
            swap_map_swappable(mm, addr, page, 1);
c010905e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109061:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109068:	00 
c0109069:	89 44 24 08          	mov    %eax,0x8(%esp)
c010906d:	8b 45 10             	mov    0x10(%ebp),%eax
c0109070:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109074:	8b 45 08             	mov    0x8(%ebp),%eax
c0109077:	89 04 24             	mov    %eax,(%esp)
c010907a:	e8 80 de ff ff       	call   c0106eff <swap_map_swappable>
            page->pra_vaddr = addr;
c010907f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109082:	8b 55 10             	mov    0x10(%ebp),%edx
c0109085:	89 50 1c             	mov    %edx,0x1c(%eax)
c0109088:	eb 17                	jmp    c01090a1 <do_pgfault+0x22a>
        }
        else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c010908a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010908d:	8b 00                	mov    (%eax),%eax
c010908f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109093:	c7 04 24 d8 e4 10 c0 	movl   $0xc010e4d8,(%esp)
c010909a:	e8 c4 72 ff ff       	call   c0100363 <cprintf>
            goto failed;
c010909f:	eb 07                	jmp    c01090a8 <do_pgfault+0x231>
        }
   }
   ret = 0;
c01090a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c01090a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01090ab:	c9                   	leave  
c01090ac:	c3                   	ret    

c01090ad <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c01090ad:	55                   	push   %ebp
c01090ae:	89 e5                	mov    %esp,%ebp
c01090b0:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c01090b3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01090b7:	0f 84 e0 00 00 00    	je     c010919d <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c01090bd:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c01090c4:	76 1c                	jbe    c01090e2 <user_mem_check+0x35>
c01090c6:	8b 45 10             	mov    0x10(%ebp),%eax
c01090c9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01090cc:	01 d0                	add    %edx,%eax
c01090ce:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01090d1:	76 0f                	jbe    c01090e2 <user_mem_check+0x35>
c01090d3:	8b 45 10             	mov    0x10(%ebp),%eax
c01090d6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01090d9:	01 d0                	add    %edx,%eax
c01090db:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c01090e0:	76 0a                	jbe    c01090ec <user_mem_check+0x3f>
            return 0;
c01090e2:	b8 00 00 00 00       	mov    $0x0,%eax
c01090e7:	e9 e2 00 00 00       	jmp    c01091ce <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c01090ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c01090ef:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01090f2:	8b 45 10             	mov    0x10(%ebp),%eax
c01090f5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01090f8:	01 d0                	add    %edx,%eax
c01090fa:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c01090fd:	e9 88 00 00 00       	jmp    c010918a <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0109102:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109105:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109109:	8b 45 08             	mov    0x8(%ebp),%eax
c010910c:	89 04 24             	mov    %eax,(%esp)
c010910f:	e8 94 ef ff ff       	call   c01080a8 <find_vma>
c0109114:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109117:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010911b:	74 0b                	je     c0109128 <user_mem_check+0x7b>
c010911d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109120:	8b 40 04             	mov    0x4(%eax),%eax
c0109123:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109126:	76 0a                	jbe    c0109132 <user_mem_check+0x85>
                return 0;
c0109128:	b8 00 00 00 00       	mov    $0x0,%eax
c010912d:	e9 9c 00 00 00       	jmp    c01091ce <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0109132:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109135:	8b 50 0c             	mov    0xc(%eax),%edx
c0109138:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010913c:	74 07                	je     c0109145 <user_mem_check+0x98>
c010913e:	b8 02 00 00 00       	mov    $0x2,%eax
c0109143:	eb 05                	jmp    c010914a <user_mem_check+0x9d>
c0109145:	b8 01 00 00 00       	mov    $0x1,%eax
c010914a:	21 d0                	and    %edx,%eax
c010914c:	85 c0                	test   %eax,%eax
c010914e:	75 07                	jne    c0109157 <user_mem_check+0xaa>
                return 0;
c0109150:	b8 00 00 00 00       	mov    $0x0,%eax
c0109155:	eb 77                	jmp    c01091ce <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0109157:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010915b:	74 24                	je     c0109181 <user_mem_check+0xd4>
c010915d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109160:	8b 40 0c             	mov    0xc(%eax),%eax
c0109163:	83 e0 08             	and    $0x8,%eax
c0109166:	85 c0                	test   %eax,%eax
c0109168:	74 17                	je     c0109181 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c010916a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010916d:	8b 40 04             	mov    0x4(%eax),%eax
c0109170:	05 00 10 00 00       	add    $0x1000,%eax
c0109175:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109178:	76 07                	jbe    c0109181 <user_mem_check+0xd4>
                    return 0;
c010917a:	b8 00 00 00 00       	mov    $0x0,%eax
c010917f:	eb 4d                	jmp    c01091ce <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c0109181:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109184:	8b 40 08             	mov    0x8(%eax),%eax
c0109187:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c010918a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010918d:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0109190:	0f 82 6c ff ff ff    	jb     c0109102 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0109196:	b8 01 00 00 00       	mov    $0x1,%eax
c010919b:	eb 31                	jmp    c01091ce <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c010919d:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c01091a4:	76 23                	jbe    c01091c9 <user_mem_check+0x11c>
c01091a6:	8b 45 10             	mov    0x10(%ebp),%eax
c01091a9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01091ac:	01 d0                	add    %edx,%eax
c01091ae:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01091b1:	76 16                	jbe    c01091c9 <user_mem_check+0x11c>
c01091b3:	8b 45 10             	mov    0x10(%ebp),%eax
c01091b6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01091b9:	01 d0                	add    %edx,%eax
c01091bb:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c01091c0:	77 07                	ja     c01091c9 <user_mem_check+0x11c>
c01091c2:	b8 01 00 00 00       	mov    $0x1,%eax
c01091c7:	eb 05                	jmp    c01091ce <user_mem_check+0x121>
c01091c9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01091ce:	c9                   	leave  
c01091cf:	c3                   	ret    

c01091d0 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01091d0:	55                   	push   %ebp
c01091d1:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01091d3:	8b 55 08             	mov    0x8(%ebp),%edx
c01091d6:	a1 90 1d 1b c0       	mov    0xc01b1d90,%eax
c01091db:	89 d1                	mov    %edx,%ecx
c01091dd:	29 c1                	sub    %eax,%ecx
c01091df:	89 c8                	mov    %ecx,%eax
c01091e1:	c1 f8 05             	sar    $0x5,%eax
}
c01091e4:	5d                   	pop    %ebp
c01091e5:	c3                   	ret    

c01091e6 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01091e6:	55                   	push   %ebp
c01091e7:	89 e5                	mov    %esp,%ebp
c01091e9:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01091ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01091ef:	89 04 24             	mov    %eax,(%esp)
c01091f2:	e8 d9 ff ff ff       	call   c01091d0 <page2ppn>
c01091f7:	c1 e0 0c             	shl    $0xc,%eax
}
c01091fa:	c9                   	leave  
c01091fb:	c3                   	ret    

c01091fc <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c01091fc:	55                   	push   %ebp
c01091fd:	89 e5                	mov    %esp,%ebp
c01091ff:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0109202:	8b 45 08             	mov    0x8(%ebp),%eax
c0109205:	89 04 24             	mov    %eax,(%esp)
c0109208:	e8 d9 ff ff ff       	call   c01091e6 <page2pa>
c010920d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109210:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109213:	c1 e8 0c             	shr    $0xc,%eax
c0109216:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109219:	a1 80 fc 1a c0       	mov    0xc01afc80,%eax
c010921e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109221:	72 23                	jb     c0109246 <page2kva+0x4a>
c0109223:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109226:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010922a:	c7 44 24 08 00 e5 10 	movl   $0xc010e500,0x8(%esp)
c0109231:	c0 
c0109232:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0109239:	00 
c010923a:	c7 04 24 23 e5 10 c0 	movl   $0xc010e523,(%esp)
c0109241:	e8 76 7b ff ff       	call   c0100dbc <__panic>
c0109246:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109249:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010924e:	c9                   	leave  
c010924f:	c3                   	ret    

c0109250 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c0109250:	55                   	push   %ebp
c0109251:	89 e5                	mov    %esp,%ebp
c0109253:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c0109256:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010925d:	e8 75 89 ff ff       	call   c0101bd7 <ide_device_valid>
c0109262:	85 c0                	test   %eax,%eax
c0109264:	75 1c                	jne    c0109282 <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c0109266:	c7 44 24 08 31 e5 10 	movl   $0xc010e531,0x8(%esp)
c010926d:	c0 
c010926e:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c0109275:	00 
c0109276:	c7 04 24 4b e5 10 c0 	movl   $0xc010e54b,(%esp)
c010927d:	e8 3a 7b ff ff       	call   c0100dbc <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c0109282:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109289:	e8 88 89 ff ff       	call   c0101c16 <ide_device_size>
c010928e:	c1 e8 03             	shr    $0x3,%eax
c0109291:	a3 3c 1e 1b c0       	mov    %eax,0xc01b1e3c
}
c0109296:	c9                   	leave  
c0109297:	c3                   	ret    

c0109298 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c0109298:	55                   	push   %ebp
c0109299:	89 e5                	mov    %esp,%ebp
c010929b:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010929e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01092a1:	89 04 24             	mov    %eax,(%esp)
c01092a4:	e8 53 ff ff ff       	call   c01091fc <page2kva>
c01092a9:	8b 55 08             	mov    0x8(%ebp),%edx
c01092ac:	c1 ea 08             	shr    $0x8,%edx
c01092af:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01092b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01092b6:	74 0b                	je     c01092c3 <swapfs_read+0x2b>
c01092b8:	8b 15 3c 1e 1b c0    	mov    0xc01b1e3c,%edx
c01092be:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c01092c1:	72 23                	jb     c01092e6 <swapfs_read+0x4e>
c01092c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01092c6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01092ca:	c7 44 24 08 5c e5 10 	movl   $0xc010e55c,0x8(%esp)
c01092d1:	c0 
c01092d2:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c01092d9:	00 
c01092da:	c7 04 24 4b e5 10 c0 	movl   $0xc010e54b,(%esp)
c01092e1:	e8 d6 7a ff ff       	call   c0100dbc <__panic>
c01092e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01092e9:	c1 e2 03             	shl    $0x3,%edx
c01092ec:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c01092f3:	00 
c01092f4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01092f8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01092fc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109303:	e8 4d 89 ff ff       	call   c0101c55 <ide_read_secs>
}
c0109308:	c9                   	leave  
c0109309:	c3                   	ret    

c010930a <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010930a:	55                   	push   %ebp
c010930b:	89 e5                	mov    %esp,%ebp
c010930d:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c0109310:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109313:	89 04 24             	mov    %eax,(%esp)
c0109316:	e8 e1 fe ff ff       	call   c01091fc <page2kva>
c010931b:	8b 55 08             	mov    0x8(%ebp),%edx
c010931e:	c1 ea 08             	shr    $0x8,%edx
c0109321:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109324:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109328:	74 0b                	je     c0109335 <swapfs_write+0x2b>
c010932a:	8b 15 3c 1e 1b c0    	mov    0xc01b1e3c,%edx
c0109330:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c0109333:	72 23                	jb     c0109358 <swapfs_write+0x4e>
c0109335:	8b 45 08             	mov    0x8(%ebp),%eax
c0109338:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010933c:	c7 44 24 08 5c e5 10 	movl   $0xc010e55c,0x8(%esp)
c0109343:	c0 
c0109344:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010934b:	00 
c010934c:	c7 04 24 4b e5 10 c0 	movl   $0xc010e54b,(%esp)
c0109353:	e8 64 7a ff ff       	call   c0100dbc <__panic>
c0109358:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010935b:	c1 e2 03             	shl    $0x3,%edx
c010935e:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c0109365:	00 
c0109366:	89 44 24 08          	mov    %eax,0x8(%esp)
c010936a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010936e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109375:	e8 24 8b ff ff       	call   c0101e9e <ide_write_secs>
}
c010937a:	c9                   	leave  
c010937b:	c3                   	ret    

c010937c <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010937c:	52                   	push   %edx
    call *%ebx              # call fn
c010937d:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010937f:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c0109380:	e8 11 0d 00 00       	call   c010a096 <do_exit>
c0109385:	00 00                	add    %al,(%eax)
	...

c0109388 <test_and_set_bit>:
 * test_and_set_bit - Atomically set a bit and return its old value
 * @nr:     the bit to set
 * @addr:   the address to count from
 * */
static inline bool
test_and_set_bit(int nr, volatile void *addr) {
c0109388:	55                   	push   %ebp
c0109389:	89 e5                	mov    %esp,%ebp
c010938b:	53                   	push   %ebx
c010938c:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btsl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c010938f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109392:	8b 45 08             	mov    0x8(%ebp),%eax
c0109395:	0f ab 02             	bts    %eax,(%edx)
c0109398:	19 db                	sbb    %ebx,%ebx
c010939a:	89 5d f8             	mov    %ebx,-0x8(%ebp)
    return oldbit != 0;
c010939d:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c01093a1:	0f 95 c0             	setne  %al
c01093a4:	0f b6 c0             	movzbl %al,%eax
}
c01093a7:	83 c4 10             	add    $0x10,%esp
c01093aa:	5b                   	pop    %ebx
c01093ab:	5d                   	pop    %ebp
c01093ac:	c3                   	ret    

c01093ad <test_and_clear_bit>:
 * test_and_clear_bit - Atomically clear a bit and return its old value
 * @nr:     the bit to clear
 * @addr:   the address to count from
 * */
static inline bool
test_and_clear_bit(int nr, volatile void *addr) {
c01093ad:	55                   	push   %ebp
c01093ae:	89 e5                	mov    %esp,%ebp
c01093b0:	53                   	push   %ebx
c01093b1:	83 ec 10             	sub    $0x10,%esp
    int oldbit;
    asm volatile ("btrl %2, %1; sbbl %0, %0" : "=r" (oldbit), "=m" (*(volatile long *)addr) : "Ir" (nr) : "memory");
c01093b4:	8b 55 0c             	mov    0xc(%ebp),%edx
c01093b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01093ba:	0f b3 02             	btr    %eax,(%edx)
c01093bd:	19 db                	sbb    %ebx,%ebx
c01093bf:	89 5d f8             	mov    %ebx,-0x8(%ebp)
    return oldbit != 0;
c01093c2:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c01093c6:	0f 95 c0             	setne  %al
c01093c9:	0f b6 c0             	movzbl %al,%eax
}
c01093cc:	83 c4 10             	add    $0x10,%esp
c01093cf:	5b                   	pop    %ebx
c01093d0:	5d                   	pop    %ebp
c01093d1:	c3                   	ret    

c01093d2 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01093d2:	55                   	push   %ebp
c01093d3:	89 e5                	mov    %esp,%ebp
c01093d5:	53                   	push   %ebx
c01093d6:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01093d9:	9c                   	pushf  
c01093da:	5b                   	pop    %ebx
c01093db:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c01093de:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01093e1:	25 00 02 00 00       	and    $0x200,%eax
c01093e6:	85 c0                	test   %eax,%eax
c01093e8:	74 0c                	je     c01093f6 <__intr_save+0x24>
        intr_disable();
c01093ea:	e8 fb 8c ff ff       	call   c01020ea <intr_disable>
        return 1;
c01093ef:	b8 01 00 00 00       	mov    $0x1,%eax
c01093f4:	eb 05                	jmp    c01093fb <__intr_save+0x29>
    }
    return 0;
c01093f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01093fb:	83 c4 14             	add    $0x14,%esp
c01093fe:	5b                   	pop    %ebx
c01093ff:	5d                   	pop    %ebp
c0109400:	c3                   	ret    

c0109401 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109401:	55                   	push   %ebp
c0109402:	89 e5                	mov    %esp,%ebp
c0109404:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109407:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010940b:	74 05                	je     c0109412 <__intr_restore+0x11>
        intr_enable();
c010940d:	e8 d2 8c ff ff       	call   c01020e4 <intr_enable>
    }
}
c0109412:	c9                   	leave  
c0109413:	c3                   	ret    

c0109414 <try_lock>:
lock_init(lock_t *lock) {
    *lock = 0;
}

static inline bool
try_lock(lock_t *lock) {
c0109414:	55                   	push   %ebp
c0109415:	89 e5                	mov    %esp,%ebp
c0109417:	83 ec 08             	sub    $0x8,%esp
    return !test_and_set_bit(0, lock);
c010941a:	8b 45 08             	mov    0x8(%ebp),%eax
c010941d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109421:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0109428:	e8 5b ff ff ff       	call   c0109388 <test_and_set_bit>
c010942d:	85 c0                	test   %eax,%eax
c010942f:	0f 94 c0             	sete   %al
c0109432:	0f b6 c0             	movzbl %al,%eax
}
c0109435:	c9                   	leave  
c0109436:	c3                   	ret    

c0109437 <lock>:

static inline void
lock(lock_t *lock) {
c0109437:	55                   	push   %ebp
c0109438:	89 e5                	mov    %esp,%ebp
c010943a:	83 ec 18             	sub    $0x18,%esp
    while (!try_lock(lock)) {
c010943d:	eb 05                	jmp    c0109444 <lock+0xd>
        schedule();
c010943f:	e8 7c 21 00 00       	call   c010b5c0 <schedule>
    return !test_and_set_bit(0, lock);
}

static inline void
lock(lock_t *lock) {
    while (!try_lock(lock)) {
c0109444:	8b 45 08             	mov    0x8(%ebp),%eax
c0109447:	89 04 24             	mov    %eax,(%esp)
c010944a:	e8 c5 ff ff ff       	call   c0109414 <try_lock>
c010944f:	85 c0                	test   %eax,%eax
c0109451:	74 ec                	je     c010943f <lock+0x8>
        schedule();
    }
}
c0109453:	c9                   	leave  
c0109454:	c3                   	ret    

c0109455 <unlock>:

static inline void
unlock(lock_t *lock) {
c0109455:	55                   	push   %ebp
c0109456:	89 e5                	mov    %esp,%ebp
c0109458:	83 ec 18             	sub    $0x18,%esp
    if (!test_and_clear_bit(0, lock)) {
c010945b:	8b 45 08             	mov    0x8(%ebp),%eax
c010945e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109462:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0109469:	e8 3f ff ff ff       	call   c01093ad <test_and_clear_bit>
c010946e:	85 c0                	test   %eax,%eax
c0109470:	75 1c                	jne    c010948e <unlock+0x39>
        panic("Unlock failed.\n");
c0109472:	c7 44 24 08 7c e5 10 	movl   $0xc010e57c,0x8(%esp)
c0109479:	c0 
c010947a:	c7 44 24 04 34 00 00 	movl   $0x34,0x4(%esp)
c0109481:	00 
c0109482:	c7 04 24 8c e5 10 c0 	movl   $0xc010e58c,(%esp)
c0109489:	e8 2e 79 ff ff       	call   c0100dbc <__panic>
    }
}
c010948e:	c9                   	leave  
c010948f:	c3                   	ret    

c0109490 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0109490:	55                   	push   %ebp
c0109491:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0109493:	8b 55 08             	mov    0x8(%ebp),%edx
c0109496:	a1 90 1d 1b c0       	mov    0xc01b1d90,%eax
c010949b:	89 d1                	mov    %edx,%ecx
c010949d:	29 c1                	sub    %eax,%ecx
c010949f:	89 c8                	mov    %ecx,%eax
c01094a1:	c1 f8 05             	sar    $0x5,%eax
}
c01094a4:	5d                   	pop    %ebp
c01094a5:	c3                   	ret    

c01094a6 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01094a6:	55                   	push   %ebp
c01094a7:	89 e5                	mov    %esp,%ebp
c01094a9:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01094ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01094af:	89 04 24             	mov    %eax,(%esp)
c01094b2:	e8 d9 ff ff ff       	call   c0109490 <page2ppn>
c01094b7:	c1 e0 0c             	shl    $0xc,%eax
}
c01094ba:	c9                   	leave  
c01094bb:	c3                   	ret    

c01094bc <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c01094bc:	55                   	push   %ebp
c01094bd:	89 e5                	mov    %esp,%ebp
c01094bf:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c01094c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01094c5:	89 c2                	mov    %eax,%edx
c01094c7:	c1 ea 0c             	shr    $0xc,%edx
c01094ca:	a1 80 fc 1a c0       	mov    0xc01afc80,%eax
c01094cf:	39 c2                	cmp    %eax,%edx
c01094d1:	72 1c                	jb     c01094ef <pa2page+0x33>
        panic("pa2page called with invalid pa");
c01094d3:	c7 44 24 08 a0 e5 10 	movl   $0xc010e5a0,0x8(%esp)
c01094da:	c0 
c01094db:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c01094e2:	00 
c01094e3:	c7 04 24 bf e5 10 c0 	movl   $0xc010e5bf,(%esp)
c01094ea:	e8 cd 78 ff ff       	call   c0100dbc <__panic>
    }
    return &pages[PPN(pa)];
c01094ef:	a1 90 1d 1b c0       	mov    0xc01b1d90,%eax
c01094f4:	8b 55 08             	mov    0x8(%ebp),%edx
c01094f7:	c1 ea 0c             	shr    $0xc,%edx
c01094fa:	c1 e2 05             	shl    $0x5,%edx
c01094fd:	01 d0                	add    %edx,%eax
}
c01094ff:	c9                   	leave  
c0109500:	c3                   	ret    

c0109501 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0109501:	55                   	push   %ebp
c0109502:	89 e5                	mov    %esp,%ebp
c0109504:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0109507:	8b 45 08             	mov    0x8(%ebp),%eax
c010950a:	89 04 24             	mov    %eax,(%esp)
c010950d:	e8 94 ff ff ff       	call   c01094a6 <page2pa>
c0109512:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109515:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109518:	c1 e8 0c             	shr    $0xc,%eax
c010951b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010951e:	a1 80 fc 1a c0       	mov    0xc01afc80,%eax
c0109523:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109526:	72 23                	jb     c010954b <page2kva+0x4a>
c0109528:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010952b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010952f:	c7 44 24 08 d0 e5 10 	movl   $0xc010e5d0,0x8(%esp)
c0109536:	c0 
c0109537:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010953e:	00 
c010953f:	c7 04 24 bf e5 10 c0 	movl   $0xc010e5bf,(%esp)
c0109546:	e8 71 78 ff ff       	call   c0100dbc <__panic>
c010954b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010954e:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0109553:	c9                   	leave  
c0109554:	c3                   	ret    

c0109555 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0109555:	55                   	push   %ebp
c0109556:	89 e5                	mov    %esp,%ebp
c0109558:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010955b:	8b 45 08             	mov    0x8(%ebp),%eax
c010955e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109561:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0109568:	77 23                	ja     c010958d <kva2page+0x38>
c010956a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010956d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109571:	c7 44 24 08 f4 e5 10 	movl   $0xc010e5f4,0x8(%esp)
c0109578:	c0 
c0109579:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0109580:	00 
c0109581:	c7 04 24 bf e5 10 c0 	movl   $0xc010e5bf,(%esp)
c0109588:	e8 2f 78 ff ff       	call   c0100dbc <__panic>
c010958d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109590:	05 00 00 00 40       	add    $0x40000000,%eax
c0109595:	89 04 24             	mov    %eax,(%esp)
c0109598:	e8 1f ff ff ff       	call   c01094bc <pa2page>
}
c010959d:	c9                   	leave  
c010959e:	c3                   	ret    

c010959f <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c010959f:	55                   	push   %ebp
c01095a0:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c01095a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01095a5:	8b 40 18             	mov    0x18(%eax),%eax
c01095a8:	8d 50 01             	lea    0x1(%eax),%edx
c01095ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01095ae:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c01095b1:	8b 45 08             	mov    0x8(%ebp),%eax
c01095b4:	8b 40 18             	mov    0x18(%eax),%eax
}
c01095b7:	5d                   	pop    %ebp
c01095b8:	c3                   	ret    

c01095b9 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c01095b9:	55                   	push   %ebp
c01095ba:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c01095bc:	8b 45 08             	mov    0x8(%ebp),%eax
c01095bf:	8b 40 18             	mov    0x18(%eax),%eax
c01095c2:	8d 50 ff             	lea    -0x1(%eax),%edx
c01095c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01095c8:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c01095cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01095ce:	8b 40 18             	mov    0x18(%eax),%eax
}
c01095d1:	5d                   	pop    %ebp
c01095d2:	c3                   	ret    

c01095d3 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c01095d3:	55                   	push   %ebp
c01095d4:	89 e5                	mov    %esp,%ebp
c01095d6:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c01095d9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01095dd:	74 0e                	je     c01095ed <lock_mm+0x1a>
        lock(&(mm->mm_lock));
c01095df:	8b 45 08             	mov    0x8(%ebp),%eax
c01095e2:	83 c0 1c             	add    $0x1c,%eax
c01095e5:	89 04 24             	mov    %eax,(%esp)
c01095e8:	e8 4a fe ff ff       	call   c0109437 <lock>
    }
}
c01095ed:	c9                   	leave  
c01095ee:	c3                   	ret    

c01095ef <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c01095ef:	55                   	push   %ebp
c01095f0:	89 e5                	mov    %esp,%ebp
c01095f2:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c01095f5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01095f9:	74 0e                	je     c0109609 <unlock_mm+0x1a>
        unlock(&(mm->mm_lock));
c01095fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01095fe:	83 c0 1c             	add    $0x1c,%eax
c0109601:	89 04 24             	mov    %eax,(%esp)
c0109604:	e8 4c fe ff ff       	call   c0109455 <unlock>
    }
}
c0109609:	c9                   	leave  
c010960a:	c3                   	ret    

c010960b <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010960b:	55                   	push   %ebp
c010960c:	89 e5                	mov    %esp,%ebp
c010960e:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c0109611:	c7 04 24 a0 00 00 00 	movl   $0xa0,(%esp)
c0109618:	e8 a2 b6 ff ff       	call   c0104cbf <kmalloc>
c010961d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c0109620:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109624:	0f 84 4c 01 00 00    	je     c0109776 <alloc_proc+0x16b>
     *       struct trapframe *tf;                       // Trap frame for current interrupt
     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
     *       uint32_t flags;                             // Process flag
     *       char name[PROC_NAME_LEN + 1];               // Process name
     */
        proc->state = PROC_UNINIT;
c010962a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010962d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c0109633:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109636:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c010963d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109640:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c0109647:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010964a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c0109651:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109654:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c010965b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010965e:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c0109665:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109668:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));
c010966f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109672:	83 c0 1c             	add    $0x1c,%eax
c0109675:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010967c:	00 
c010967d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109684:	00 
c0109685:	89 04 24             	mov    %eax,(%esp)
c0109688:	e8 16 2d 00 00       	call   c010c3a3 <memset>
        proc->tf = NULL;
c010968d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109690:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;
c0109697:	8b 15 8c 1d 1b c0    	mov    0xc01b1d8c,%edx
c010969d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096a0:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c01096a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096a6:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);
c01096ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096b0:	83 c0 48             	add    $0x48,%eax
c01096b3:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
c01096ba:	00 
c01096bb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01096c2:	00 
c01096c3:	89 04 24             	mov    %eax,(%esp)
c01096c6:	e8 d8 2c 00 00       	call   c010c3a3 <memset>
    /*
     * below fields(add in LAB5) in proc_struct need to be initialized	
     *       uint32_t wait_state;                        // waiting state
     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
	 */
        proc->wait_state = 0;
c01096cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096ce:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
        proc->cptr = proc->yptr = proc->optr = NULL;
c01096d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096d8:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)
c01096df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096e2:	8b 50 78             	mov    0x78(%eax),%edx
c01096e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096e8:	89 50 74             	mov    %edx,0x74(%eax)
c01096eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096ee:	8b 50 74             	mov    0x74(%eax),%edx
c01096f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096f4:	89 50 70             	mov    %edx,0x70(%eax)
     *     int time_slice;                             // time slice for occupying the CPU
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
        proc->rq = NULL;
c01096f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096fa:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
        list_init(&(proc->run_link));
c0109701:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109704:	83 e8 80             	sub    $0xffffff80,%eax
c0109707:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010970a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010970d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109710:	89 50 04             	mov    %edx,0x4(%eax)
c0109713:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109716:	8b 50 04             	mov    0x4(%eax),%edx
c0109719:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010971c:	89 10                	mov    %edx,(%eax)
        proc->time_slice = 0;
c010971e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109721:	c7 80 88 00 00 00 00 	movl   $0x0,0x88(%eax)
c0109728:	00 00 00 
        proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
c010972b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010972e:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%eax)
c0109735:	00 00 00 
c0109738:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010973b:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c0109741:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109744:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
c010974a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010974d:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c0109753:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109756:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
        proc->lab6_stride = 0;
c010975c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010975f:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c0109766:	00 00 00 
        proc->lab6_priority = 0;
c0109769:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010976c:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
c0109773:	00 00 00 
    }
    return proc;
c0109776:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109779:	c9                   	leave  
c010977a:	c3                   	ret    

c010977b <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010977b:	55                   	push   %ebp
c010977c:	89 e5                	mov    %esp,%ebp
c010977e:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c0109781:	8b 45 08             	mov    0x8(%ebp),%eax
c0109784:	83 c0 48             	add    $0x48,%eax
c0109787:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c010978e:	00 
c010978f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109796:	00 
c0109797:	89 04 24             	mov    %eax,(%esp)
c010979a:	e8 04 2c 00 00       	call   c010c3a3 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010979f:	8b 45 08             	mov    0x8(%ebp),%eax
c01097a2:	8d 50 48             	lea    0x48(%eax),%edx
c01097a5:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
c01097ac:	00 
c01097ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c01097b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01097b4:	89 14 24             	mov    %edx,(%esp)
c01097b7:	e8 e6 2c 00 00       	call   c010c4a2 <memcpy>
}
c01097bc:	c9                   	leave  
c01097bd:	c3                   	ret    

c01097be <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c01097be:	55                   	push   %ebp
c01097bf:	89 e5                	mov    %esp,%ebp
c01097c1:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c01097c4:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01097cb:	00 
c01097cc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01097d3:	00 
c01097d4:	c7 04 24 44 1d 1b c0 	movl   $0xc01b1d44,(%esp)
c01097db:	e8 c3 2b 00 00       	call   c010c3a3 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c01097e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01097e3:	83 c0 48             	add    $0x48,%eax
c01097e6:	c7 44 24 08 0f 00 00 	movl   $0xf,0x8(%esp)
c01097ed:	00 
c01097ee:	89 44 24 04          	mov    %eax,0x4(%esp)
c01097f2:	c7 04 24 44 1d 1b c0 	movl   $0xc01b1d44,(%esp)
c01097f9:	e8 a4 2c 00 00       	call   c010c4a2 <memcpy>
}
c01097fe:	c9                   	leave  
c01097ff:	c3                   	ret    

c0109800 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c0109800:	55                   	push   %ebp
c0109801:	89 e5                	mov    %esp,%ebp
c0109803:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c0109806:	8b 45 08             	mov    0x8(%ebp),%eax
c0109809:	83 c0 58             	add    $0x58,%eax
c010980c:	c7 45 fc 70 1e 1b c0 	movl   $0xc01b1e70,-0x4(%ebp)
c0109813:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0109816:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109819:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010981c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010981f:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0109822:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109825:	8b 40 04             	mov    0x4(%eax),%eax
c0109828:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010982b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010982e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109831:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109834:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109837:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010983a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010983d:	89 10                	mov    %edx,(%eax)
c010983f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109842:	8b 10                	mov    (%eax),%edx
c0109844:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109847:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010984a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010984d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109850:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109853:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109856:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109859:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010985b:	8b 45 08             	mov    0x8(%ebp),%eax
c010985e:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
    if ((proc->optr = proc->parent->cptr) != NULL) {
c0109865:	8b 45 08             	mov    0x8(%ebp),%eax
c0109868:	8b 40 14             	mov    0x14(%eax),%eax
c010986b:	8b 50 70             	mov    0x70(%eax),%edx
c010986e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109871:	89 50 78             	mov    %edx,0x78(%eax)
c0109874:	8b 45 08             	mov    0x8(%ebp),%eax
c0109877:	8b 40 78             	mov    0x78(%eax),%eax
c010987a:	85 c0                	test   %eax,%eax
c010987c:	74 0c                	je     c010988a <set_links+0x8a>
        proc->optr->yptr = proc;
c010987e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109881:	8b 40 78             	mov    0x78(%eax),%eax
c0109884:	8b 55 08             	mov    0x8(%ebp),%edx
c0109887:	89 50 74             	mov    %edx,0x74(%eax)
    }
    proc->parent->cptr = proc;
c010988a:	8b 45 08             	mov    0x8(%ebp),%eax
c010988d:	8b 40 14             	mov    0x14(%eax),%eax
c0109890:	8b 55 08             	mov    0x8(%ebp),%edx
c0109893:	89 50 70             	mov    %edx,0x70(%eax)
    nr_process ++;
c0109896:	a1 40 1d 1b c0       	mov    0xc01b1d40,%eax
c010989b:	83 c0 01             	add    $0x1,%eax
c010989e:	a3 40 1d 1b c0       	mov    %eax,0xc01b1d40
}
c01098a3:	c9                   	leave  
c01098a4:	c3                   	ret    

c01098a5 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c01098a5:	55                   	push   %ebp
c01098a6:	89 e5                	mov    %esp,%ebp
c01098a8:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c01098ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01098ae:	83 c0 58             	add    $0x58,%eax
c01098b1:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01098b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01098b7:	8b 40 04             	mov    0x4(%eax),%eax
c01098ba:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01098bd:	8b 12                	mov    (%edx),%edx
c01098bf:	89 55 f8             	mov    %edx,-0x8(%ebp)
c01098c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01098c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01098c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01098cb:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01098ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098d1:	8b 55 f8             	mov    -0x8(%ebp),%edx
c01098d4:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c01098d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01098d9:	8b 40 78             	mov    0x78(%eax),%eax
c01098dc:	85 c0                	test   %eax,%eax
c01098de:	74 0f                	je     c01098ef <remove_links+0x4a>
        proc->optr->yptr = proc->yptr;
c01098e0:	8b 45 08             	mov    0x8(%ebp),%eax
c01098e3:	8b 40 78             	mov    0x78(%eax),%eax
c01098e6:	8b 55 08             	mov    0x8(%ebp),%edx
c01098e9:	8b 52 74             	mov    0x74(%edx),%edx
c01098ec:	89 50 74             	mov    %edx,0x74(%eax)
    }
    if (proc->yptr != NULL) {
c01098ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01098f2:	8b 40 74             	mov    0x74(%eax),%eax
c01098f5:	85 c0                	test   %eax,%eax
c01098f7:	74 11                	je     c010990a <remove_links+0x65>
        proc->yptr->optr = proc->optr;
c01098f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01098fc:	8b 40 74             	mov    0x74(%eax),%eax
c01098ff:	8b 55 08             	mov    0x8(%ebp),%edx
c0109902:	8b 52 78             	mov    0x78(%edx),%edx
c0109905:	89 50 78             	mov    %edx,0x78(%eax)
c0109908:	eb 0f                	jmp    c0109919 <remove_links+0x74>
    }
    else {
       proc->parent->cptr = proc->optr;
c010990a:	8b 45 08             	mov    0x8(%ebp),%eax
c010990d:	8b 40 14             	mov    0x14(%eax),%eax
c0109910:	8b 55 08             	mov    0x8(%ebp),%edx
c0109913:	8b 52 78             	mov    0x78(%edx),%edx
c0109916:	89 50 70             	mov    %edx,0x70(%eax)
    }
    nr_process --;
c0109919:	a1 40 1d 1b c0       	mov    0xc01b1d40,%eax
c010991e:	83 e8 01             	sub    $0x1,%eax
c0109921:	a3 40 1d 1b c0       	mov    %eax,0xc01b1d40
}
c0109926:	c9                   	leave  
c0109927:	c3                   	ret    

c0109928 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c0109928:	55                   	push   %ebp
c0109929:	89 e5                	mov    %esp,%ebp
c010992b:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010992e:	c7 45 f8 70 1e 1b c0 	movl   $0xc01b1e70,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c0109935:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c010993a:	83 c0 01             	add    $0x1,%eax
c010993d:	a3 80 da 12 c0       	mov    %eax,0xc012da80
c0109942:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c0109947:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010994c:	7e 0c                	jle    c010995a <get_pid+0x32>
        last_pid = 1;
c010994e:	c7 05 80 da 12 c0 01 	movl   $0x1,0xc012da80
c0109955:	00 00 00 
        goto inside;
c0109958:	eb 13                	jmp    c010996d <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010995a:	8b 15 80 da 12 c0    	mov    0xc012da80,%edx
c0109960:	a1 84 da 12 c0       	mov    0xc012da84,%eax
c0109965:	39 c2                	cmp    %eax,%edx
c0109967:	0f 8c ac 00 00 00    	jl     c0109a19 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010996d:	c7 05 84 da 12 c0 00 	movl   $0x2000,0xc012da84
c0109974:	20 00 00 
    repeat:
        le = list;
c0109977:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010997a:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010997d:	eb 7f                	jmp    c01099fe <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010997f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109982:	83 e8 58             	sub    $0x58,%eax
c0109985:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c0109988:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010998b:	8b 50 04             	mov    0x4(%eax),%edx
c010998e:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c0109993:	39 c2                	cmp    %eax,%edx
c0109995:	75 3e                	jne    c01099d5 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c0109997:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c010999c:	83 c0 01             	add    $0x1,%eax
c010999f:	a3 80 da 12 c0       	mov    %eax,0xc012da80
c01099a4:	8b 15 80 da 12 c0    	mov    0xc012da80,%edx
c01099aa:	a1 84 da 12 c0       	mov    0xc012da84,%eax
c01099af:	39 c2                	cmp    %eax,%edx
c01099b1:	7c 4b                	jl     c01099fe <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c01099b3:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c01099b8:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c01099bd:	7e 0a                	jle    c01099c9 <get_pid+0xa1>
                        last_pid = 1;
c01099bf:	c7 05 80 da 12 c0 01 	movl   $0x1,0xc012da80
c01099c6:	00 00 00 
                    }
                    next_safe = MAX_PID;
c01099c9:	c7 05 84 da 12 c0 00 	movl   $0x2000,0xc012da84
c01099d0:	20 00 00 
                    goto repeat;
c01099d3:	eb a2                	jmp    c0109977 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c01099d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099d8:	8b 50 04             	mov    0x4(%eax),%edx
c01099db:	a1 80 da 12 c0       	mov    0xc012da80,%eax
c01099e0:	39 c2                	cmp    %eax,%edx
c01099e2:	7e 1a                	jle    c01099fe <get_pid+0xd6>
c01099e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099e7:	8b 50 04             	mov    0x4(%eax),%edx
c01099ea:	a1 84 da 12 c0       	mov    0xc012da84,%eax
c01099ef:	39 c2                	cmp    %eax,%edx
c01099f1:	7d 0b                	jge    c01099fe <get_pid+0xd6>
                next_safe = proc->pid;
c01099f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099f6:	8b 40 04             	mov    0x4(%eax),%eax
c01099f9:	a3 84 da 12 c0       	mov    %eax,0xc012da84
c01099fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109a01:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109a04:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a07:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c0109a0a:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109a0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109a10:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0109a13:	0f 85 66 ff ff ff    	jne    c010997f <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c0109a19:	a1 80 da 12 c0       	mov    0xc012da80,%eax
}
c0109a1e:	c9                   	leave  
c0109a1f:	c3                   	ret    

c0109a20 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c0109a20:	55                   	push   %ebp
c0109a21:	89 e5                	mov    %esp,%ebp
c0109a23:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c0109a26:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c0109a2b:	39 45 08             	cmp    %eax,0x8(%ebp)
c0109a2e:	74 63                	je     c0109a93 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c0109a30:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c0109a35:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109a38:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a3b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c0109a3e:	e8 8f f9 ff ff       	call   c01093d2 <__intr_save>
c0109a43:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c0109a46:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a49:	a3 28 fd 1a c0       	mov    %eax,0xc01afd28
            load_esp0(next->kstack + KSTACKSIZE);
c0109a4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a51:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a54:	05 00 20 00 00       	add    $0x2000,%eax
c0109a59:	89 04 24             	mov    %eax,(%esp)
c0109a5c:	e8 96 b5 ff ff       	call   c0104ff7 <load_esp0>
            lcr3(next->cr3);
c0109a61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a64:	8b 40 40             	mov    0x40(%eax),%eax
c0109a67:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c0109a6a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109a6d:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c0109a70:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109a73:	8d 50 1c             	lea    0x1c(%eax),%edx
c0109a76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a79:	83 c0 1c             	add    $0x1c,%eax
c0109a7c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109a80:	89 04 24             	mov    %eax,(%esp)
c0109a83:	e8 bc 15 00 00       	call   c010b044 <switch_to>
        }
        local_intr_restore(intr_flag);
c0109a88:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a8b:	89 04 24             	mov    %eax,(%esp)
c0109a8e:	e8 6e f9 ff ff       	call   c0109401 <__intr_restore>
    }
}
c0109a93:	c9                   	leave  
c0109a94:	c3                   	ret    

c0109a95 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c0109a95:	55                   	push   %ebp
c0109a96:	89 e5                	mov    %esp,%ebp
c0109a98:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c0109a9b:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c0109aa0:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109aa3:	89 04 24             	mov    %eax,(%esp)
c0109aa6:	e8 7f 90 ff ff       	call   c0102b2a <forkrets>
}
c0109aab:	c9                   	leave  
c0109aac:	c3                   	ret    

c0109aad <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c0109aad:	55                   	push   %ebp
c0109aae:	89 e5                	mov    %esp,%ebp
c0109ab0:	53                   	push   %ebx
c0109ab1:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c0109ab4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ab7:	8d 58 60             	lea    0x60(%eax),%ebx
c0109aba:	8b 45 08             	mov    0x8(%ebp),%eax
c0109abd:	8b 40 04             	mov    0x4(%eax),%eax
c0109ac0:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c0109ac7:	00 
c0109ac8:	89 04 24             	mov    %eax,(%esp)
c0109acb:	e8 a0 1d 00 00       	call   c010b870 <hash32>
c0109ad0:	c1 e0 03             	shl    $0x3,%eax
c0109ad3:	05 40 fd 1a c0       	add    $0xc01afd40,%eax
c0109ad8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109adb:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c0109ade:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109ae1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109ae4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ae7:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0109aea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109aed:	8b 40 04             	mov    0x4(%eax),%eax
c0109af0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109af3:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0109af6:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109af9:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0109afc:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109aff:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109b02:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109b05:	89 10                	mov    %edx,(%eax)
c0109b07:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109b0a:	8b 10                	mov    (%eax),%edx
c0109b0c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109b0f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109b12:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109b15:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0109b18:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109b1b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109b1e:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109b21:	89 10                	mov    %edx,(%eax)
}
c0109b23:	83 c4 34             	add    $0x34,%esp
c0109b26:	5b                   	pop    %ebx
c0109b27:	5d                   	pop    %ebp
c0109b28:	c3                   	ret    

c0109b29 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c0109b29:	55                   	push   %ebp
c0109b2a:	89 e5                	mov    %esp,%ebp
c0109b2c:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c0109b2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b32:	83 c0 60             	add    $0x60,%eax
c0109b35:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109b38:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109b3b:	8b 40 04             	mov    0x4(%eax),%eax
c0109b3e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109b41:	8b 12                	mov    (%edx),%edx
c0109b43:	89 55 f8             	mov    %edx,-0x8(%ebp)
c0109b46:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109b49:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109b4c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109b4f:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109b52:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b55:	8b 55 f8             	mov    -0x8(%ebp),%edx
c0109b58:	89 10                	mov    %edx,(%eax)
}
c0109b5a:	c9                   	leave  
c0109b5b:	c3                   	ret    

c0109b5c <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c0109b5c:	55                   	push   %ebp
c0109b5d:	89 e5                	mov    %esp,%ebp
c0109b5f:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c0109b62:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109b66:	7e 5f                	jle    c0109bc7 <find_proc+0x6b>
c0109b68:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c0109b6f:	7f 56                	jg     c0109bc7 <find_proc+0x6b>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c0109b71:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b74:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c0109b7b:	00 
c0109b7c:	89 04 24             	mov    %eax,(%esp)
c0109b7f:	e8 ec 1c 00 00       	call   c010b870 <hash32>
c0109b84:	c1 e0 03             	shl    $0x3,%eax
c0109b87:	05 40 fd 1a c0       	add    $0xc01afd40,%eax
c0109b8c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109b8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b92:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c0109b95:	eb 19                	jmp    c0109bb0 <find_proc+0x54>
            struct proc_struct *proc = le2proc(le, hash_link);
c0109b97:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109b9a:	83 e8 60             	sub    $0x60,%eax
c0109b9d:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c0109ba0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109ba3:	8b 40 04             	mov    0x4(%eax),%eax
c0109ba6:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109ba9:	75 05                	jne    c0109bb0 <find_proc+0x54>
                return proc;
c0109bab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109bae:	eb 1c                	jmp    c0109bcc <find_proc+0x70>
c0109bb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bb3:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109bb6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109bb9:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c0109bbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109bbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bc2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0109bc5:	75 d0                	jne    c0109b97 <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c0109bc7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109bcc:	c9                   	leave  
c0109bcd:	c3                   	ret    

c0109bce <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c0109bce:	55                   	push   %ebp
c0109bcf:	89 e5                	mov    %esp,%ebp
c0109bd1:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c0109bd4:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c0109bdb:	00 
c0109bdc:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109be3:	00 
c0109be4:	8d 45 ac             	lea    -0x54(%ebp),%eax
c0109be7:	89 04 24             	mov    %eax,(%esp)
c0109bea:	e8 b4 27 00 00       	call   c010c3a3 <memset>
    tf.tf_cs = KERNEL_CS;
c0109bef:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c0109bf5:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c0109bfb:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0109bff:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c0109c03:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c0109c07:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c0109c0b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c0e:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c0109c11:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c14:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c0109c17:	b8 7c 93 10 c0       	mov    $0xc010937c,%eax
c0109c1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c0109c1f:	8b 45 10             	mov    0x10(%ebp),%eax
c0109c22:	89 c2                	mov    %eax,%edx
c0109c24:	80 ce 01             	or     $0x1,%dh
c0109c27:	8d 45 ac             	lea    -0x54(%ebp),%eax
c0109c2a:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c2e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109c35:	00 
c0109c36:	89 14 24             	mov    %edx,(%esp)
c0109c39:	e8 27 03 00 00       	call   c0109f65 <do_fork>
}
c0109c3e:	c9                   	leave  
c0109c3f:	c3                   	ret    

c0109c40 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c0109c40:	55                   	push   %ebp
c0109c41:	89 e5                	mov    %esp,%ebp
c0109c43:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c0109c46:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c0109c4d:	e8 f3 b4 ff ff       	call   c0105145 <alloc_pages>
c0109c52:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0109c55:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109c59:	74 1a                	je     c0109c75 <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c0109c5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c5e:	89 04 24             	mov    %eax,(%esp)
c0109c61:	e8 9b f8 ff ff       	call   c0109501 <page2kva>
c0109c66:	89 c2                	mov    %eax,%edx
c0109c68:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c6b:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c0109c6e:	b8 00 00 00 00       	mov    $0x0,%eax
c0109c73:	eb 05                	jmp    c0109c7a <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c0109c75:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0109c7a:	c9                   	leave  
c0109c7b:	c3                   	ret    

c0109c7c <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c0109c7c:	55                   	push   %ebp
c0109c7d:	89 e5                	mov    %esp,%ebp
c0109c7f:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c0109c82:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c85:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c88:	89 04 24             	mov    %eax,(%esp)
c0109c8b:	e8 c5 f8 ff ff       	call   c0109555 <kva2page>
c0109c90:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0109c97:	00 
c0109c98:	89 04 24             	mov    %eax,(%esp)
c0109c9b:	e8 10 b5 ff ff       	call   c01051b0 <free_pages>
}
c0109ca0:	c9                   	leave  
c0109ca1:	c3                   	ret    

c0109ca2 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c0109ca2:	55                   	push   %ebp
c0109ca3:	89 e5                	mov    %esp,%ebp
c0109ca5:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c0109ca8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0109caf:	e8 91 b4 ff ff       	call   c0105145 <alloc_pages>
c0109cb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109cb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109cbb:	75 0a                	jne    c0109cc7 <setup_pgdir+0x25>
        return -E_NO_MEM;
c0109cbd:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0109cc2:	e9 80 00 00 00       	jmp    c0109d47 <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c0109cc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109cca:	89 04 24             	mov    %eax,(%esp)
c0109ccd:	e8 2f f8 ff ff       	call   c0109501 <page2kva>
c0109cd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c0109cd5:	a1 84 fc 1a c0       	mov    0xc01afc84,%eax
c0109cda:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0109ce1:	00 
c0109ce2:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ce6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ce9:	89 04 24             	mov    %eax,(%esp)
c0109cec:	e8 b1 27 00 00       	call   c010c4a2 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c0109cf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cf4:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0109cfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109cfd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109d00:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c0109d07:	77 23                	ja     c0109d2c <setup_pgdir+0x8a>
c0109d09:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109d0c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109d10:	c7 44 24 08 f4 e5 10 	movl   $0xc010e5f4,0x8(%esp)
c0109d17:	c0 
c0109d18:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c0109d1f:	00 
c0109d20:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c0109d27:	e8 90 70 ff ff       	call   c0100dbc <__panic>
c0109d2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109d2f:	05 00 00 00 40       	add    $0x40000000,%eax
c0109d34:	83 c8 03             	or     $0x3,%eax
c0109d37:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c0109d39:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d3c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109d3f:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c0109d42:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109d47:	c9                   	leave  
c0109d48:	c3                   	ret    

c0109d49 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c0109d49:	55                   	push   %ebp
c0109d4a:	89 e5                	mov    %esp,%ebp
c0109d4c:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c0109d4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d52:	8b 40 0c             	mov    0xc(%eax),%eax
c0109d55:	89 04 24             	mov    %eax,(%esp)
c0109d58:	e8 f8 f7 ff ff       	call   c0109555 <kva2page>
c0109d5d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109d64:	00 
c0109d65:	89 04 24             	mov    %eax,(%esp)
c0109d68:	e8 43 b4 ff ff       	call   c01051b0 <free_pages>
}
c0109d6d:	c9                   	leave  
c0109d6e:	c3                   	ret    

c0109d6f <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c0109d6f:	55                   	push   %ebp
c0109d70:	89 e5                	mov    %esp,%ebp
c0109d72:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c0109d75:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c0109d7a:	8b 40 18             	mov    0x18(%eax),%eax
c0109d7d:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c0109d80:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109d84:	75 0a                	jne    c0109d90 <copy_mm+0x21>
        return 0;
c0109d86:	b8 00 00 00 00       	mov    $0x0,%eax
c0109d8b:	e9 fb 00 00 00       	jmp    c0109e8b <copy_mm+0x11c>
    }
    if (clone_flags & CLONE_VM) {
c0109d90:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d93:	25 00 01 00 00       	and    $0x100,%eax
c0109d98:	85 c0                	test   %eax,%eax
c0109d9a:	74 08                	je     c0109da4 <copy_mm+0x35>
        mm = oldmm;
c0109d9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109d9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c0109da2:	eb 5d                	jmp    c0109e01 <copy_mm+0x92>
    }

    int ret = -E_NO_MEM;
c0109da4:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c0109dab:	e8 24 e2 ff ff       	call   c0107fd4 <mm_create>
c0109db0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109db3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109db7:	0f 84 ca 00 00 00    	je     c0109e87 <copy_mm+0x118>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c0109dbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109dc0:	89 04 24             	mov    %eax,(%esp)
c0109dc3:	e8 da fe ff ff       	call   c0109ca2 <setup_pgdir>
c0109dc8:	85 c0                	test   %eax,%eax
c0109dca:	0f 85 a9 00 00 00    	jne    c0109e79 <copy_mm+0x10a>
        goto bad_pgdir_cleanup_mm;
    }

    lock_mm(oldmm);
c0109dd0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109dd3:	89 04 24             	mov    %eax,(%esp)
c0109dd6:	e8 f8 f7 ff ff       	call   c01095d3 <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c0109ddb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109dde:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109de2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109de5:	89 04 24             	mov    %eax,(%esp)
c0109de8:	e8 01 e7 ff ff       	call   c01084ee <dup_mmap>
c0109ded:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c0109df0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109df3:	89 04 24             	mov    %eax,(%esp)
c0109df6:	e8 f4 f7 ff ff       	call   c01095ef <unlock_mm>

    if (ret != 0) {
c0109dfb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109dff:	75 5f                	jne    c0109e60 <copy_mm+0xf1>
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c0109e01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e04:	89 04 24             	mov    %eax,(%esp)
c0109e07:	e8 93 f7 ff ff       	call   c010959f <mm_count_inc>
    proc->mm = mm;
c0109e0c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109e12:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c0109e15:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e18:	8b 40 0c             	mov    0xc(%eax),%eax
c0109e1b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109e1e:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c0109e25:	77 23                	ja     c0109e4a <copy_mm+0xdb>
c0109e27:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e2a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0109e2e:	c7 44 24 08 f4 e5 10 	movl   $0xc010e5f4,0x8(%esp)
c0109e35:	c0 
c0109e36:	c7 44 24 04 6d 01 00 	movl   $0x16d,0x4(%esp)
c0109e3d:	00 
c0109e3e:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c0109e45:	e8 72 6f ff ff       	call   c0100dbc <__panic>
c0109e4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e4d:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c0109e53:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e56:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c0109e59:	b8 00 00 00 00       	mov    $0x0,%eax
c0109e5e:	eb 2b                	jmp    c0109e8b <copy_mm+0x11c>
        ret = dup_mmap(mm, oldmm);
    }
    unlock_mm(oldmm);

    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
c0109e60:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c0109e61:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e64:	89 04 24             	mov    %eax,(%esp)
c0109e67:	e8 83 e7 ff ff       	call   c01085ef <exit_mmap>
    put_pgdir(mm);
c0109e6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e6f:	89 04 24             	mov    %eax,(%esp)
c0109e72:	e8 d2 fe ff ff       	call   c0109d49 <put_pgdir>
c0109e77:	eb 01                	jmp    c0109e7a <copy_mm+0x10b>
    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c0109e79:	90                   	nop
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c0109e7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e7d:	89 04 24             	mov    %eax,(%esp)
c0109e80:	e8 a9 e4 ff ff       	call   c010832e <mm_destroy>
c0109e85:	eb 01                	jmp    c0109e88 <copy_mm+0x119>
        goto good_mm;
    }

    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c0109e87:	90                   	nop
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    return ret;
c0109e88:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0109e8b:	c9                   	leave  
c0109e8c:	c3                   	ret    

c0109e8d <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c0109e8d:	55                   	push   %ebp
c0109e8e:	89 e5                	mov    %esp,%ebp
c0109e90:	57                   	push   %edi
c0109e91:	56                   	push   %esi
c0109e92:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c0109e93:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e96:	8b 40 0c             	mov    0xc(%eax),%eax
c0109e99:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c0109e9e:	89 c2                	mov    %eax,%edx
c0109ea0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ea3:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c0109ea6:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ea9:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109eac:	8b 55 10             	mov    0x10(%ebp),%edx
c0109eaf:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c0109eb4:	89 c1                	mov    %eax,%ecx
c0109eb6:	83 e1 01             	and    $0x1,%ecx
c0109eb9:	85 c9                	test   %ecx,%ecx
c0109ebb:	74 0e                	je     c0109ecb <copy_thread+0x3e>
c0109ebd:	0f b6 0a             	movzbl (%edx),%ecx
c0109ec0:	88 08                	mov    %cl,(%eax)
c0109ec2:	83 c0 01             	add    $0x1,%eax
c0109ec5:	83 c2 01             	add    $0x1,%edx
c0109ec8:	83 eb 01             	sub    $0x1,%ebx
c0109ecb:	89 c1                	mov    %eax,%ecx
c0109ecd:	83 e1 02             	and    $0x2,%ecx
c0109ed0:	85 c9                	test   %ecx,%ecx
c0109ed2:	74 0f                	je     c0109ee3 <copy_thread+0x56>
c0109ed4:	0f b7 0a             	movzwl (%edx),%ecx
c0109ed7:	66 89 08             	mov    %cx,(%eax)
c0109eda:	83 c0 02             	add    $0x2,%eax
c0109edd:	83 c2 02             	add    $0x2,%edx
c0109ee0:	83 eb 02             	sub    $0x2,%ebx
c0109ee3:	89 d9                	mov    %ebx,%ecx
c0109ee5:	c1 e9 02             	shr    $0x2,%ecx
c0109ee8:	89 c7                	mov    %eax,%edi
c0109eea:	89 d6                	mov    %edx,%esi
c0109eec:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0109eee:	89 f2                	mov    %esi,%edx
c0109ef0:	89 f8                	mov    %edi,%eax
c0109ef2:	b9 00 00 00 00       	mov    $0x0,%ecx
c0109ef7:	89 de                	mov    %ebx,%esi
c0109ef9:	83 e6 02             	and    $0x2,%esi
c0109efc:	85 f6                	test   %esi,%esi
c0109efe:	74 0b                	je     c0109f0b <copy_thread+0x7e>
c0109f00:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c0109f04:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c0109f08:	83 c1 02             	add    $0x2,%ecx
c0109f0b:	83 e3 01             	and    $0x1,%ebx
c0109f0e:	85 db                	test   %ebx,%ebx
c0109f10:	74 07                	je     c0109f19 <copy_thread+0x8c>
c0109f12:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c0109f16:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c0109f19:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f1c:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109f1f:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c0109f26:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f29:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109f2c:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109f2f:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c0109f32:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f35:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109f38:	8b 55 08             	mov    0x8(%ebp),%edx
c0109f3b:	8b 52 3c             	mov    0x3c(%edx),%edx
c0109f3e:	8b 52 40             	mov    0x40(%edx),%edx
c0109f41:	80 ce 02             	or     $0x2,%dh
c0109f44:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c0109f47:	ba 95 9a 10 c0       	mov    $0xc0109a95,%edx
c0109f4c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f4f:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c0109f52:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f55:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109f58:	89 c2                	mov    %eax,%edx
c0109f5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f5d:	89 50 20             	mov    %edx,0x20(%eax)
}
c0109f60:	5b                   	pop    %ebx
c0109f61:	5e                   	pop    %esi
c0109f62:	5f                   	pop    %edi
c0109f63:	5d                   	pop    %ebp
c0109f64:	c3                   	ret    

c0109f65 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c0109f65:	55                   	push   %ebp
c0109f66:	89 e5                	mov    %esp,%ebp
c0109f68:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c0109f6b:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c0109f72:	a1 40 1d 1b c0       	mov    0xc01b1d40,%eax
c0109f77:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0109f7c:	0f 8f ef 00 00 00    	jg     c010a071 <do_fork+0x10c>
        goto fork_out;
    }
    ret = -E_NO_MEM;
c0109f82:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    proc = alloc_proc();
c0109f89:	e8 7d f6 ff ff       	call   c010960b <alloc_proc>
c0109f8e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (proc == NULL)
c0109f91:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109f95:	0f 84 d9 00 00 00    	je     c010a074 <do_fork+0x10f>
        goto fork_out;

    int ret2;
    ret2 = setup_kstack(proc);
c0109f9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f9e:	89 04 24             	mov    %eax,(%esp)
c0109fa1:	e8 9a fc ff ff       	call   c0109c40 <setup_kstack>
c0109fa6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ret2 != 0)
c0109fa9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109fad:	0f 85 d5 00 00 00    	jne    c010a088 <do_fork+0x123>
        goto bad_fork_cleanup_proc;

    ret2 = copy_mm(clone_flags, proc);
c0109fb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109fb6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109fba:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fbd:	89 04 24             	mov    %eax,(%esp)
c0109fc0:	e8 aa fd ff ff       	call   c0109d6f <copy_mm>
c0109fc5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ret2 != 0)
c0109fc8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109fcc:	0f 85 a8 00 00 00    	jne    c010a07a <do_fork+0x115>
        goto bad_fork_cleanup_kstack;

    copy_thread(proc, stack, tf);
c0109fd2:	8b 45 10             	mov    0x10(%ebp),%eax
c0109fd5:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109fd9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fdc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109fe0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109fe3:	89 04 24             	mov    %eax,(%esp)
c0109fe6:	e8 a2 fe ff ff       	call   c0109e8d <copy_thread>

    bool intr_flag;
    local_intr_save(intr_flag);
c0109feb:	e8 e2 f3 ff ff       	call   c01093d2 <__intr_save>
c0109ff0:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        proc->pid = get_pid();
c0109ff3:	e8 30 f9 ff ff       	call   c0109928 <get_pid>
c0109ff8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109ffb:	89 42 04             	mov    %eax,0x4(%edx)
        proc->parent = current;
c0109ffe:	8b 15 28 fd 1a c0    	mov    0xc01afd28,%edx
c010a004:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a007:	89 50 14             	mov    %edx,0x14(%eax)
        assert(current->wait_state == 0);
c010a00a:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010a00f:	8b 40 6c             	mov    0x6c(%eax),%eax
c010a012:	85 c0                	test   %eax,%eax
c010a014:	74 24                	je     c010a03a <do_fork+0xd5>
c010a016:	c7 44 24 0c 2c e6 10 	movl   $0xc010e62c,0xc(%esp)
c010a01d:	c0 
c010a01e:	c7 44 24 08 45 e6 10 	movl   $0xc010e645,0x8(%esp)
c010a025:	c0 
c010a026:	c7 44 24 04 c8 01 00 	movl   $0x1c8,0x4(%esp)
c010a02d:	00 
c010a02e:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010a035:	e8 82 6d ff ff       	call   c0100dbc <__panic>

        set_links(proc);
c010a03a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a03d:	89 04 24             	mov    %eax,(%esp)
c010a040:	e8 bb f7 ff ff       	call   c0109800 <set_links>
        hash_proc(proc);
c010a045:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a048:	89 04 24             	mov    %eax,(%esp)
c010a04b:	e8 5d fa ff ff       	call   c0109aad <hash_proc>
    }
    local_intr_restore(intr_flag);
c010a050:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a053:	89 04 24             	mov    %eax,(%esp)
c010a056:	e8 a6 f3 ff ff       	call   c0109401 <__intr_restore>

    wakeup_proc(proc);
c010a05b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a05e:	89 04 24             	mov    %eax,(%esp)
c010a061:	e8 c1 14 00 00       	call   c010b527 <wakeup_proc>

    ret = proc->pid;
c010a066:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a069:	8b 40 04             	mov    0x4(%eax),%eax
c010a06c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a06f:	eb 04                	jmp    c010a075 <do_fork+0x110>
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
    int ret = -E_NO_FREE_PROC;
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
        goto fork_out;
c010a071:	90                   	nop
c010a072:	eb 01                	jmp    c010a075 <do_fork+0x110>
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    proc = alloc_proc();
    if (proc == NULL)
        goto fork_out;
c010a074:	90                   	nop

    wakeup_proc(proc);

    ret = proc->pid;
fork_out:
    return ret;
c010a075:	8b 45 f4             	mov    -0xc(%ebp),%eax
bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
    goto fork_out;
}
c010a078:	c9                   	leave  
c010a079:	c3                   	ret    
    if (ret2 != 0)
        goto bad_fork_cleanup_proc;

    ret2 = copy_mm(clone_flags, proc);
    if (ret2 != 0)
        goto bad_fork_cleanup_kstack;
c010a07a:	90                   	nop
    ret = proc->pid;
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c010a07b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a07e:	89 04 24             	mov    %eax,(%esp)
c010a081:	e8 f6 fb ff ff       	call   c0109c7c <put_kstack>
c010a086:	eb 01                	jmp    c010a089 <do_fork+0x124>
        goto fork_out;

    int ret2;
    ret2 = setup_kstack(proc);
    if (ret2 != 0)
        goto bad_fork_cleanup_proc;
c010a088:	90                   	nop
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c010a089:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a08c:	89 04 24             	mov    %eax,(%esp)
c010a08f:	e8 46 ac ff ff       	call   c0104cda <kfree>
    goto fork_out;
c010a094:	eb df                	jmp    c010a075 <do_fork+0x110>

c010a096 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010a096:	55                   	push   %ebp
c010a097:	89 e5                	mov    %esp,%ebp
c010a099:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010a09c:	8b 15 28 fd 1a c0    	mov    0xc01afd28,%edx
c010a0a2:	a1 20 fd 1a c0       	mov    0xc01afd20,%eax
c010a0a7:	39 c2                	cmp    %eax,%edx
c010a0a9:	75 1c                	jne    c010a0c7 <do_exit+0x31>
        panic("idleproc exit.\n");
c010a0ab:	c7 44 24 08 5a e6 10 	movl   $0xc010e65a,0x8(%esp)
c010a0b2:	c0 
c010a0b3:	c7 44 24 04 e3 01 00 	movl   $0x1e3,0x4(%esp)
c010a0ba:	00 
c010a0bb:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010a0c2:	e8 f5 6c ff ff       	call   c0100dbc <__panic>
    }
    if (current == initproc) {
c010a0c7:	8b 15 28 fd 1a c0    	mov    0xc01afd28,%edx
c010a0cd:	a1 24 fd 1a c0       	mov    0xc01afd24,%eax
c010a0d2:	39 c2                	cmp    %eax,%edx
c010a0d4:	75 1c                	jne    c010a0f2 <do_exit+0x5c>
        panic("initproc exit.\n");
c010a0d6:	c7 44 24 08 6a e6 10 	movl   $0xc010e66a,0x8(%esp)
c010a0dd:	c0 
c010a0de:	c7 44 24 04 e6 01 00 	movl   $0x1e6,0x4(%esp)
c010a0e5:	00 
c010a0e6:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010a0ed:	e8 ca 6c ff ff       	call   c0100dbc <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010a0f2:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010a0f7:	8b 40 18             	mov    0x18(%eax),%eax
c010a0fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010a0fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a101:	74 4a                	je     c010a14d <do_exit+0xb7>
        lcr3(boot_cr3);
c010a103:	a1 8c 1d 1b c0       	mov    0xc01b1d8c,%eax
c010a108:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010a10b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a10e:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010a111:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a114:	89 04 24             	mov    %eax,(%esp)
c010a117:	e8 9d f4 ff ff       	call   c01095b9 <mm_count_dec>
c010a11c:	85 c0                	test   %eax,%eax
c010a11e:	75 21                	jne    c010a141 <do_exit+0xab>
            exit_mmap(mm);
c010a120:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a123:	89 04 24             	mov    %eax,(%esp)
c010a126:	e8 c4 e4 ff ff       	call   c01085ef <exit_mmap>
            put_pgdir(mm);
c010a12b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a12e:	89 04 24             	mov    %eax,(%esp)
c010a131:	e8 13 fc ff ff       	call   c0109d49 <put_pgdir>
            mm_destroy(mm);
c010a136:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a139:	89 04 24             	mov    %eax,(%esp)
c010a13c:	e8 ed e1 ff ff       	call   c010832e <mm_destroy>
        }
        current->mm = NULL;
c010a141:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010a146:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010a14d:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010a152:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010a158:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010a15d:	8b 55 08             	mov    0x8(%ebp),%edx
c010a160:	89 50 68             	mov    %edx,0x68(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010a163:	e8 6a f2 ff ff       	call   c01093d2 <__intr_save>
c010a168:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010a16b:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010a170:	8b 40 14             	mov    0x14(%eax),%eax
c010a173:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010a176:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a179:	8b 40 6c             	mov    0x6c(%eax),%eax
c010a17c:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010a181:	0f 85 98 00 00 00    	jne    c010a21f <do_exit+0x189>
            wakeup_proc(proc);
c010a187:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a18a:	89 04 24             	mov    %eax,(%esp)
c010a18d:	e8 95 13 00 00       	call   c010b527 <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010a192:	e9 88 00 00 00       	jmp    c010a21f <do_exit+0x189>
            proc = current->cptr;
c010a197:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010a19c:	8b 40 70             	mov    0x70(%eax),%eax
c010a19f:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010a1a2:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010a1a7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a1aa:	8b 52 78             	mov    0x78(%edx),%edx
c010a1ad:	89 50 70             	mov    %edx,0x70(%eax)
    
            proc->yptr = NULL;
c010a1b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a1b3:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
            if ((proc->optr = initproc->cptr) != NULL) {
c010a1ba:	a1 24 fd 1a c0       	mov    0xc01afd24,%eax
c010a1bf:	8b 50 70             	mov    0x70(%eax),%edx
c010a1c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a1c5:	89 50 78             	mov    %edx,0x78(%eax)
c010a1c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a1cb:	8b 40 78             	mov    0x78(%eax),%eax
c010a1ce:	85 c0                	test   %eax,%eax
c010a1d0:	74 0e                	je     c010a1e0 <do_exit+0x14a>
                initproc->cptr->yptr = proc;
c010a1d2:	a1 24 fd 1a c0       	mov    0xc01afd24,%eax
c010a1d7:	8b 40 70             	mov    0x70(%eax),%eax
c010a1da:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a1dd:	89 50 74             	mov    %edx,0x74(%eax)
            }
            proc->parent = initproc;
c010a1e0:	8b 15 24 fd 1a c0    	mov    0xc01afd24,%edx
c010a1e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a1e9:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010a1ec:	a1 24 fd 1a c0       	mov    0xc01afd24,%eax
c010a1f1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a1f4:	89 50 70             	mov    %edx,0x70(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010a1f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a1fa:	8b 00                	mov    (%eax),%eax
c010a1fc:	83 f8 03             	cmp    $0x3,%eax
c010a1ff:	75 1f                	jne    c010a220 <do_exit+0x18a>
                if (initproc->wait_state == WT_CHILD) {
c010a201:	a1 24 fd 1a c0       	mov    0xc01afd24,%eax
c010a206:	8b 40 6c             	mov    0x6c(%eax),%eax
c010a209:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010a20e:	75 10                	jne    c010a220 <do_exit+0x18a>
                    wakeup_proc(initproc);
c010a210:	a1 24 fd 1a c0       	mov    0xc01afd24,%eax
c010a215:	89 04 24             	mov    %eax,(%esp)
c010a218:	e8 0a 13 00 00       	call   c010b527 <wakeup_proc>
c010a21d:	eb 01                	jmp    c010a220 <do_exit+0x18a>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010a21f:	90                   	nop
c010a220:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010a225:	8b 40 70             	mov    0x70(%eax),%eax
c010a228:	85 c0                	test   %eax,%eax
c010a22a:	0f 85 67 ff ff ff    	jne    c010a197 <do_exit+0x101>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010a230:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a233:	89 04 24             	mov    %eax,(%esp)
c010a236:	e8 c6 f1 ff ff       	call   c0109401 <__intr_restore>
    
    schedule();
c010a23b:	e8 80 13 00 00       	call   c010b5c0 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010a240:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010a245:	8b 40 04             	mov    0x4(%eax),%eax
c010a248:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a24c:	c7 44 24 08 7c e6 10 	movl   $0xc010e67c,0x8(%esp)
c010a253:	c0 
c010a254:	c7 44 24 04 12 02 00 	movl   $0x212,0x4(%esp)
c010a25b:	00 
c010a25c:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010a263:	e8 54 6b ff ff       	call   c0100dbc <__panic>

c010a268 <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010a268:	55                   	push   %ebp
c010a269:	89 e5                	mov    %esp,%ebp
c010a26b:	83 ec 78             	sub    $0x78,%esp
    if (current->mm != NULL) {
c010a26e:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010a273:	8b 40 18             	mov    0x18(%eax),%eax
c010a276:	85 c0                	test   %eax,%eax
c010a278:	74 1c                	je     c010a296 <load_icode+0x2e>
        panic("load_icode: current->mm must be empty.\n");
c010a27a:	c7 44 24 08 9c e6 10 	movl   $0xc010e69c,0x8(%esp)
c010a281:	c0 
c010a282:	c7 44 24 04 1c 02 00 	movl   $0x21c,0x4(%esp)
c010a289:	00 
c010a28a:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010a291:	e8 26 6b ff ff       	call   c0100dbc <__panic>
    }

    int ret = -E_NO_MEM;
c010a296:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010a29d:	e8 32 dd ff ff       	call   c0107fd4 <mm_create>
c010a2a2:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010a2a5:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010a2a9:	0f 84 26 06 00 00    	je     c010a8d5 <load_icode+0x66d>
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010a2af:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a2b2:	89 04 24             	mov    %eax,(%esp)
c010a2b5:	e8 e8 f9 ff ff       	call   c0109ca2 <setup_pgdir>
c010a2ba:	85 c0                	test   %eax,%eax
c010a2bc:	0f 85 05 06 00 00    	jne    c010a8c7 <load_icode+0x65f>
        goto bad_pgdir_cleanup_mm;
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010a2c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2c5:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010a2c8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a2cb:	8b 40 1c             	mov    0x1c(%eax),%eax
c010a2ce:	03 45 08             	add    0x8(%ebp),%eax
c010a2d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010a2d4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a2d7:	8b 00                	mov    (%eax),%eax
c010a2d9:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010a2de:	74 0c                	je     c010a2ec <load_icode+0x84>
        ret = -E_INVAL_ELF;
c010a2e0:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010a2e7:	e9 ce 05 00 00       	jmp    c010a8ba <load_icode+0x652>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010a2ec:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a2ef:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010a2f3:	0f b7 c0             	movzwl %ax,%eax
c010a2f6:	c1 e0 05             	shl    $0x5,%eax
c010a2f9:	03 45 ec             	add    -0x14(%ebp),%eax
c010a2fc:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010a2ff:	e9 1d 03 00 00       	jmp    c010a621 <load_icode+0x3b9>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010a304:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a307:	8b 00                	mov    (%eax),%eax
c010a309:	83 f8 01             	cmp    $0x1,%eax
c010a30c:	0f 85 04 03 00 00    	jne    c010a616 <load_icode+0x3ae>
            continue ;
        }
        if (ph->p_filesz > ph->p_memsz) {
c010a312:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a315:	8b 50 10             	mov    0x10(%eax),%edx
c010a318:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a31b:	8b 40 14             	mov    0x14(%eax),%eax
c010a31e:	39 c2                	cmp    %eax,%edx
c010a320:	76 0c                	jbe    c010a32e <load_icode+0xc6>
            ret = -E_INVAL_ELF;
c010a322:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010a329:	e9 81 05 00 00       	jmp    c010a8af <load_icode+0x647>
        }
        if (ph->p_filesz == 0) {
c010a32e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a331:	8b 40 10             	mov    0x10(%eax),%eax
c010a334:	85 c0                	test   %eax,%eax
c010a336:	0f 84 dd 02 00 00    	je     c010a619 <load_icode+0x3b1>
            continue ;
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010a33c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010a343:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010a34a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a34d:	8b 40 18             	mov    0x18(%eax),%eax
c010a350:	83 e0 01             	and    $0x1,%eax
c010a353:	84 c0                	test   %al,%al
c010a355:	74 04                	je     c010a35b <load_icode+0xf3>
c010a357:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010a35b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a35e:	8b 40 18             	mov    0x18(%eax),%eax
c010a361:	83 e0 02             	and    $0x2,%eax
c010a364:	85 c0                	test   %eax,%eax
c010a366:	74 04                	je     c010a36c <load_icode+0x104>
c010a368:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010a36c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a36f:	8b 40 18             	mov    0x18(%eax),%eax
c010a372:	83 e0 04             	and    $0x4,%eax
c010a375:	85 c0                	test   %eax,%eax
c010a377:	74 04                	je     c010a37d <load_icode+0x115>
c010a379:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010a37d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a380:	83 e0 02             	and    $0x2,%eax
c010a383:	85 c0                	test   %eax,%eax
c010a385:	74 04                	je     c010a38b <load_icode+0x123>
c010a387:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010a38b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a38e:	8b 50 14             	mov    0x14(%eax),%edx
c010a391:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a394:	8b 40 08             	mov    0x8(%eax),%eax
c010a397:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010a39e:	00 
c010a39f:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010a3a2:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010a3a6:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a3aa:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a3ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a3b1:	89 04 24             	mov    %eax,(%esp)
c010a3b4:	e8 17 e0 ff ff       	call   c01083d0 <mm_map>
c010a3b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a3bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a3c0:	0f 85 df 04 00 00    	jne    c010a8a5 <load_icode+0x63d>
            goto bad_cleanup_mmap;
        }
        unsigned char *from = binary + ph->p_offset;
c010a3c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a3c9:	8b 40 04             	mov    0x4(%eax),%eax
c010a3cc:	03 45 08             	add    0x8(%ebp),%eax
c010a3cf:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010a3d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a3d5:	8b 40 08             	mov    0x8(%eax),%eax
c010a3d8:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010a3db:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a3de:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010a3e1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010a3e4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010a3e9:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010a3ec:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010a3f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a3f6:	8b 50 08             	mov    0x8(%eax),%edx
c010a3f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a3fc:	8b 40 10             	mov    0x10(%eax),%eax
c010a3ff:	01 d0                	add    %edx,%eax
c010a401:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010a404:	e9 91 00 00 00       	jmp    c010a49a <load_icode+0x232>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010a409:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a40c:	8b 40 0c             	mov    0xc(%eax),%eax
c010a40f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a412:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a416:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010a419:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a41d:	89 04 24             	mov    %eax,(%esp)
c010a420:	e8 f7 bb ff ff       	call   c010601c <pgdir_alloc_page>
c010a425:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a428:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a42c:	0f 84 76 04 00 00    	je     c010a8a8 <load_icode+0x640>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010a432:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a435:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010a438:	89 d1                	mov    %edx,%ecx
c010a43a:	29 c1                	sub    %eax,%ecx
c010a43c:	89 c8                	mov    %ecx,%eax
c010a43e:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a441:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a446:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a449:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010a44c:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010a453:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a456:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a459:	73 0f                	jae    c010a46a <load_icode+0x202>
                size -= la - end;
c010a45b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a45e:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010a461:	89 d1                	mov    %edx,%ecx
c010a463:	29 c1                	sub    %eax,%ecx
c010a465:	89 c8                	mov    %ecx,%eax
c010a467:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010a46a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a46d:	89 04 24             	mov    %eax,(%esp)
c010a470:	e8 8c f0 ff ff       	call   c0109501 <page2kva>
c010a475:	03 45 bc             	add    -0x44(%ebp),%eax
c010a478:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a47b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a47f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a482:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a486:	89 04 24             	mov    %eax,(%esp)
c010a489:	e8 14 20 00 00       	call   c010c4a2 <memcpy>
            start += size, from += size;
c010a48e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a491:	01 45 d8             	add    %eax,-0x28(%ebp)
c010a494:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a497:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010a49a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a49d:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a4a0:	0f 82 63 ff ff ff    	jb     c010a409 <load_icode+0x1a1>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010a4a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a4a9:	8b 50 08             	mov    0x8(%eax),%edx
c010a4ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a4af:	8b 40 14             	mov    0x14(%eax),%eax
c010a4b2:	01 d0                	add    %edx,%eax
c010a4b4:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010a4b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a4ba:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a4bd:	0f 83 45 01 00 00    	jae    c010a608 <load_icode+0x3a0>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010a4c3:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a4c6:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a4c9:	0f 84 4d 01 00 00    	je     c010a61c <load_icode+0x3b4>
                continue ;
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010a4cf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a4d2:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010a4d5:	89 d1                	mov    %edx,%ecx
c010a4d7:	29 c1                	sub    %eax,%ecx
c010a4d9:	89 c8                	mov    %ecx,%eax
c010a4db:	05 00 10 00 00       	add    $0x1000,%eax
c010a4e0:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a4e3:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a4e8:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a4eb:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010a4ee:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a4f1:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a4f4:	73 0f                	jae    c010a505 <load_icode+0x29d>
                size -= la - end;
c010a4f6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a4f9:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010a4fc:	89 d1                	mov    %edx,%ecx
c010a4fe:	29 c1                	sub    %eax,%ecx
c010a500:	89 c8                	mov    %ecx,%eax
c010a502:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010a505:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a508:	89 04 24             	mov    %eax,(%esp)
c010a50b:	e8 f1 ef ff ff       	call   c0109501 <page2kva>
c010a510:	03 45 bc             	add    -0x44(%ebp),%eax
c010a513:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a516:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a51a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a521:	00 
c010a522:	89 04 24             	mov    %eax,(%esp)
c010a525:	e8 79 1e 00 00       	call   c010c3a3 <memset>
            start += size;
c010a52a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a52d:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010a530:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a533:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a536:	73 0c                	jae    c010a544 <load_icode+0x2dc>
c010a538:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a53b:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a53e:	0f 84 c4 00 00 00    	je     c010a608 <load_icode+0x3a0>
c010a544:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a547:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a54a:	72 0c                	jb     c010a558 <load_icode+0x2f0>
c010a54c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a54f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a552:	0f 84 b0 00 00 00    	je     c010a608 <load_icode+0x3a0>
c010a558:	c7 44 24 0c c4 e6 10 	movl   $0xc010e6c4,0xc(%esp)
c010a55f:	c0 
c010a560:	c7 44 24 08 45 e6 10 	movl   $0xc010e645,0x8(%esp)
c010a567:	c0 
c010a568:	c7 44 24 04 6e 02 00 	movl   $0x26e,0x4(%esp)
c010a56f:	00 
c010a570:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010a577:	e8 40 68 ff ff       	call   c0100dbc <__panic>
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010a57c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a57f:	8b 40 0c             	mov    0xc(%eax),%eax
c010a582:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a585:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a589:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010a58c:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a590:	89 04 24             	mov    %eax,(%esp)
c010a593:	e8 84 ba ff ff       	call   c010601c <pgdir_alloc_page>
c010a598:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a59b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a59f:	0f 84 06 03 00 00    	je     c010a8ab <load_icode+0x643>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010a5a5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a5a8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010a5ab:	89 d1                	mov    %edx,%ecx
c010a5ad:	29 c1                	sub    %eax,%ecx
c010a5af:	89 c8                	mov    %ecx,%eax
c010a5b1:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010a5b4:	b8 00 10 00 00       	mov    $0x1000,%eax
c010a5b9:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010a5bc:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010a5bf:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010a5c6:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010a5c9:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010a5cc:	73 0f                	jae    c010a5dd <load_icode+0x375>
                size -= la - end;
c010a5ce:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a5d1:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010a5d4:	89 d1                	mov    %edx,%ecx
c010a5d6:	29 c1                	sub    %eax,%ecx
c010a5d8:	89 c8                	mov    %ecx,%eax
c010a5da:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010a5dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a5e0:	89 04 24             	mov    %eax,(%esp)
c010a5e3:	e8 19 ef ff ff       	call   c0109501 <page2kva>
c010a5e8:	03 45 bc             	add    -0x44(%ebp),%eax
c010a5eb:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010a5ee:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a5f2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a5f9:	00 
c010a5fa:	89 04 24             	mov    %eax,(%esp)
c010a5fd:	e8 a1 1d 00 00       	call   c010c3a3 <memset>
            start += size;
c010a602:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010a605:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010a608:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010a60b:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010a60e:	0f 82 68 ff ff ff    	jb     c010a57c <load_icode+0x314>
c010a614:	eb 07                	jmp    c010a61d <load_icode+0x3b5>
    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
            continue ;
c010a616:	90                   	nop
c010a617:	eb 04                	jmp    c010a61d <load_icode+0x3b5>
        if (ph->p_filesz > ph->p_memsz) {
            ret = -E_INVAL_ELF;
            goto bad_cleanup_mmap;
        }
        if (ph->p_filesz == 0) {
            continue ;
c010a619:	90                   	nop
c010a61a:	eb 01                	jmp    c010a61d <load_icode+0x3b5>
      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
        if (start < la) {
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
                continue ;
c010a61c:	90                   	nop
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010a61d:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010a621:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a624:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010a627:	0f 82 d7 fc ff ff    	jb     c010a304 <load_icode+0x9c>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010a62d:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010a634:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010a63b:	00 
c010a63c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a63f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a643:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010a64a:	00 
c010a64b:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010a652:	af 
c010a653:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a656:	89 04 24             	mov    %eax,(%esp)
c010a659:	e8 72 dd ff ff       	call   c01083d0 <mm_map>
c010a65e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a661:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a665:	0f 85 43 02 00 00    	jne    c010a8ae <load_icode+0x646>
        goto bad_cleanup_mmap;
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010a66b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a66e:	8b 40 0c             	mov    0xc(%eax),%eax
c010a671:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010a678:	00 
c010a679:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010a680:	af 
c010a681:	89 04 24             	mov    %eax,(%esp)
c010a684:	e8 93 b9 ff ff       	call   c010601c <pgdir_alloc_page>
c010a689:	85 c0                	test   %eax,%eax
c010a68b:	75 24                	jne    c010a6b1 <load_icode+0x449>
c010a68d:	c7 44 24 0c 00 e7 10 	movl   $0xc010e700,0xc(%esp)
c010a694:	c0 
c010a695:	c7 44 24 08 45 e6 10 	movl   $0xc010e645,0x8(%esp)
c010a69c:	c0 
c010a69d:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
c010a6a4:	00 
c010a6a5:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010a6ac:	e8 0b 67 ff ff       	call   c0100dbc <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010a6b1:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a6b4:	8b 40 0c             	mov    0xc(%eax),%eax
c010a6b7:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010a6be:	00 
c010a6bf:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010a6c6:	af 
c010a6c7:	89 04 24             	mov    %eax,(%esp)
c010a6ca:	e8 4d b9 ff ff       	call   c010601c <pgdir_alloc_page>
c010a6cf:	85 c0                	test   %eax,%eax
c010a6d1:	75 24                	jne    c010a6f7 <load_icode+0x48f>
c010a6d3:	c7 44 24 0c 44 e7 10 	movl   $0xc010e744,0xc(%esp)
c010a6da:	c0 
c010a6db:	c7 44 24 08 45 e6 10 	movl   $0xc010e645,0x8(%esp)
c010a6e2:	c0 
c010a6e3:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
c010a6ea:	00 
c010a6eb:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010a6f2:	e8 c5 66 ff ff       	call   c0100dbc <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010a6f7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a6fa:	8b 40 0c             	mov    0xc(%eax),%eax
c010a6fd:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010a704:	00 
c010a705:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010a70c:	af 
c010a70d:	89 04 24             	mov    %eax,(%esp)
c010a710:	e8 07 b9 ff ff       	call   c010601c <pgdir_alloc_page>
c010a715:	85 c0                	test   %eax,%eax
c010a717:	75 24                	jne    c010a73d <load_icode+0x4d5>
c010a719:	c7 44 24 0c 88 e7 10 	movl   $0xc010e788,0xc(%esp)
c010a720:	c0 
c010a721:	c7 44 24 08 45 e6 10 	movl   $0xc010e645,0x8(%esp)
c010a728:	c0 
c010a729:	c7 44 24 04 83 02 00 	movl   $0x283,0x4(%esp)
c010a730:	00 
c010a731:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010a738:	e8 7f 66 ff ff       	call   c0100dbc <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010a73d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a740:	8b 40 0c             	mov    0xc(%eax),%eax
c010a743:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010a74a:	00 
c010a74b:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010a752:	af 
c010a753:	89 04 24             	mov    %eax,(%esp)
c010a756:	e8 c1 b8 ff ff       	call   c010601c <pgdir_alloc_page>
c010a75b:	85 c0                	test   %eax,%eax
c010a75d:	75 24                	jne    c010a783 <load_icode+0x51b>
c010a75f:	c7 44 24 0c cc e7 10 	movl   $0xc010e7cc,0xc(%esp)
c010a766:	c0 
c010a767:	c7 44 24 08 45 e6 10 	movl   $0xc010e645,0x8(%esp)
c010a76e:	c0 
c010a76f:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
c010a776:	00 
c010a777:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010a77e:	e8 39 66 ff ff       	call   c0100dbc <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010a783:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a786:	89 04 24             	mov    %eax,(%esp)
c010a789:	e8 11 ee ff ff       	call   c010959f <mm_count_inc>
    current->mm = mm;
c010a78e:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010a793:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010a796:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010a799:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010a79e:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010a7a1:	8b 52 0c             	mov    0xc(%edx),%edx
c010a7a4:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010a7a7:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010a7ae:	77 23                	ja     c010a7d3 <load_icode+0x56b>
c010a7b0:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010a7b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a7b7:	c7 44 24 08 f4 e5 10 	movl   $0xc010e5f4,0x8(%esp)
c010a7be:	c0 
c010a7bf:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c010a7c6:	00 
c010a7c7:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010a7ce:	e8 e9 65 ff ff       	call   c0100dbc <__panic>
c010a7d3:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010a7d6:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010a7dc:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010a7df:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a7e2:	8b 40 0c             	mov    0xc(%eax),%eax
c010a7e5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010a7e8:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010a7ef:	77 23                	ja     c010a814 <load_icode+0x5ac>
c010a7f1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010a7f4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a7f8:	c7 44 24 08 f4 e5 10 	movl   $0xc010e5f4,0x8(%esp)
c010a7ff:	c0 
c010a800:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c010a807:	00 
c010a808:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010a80f:	e8 a8 65 ff ff       	call   c0100dbc <__panic>
c010a814:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010a817:	05 00 00 00 40       	add    $0x40000000,%eax
c010a81c:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010a81f:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010a822:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010a825:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010a82a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a82d:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010a830:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010a837:	00 
c010a838:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a83f:	00 
c010a840:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a843:	89 04 24             	mov    %eax,(%esp)
c010a846:	e8 58 1b 00 00       	call   c010c3a3 <memset>
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010a84b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a84e:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010a854:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a857:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010a85d:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a860:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010a864:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a867:	66 89 50 28          	mov    %dx,0x28(%eax)
c010a86b:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a86e:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010a872:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a875:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = USTACKTOP;
c010a879:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a87c:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010a883:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010a886:	8b 50 18             	mov    0x18(%eax),%edx
c010a889:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a88c:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010a88f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010a892:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010a899:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010a8a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
}
c010a8a3:	c9                   	leave  
c010a8a4:	c3                   	ret    
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
        if (vm_flags & VM_WRITE) perm |= PTE_W;
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
            goto bad_cleanup_mmap;
c010a8a5:	90                   	nop
c010a8a6:	eb 07                	jmp    c010a8af <load_icode+0x647>
     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c010a8a8:	90                   	nop
c010a8a9:	eb 04                	jmp    c010a8af <load_icode+0x647>
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c010a8ab:	90                   	nop
c010a8ac:	eb 01                	jmp    c010a8af <load_icode+0x647>
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
        goto bad_cleanup_mmap;
c010a8ae:	90                   	nop
    tf->tf_eflags = FL_IF;
    ret = 0;
out:
    return ret;
bad_cleanup_mmap:
    exit_mmap(mm);
c010a8af:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a8b2:	89 04 24             	mov    %eax,(%esp)
c010a8b5:	e8 35 dd ff ff       	call   c01085ef <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010a8ba:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a8bd:	89 04 24             	mov    %eax,(%esp)
c010a8c0:	e8 84 f4 ff ff       	call   c0109d49 <put_pgdir>
c010a8c5:	eb 01                	jmp    c010a8c8 <load_icode+0x660>
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010a8c7:	90                   	nop
bad_cleanup_mmap:
    exit_mmap(mm);
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010a8c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010a8cb:	89 04 24             	mov    %eax,(%esp)
c010a8ce:	e8 5b da ff ff       	call   c010832e <mm_destroy>
bad_mm:
    goto out;
c010a8d3:	eb cb                	jmp    c010a8a0 <load_icode+0x638>

    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010a8d5:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010a8d6:	eb c8                	jmp    c010a8a0 <load_icode+0x638>

c010a8d8 <do_execve>:
}

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010a8d8:	55                   	push   %ebp
c010a8d9:	89 e5                	mov    %esp,%ebp
c010a8db:	83 ec 38             	sub    $0x38,%esp
    struct mm_struct *mm = current->mm;
c010a8de:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010a8e3:	8b 40 18             	mov    0x18(%eax),%eax
c010a8e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010a8e9:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8ec:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010a8f3:	00 
c010a8f4:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a8f7:	89 54 24 08          	mov    %edx,0x8(%esp)
c010a8fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a8ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a902:	89 04 24             	mov    %eax,(%esp)
c010a905:	e8 a3 e7 ff ff       	call   c01090ad <user_mem_check>
c010a90a:	85 c0                	test   %eax,%eax
c010a90c:	75 0a                	jne    c010a918 <do_execve+0x40>
        return -E_INVAL;
c010a90e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a913:	e9 f6 00 00 00       	jmp    c010aa0e <do_execve+0x136>
    }
    if (len > PROC_NAME_LEN) {
c010a918:	83 7d 0c 0f          	cmpl   $0xf,0xc(%ebp)
c010a91c:	76 07                	jbe    c010a925 <do_execve+0x4d>
        len = PROC_NAME_LEN;
c010a91e:	c7 45 0c 0f 00 00 00 	movl   $0xf,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010a925:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c010a92c:	00 
c010a92d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a934:	00 
c010a935:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a938:	89 04 24             	mov    %eax,(%esp)
c010a93b:	e8 63 1a 00 00       	call   c010c3a3 <memset>
    memcpy(local_name, name, len);
c010a940:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a943:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a947:	8b 45 08             	mov    0x8(%ebp),%eax
c010a94a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a94e:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010a951:	89 04 24             	mov    %eax,(%esp)
c010a954:	e8 49 1b 00 00       	call   c010c4a2 <memcpy>

    if (mm != NULL) {
c010a959:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a95d:	74 4a                	je     c010a9a9 <do_execve+0xd1>
        lcr3(boot_cr3);
c010a95f:	a1 8c 1d 1b c0       	mov    0xc01b1d8c,%eax
c010a964:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a967:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a96a:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010a96d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a970:	89 04 24             	mov    %eax,(%esp)
c010a973:	e8 41 ec ff ff       	call   c01095b9 <mm_count_dec>
c010a978:	85 c0                	test   %eax,%eax
c010a97a:	75 21                	jne    c010a99d <do_execve+0xc5>
            exit_mmap(mm);
c010a97c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a97f:	89 04 24             	mov    %eax,(%esp)
c010a982:	e8 68 dc ff ff       	call   c01085ef <exit_mmap>
            put_pgdir(mm);
c010a987:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a98a:	89 04 24             	mov    %eax,(%esp)
c010a98d:	e8 b7 f3 ff ff       	call   c0109d49 <put_pgdir>
            mm_destroy(mm);
c010a992:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a995:	89 04 24             	mov    %eax,(%esp)
c010a998:	e8 91 d9 ff ff       	call   c010832e <mm_destroy>
        }
        current->mm = NULL;
c010a99d:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010a9a2:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010a9a9:	8b 45 14             	mov    0x14(%ebp),%eax
c010a9ac:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a9b0:	8b 45 10             	mov    0x10(%ebp),%eax
c010a9b3:	89 04 24             	mov    %eax,(%esp)
c010a9b6:	e8 ad f8 ff ff       	call   c010a268 <load_icode>
c010a9bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a9be:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a9c2:	75 1b                	jne    c010a9df <do_execve+0x107>
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010a9c4:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010a9c9:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010a9cc:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a9d0:	89 04 24             	mov    %eax,(%esp)
c010a9d3:	e8 a3 ed ff ff       	call   c010977b <set_proc_name>
    return 0;
c010a9d8:	b8 00 00 00 00       	mov    $0x0,%eax
c010a9dd:	eb 2f                	jmp    c010aa0e <do_execve+0x136>
        }
        current->mm = NULL;
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
c010a9df:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010a9e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9e3:	89 04 24             	mov    %eax,(%esp)
c010a9e6:	e8 ab f6 ff ff       	call   c010a096 <do_exit>
    panic("already exit: %e.\n", ret);
c010a9eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9ee:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a9f2:	c7 44 24 08 0f e8 10 	movl   $0xc010e80f,0x8(%esp)
c010a9f9:	c0 
c010a9fa:	c7 44 24 04 cc 02 00 	movl   $0x2cc,0x4(%esp)
c010aa01:	00 
c010aa02:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010aa09:	e8 ae 63 ff ff       	call   c0100dbc <__panic>
}
c010aa0e:	c9                   	leave  
c010aa0f:	c3                   	ret    

c010aa10 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010aa10:	55                   	push   %ebp
c010aa11:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010aa13:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010aa18:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010aa1f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010aa24:	5d                   	pop    %ebp
c010aa25:	c3                   	ret    

c010aa26 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010aa26:	55                   	push   %ebp
c010aa27:	89 e5                	mov    %esp,%ebp
c010aa29:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010aa2c:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010aa31:	8b 40 18             	mov    0x18(%eax),%eax
c010aa34:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010aa37:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010aa3b:	74 31                	je     c010aa6e <do_wait+0x48>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010aa3d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa40:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010aa47:	00 
c010aa48:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010aa4f:	00 
c010aa50:	89 44 24 04          	mov    %eax,0x4(%esp)
c010aa54:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa57:	89 04 24             	mov    %eax,(%esp)
c010aa5a:	e8 4e e6 ff ff       	call   c01090ad <user_mem_check>
c010aa5f:	85 c0                	test   %eax,%eax
c010aa61:	75 0b                	jne    c010aa6e <do_wait+0x48>
            return -E_INVAL;
c010aa63:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010aa68:	e9 47 01 00 00       	jmp    c010abb4 <do_wait+0x18e>
        current->wait_state = WT_CHILD;
        schedule();
        if (current->flags & PF_EXITING) {
            do_exit(-E_KILLED);
        }
        goto repeat;
c010aa6d:	90                   	nop
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010aa6e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010aa75:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010aa79:	74 36                	je     c010aab1 <do_wait+0x8b>
        proc = find_proc(pid);
c010aa7b:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa7e:	89 04 24             	mov    %eax,(%esp)
c010aa81:	e8 d6 f0 ff ff       	call   c0109b5c <find_proc>
c010aa86:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010aa89:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aa8d:	74 4f                	je     c010aade <do_wait+0xb8>
c010aa8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa92:	8b 50 14             	mov    0x14(%eax),%edx
c010aa95:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010aa9a:	39 c2                	cmp    %eax,%edx
c010aa9c:	75 40                	jne    c010aade <do_wait+0xb8>
            haskid = 1;
c010aa9e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010aaa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aaa8:	8b 00                	mov    (%eax),%eax
c010aaaa:	83 f8 03             	cmp    $0x3,%eax
c010aaad:	75 2f                	jne    c010aade <do_wait+0xb8>
                goto found;
c010aaaf:	eb 7e                	jmp    c010ab2f <do_wait+0x109>
            }
        }
    }
    else {
        proc = current->cptr;
c010aab1:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010aab6:	8b 40 70             	mov    0x70(%eax),%eax
c010aab9:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010aabc:	eb 1a                	jmp    c010aad8 <do_wait+0xb2>
            haskid = 1;
c010aabe:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010aac5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aac8:	8b 00                	mov    (%eax),%eax
c010aaca:	83 f8 03             	cmp    $0x3,%eax
c010aacd:	74 5f                	je     c010ab2e <do_wait+0x108>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010aacf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aad2:	8b 40 78             	mov    0x78(%eax),%eax
c010aad5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aad8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aadc:	75 e0                	jne    c010aabe <do_wait+0x98>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010aade:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010aae2:	74 40                	je     c010ab24 <do_wait+0xfe>
        current->state = PROC_SLEEPING;
c010aae4:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010aae9:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010aaef:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010aaf4:	c7 40 6c 01 00 00 80 	movl   $0x80000001,0x6c(%eax)
        schedule();
c010aafb:	e8 c0 0a 00 00       	call   c010b5c0 <schedule>
        if (current->flags & PF_EXITING) {
c010ab00:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010ab05:	8b 40 44             	mov    0x44(%eax),%eax
c010ab08:	83 e0 01             	and    $0x1,%eax
c010ab0b:	84 c0                	test   %al,%al
c010ab0d:	0f 84 5a ff ff ff    	je     c010aa6d <do_wait+0x47>
            do_exit(-E_KILLED);
c010ab13:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010ab1a:	e8 77 f5 ff ff       	call   c010a096 <do_exit>
        }
        goto repeat;
c010ab1f:	e9 49 ff ff ff       	jmp    c010aa6d <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010ab24:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010ab29:	e9 86 00 00 00       	jmp    c010abb4 <do_wait+0x18e>
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
            haskid = 1;
            if (proc->state == PROC_ZOMBIE) {
                goto found;
c010ab2e:	90                   	nop
        goto repeat;
    }
    return -E_BAD_PROC;

found:
    if (proc == idleproc || proc == initproc) {
c010ab2f:	a1 20 fd 1a c0       	mov    0xc01afd20,%eax
c010ab34:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010ab37:	74 0a                	je     c010ab43 <do_wait+0x11d>
c010ab39:	a1 24 fd 1a c0       	mov    0xc01afd24,%eax
c010ab3e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010ab41:	75 1c                	jne    c010ab5f <do_wait+0x139>
        panic("wait idleproc or initproc.\n");
c010ab43:	c7 44 24 08 22 e8 10 	movl   $0xc010e822,0x8(%esp)
c010ab4a:	c0 
c010ab4b:	c7 44 24 04 05 03 00 	movl   $0x305,0x4(%esp)
c010ab52:	00 
c010ab53:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010ab5a:	e8 5d 62 ff ff       	call   c0100dbc <__panic>
    }
    if (code_store != NULL) {
c010ab5f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ab63:	74 0b                	je     c010ab70 <do_wait+0x14a>
        *code_store = proc->exit_code;
c010ab65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab68:	8b 50 68             	mov    0x68(%eax),%edx
c010ab6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ab6e:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010ab70:	e8 5d e8 ff ff       	call   c01093d2 <__intr_save>
c010ab75:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010ab78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab7b:	89 04 24             	mov    %eax,(%esp)
c010ab7e:	e8 a6 ef ff ff       	call   c0109b29 <unhash_proc>
        remove_links(proc);
c010ab83:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab86:	89 04 24             	mov    %eax,(%esp)
c010ab89:	e8 17 ed ff ff       	call   c01098a5 <remove_links>
    }
    local_intr_restore(intr_flag);
c010ab8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ab91:	89 04 24             	mov    %eax,(%esp)
c010ab94:	e8 68 e8 ff ff       	call   c0109401 <__intr_restore>
    put_kstack(proc);
c010ab99:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab9c:	89 04 24             	mov    %eax,(%esp)
c010ab9f:	e8 d8 f0 ff ff       	call   c0109c7c <put_kstack>
    kfree(proc);
c010aba4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aba7:	89 04 24             	mov    %eax,(%esp)
c010abaa:	e8 2b a1 ff ff       	call   c0104cda <kfree>
    return 0;
c010abaf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010abb4:	c9                   	leave  
c010abb5:	c3                   	ret    

c010abb6 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010abb6:	55                   	push   %ebp
c010abb7:	89 e5                	mov    %esp,%ebp
c010abb9:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010abbc:	8b 45 08             	mov    0x8(%ebp),%eax
c010abbf:	89 04 24             	mov    %eax,(%esp)
c010abc2:	e8 95 ef ff ff       	call   c0109b5c <find_proc>
c010abc7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010abca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010abce:	74 41                	je     c010ac11 <do_kill+0x5b>
        if (!(proc->flags & PF_EXITING)) {
c010abd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abd3:	8b 40 44             	mov    0x44(%eax),%eax
c010abd6:	83 e0 01             	and    $0x1,%eax
c010abd9:	85 c0                	test   %eax,%eax
c010abdb:	75 2d                	jne    c010ac0a <do_kill+0x54>
            proc->flags |= PF_EXITING;
c010abdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abe0:	8b 40 44             	mov    0x44(%eax),%eax
c010abe3:	89 c2                	mov    %eax,%edx
c010abe5:	83 ca 01             	or     $0x1,%edx
c010abe8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abeb:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010abee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abf1:	8b 40 6c             	mov    0x6c(%eax),%eax
c010abf4:	85 c0                	test   %eax,%eax
c010abf6:	79 0b                	jns    c010ac03 <do_kill+0x4d>
                wakeup_proc(proc);
c010abf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abfb:	89 04 24             	mov    %eax,(%esp)
c010abfe:	e8 24 09 00 00       	call   c010b527 <wakeup_proc>
            }
            return 0;
c010ac03:	b8 00 00 00 00       	mov    $0x0,%eax
c010ac08:	eb 0c                	jmp    c010ac16 <do_kill+0x60>
        }
        return -E_KILLED;
c010ac0a:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010ac0f:	eb 05                	jmp    c010ac16 <do_kill+0x60>
    }
    return -E_INVAL;
c010ac11:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010ac16:	c9                   	leave  
c010ac17:	c3                   	ret    

c010ac18 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010ac18:	55                   	push   %ebp
c010ac19:	89 e5                	mov    %esp,%ebp
c010ac1b:	57                   	push   %edi
c010ac1c:	56                   	push   %esi
c010ac1d:	53                   	push   %ebx
c010ac1e:	83 ec 2c             	sub    $0x2c,%esp
    int ret, len = strlen(name);
c010ac21:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac24:	89 04 24             	mov    %eax,(%esp)
c010ac27:	e8 3c 14 00 00       	call   c010c068 <strlen>
c010ac2c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010ac2f:	b8 04 00 00 00       	mov    $0x4,%eax
c010ac34:	8b 55 08             	mov    0x8(%ebp),%edx
c010ac37:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010ac3a:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010ac3d:	8b 7d 10             	mov    0x10(%ebp),%edi
c010ac40:	89 c6                	mov    %eax,%esi
c010ac42:	89 f0                	mov    %esi,%eax
c010ac44:	cd 80                	int    $0x80
c010ac46:	89 c6                	mov    %eax,%esi
c010ac48:	89 75 e0             	mov    %esi,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010ac4b:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010ac4e:	83 c4 2c             	add    $0x2c,%esp
c010ac51:	5b                   	pop    %ebx
c010ac52:	5e                   	pop    %esi
c010ac53:	5f                   	pop    %edi
c010ac54:	5d                   	pop    %ebp
c010ac55:	c3                   	ret    

c010ac56 <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010ac56:	55                   	push   %ebp
c010ac57:	89 e5                	mov    %esp,%ebp
c010ac59:	83 ec 18             	sub    $0x18,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010ac5c:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010ac61:	8b 40 04             	mov    0x4(%eax),%eax
c010ac64:	c7 44 24 08 3e e8 10 	movl   $0xc010e83e,0x8(%esp)
c010ac6b:	c0 
c010ac6c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ac70:	c7 04 24 48 e8 10 c0 	movl   $0xc010e848,(%esp)
c010ac77:	e8 e7 56 ff ff       	call   c0100363 <cprintf>
c010ac7c:	b8 b7 79 00 00       	mov    $0x79b7,%eax
c010ac81:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ac85:	c7 44 24 04 61 14 18 	movl   $0xc0181461,0x4(%esp)
c010ac8c:	c0 
c010ac8d:	c7 04 24 3e e8 10 c0 	movl   $0xc010e83e,(%esp)
c010ac94:	e8 7f ff ff ff       	call   c010ac18 <kernel_execve>
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010ac99:	c7 44 24 08 6f e8 10 	movl   $0xc010e86f,0x8(%esp)
c010aca0:	c0 
c010aca1:	c7 44 24 04 4e 03 00 	movl   $0x34e,0x4(%esp)
c010aca8:	00 
c010aca9:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010acb0:	e8 07 61 ff ff       	call   c0100dbc <__panic>

c010acb5 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010acb5:	55                   	push   %ebp
c010acb6:	89 e5                	mov    %esp,%ebp
c010acb8:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010acbb:	e8 22 a5 ff ff       	call   c01051e2 <nr_free_pages>
c010acc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010acc3:	e8 da 9e ff ff       	call   c0104ba2 <kallocated>
c010acc8:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010accb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010acd2:	00 
c010acd3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010acda:	00 
c010acdb:	c7 04 24 56 ac 10 c0 	movl   $0xc010ac56,(%esp)
c010ace2:	e8 e7 ee ff ff       	call   c0109bce <kernel_thread>
c010ace7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010acea:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010acee:	7f 23                	jg     c010ad13 <init_main+0x5e>
        panic("create user_main failed.\n");
c010acf0:	c7 44 24 08 89 e8 10 	movl   $0xc010e889,0x8(%esp)
c010acf7:	c0 
c010acf8:	c7 44 24 04 59 03 00 	movl   $0x359,0x4(%esp)
c010acff:	00 
c010ad00:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010ad07:	e8 b0 60 ff ff       	call   c0100dbc <__panic>
    }

    while (do_wait(0, NULL) == 0) {
        schedule();
c010ad0c:	e8 af 08 00 00       	call   c010b5c0 <schedule>
c010ad11:	eb 01                	jmp    c010ad14 <init_main+0x5f>
    int pid = kernel_thread(user_main, NULL, 0);
    if (pid <= 0) {
        panic("create user_main failed.\n");
    }

    while (do_wait(0, NULL) == 0) {
c010ad13:	90                   	nop
c010ad14:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ad1b:	00 
c010ad1c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010ad23:	e8 fe fc ff ff       	call   c010aa26 <do_wait>
c010ad28:	85 c0                	test   %eax,%eax
c010ad2a:	74 e0                	je     c010ad0c <init_main+0x57>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010ad2c:	c7 04 24 a4 e8 10 c0 	movl   $0xc010e8a4,(%esp)
c010ad33:	e8 2b 56 ff ff       	call   c0100363 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010ad38:	a1 24 fd 1a c0       	mov    0xc01afd24,%eax
c010ad3d:	8b 40 70             	mov    0x70(%eax),%eax
c010ad40:	85 c0                	test   %eax,%eax
c010ad42:	75 18                	jne    c010ad5c <init_main+0xa7>
c010ad44:	a1 24 fd 1a c0       	mov    0xc01afd24,%eax
c010ad49:	8b 40 74             	mov    0x74(%eax),%eax
c010ad4c:	85 c0                	test   %eax,%eax
c010ad4e:	75 0c                	jne    c010ad5c <init_main+0xa7>
c010ad50:	a1 24 fd 1a c0       	mov    0xc01afd24,%eax
c010ad55:	8b 40 78             	mov    0x78(%eax),%eax
c010ad58:	85 c0                	test   %eax,%eax
c010ad5a:	74 24                	je     c010ad80 <init_main+0xcb>
c010ad5c:	c7 44 24 0c c8 e8 10 	movl   $0xc010e8c8,0xc(%esp)
c010ad63:	c0 
c010ad64:	c7 44 24 08 45 e6 10 	movl   $0xc010e645,0x8(%esp)
c010ad6b:	c0 
c010ad6c:	c7 44 24 04 61 03 00 	movl   $0x361,0x4(%esp)
c010ad73:	00 
c010ad74:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010ad7b:	e8 3c 60 ff ff       	call   c0100dbc <__panic>
    assert(nr_process == 2);
c010ad80:	a1 40 1d 1b c0       	mov    0xc01b1d40,%eax
c010ad85:	83 f8 02             	cmp    $0x2,%eax
c010ad88:	74 24                	je     c010adae <init_main+0xf9>
c010ad8a:	c7 44 24 0c 13 e9 10 	movl   $0xc010e913,0xc(%esp)
c010ad91:	c0 
c010ad92:	c7 44 24 08 45 e6 10 	movl   $0xc010e645,0x8(%esp)
c010ad99:	c0 
c010ad9a:	c7 44 24 04 62 03 00 	movl   $0x362,0x4(%esp)
c010ada1:	00 
c010ada2:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010ada9:	e8 0e 60 ff ff       	call   c0100dbc <__panic>
c010adae:	c7 45 e8 70 1e 1b c0 	movl   $0xc01b1e70,-0x18(%ebp)
c010adb5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010adb8:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010adbb:	8b 15 24 fd 1a c0    	mov    0xc01afd24,%edx
c010adc1:	83 c2 58             	add    $0x58,%edx
c010adc4:	39 d0                	cmp    %edx,%eax
c010adc6:	74 24                	je     c010adec <init_main+0x137>
c010adc8:	c7 44 24 0c 24 e9 10 	movl   $0xc010e924,0xc(%esp)
c010adcf:	c0 
c010add0:	c7 44 24 08 45 e6 10 	movl   $0xc010e645,0x8(%esp)
c010add7:	c0 
c010add8:	c7 44 24 04 63 03 00 	movl   $0x363,0x4(%esp)
c010addf:	00 
c010ade0:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010ade7:	e8 d0 5f ff ff       	call   c0100dbc <__panic>
c010adec:	c7 45 e4 70 1e 1b c0 	movl   $0xc01b1e70,-0x1c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010adf3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010adf6:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010adf8:	8b 15 24 fd 1a c0    	mov    0xc01afd24,%edx
c010adfe:	83 c2 58             	add    $0x58,%edx
c010ae01:	39 d0                	cmp    %edx,%eax
c010ae03:	74 24                	je     c010ae29 <init_main+0x174>
c010ae05:	c7 44 24 0c 54 e9 10 	movl   $0xc010e954,0xc(%esp)
c010ae0c:	c0 
c010ae0d:	c7 44 24 08 45 e6 10 	movl   $0xc010e645,0x8(%esp)
c010ae14:	c0 
c010ae15:	c7 44 24 04 64 03 00 	movl   $0x364,0x4(%esp)
c010ae1c:	00 
c010ae1d:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010ae24:	e8 93 5f ff ff       	call   c0100dbc <__panic>

    cprintf("init check memory pass.\n");
c010ae29:	c7 04 24 84 e9 10 c0 	movl   $0xc010e984,(%esp)
c010ae30:	e8 2e 55 ff ff       	call   c0100363 <cprintf>
    return 0;
c010ae35:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ae3a:	c9                   	leave  
c010ae3b:	c3                   	ret    

c010ae3c <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010ae3c:	55                   	push   %ebp
c010ae3d:	89 e5                	mov    %esp,%ebp
c010ae3f:	83 ec 28             	sub    $0x28,%esp
c010ae42:	c7 45 ec 70 1e 1b c0 	movl   $0xc01b1e70,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010ae49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae4c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ae4f:	89 50 04             	mov    %edx,0x4(%eax)
c010ae52:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae55:	8b 50 04             	mov    0x4(%eax),%edx
c010ae58:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae5b:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010ae5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010ae64:	eb 26                	jmp    c010ae8c <proc_init+0x50>
        list_init(hash_list + i);
c010ae66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae69:	c1 e0 03             	shl    $0x3,%eax
c010ae6c:	05 40 fd 1a c0       	add    $0xc01afd40,%eax
c010ae71:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ae74:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae77:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ae7a:	89 50 04             	mov    %edx,0x4(%eax)
c010ae7d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae80:	8b 50 04             	mov    0x4(%eax),%edx
c010ae83:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae86:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010ae88:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010ae8c:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010ae93:	7e d1                	jle    c010ae66 <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010ae95:	e8 71 e7 ff ff       	call   c010960b <alloc_proc>
c010ae9a:	a3 20 fd 1a c0       	mov    %eax,0xc01afd20
c010ae9f:	a1 20 fd 1a c0       	mov    0xc01afd20,%eax
c010aea4:	85 c0                	test   %eax,%eax
c010aea6:	75 1c                	jne    c010aec4 <proc_init+0x88>
        panic("cannot alloc idleproc.\n");
c010aea8:	c7 44 24 08 9d e9 10 	movl   $0xc010e99d,0x8(%esp)
c010aeaf:	c0 
c010aeb0:	c7 44 24 04 76 03 00 	movl   $0x376,0x4(%esp)
c010aeb7:	00 
c010aeb8:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010aebf:	e8 f8 5e ff ff       	call   c0100dbc <__panic>
    }

    idleproc->pid = 0;
c010aec4:	a1 20 fd 1a c0       	mov    0xc01afd20,%eax
c010aec9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010aed0:	a1 20 fd 1a c0       	mov    0xc01afd20,%eax
c010aed5:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010aedb:	a1 20 fd 1a c0       	mov    0xc01afd20,%eax
c010aee0:	ba 00 b0 12 c0       	mov    $0xc012b000,%edx
c010aee5:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010aee8:	a1 20 fd 1a c0       	mov    0xc01afd20,%eax
c010aeed:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010aef4:	a1 20 fd 1a c0       	mov    0xc01afd20,%eax
c010aef9:	c7 44 24 04 b5 e9 10 	movl   $0xc010e9b5,0x4(%esp)
c010af00:	c0 
c010af01:	89 04 24             	mov    %eax,(%esp)
c010af04:	e8 72 e8 ff ff       	call   c010977b <set_proc_name>
    nr_process ++;
c010af09:	a1 40 1d 1b c0       	mov    0xc01b1d40,%eax
c010af0e:	83 c0 01             	add    $0x1,%eax
c010af11:	a3 40 1d 1b c0       	mov    %eax,0xc01b1d40

    current = idleproc;
c010af16:	a1 20 fd 1a c0       	mov    0xc01afd20,%eax
c010af1b:	a3 28 fd 1a c0       	mov    %eax,0xc01afd28

    int pid = kernel_thread(init_main, NULL, 0);
c010af20:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010af27:	00 
c010af28:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010af2f:	00 
c010af30:	c7 04 24 b5 ac 10 c0 	movl   $0xc010acb5,(%esp)
c010af37:	e8 92 ec ff ff       	call   c0109bce <kernel_thread>
c010af3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010af3f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010af43:	7f 1c                	jg     c010af61 <proc_init+0x125>
        panic("create init_main failed.\n");
c010af45:	c7 44 24 08 ba e9 10 	movl   $0xc010e9ba,0x8(%esp)
c010af4c:	c0 
c010af4d:	c7 44 24 04 84 03 00 	movl   $0x384,0x4(%esp)
c010af54:	00 
c010af55:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010af5c:	e8 5b 5e ff ff       	call   c0100dbc <__panic>
    }

    initproc = find_proc(pid);
c010af61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af64:	89 04 24             	mov    %eax,(%esp)
c010af67:	e8 f0 eb ff ff       	call   c0109b5c <find_proc>
c010af6c:	a3 24 fd 1a c0       	mov    %eax,0xc01afd24
    set_proc_name(initproc, "init");
c010af71:	a1 24 fd 1a c0       	mov    0xc01afd24,%eax
c010af76:	c7 44 24 04 d4 e9 10 	movl   $0xc010e9d4,0x4(%esp)
c010af7d:	c0 
c010af7e:	89 04 24             	mov    %eax,(%esp)
c010af81:	e8 f5 e7 ff ff       	call   c010977b <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010af86:	a1 20 fd 1a c0       	mov    0xc01afd20,%eax
c010af8b:	85 c0                	test   %eax,%eax
c010af8d:	74 0c                	je     c010af9b <proc_init+0x15f>
c010af8f:	a1 20 fd 1a c0       	mov    0xc01afd20,%eax
c010af94:	8b 40 04             	mov    0x4(%eax),%eax
c010af97:	85 c0                	test   %eax,%eax
c010af99:	74 24                	je     c010afbf <proc_init+0x183>
c010af9b:	c7 44 24 0c dc e9 10 	movl   $0xc010e9dc,0xc(%esp)
c010afa2:	c0 
c010afa3:	c7 44 24 08 45 e6 10 	movl   $0xc010e645,0x8(%esp)
c010afaa:	c0 
c010afab:	c7 44 24 04 8a 03 00 	movl   $0x38a,0x4(%esp)
c010afb2:	00 
c010afb3:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010afba:	e8 fd 5d ff ff       	call   c0100dbc <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010afbf:	a1 24 fd 1a c0       	mov    0xc01afd24,%eax
c010afc4:	85 c0                	test   %eax,%eax
c010afc6:	74 0d                	je     c010afd5 <proc_init+0x199>
c010afc8:	a1 24 fd 1a c0       	mov    0xc01afd24,%eax
c010afcd:	8b 40 04             	mov    0x4(%eax),%eax
c010afd0:	83 f8 01             	cmp    $0x1,%eax
c010afd3:	74 24                	je     c010aff9 <proc_init+0x1bd>
c010afd5:	c7 44 24 0c 04 ea 10 	movl   $0xc010ea04,0xc(%esp)
c010afdc:	c0 
c010afdd:	c7 44 24 08 45 e6 10 	movl   $0xc010e645,0x8(%esp)
c010afe4:	c0 
c010afe5:	c7 44 24 04 8b 03 00 	movl   $0x38b,0x4(%esp)
c010afec:	00 
c010afed:	c7 04 24 18 e6 10 c0 	movl   $0xc010e618,(%esp)
c010aff4:	e8 c3 5d ff ff       	call   c0100dbc <__panic>
}
c010aff9:	c9                   	leave  
c010affa:	c3                   	ret    

c010affb <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010affb:	55                   	push   %ebp
c010affc:	89 e5                	mov    %esp,%ebp
c010affe:	83 ec 08             	sub    $0x8,%esp
c010b001:	eb 01                	jmp    c010b004 <cpu_idle+0x9>
    while (1) {
        if (current->need_resched) {
            schedule();
        }
    }
c010b003:	90                   	nop

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
    while (1) {
        if (current->need_resched) {
c010b004:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010b009:	8b 40 10             	mov    0x10(%eax),%eax
c010b00c:	85 c0                	test   %eax,%eax
c010b00e:	74 f3                	je     c010b003 <cpu_idle+0x8>
            schedule();
c010b010:	e8 ab 05 00 00       	call   c010b5c0 <schedule>
        }
    }
c010b015:	eb ec                	jmp    c010b003 <cpu_idle+0x8>

c010b017 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010b017:	55                   	push   %ebp
c010b018:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010b01a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b01e:	75 11                	jne    c010b031 <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010b020:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010b025:	c7 80 9c 00 00 00 01 	movl   $0x1,0x9c(%eax)
c010b02c:	00 00 00 
c010b02f:	eb 0e                	jmp    c010b03f <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010b031:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010b036:	8b 55 08             	mov    0x8(%ebp),%edx
c010b039:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
}
c010b03f:	5d                   	pop    %ebp
c010b040:	c3                   	ret    
c010b041:	00 00                	add    %al,(%eax)
	...

c010b044 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010b044:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010b048:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010b04a:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010b04d:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010b050:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010b053:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010b056:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010b059:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010b05c:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010b05f:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010b063:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010b066:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010b069:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010b06c:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010b06f:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010b072:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010b075:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010b078:	ff 30                	pushl  (%eax)

    ret
c010b07a:	c3                   	ret    
	...

c010b07c <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010b07c:	55                   	push   %ebp
c010b07d:	89 e5                	mov    %esp,%ebp
c010b07f:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010b082:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b086:	75 08                	jne    c010b090 <skew_heap_merge+0x14>
c010b088:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b08b:	e9 bd 00 00 00       	jmp    c010b14d <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010b090:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b094:	75 08                	jne    c010b09e <skew_heap_merge+0x22>
c010b096:	8b 45 08             	mov    0x8(%ebp),%eax
c010b099:	e9 af 00 00 00       	jmp    c010b14d <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010b09e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b0a1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b0a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0a8:	89 04 24             	mov    %eax,(%esp)
c010b0ab:	8b 45 10             	mov    0x10(%ebp),%eax
c010b0ae:	ff d0                	call   *%eax
c010b0b0:	83 f8 ff             	cmp    $0xffffffff,%eax
c010b0b3:	75 4d                	jne    c010b102 <skew_heap_merge+0x86>
     {
          r = a->left;
c010b0b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0b8:	8b 40 04             	mov    0x4(%eax),%eax
c010b0bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010b0be:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0c1:	8b 40 08             	mov    0x8(%eax),%eax
c010b0c4:	8b 55 10             	mov    0x10(%ebp),%edx
c010b0c7:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b0cb:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b0ce:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b0d2:	89 04 24             	mov    %eax,(%esp)
c010b0d5:	e8 a2 ff ff ff       	call   c010b07c <skew_heap_merge>
c010b0da:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010b0dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0e0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b0e3:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010b0e6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b0ec:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010b0ef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b0f3:	74 08                	je     c010b0fd <skew_heap_merge+0x81>
c010b0f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0f8:	8b 55 08             	mov    0x8(%ebp),%edx
c010b0fb:	89 10                	mov    %edx,(%eax)

          return a;
c010b0fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010b100:	eb 4b                	jmp    c010b14d <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010b102:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b105:	8b 40 04             	mov    0x4(%eax),%eax
c010b108:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010b10b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b10e:	8b 40 08             	mov    0x8(%eax),%eax
c010b111:	8b 55 10             	mov    0x10(%ebp),%edx
c010b114:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b118:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b11c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b11f:	89 04 24             	mov    %eax,(%esp)
c010b122:	e8 55 ff ff ff       	call   c010b07c <skew_heap_merge>
c010b127:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010b12a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b12d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b130:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010b133:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b136:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b139:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010b13c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b140:	74 08                	je     c010b14a <skew_heap_merge+0xce>
c010b142:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b145:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b148:	89 10                	mov    %edx,(%eax)

          return b;
c010b14a:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010b14d:	c9                   	leave  
c010b14e:	c3                   	ret    

c010b14f <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010b14f:	55                   	push   %ebp
c010b150:	89 e5                	mov    %esp,%ebp
c010b152:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010b155:	8b 45 08             	mov    0x8(%ebp),%eax
c010b158:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010b15d:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010b160:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b163:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010b168:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010b16b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b16e:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010b174:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b177:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010b17d:	89 d1                	mov    %edx,%ecx
c010b17f:	29 c1                	sub    %eax,%ecx
c010b181:	89 c8                	mov    %ecx,%eax
c010b183:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010b186:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b18a:	7e 07                	jle    c010b193 <proc_stride_comp_f+0x44>
c010b18c:	b8 01 00 00 00       	mov    $0x1,%eax
c010b191:	eb 12                	jmp    c010b1a5 <proc_stride_comp_f+0x56>
     else if (c == 0) return 0;
c010b193:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b197:	75 07                	jne    c010b1a0 <proc_stride_comp_f+0x51>
c010b199:	b8 00 00 00 00       	mov    $0x0,%eax
c010b19e:	eb 05                	jmp    c010b1a5 <proc_stride_comp_f+0x56>
     else return -1;
c010b1a0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010b1a5:	c9                   	leave  
c010b1a6:	c3                   	ret    

c010b1a7 <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010b1a7:	55                   	push   %ebp
c010b1a8:	89 e5                	mov    %esp,%ebp
c010b1aa:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: 2011010312
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0       
      */
     list_init(&(rq->run_list));
c010b1ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1b0:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010b1b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b1b6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010b1b9:	89 50 04             	mov    %edx,0x4(%eax)
c010b1bc:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b1bf:	8b 50 04             	mov    0x4(%eax),%edx
c010b1c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b1c5:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL;
c010b1c7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1ca:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0;
c010b1d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1d4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010b1db:	c9                   	leave  
c010b1dc:	c3                   	ret    

c010b1dd <stride_enqueue>:
 * 
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010b1dd:	55                   	push   %ebp
c010b1de:	89 e5                	mov    %esp,%ebp
c010b1e0:	83 ec 28             	sub    $0x28,%esp
      *         list_add_before: insert  a entry into the last of list   
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
     rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010b1e3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b1e6:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
c010b1ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010b1ef:	8b 40 10             	mov    0x10(%eax),%eax
c010b1f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b1f5:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010b1f8:	c7 45 ec 4f b1 10 c0 	movl   $0xc010b14f,-0x14(%ebp)
c010b1ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b202:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010b205:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b208:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010b20e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b211:	8b 10                	mov    (%eax),%edx
c010b213:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b216:	89 50 08             	mov    %edx,0x8(%eax)
c010b219:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b21c:	8b 50 08             	mov    0x8(%eax),%edx
c010b21f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b222:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010b225:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b228:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b22c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b22f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b233:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b236:	89 04 24             	mov    %eax,(%esp)
c010b239:	e8 3e fe ff ff       	call   c010b07c <skew_heap_merge>
c010b23e:	89 c2                	mov    %eax,%edx
c010b240:	8b 45 08             	mov    0x8(%ebp),%eax
c010b243:	89 50 10             	mov    %edx,0x10(%eax)
     proc->time_slice = rq->max_time_slice;
c010b246:	8b 45 08             	mov    0x8(%ebp),%eax
c010b249:	8b 50 0c             	mov    0xc(%eax),%edx
c010b24c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b24f:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
     proc->rq = rq;
c010b255:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b258:	8b 55 08             	mov    0x8(%ebp),%edx
c010b25b:	89 50 7c             	mov    %edx,0x7c(%eax)
     ++(rq->proc_num);
c010b25e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b261:	8b 40 08             	mov    0x8(%eax),%eax
c010b264:	8d 50 01             	lea    0x1(%eax),%edx
c010b267:	8b 45 08             	mov    0x8(%ebp),%eax
c010b26a:	89 50 08             	mov    %edx,0x8(%eax)
}
c010b26d:	c9                   	leave  
c010b26e:	c3                   	ret    

c010b26f <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010b26f:	55                   	push   %ebp
c010b270:	89 e5                	mov    %esp,%ebp
c010b272:	83 ec 38             	sub    $0x38,%esp
      * (1) remove the proc from rq correctly
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
     rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &proc->lab6_run_pool, proc_stride_comp_f);
c010b275:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b278:	8d 90 8c 00 00 00    	lea    0x8c(%eax),%edx
c010b27e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b281:	8b 40 10             	mov    0x10(%eax),%eax
c010b284:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b287:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010b28a:	c7 45 ec 4f b1 10 c0 	movl   $0xc010b14f,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010b291:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b294:	8b 00                	mov    (%eax),%eax
c010b296:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010b299:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b29c:	8b 50 08             	mov    0x8(%eax),%edx
c010b29f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2a2:	8b 40 04             	mov    0x4(%eax),%eax
c010b2a5:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010b2a8:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010b2ac:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b2b0:	89 04 24             	mov    %eax,(%esp)
c010b2b3:	e8 c4 fd ff ff       	call   c010b07c <skew_heap_merge>
c010b2b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010b2bb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010b2bf:	74 08                	je     c010b2c9 <stride_dequeue+0x5a>
c010b2c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b2c4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b2c7:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010b2c9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010b2cd:	74 24                	je     c010b2f3 <stride_dequeue+0x84>
     {
          if (p->left == b)
c010b2cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b2d2:	8b 40 04             	mov    0x4(%eax),%eax
c010b2d5:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010b2d8:	75 0b                	jne    c010b2e5 <stride_dequeue+0x76>
               p->left = rep;
c010b2da:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b2dd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b2e0:	89 50 04             	mov    %edx,0x4(%eax)
c010b2e3:	eb 09                	jmp    c010b2ee <stride_dequeue+0x7f>
          else p->right = rep;
c010b2e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b2e8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b2eb:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010b2ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2f1:	eb 03                	jmp    c010b2f6 <stride_dequeue+0x87>
     }
     else return rep;
c010b2f3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b2f6:	89 c2                	mov    %eax,%edx
c010b2f8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2fb:	89 50 10             	mov    %edx,0x10(%eax)
     proc->rq = NULL;
c010b2fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b301:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
     --(rq->proc_num);
c010b308:	8b 45 08             	mov    0x8(%ebp),%eax
c010b30b:	8b 40 08             	mov    0x8(%eax),%eax
c010b30e:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b311:	8b 45 08             	mov    0x8(%ebp),%eax
c010b314:	89 50 08             	mov    %edx,0x8(%eax)
}
c010b317:	c9                   	leave  
c010b318:	c3                   	ret    

c010b319 <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010b319:	55                   	push   %ebp
c010b31a:	89 e5                	mov    %esp,%ebp
c010b31c:	53                   	push   %ebx
c010b31d:	83 ec 14             	sub    $0x14,%esp
             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
             (1.2) If using list, we have to search list to find the p with minimum stride value
      * (2) update p;s stride value: p->lab6_stride
      * (3) return p
      */
     if (rq->lab6_run_pool == NULL)
c010b320:	8b 45 08             	mov    0x8(%ebp),%eax
c010b323:	8b 40 10             	mov    0x10(%eax),%eax
c010b326:	85 c0                	test   %eax,%eax
c010b328:	75 07                	jne    c010b331 <stride_pick_next+0x18>
          return NULL;
c010b32a:	b8 00 00 00 00       	mov    $0x0,%eax
c010b32f:	eb 66                	jmp    c010b397 <stride_pick_next+0x7e>
     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010b331:	8b 45 08             	mov    0x8(%ebp),%eax
c010b334:	8b 40 10             	mov    0x10(%eax),%eax
c010b337:	2d 8c 00 00 00       	sub    $0x8c,%eax
c010b33c:	89 45 f8             	mov    %eax,-0x8(%ebp)
     if (p->lab6_priority == 0)
c010b33f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b342:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b348:	85 c0                	test   %eax,%eax
c010b34a:	75 1a                	jne    c010b366 <stride_pick_next+0x4d>
          p->lab6_stride += BIG_STRIDE;
c010b34c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b34f:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010b355:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010b35b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b35e:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
c010b364:	eb 2e                	jmp    c010b394 <stride_pick_next+0x7b>
     else
          p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010b366:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b369:	8b 88 98 00 00 00    	mov    0x98(%eax),%ecx
c010b36f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b372:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b378:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b37b:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010b380:	ba 00 00 00 00       	mov    $0x0,%edx
c010b385:	f7 75 e8             	divl   -0x18(%ebp)
c010b388:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010b38b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b38e:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
     return p;
c010b394:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010b397:	83 c4 14             	add    $0x14,%esp
c010b39a:	5b                   	pop    %ebx
c010b39b:	5d                   	pop    %ebp
c010b39c:	c3                   	ret    

c010b39d <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010b39d:	55                   	push   %ebp
c010b39e:	89 e5                	mov    %esp,%ebp
     /* LAB6: 2011010312 */
     if (proc->time_slice > 0) {
c010b3a0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3a3:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b3a9:	85 c0                	test   %eax,%eax
c010b3ab:	7e 15                	jle    c010b3c2 <stride_proc_tick+0x25>
          --(proc->time_slice);
c010b3ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3b0:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b3b6:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b3b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3bc:	89 90 88 00 00 00    	mov    %edx,0x88(%eax)
     }
     if (proc->time_slice == 0) {
c010b3c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3c5:	8b 80 88 00 00 00    	mov    0x88(%eax),%eax
c010b3cb:	85 c0                	test   %eax,%eax
c010b3cd:	75 0a                	jne    c010b3d9 <stride_proc_tick+0x3c>
          proc->need_resched = 1;
c010b3cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b3d2:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
     }
}
c010b3d9:	5d                   	pop    %ebp
c010b3da:	c3                   	ret    
	...

c010b3dc <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010b3dc:	55                   	push   %ebp
c010b3dd:	89 e5                	mov    %esp,%ebp
c010b3df:	53                   	push   %ebx
c010b3e0:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010b3e3:	9c                   	pushf  
c010b3e4:	5b                   	pop    %ebx
c010b3e5:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c010b3e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010b3eb:	25 00 02 00 00       	and    $0x200,%eax
c010b3f0:	85 c0                	test   %eax,%eax
c010b3f2:	74 0c                	je     c010b400 <__intr_save+0x24>
        intr_disable();
c010b3f4:	e8 f1 6c ff ff       	call   c01020ea <intr_disable>
        return 1;
c010b3f9:	b8 01 00 00 00       	mov    $0x1,%eax
c010b3fe:	eb 05                	jmp    c010b405 <__intr_save+0x29>
    }
    return 0;
c010b400:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b405:	83 c4 14             	add    $0x14,%esp
c010b408:	5b                   	pop    %ebx
c010b409:	5d                   	pop    %ebp
c010b40a:	c3                   	ret    

c010b40b <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010b40b:	55                   	push   %ebp
c010b40c:	89 e5                	mov    %esp,%ebp
c010b40e:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010b411:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b415:	74 05                	je     c010b41c <__intr_restore+0x11>
        intr_enable();
c010b417:	e8 c8 6c ff ff       	call   c01020e4 <intr_enable>
    }
}
c010b41c:	c9                   	leave  
c010b41d:	c3                   	ret    

c010b41e <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010b41e:	55                   	push   %ebp
c010b41f:	89 e5                	mov    %esp,%ebp
c010b421:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010b424:	a1 20 fd 1a c0       	mov    0xc01afd20,%eax
c010b429:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b42c:	74 19                	je     c010b447 <sched_class_enqueue+0x29>
        sched_class->enqueue(rq, proc);
c010b42e:	a1 5c 1d 1b c0       	mov    0xc01b1d5c,%eax
c010b433:	8b 48 08             	mov    0x8(%eax),%ecx
c010b436:	a1 60 1d 1b c0       	mov    0xc01b1d60,%eax
c010b43b:	8b 55 08             	mov    0x8(%ebp),%edx
c010b43e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b442:	89 04 24             	mov    %eax,(%esp)
c010b445:	ff d1                	call   *%ecx
    }
}
c010b447:	c9                   	leave  
c010b448:	c3                   	ret    

c010b449 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010b449:	55                   	push   %ebp
c010b44a:	89 e5                	mov    %esp,%ebp
c010b44c:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010b44f:	a1 5c 1d 1b c0       	mov    0xc01b1d5c,%eax
c010b454:	8b 48 0c             	mov    0xc(%eax),%ecx
c010b457:	a1 60 1d 1b c0       	mov    0xc01b1d60,%eax
c010b45c:	8b 55 08             	mov    0x8(%ebp),%edx
c010b45f:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b463:	89 04 24             	mov    %eax,(%esp)
c010b466:	ff d1                	call   *%ecx
}
c010b468:	c9                   	leave  
c010b469:	c3                   	ret    

c010b46a <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010b46a:	55                   	push   %ebp
c010b46b:	89 e5                	mov    %esp,%ebp
c010b46d:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010b470:	a1 5c 1d 1b c0       	mov    0xc01b1d5c,%eax
c010b475:	8b 50 10             	mov    0x10(%eax),%edx
c010b478:	a1 60 1d 1b c0       	mov    0xc01b1d60,%eax
c010b47d:	89 04 24             	mov    %eax,(%esp)
c010b480:	ff d2                	call   *%edx
}
c010b482:	c9                   	leave  
c010b483:	c3                   	ret    

c010b484 <sched_class_proc_tick>:

void
sched_class_proc_tick(struct proc_struct *proc) {
c010b484:	55                   	push   %ebp
c010b485:	89 e5                	mov    %esp,%ebp
c010b487:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010b48a:	a1 20 fd 1a c0       	mov    0xc01afd20,%eax
c010b48f:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b492:	74 1b                	je     c010b4af <sched_class_proc_tick+0x2b>
        sched_class->proc_tick(rq, proc);
c010b494:	a1 5c 1d 1b c0       	mov    0xc01b1d5c,%eax
c010b499:	8b 48 14             	mov    0x14(%eax),%ecx
c010b49c:	a1 60 1d 1b c0       	mov    0xc01b1d60,%eax
c010b4a1:	8b 55 08             	mov    0x8(%ebp),%edx
c010b4a4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b4a8:	89 04 24             	mov    %eax,(%esp)
c010b4ab:	ff d1                	call   *%ecx
c010b4ad:	eb 0a                	jmp    c010b4b9 <sched_class_proc_tick+0x35>
    }
    else {
        proc->need_resched = 1;
c010b4af:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4b2:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010b4b9:	c9                   	leave  
c010b4ba:	c3                   	ret    

c010b4bb <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010b4bb:	55                   	push   %ebp
c010b4bc:	89 e5                	mov    %esp,%ebp
c010b4be:	83 ec 28             	sub    $0x28,%esp
c010b4c1:	c7 45 f4 54 1d 1b c0 	movl   $0xc01b1d54,-0xc(%ebp)
c010b4c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b4ce:	89 50 04             	mov    %edx,0x4(%eax)
c010b4d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4d4:	8b 50 04             	mov    0x4(%eax),%edx
c010b4d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b4da:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010b4dc:	c7 05 5c 1d 1b c0 88 	movl   $0xc012da88,0xc01b1d5c
c010b4e3:	da 12 c0 

    rq = &__rq;
c010b4e6:	c7 05 60 1d 1b c0 64 	movl   $0xc01b1d64,0xc01b1d60
c010b4ed:	1d 1b c0 
    rq->max_time_slice = MAX_TIME_SLICE;
c010b4f0:	a1 60 1d 1b c0       	mov    0xc01b1d60,%eax
c010b4f5:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010b4fc:	a1 5c 1d 1b c0       	mov    0xc01b1d5c,%eax
c010b501:	8b 50 04             	mov    0x4(%eax),%edx
c010b504:	a1 60 1d 1b c0       	mov    0xc01b1d60,%eax
c010b509:	89 04 24             	mov    %eax,(%esp)
c010b50c:	ff d2                	call   *%edx

    cprintf("sched class: %s\n", sched_class->name);
c010b50e:	a1 5c 1d 1b c0       	mov    0xc01b1d5c,%eax
c010b513:	8b 00                	mov    (%eax),%eax
c010b515:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b519:	c7 04 24 3c ea 10 c0 	movl   $0xc010ea3c,(%esp)
c010b520:	e8 3e 4e ff ff       	call   c0100363 <cprintf>
}
c010b525:	c9                   	leave  
c010b526:	c3                   	ret    

c010b527 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010b527:	55                   	push   %ebp
c010b528:	89 e5                	mov    %esp,%ebp
c010b52a:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010b52d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b530:	8b 00                	mov    (%eax),%eax
c010b532:	83 f8 03             	cmp    $0x3,%eax
c010b535:	75 24                	jne    c010b55b <wakeup_proc+0x34>
c010b537:	c7 44 24 0c 4d ea 10 	movl   $0xc010ea4d,0xc(%esp)
c010b53e:	c0 
c010b53f:	c7 44 24 08 68 ea 10 	movl   $0xc010ea68,0x8(%esp)
c010b546:	c0 
c010b547:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010b54e:	00 
c010b54f:	c7 04 24 7d ea 10 c0 	movl   $0xc010ea7d,(%esp)
c010b556:	e8 61 58 ff ff       	call   c0100dbc <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010b55b:	e8 7c fe ff ff       	call   c010b3dc <__intr_save>
c010b560:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010b563:	8b 45 08             	mov    0x8(%ebp),%eax
c010b566:	8b 00                	mov    (%eax),%eax
c010b568:	83 f8 02             	cmp    $0x2,%eax
c010b56b:	74 2a                	je     c010b597 <wakeup_proc+0x70>
            proc->state = PROC_RUNNABLE;
c010b56d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b570:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010b576:	8b 45 08             	mov    0x8(%ebp),%eax
c010b579:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
            if (proc != current) {
c010b580:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010b585:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b588:	74 29                	je     c010b5b3 <wakeup_proc+0x8c>
                sched_class_enqueue(proc);
c010b58a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b58d:	89 04 24             	mov    %eax,(%esp)
c010b590:	e8 89 fe ff ff       	call   c010b41e <sched_class_enqueue>
c010b595:	eb 1c                	jmp    c010b5b3 <wakeup_proc+0x8c>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010b597:	c7 44 24 08 93 ea 10 	movl   $0xc010ea93,0x8(%esp)
c010b59e:	c0 
c010b59f:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c010b5a6:	00 
c010b5a7:	c7 04 24 7d ea 10 c0 	movl   $0xc010ea7d,(%esp)
c010b5ae:	e8 78 58 ff ff       	call   c0100e2b <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010b5b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b5b6:	89 04 24             	mov    %eax,(%esp)
c010b5b9:	e8 4d fe ff ff       	call   c010b40b <__intr_restore>
}
c010b5be:	c9                   	leave  
c010b5bf:	c3                   	ret    

c010b5c0 <schedule>:

void
schedule(void) {
c010b5c0:	55                   	push   %ebp
c010b5c1:	89 e5                	mov    %esp,%ebp
c010b5c3:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010b5c6:	e8 11 fe ff ff       	call   c010b3dc <__intr_save>
c010b5cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010b5ce:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010b5d3:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010b5da:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010b5df:	8b 00                	mov    (%eax),%eax
c010b5e1:	83 f8 02             	cmp    $0x2,%eax
c010b5e4:	75 0d                	jne    c010b5f3 <schedule+0x33>
            sched_class_enqueue(current);
c010b5e6:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010b5eb:	89 04 24             	mov    %eax,(%esp)
c010b5ee:	e8 2b fe ff ff       	call   c010b41e <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010b5f3:	e8 72 fe ff ff       	call   c010b46a <sched_class_pick_next>
c010b5f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b5fb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b5ff:	74 0b                	je     c010b60c <schedule+0x4c>
            sched_class_dequeue(next);
c010b601:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b604:	89 04 24             	mov    %eax,(%esp)
c010b607:	e8 3d fe ff ff       	call   c010b449 <sched_class_dequeue>
        }
        if (next == NULL) {
c010b60c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b610:	75 08                	jne    c010b61a <schedule+0x5a>
            next = idleproc;
c010b612:	a1 20 fd 1a c0       	mov    0xc01afd20,%eax
c010b617:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010b61a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b61d:	8b 40 08             	mov    0x8(%eax),%eax
c010b620:	8d 50 01             	lea    0x1(%eax),%edx
c010b623:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b626:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010b629:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010b62e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010b631:	74 0b                	je     c010b63e <schedule+0x7e>
            proc_run(next);
c010b633:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b636:	89 04 24             	mov    %eax,(%esp)
c010b639:	e8 e2 e3 ff ff       	call   c0109a20 <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010b63e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b641:	89 04 24             	mov    %eax,(%esp)
c010b644:	e8 c2 fd ff ff       	call   c010b40b <__intr_restore>
}
c010b649:	c9                   	leave  
c010b64a:	c3                   	ret    
	...

c010b64c <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010b64c:	55                   	push   %ebp
c010b64d:	89 e5                	mov    %esp,%ebp
c010b64f:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010b652:	8b 45 08             	mov    0x8(%ebp),%eax
c010b655:	8b 00                	mov    (%eax),%eax
c010b657:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010b65a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b65d:	89 04 24             	mov    %eax,(%esp)
c010b660:	e8 31 ea ff ff       	call   c010a096 <do_exit>
}
c010b665:	c9                   	leave  
c010b666:	c3                   	ret    

c010b667 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010b667:	55                   	push   %ebp
c010b668:	89 e5                	mov    %esp,%ebp
c010b66a:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010b66d:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010b672:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b675:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010b678:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b67b:	8b 40 44             	mov    0x44(%eax),%eax
c010b67e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010b681:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b684:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b688:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b68b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b68f:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010b696:	e8 ca e8 ff ff       	call   c0109f65 <do_fork>
}
c010b69b:	c9                   	leave  
c010b69c:	c3                   	ret    

c010b69d <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010b69d:	55                   	push   %ebp
c010b69e:	89 e5                	mov    %esp,%ebp
c010b6a0:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010b6a3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6a6:	8b 00                	mov    (%eax),%eax
c010b6a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010b6ab:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6ae:	83 c0 04             	add    $0x4,%eax
c010b6b1:	8b 00                	mov    (%eax),%eax
c010b6b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010b6b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6b9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b6bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b6c0:	89 04 24             	mov    %eax,(%esp)
c010b6c3:	e8 5e f3 ff ff       	call   c010aa26 <do_wait>
}
c010b6c8:	c9                   	leave  
c010b6c9:	c3                   	ret    

c010b6ca <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010b6ca:	55                   	push   %ebp
c010b6cb:	89 e5                	mov    %esp,%ebp
c010b6cd:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010b6d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6d3:	8b 00                	mov    (%eax),%eax
c010b6d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010b6d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6db:	8b 40 04             	mov    0x4(%eax),%eax
c010b6de:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010b6e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6e4:	83 c0 08             	add    $0x8,%eax
c010b6e7:	8b 00                	mov    (%eax),%eax
c010b6e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010b6ec:	8b 45 08             	mov    0x8(%ebp),%eax
c010b6ef:	8b 40 0c             	mov    0xc(%eax),%eax
c010b6f2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010b6f5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b6f8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b6fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b6ff:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b703:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b706:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b70a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b70d:	89 04 24             	mov    %eax,(%esp)
c010b710:	e8 c3 f1 ff ff       	call   c010a8d8 <do_execve>
}
c010b715:	c9                   	leave  
c010b716:	c3                   	ret    

c010b717 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010b717:	55                   	push   %ebp
c010b718:	89 e5                	mov    %esp,%ebp
c010b71a:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010b71d:	e8 ee f2 ff ff       	call   c010aa10 <do_yield>
}
c010b722:	c9                   	leave  
c010b723:	c3                   	ret    

c010b724 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010b724:	55                   	push   %ebp
c010b725:	89 e5                	mov    %esp,%ebp
c010b727:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010b72a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b72d:	8b 00                	mov    (%eax),%eax
c010b72f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010b732:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b735:	89 04 24             	mov    %eax,(%esp)
c010b738:	e8 79 f4 ff ff       	call   c010abb6 <do_kill>
}
c010b73d:	c9                   	leave  
c010b73e:	c3                   	ret    

c010b73f <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010b73f:	55                   	push   %ebp
c010b740:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010b742:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010b747:	8b 40 04             	mov    0x4(%eax),%eax
}
c010b74a:	5d                   	pop    %ebp
c010b74b:	c3                   	ret    

c010b74c <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010b74c:	55                   	push   %ebp
c010b74d:	89 e5                	mov    %esp,%ebp
c010b74f:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010b752:	8b 45 08             	mov    0x8(%ebp),%eax
c010b755:	8b 00                	mov    (%eax),%eax
c010b757:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010b75a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b75d:	89 04 24             	mov    %eax,(%esp)
c010b760:	e8 26 4c ff ff       	call   c010038b <cputchar>
    return 0;
c010b765:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b76a:	c9                   	leave  
c010b76b:	c3                   	ret    

c010b76c <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010b76c:	55                   	push   %ebp
c010b76d:	89 e5                	mov    %esp,%ebp
c010b76f:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010b772:	e8 ab b4 ff ff       	call   c0106c22 <print_pgdir>
    return 0;
c010b777:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b77c:	c9                   	leave  
c010b77d:	c3                   	ret    

c010b77e <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010b77e:	55                   	push   %ebp
c010b77f:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010b781:	a1 78 1d 1b c0       	mov    0xc01b1d78,%eax
}
c010b786:	5d                   	pop    %ebp
c010b787:	c3                   	ret    

c010b788 <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010b788:	55                   	push   %ebp
c010b789:	89 e5                	mov    %esp,%ebp
c010b78b:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010b78e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b791:	8b 00                	mov    (%eax),%eax
c010b793:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010b796:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b799:	89 04 24             	mov    %eax,(%esp)
c010b79c:	e8 76 f8 ff ff       	call   c010b017 <lab6_set_priority>
    return 0;
c010b7a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b7a6:	c9                   	leave  
c010b7a7:	c3                   	ret    

c010b7a8 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010b7a8:	55                   	push   %ebp
c010b7a9:	89 e5                	mov    %esp,%ebp
c010b7ab:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010b7ae:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010b7b3:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b7b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010b7b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7bc:	8b 40 1c             	mov    0x1c(%eax),%eax
c010b7bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010b7c2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b7c6:	78 60                	js     c010b828 <syscall+0x80>
c010b7c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7cb:	3d ff 00 00 00       	cmp    $0xff,%eax
c010b7d0:	77 56                	ja     c010b828 <syscall+0x80>
        if (syscalls[num] != NULL) {
c010b7d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b7d5:	8b 04 85 a0 da 12 c0 	mov    -0x3fed2560(,%eax,4),%eax
c010b7dc:	85 c0                	test   %eax,%eax
c010b7de:	74 48                	je     c010b828 <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010b7e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7e3:	8b 40 14             	mov    0x14(%eax),%eax
c010b7e6:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010b7e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7ec:	8b 40 18             	mov    0x18(%eax),%eax
c010b7ef:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010b7f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7f5:	8b 40 10             	mov    0x10(%eax),%eax
c010b7f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010b7fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b7fe:	8b 00                	mov    (%eax),%eax
c010b800:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010b803:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b806:	8b 40 04             	mov    0x4(%eax),%eax
c010b809:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010b80c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b80f:	8b 14 85 a0 da 12 c0 	mov    -0x3fed2560(,%eax,4),%edx
c010b816:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010b819:	89 04 24             	mov    %eax,(%esp)
c010b81c:	ff d2                	call   *%edx
c010b81e:	89 c2                	mov    %eax,%edx
c010b820:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b823:	89 50 1c             	mov    %edx,0x1c(%eax)
        }
    }
    print_trapframe(tf);
    panic("undefined syscall %d, pid = %d, name = %s.\n",
            num, current->pid, current->name);
}
c010b826:	c9                   	leave  
c010b827:	c3                   	ret    
            arg[4] = tf->tf_regs.reg_esi;
            tf->tf_regs.reg_eax = syscalls[num](arg);
            return ;
        }
    }
    print_trapframe(tf);
c010b828:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b82b:	89 04 24             	mov    %eax,(%esp)
c010b82e:	e8 7b 6c ff ff       	call   c01024ae <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010b833:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010b838:	8d 50 48             	lea    0x48(%eax),%edx
c010b83b:	a1 28 fd 1a c0       	mov    0xc01afd28,%eax
c010b840:	8b 40 04             	mov    0x4(%eax),%eax
c010b843:	89 54 24 14          	mov    %edx,0x14(%esp)
c010b847:	89 44 24 10          	mov    %eax,0x10(%esp)
c010b84b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b84e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b852:	c7 44 24 08 b0 ea 10 	movl   $0xc010eab0,0x8(%esp)
c010b859:	c0 
c010b85a:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c010b861:	00 
c010b862:	c7 04 24 dc ea 10 c0 	movl   $0xc010eadc,(%esp)
c010b869:	e8 4e 55 ff ff       	call   c0100dbc <__panic>
	...

c010b870 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010b870:	55                   	push   %ebp
c010b871:	89 e5                	mov    %esp,%ebp
c010b873:	53                   	push   %ebx
c010b874:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010b877:	8b 45 08             	mov    0x8(%ebp),%eax
c010b87a:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010b880:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return (hash >> (32 - bits));
c010b883:	b8 20 00 00 00       	mov    $0x20,%eax
c010b888:	2b 45 0c             	sub    0xc(%ebp),%eax
c010b88b:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010b88e:	89 d3                	mov    %edx,%ebx
c010b890:	89 c1                	mov    %eax,%ecx
c010b892:	d3 eb                	shr    %cl,%ebx
c010b894:	89 d8                	mov    %ebx,%eax
}
c010b896:	83 c4 10             	add    $0x10,%esp
c010b899:	5b                   	pop    %ebx
c010b89a:	5d                   	pop    %ebp
c010b89b:	c3                   	ret    

c010b89c <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010b89c:	55                   	push   %ebp
c010b89d:	89 e5                	mov    %esp,%ebp
c010b89f:	56                   	push   %esi
c010b8a0:	53                   	push   %ebx
c010b8a1:	83 ec 60             	sub    $0x60,%esp
c010b8a4:	8b 45 10             	mov    0x10(%ebp),%eax
c010b8a7:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b8aa:	8b 45 14             	mov    0x14(%ebp),%eax
c010b8ad:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010b8b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b8b3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b8b6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b8b9:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010b8bc:	8b 45 18             	mov    0x18(%ebp),%eax
c010b8bf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010b8c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b8c5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b8c8:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010b8cb:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010b8ce:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010b8d1:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010b8d4:	89 d3                	mov    %edx,%ebx
c010b8d6:	89 c6                	mov    %eax,%esi
c010b8d8:	89 75 e0             	mov    %esi,-0x20(%ebp)
c010b8db:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010b8de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b8e4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b8e8:	74 1c                	je     c010b906 <printnum+0x6a>
c010b8ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8ed:	ba 00 00 00 00       	mov    $0x0,%edx
c010b8f2:	f7 75 e4             	divl   -0x1c(%ebp)
c010b8f5:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010b8f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8fb:	ba 00 00 00 00       	mov    $0x0,%edx
c010b900:	f7 75 e4             	divl   -0x1c(%ebp)
c010b903:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b906:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010b909:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b90c:	89 d6                	mov    %edx,%esi
c010b90e:	89 c3                	mov    %eax,%ebx
c010b910:	89 f0                	mov    %esi,%eax
c010b912:	89 da                	mov    %ebx,%edx
c010b914:	f7 75 e4             	divl   -0x1c(%ebp)
c010b917:	89 d3                	mov    %edx,%ebx
c010b919:	89 c6                	mov    %eax,%esi
c010b91b:	89 75 e0             	mov    %esi,-0x20(%ebp)
c010b91e:	89 5d dc             	mov    %ebx,-0x24(%ebp)
c010b921:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b924:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010b927:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b92a:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c010b92d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010b930:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010b933:	89 c3                	mov    %eax,%ebx
c010b935:	89 d6                	mov    %edx,%esi
c010b937:	89 5d e8             	mov    %ebx,-0x18(%ebp)
c010b93a:	89 75 ec             	mov    %esi,-0x14(%ebp)
c010b93d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b940:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010b943:	8b 45 18             	mov    0x18(%ebp),%eax
c010b946:	ba 00 00 00 00       	mov    $0x0,%edx
c010b94b:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010b94e:	77 56                	ja     c010b9a6 <printnum+0x10a>
c010b950:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010b953:	72 05                	jb     c010b95a <printnum+0xbe>
c010b955:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010b958:	77 4c                	ja     c010b9a6 <printnum+0x10a>
        printnum(putch, putdat, result, base, width - 1, padc);
c010b95a:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010b95d:	8d 50 ff             	lea    -0x1(%eax),%edx
c010b960:	8b 45 20             	mov    0x20(%ebp),%eax
c010b963:	89 44 24 18          	mov    %eax,0x18(%esp)
c010b967:	89 54 24 14          	mov    %edx,0x14(%esp)
c010b96b:	8b 45 18             	mov    0x18(%ebp),%eax
c010b96e:	89 44 24 10          	mov    %eax,0x10(%esp)
c010b972:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b975:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b978:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b97c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010b980:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b983:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b987:	8b 45 08             	mov    0x8(%ebp),%eax
c010b98a:	89 04 24             	mov    %eax,(%esp)
c010b98d:	e8 0a ff ff ff       	call   c010b89c <printnum>
c010b992:	eb 1c                	jmp    c010b9b0 <printnum+0x114>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010b994:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b997:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b99b:	8b 45 20             	mov    0x20(%ebp),%eax
c010b99e:	89 04 24             	mov    %eax,(%esp)
c010b9a1:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9a4:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010b9a6:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010b9aa:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010b9ae:	7f e4                	jg     c010b994 <printnum+0xf8>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010b9b0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b9b3:	05 04 ec 10 c0       	add    $0xc010ec04,%eax
c010b9b8:	0f b6 00             	movzbl (%eax),%eax
c010b9bb:	0f be c0             	movsbl %al,%eax
c010b9be:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b9c1:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b9c5:	89 04 24             	mov    %eax,(%esp)
c010b9c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9cb:	ff d0                	call   *%eax
}
c010b9cd:	83 c4 60             	add    $0x60,%esp
c010b9d0:	5b                   	pop    %ebx
c010b9d1:	5e                   	pop    %esi
c010b9d2:	5d                   	pop    %ebp
c010b9d3:	c3                   	ret    

c010b9d4 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010b9d4:	55                   	push   %ebp
c010b9d5:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010b9d7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010b9db:	7e 14                	jle    c010b9f1 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010b9dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9e0:	8b 00                	mov    (%eax),%eax
c010b9e2:	8d 48 08             	lea    0x8(%eax),%ecx
c010b9e5:	8b 55 08             	mov    0x8(%ebp),%edx
c010b9e8:	89 0a                	mov    %ecx,(%edx)
c010b9ea:	8b 50 04             	mov    0x4(%eax),%edx
c010b9ed:	8b 00                	mov    (%eax),%eax
c010b9ef:	eb 30                	jmp    c010ba21 <getuint+0x4d>
    }
    else if (lflag) {
c010b9f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b9f5:	74 16                	je     c010ba0d <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010b9f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010b9fa:	8b 00                	mov    (%eax),%eax
c010b9fc:	8d 48 04             	lea    0x4(%eax),%ecx
c010b9ff:	8b 55 08             	mov    0x8(%ebp),%edx
c010ba02:	89 0a                	mov    %ecx,(%edx)
c010ba04:	8b 00                	mov    (%eax),%eax
c010ba06:	ba 00 00 00 00       	mov    $0x0,%edx
c010ba0b:	eb 14                	jmp    c010ba21 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010ba0d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba10:	8b 00                	mov    (%eax),%eax
c010ba12:	8d 48 04             	lea    0x4(%eax),%ecx
c010ba15:	8b 55 08             	mov    0x8(%ebp),%edx
c010ba18:	89 0a                	mov    %ecx,(%edx)
c010ba1a:	8b 00                	mov    (%eax),%eax
c010ba1c:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010ba21:	5d                   	pop    %ebp
c010ba22:	c3                   	ret    

c010ba23 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010ba23:	55                   	push   %ebp
c010ba24:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010ba26:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010ba2a:	7e 14                	jle    c010ba40 <getint+0x1d>
        return va_arg(*ap, long long);
c010ba2c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba2f:	8b 00                	mov    (%eax),%eax
c010ba31:	8d 48 08             	lea    0x8(%eax),%ecx
c010ba34:	8b 55 08             	mov    0x8(%ebp),%edx
c010ba37:	89 0a                	mov    %ecx,(%edx)
c010ba39:	8b 50 04             	mov    0x4(%eax),%edx
c010ba3c:	8b 00                	mov    (%eax),%eax
c010ba3e:	eb 30                	jmp    c010ba70 <getint+0x4d>
    }
    else if (lflag) {
c010ba40:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ba44:	74 16                	je     c010ba5c <getint+0x39>
        return va_arg(*ap, long);
c010ba46:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba49:	8b 00                	mov    (%eax),%eax
c010ba4b:	8d 48 04             	lea    0x4(%eax),%ecx
c010ba4e:	8b 55 08             	mov    0x8(%ebp),%edx
c010ba51:	89 0a                	mov    %ecx,(%edx)
c010ba53:	8b 00                	mov    (%eax),%eax
c010ba55:	89 c2                	mov    %eax,%edx
c010ba57:	c1 fa 1f             	sar    $0x1f,%edx
c010ba5a:	eb 14                	jmp    c010ba70 <getint+0x4d>
    }
    else {
        return va_arg(*ap, int);
c010ba5c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba5f:	8b 00                	mov    (%eax),%eax
c010ba61:	8d 48 04             	lea    0x4(%eax),%ecx
c010ba64:	8b 55 08             	mov    0x8(%ebp),%edx
c010ba67:	89 0a                	mov    %ecx,(%edx)
c010ba69:	8b 00                	mov    (%eax),%eax
c010ba6b:	89 c2                	mov    %eax,%edx
c010ba6d:	c1 fa 1f             	sar    $0x1f,%edx
    }
}
c010ba70:	5d                   	pop    %ebp
c010ba71:	c3                   	ret    

c010ba72 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010ba72:	55                   	push   %ebp
c010ba73:	89 e5                	mov    %esp,%ebp
c010ba75:	83 ec 28             	sub    $0x28,%esp
    va_list ap;

    va_start(ap, fmt);
c010ba78:	8d 55 14             	lea    0x14(%ebp),%edx
c010ba7b:	8d 45 f4             	lea    -0xc(%ebp),%eax
c010ba7e:	89 10                	mov    %edx,(%eax)
    vprintfmt(putch, putdat, fmt, ap);
c010ba80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba83:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ba87:	8b 45 10             	mov    0x10(%ebp),%eax
c010ba8a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ba8e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba91:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba95:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba98:	89 04 24             	mov    %eax,(%esp)
c010ba9b:	e8 02 00 00 00       	call   c010baa2 <vprintfmt>
    va_end(ap);
}
c010baa0:	c9                   	leave  
c010baa1:	c3                   	ret    

c010baa2 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010baa2:	55                   	push   %ebp
c010baa3:	89 e5                	mov    %esp,%ebp
c010baa5:	56                   	push   %esi
c010baa6:	53                   	push   %ebx
c010baa7:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010baaa:	eb 17                	jmp    c010bac3 <vprintfmt+0x21>
            if (ch == '\0') {
c010baac:	85 db                	test   %ebx,%ebx
c010baae:	0f 84 db 03 00 00    	je     c010be8f <vprintfmt+0x3ed>
                return;
            }
            putch(ch, putdat);
c010bab4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bab7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010babb:	89 1c 24             	mov    %ebx,(%esp)
c010babe:	8b 45 08             	mov    0x8(%ebp),%eax
c010bac1:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010bac3:	8b 45 10             	mov    0x10(%ebp),%eax
c010bac6:	0f b6 00             	movzbl (%eax),%eax
c010bac9:	0f b6 d8             	movzbl %al,%ebx
c010bacc:	83 fb 25             	cmp    $0x25,%ebx
c010bacf:	0f 95 c0             	setne  %al
c010bad2:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c010bad6:	84 c0                	test   %al,%al
c010bad8:	75 d2                	jne    c010baac <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010bada:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010bade:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010bae5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010baeb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010baf2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010baf5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010baf8:	eb 04                	jmp    c010bafe <vprintfmt+0x5c>
            goto process_precision;

        case '.':
            if (width < 0)
                width = 0;
            goto reswitch;
c010bafa:	90                   	nop
c010bafb:	eb 01                	jmp    c010bafe <vprintfmt+0x5c>
            goto reswitch;

        process_precision:
            if (width < 0)
                width = precision, precision = -1;
            goto reswitch;
c010bafd:	90                   	nop
        char padc = ' ';
        width = precision = -1;
        lflag = altflag = 0;

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010bafe:	8b 45 10             	mov    0x10(%ebp),%eax
c010bb01:	0f b6 00             	movzbl (%eax),%eax
c010bb04:	0f b6 d8             	movzbl %al,%ebx
c010bb07:	89 d8                	mov    %ebx,%eax
c010bb09:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c010bb0d:	83 e8 23             	sub    $0x23,%eax
c010bb10:	83 f8 55             	cmp    $0x55,%eax
c010bb13:	0f 87 45 03 00 00    	ja     c010be5e <vprintfmt+0x3bc>
c010bb19:	8b 04 85 28 ec 10 c0 	mov    -0x3fef13d8(,%eax,4),%eax
c010bb20:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010bb22:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010bb26:	eb d6                	jmp    c010bafe <vprintfmt+0x5c>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010bb28:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010bb2c:	eb d0                	jmp    c010bafe <vprintfmt+0x5c>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010bb2e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010bb35:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010bb38:	89 d0                	mov    %edx,%eax
c010bb3a:	c1 e0 02             	shl    $0x2,%eax
c010bb3d:	01 d0                	add    %edx,%eax
c010bb3f:	01 c0                	add    %eax,%eax
c010bb41:	01 d8                	add    %ebx,%eax
c010bb43:	83 e8 30             	sub    $0x30,%eax
c010bb46:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010bb49:	8b 45 10             	mov    0x10(%ebp),%eax
c010bb4c:	0f b6 00             	movzbl (%eax),%eax
c010bb4f:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010bb52:	83 fb 2f             	cmp    $0x2f,%ebx
c010bb55:	7e 39                	jle    c010bb90 <vprintfmt+0xee>
c010bb57:	83 fb 39             	cmp    $0x39,%ebx
c010bb5a:	7f 34                	jg     c010bb90 <vprintfmt+0xee>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010bb5c:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010bb60:	eb d3                	jmp    c010bb35 <vprintfmt+0x93>
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
c010bb62:	8b 45 14             	mov    0x14(%ebp),%eax
c010bb65:	8d 50 04             	lea    0x4(%eax),%edx
c010bb68:	89 55 14             	mov    %edx,0x14(%ebp)
c010bb6b:	8b 00                	mov    (%eax),%eax
c010bb6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010bb70:	eb 1f                	jmp    c010bb91 <vprintfmt+0xef>

        case '.':
            if (width < 0)
c010bb72:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010bb76:	79 82                	jns    c010bafa <vprintfmt+0x58>
                width = 0;
c010bb78:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010bb7f:	e9 76 ff ff ff       	jmp    c010bafa <vprintfmt+0x58>

        case '#':
            altflag = 1;
c010bb84:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010bb8b:	e9 6e ff ff ff       	jmp    c010bafe <vprintfmt+0x5c>
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
            goto process_precision;
c010bb90:	90                   	nop
        case '#':
            altflag = 1;
            goto reswitch;

        process_precision:
            if (width < 0)
c010bb91:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010bb95:	0f 89 62 ff ff ff    	jns    c010bafd <vprintfmt+0x5b>
                width = precision, precision = -1;
c010bb9b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bb9e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010bba1:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010bba8:	e9 50 ff ff ff       	jmp    c010bafd <vprintfmt+0x5b>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010bbad:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010bbb1:	e9 48 ff ff ff       	jmp    c010bafe <vprintfmt+0x5c>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010bbb6:	8b 45 14             	mov    0x14(%ebp),%eax
c010bbb9:	8d 50 04             	lea    0x4(%eax),%edx
c010bbbc:	89 55 14             	mov    %edx,0x14(%ebp)
c010bbbf:	8b 00                	mov    (%eax),%eax
c010bbc1:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bbc4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bbc8:	89 04 24             	mov    %eax,(%esp)
c010bbcb:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbce:	ff d0                	call   *%eax
            break;
c010bbd0:	e9 b4 02 00 00       	jmp    c010be89 <vprintfmt+0x3e7>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010bbd5:	8b 45 14             	mov    0x14(%ebp),%eax
c010bbd8:	8d 50 04             	lea    0x4(%eax),%edx
c010bbdb:	89 55 14             	mov    %edx,0x14(%ebp)
c010bbde:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010bbe0:	85 db                	test   %ebx,%ebx
c010bbe2:	79 02                	jns    c010bbe6 <vprintfmt+0x144>
                err = -err;
c010bbe4:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010bbe6:	83 fb 18             	cmp    $0x18,%ebx
c010bbe9:	7f 0b                	jg     c010bbf6 <vprintfmt+0x154>
c010bbeb:	8b 34 9d a0 eb 10 c0 	mov    -0x3fef1460(,%ebx,4),%esi
c010bbf2:	85 f6                	test   %esi,%esi
c010bbf4:	75 23                	jne    c010bc19 <vprintfmt+0x177>
                printfmt(putch, putdat, "error %d", err);
c010bbf6:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010bbfa:	c7 44 24 08 15 ec 10 	movl   $0xc010ec15,0x8(%esp)
c010bc01:	c0 
c010bc02:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc05:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc09:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc0c:	89 04 24             	mov    %eax,(%esp)
c010bc0f:	e8 5e fe ff ff       	call   c010ba72 <printfmt>
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010bc14:	e9 70 02 00 00       	jmp    c010be89 <vprintfmt+0x3e7>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010bc19:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010bc1d:	c7 44 24 08 1e ec 10 	movl   $0xc010ec1e,0x8(%esp)
c010bc24:	c0 
c010bc25:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc28:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc2c:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc2f:	89 04 24             	mov    %eax,(%esp)
c010bc32:	e8 3b fe ff ff       	call   c010ba72 <printfmt>
            }
            break;
c010bc37:	e9 4d 02 00 00       	jmp    c010be89 <vprintfmt+0x3e7>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010bc3c:	8b 45 14             	mov    0x14(%ebp),%eax
c010bc3f:	8d 50 04             	lea    0x4(%eax),%edx
c010bc42:	89 55 14             	mov    %edx,0x14(%ebp)
c010bc45:	8b 30                	mov    (%eax),%esi
c010bc47:	85 f6                	test   %esi,%esi
c010bc49:	75 05                	jne    c010bc50 <vprintfmt+0x1ae>
                p = "(null)";
c010bc4b:	be 21 ec 10 c0       	mov    $0xc010ec21,%esi
            }
            if (width > 0 && padc != '-') {
c010bc50:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010bc54:	7e 7c                	jle    c010bcd2 <vprintfmt+0x230>
c010bc56:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010bc5a:	74 76                	je     c010bcd2 <vprintfmt+0x230>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010bc5c:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c010bc5f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bc62:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc66:	89 34 24             	mov    %esi,(%esp)
c010bc69:	e8 25 04 00 00       	call   c010c093 <strnlen>
c010bc6e:	89 da                	mov    %ebx,%edx
c010bc70:	29 c2                	sub    %eax,%edx
c010bc72:	89 d0                	mov    %edx,%eax
c010bc74:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010bc77:	eb 17                	jmp    c010bc90 <vprintfmt+0x1ee>
                    putch(padc, putdat);
c010bc79:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010bc7d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bc80:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bc84:	89 04 24             	mov    %eax,(%esp)
c010bc87:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc8a:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010bc8c:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010bc90:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010bc94:	7f e3                	jg     c010bc79 <vprintfmt+0x1d7>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010bc96:	eb 3a                	jmp    c010bcd2 <vprintfmt+0x230>
                if (altflag && (ch < ' ' || ch > '~')) {
c010bc98:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010bc9c:	74 1f                	je     c010bcbd <vprintfmt+0x21b>
c010bc9e:	83 fb 1f             	cmp    $0x1f,%ebx
c010bca1:	7e 05                	jle    c010bca8 <vprintfmt+0x206>
c010bca3:	83 fb 7e             	cmp    $0x7e,%ebx
c010bca6:	7e 15                	jle    c010bcbd <vprintfmt+0x21b>
                    putch('?', putdat);
c010bca8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bcab:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bcaf:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c010bcb6:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcb9:	ff d0                	call   *%eax
c010bcbb:	eb 0f                	jmp    c010bccc <vprintfmt+0x22a>
                }
                else {
                    putch(ch, putdat);
c010bcbd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bcc0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bcc4:	89 1c 24             	mov    %ebx,(%esp)
c010bcc7:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcca:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010bccc:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010bcd0:	eb 01                	jmp    c010bcd3 <vprintfmt+0x231>
c010bcd2:	90                   	nop
c010bcd3:	0f b6 06             	movzbl (%esi),%eax
c010bcd6:	0f be d8             	movsbl %al,%ebx
c010bcd9:	85 db                	test   %ebx,%ebx
c010bcdb:	0f 95 c0             	setne  %al
c010bcde:	83 c6 01             	add    $0x1,%esi
c010bce1:	84 c0                	test   %al,%al
c010bce3:	74 29                	je     c010bd0e <vprintfmt+0x26c>
c010bce5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010bce9:	78 ad                	js     c010bc98 <vprintfmt+0x1f6>
c010bceb:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010bcef:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010bcf3:	79 a3                	jns    c010bc98 <vprintfmt+0x1f6>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010bcf5:	eb 17                	jmp    c010bd0e <vprintfmt+0x26c>
                putch(' ', putdat);
c010bcf7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bcfa:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bcfe:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010bd05:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd08:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010bd0a:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010bd0e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010bd12:	7f e3                	jg     c010bcf7 <vprintfmt+0x255>
                putch(' ', putdat);
            }
            break;
c010bd14:	e9 70 01 00 00       	jmp    c010be89 <vprintfmt+0x3e7>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010bd19:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bd1c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd20:	8d 45 14             	lea    0x14(%ebp),%eax
c010bd23:	89 04 24             	mov    %eax,(%esp)
c010bd26:	e8 f8 fc ff ff       	call   c010ba23 <getint>
c010bd2b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bd2e:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010bd31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd34:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bd37:	85 d2                	test   %edx,%edx
c010bd39:	79 26                	jns    c010bd61 <vprintfmt+0x2bf>
                putch('-', putdat);
c010bd3b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd3e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd42:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c010bd49:	8b 45 08             	mov    0x8(%ebp),%eax
c010bd4c:	ff d0                	call   *%eax
                num = -(long long)num;
c010bd4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bd51:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010bd54:	f7 d8                	neg    %eax
c010bd56:	83 d2 00             	adc    $0x0,%edx
c010bd59:	f7 da                	neg    %edx
c010bd5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bd5e:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010bd61:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010bd68:	e9 a8 00 00 00       	jmp    c010be15 <vprintfmt+0x373>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010bd6d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bd70:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd74:	8d 45 14             	lea    0x14(%ebp),%eax
c010bd77:	89 04 24             	mov    %eax,(%esp)
c010bd7a:	e8 55 fc ff ff       	call   c010b9d4 <getuint>
c010bd7f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bd82:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010bd85:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010bd8c:	e9 84 00 00 00       	jmp    c010be15 <vprintfmt+0x373>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010bd91:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bd94:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bd98:	8d 45 14             	lea    0x14(%ebp),%eax
c010bd9b:	89 04 24             	mov    %eax,(%esp)
c010bd9e:	e8 31 fc ff ff       	call   c010b9d4 <getuint>
c010bda3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bda6:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010bda9:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010bdb0:	eb 63                	jmp    c010be15 <vprintfmt+0x373>

        // pointer
        case 'p':
            putch('0', putdat);
c010bdb2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bdb5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bdb9:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c010bdc0:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdc3:	ff d0                	call   *%eax
            putch('x', putdat);
c010bdc5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bdc8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bdcc:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c010bdd3:	8b 45 08             	mov    0x8(%ebp),%eax
c010bdd6:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010bdd8:	8b 45 14             	mov    0x14(%ebp),%eax
c010bddb:	8d 50 04             	lea    0x4(%eax),%edx
c010bdde:	89 55 14             	mov    %edx,0x14(%ebp)
c010bde1:	8b 00                	mov    (%eax),%eax
c010bde3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bde6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010bded:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010bdf4:	eb 1f                	jmp    c010be15 <vprintfmt+0x373>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010bdf6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bdf9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bdfd:	8d 45 14             	lea    0x14(%ebp),%eax
c010be00:	89 04 24             	mov    %eax,(%esp)
c010be03:	e8 cc fb ff ff       	call   c010b9d4 <getuint>
c010be08:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010be0b:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010be0e:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010be15:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010be19:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010be1c:	89 54 24 18          	mov    %edx,0x18(%esp)
c010be20:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010be23:	89 54 24 14          	mov    %edx,0x14(%esp)
c010be27:	89 44 24 10          	mov    %eax,0x10(%esp)
c010be2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010be2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010be31:	89 44 24 08          	mov    %eax,0x8(%esp)
c010be35:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010be39:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be40:	8b 45 08             	mov    0x8(%ebp),%eax
c010be43:	89 04 24             	mov    %eax,(%esp)
c010be46:	e8 51 fa ff ff       	call   c010b89c <printnum>
            break;
c010be4b:	eb 3c                	jmp    c010be89 <vprintfmt+0x3e7>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010be4d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be50:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be54:	89 1c 24             	mov    %ebx,(%esp)
c010be57:	8b 45 08             	mov    0x8(%ebp),%eax
c010be5a:	ff d0                	call   *%eax
            break;
c010be5c:	eb 2b                	jmp    c010be89 <vprintfmt+0x3e7>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010be5e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be61:	89 44 24 04          	mov    %eax,0x4(%esp)
c010be65:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010be6c:	8b 45 08             	mov    0x8(%ebp),%eax
c010be6f:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c010be71:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010be75:	eb 04                	jmp    c010be7b <vprintfmt+0x3d9>
c010be77:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010be7b:	8b 45 10             	mov    0x10(%ebp),%eax
c010be7e:	83 e8 01             	sub    $0x1,%eax
c010be81:	0f b6 00             	movzbl (%eax),%eax
c010be84:	3c 25                	cmp    $0x25,%al
c010be86:	75 ef                	jne    c010be77 <vprintfmt+0x3d5>
                /* do nothing */;
            break;
c010be88:	90                   	nop
        }
    }
c010be89:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010be8a:	e9 34 fc ff ff       	jmp    c010bac3 <vprintfmt+0x21>
            if (ch == '\0') {
                return;
c010be8f:	90                   	nop
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010be90:	83 c4 40             	add    $0x40,%esp
c010be93:	5b                   	pop    %ebx
c010be94:	5e                   	pop    %esi
c010be95:	5d                   	pop    %ebp
c010be96:	c3                   	ret    

c010be97 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010be97:	55                   	push   %ebp
c010be98:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010be9a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be9d:	8b 40 08             	mov    0x8(%eax),%eax
c010bea0:	8d 50 01             	lea    0x1(%eax),%edx
c010bea3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bea6:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010bea9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010beac:	8b 10                	mov    (%eax),%edx
c010beae:	8b 45 0c             	mov    0xc(%ebp),%eax
c010beb1:	8b 40 04             	mov    0x4(%eax),%eax
c010beb4:	39 c2                	cmp    %eax,%edx
c010beb6:	73 12                	jae    c010beca <sprintputch+0x33>
        *b->buf ++ = ch;
c010beb8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bebb:	8b 00                	mov    (%eax),%eax
c010bebd:	8b 55 08             	mov    0x8(%ebp),%edx
c010bec0:	88 10                	mov    %dl,(%eax)
c010bec2:	8d 50 01             	lea    0x1(%eax),%edx
c010bec5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bec8:	89 10                	mov    %edx,(%eax)
    }
}
c010beca:	5d                   	pop    %ebp
c010becb:	c3                   	ret    

c010becc <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010becc:	55                   	push   %ebp
c010becd:	89 e5                	mov    %esp,%ebp
c010becf:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010bed2:	8d 55 14             	lea    0x14(%ebp),%edx
c010bed5:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010bed8:	89 10                	mov    %edx,(%eax)
    cnt = vsnprintf(str, size, fmt, ap);
c010beda:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bedd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bee1:	8b 45 10             	mov    0x10(%ebp),%eax
c010bee4:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bee8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010beeb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010beef:	8b 45 08             	mov    0x8(%ebp),%eax
c010bef2:	89 04 24             	mov    %eax,(%esp)
c010bef5:	e8 08 00 00 00       	call   c010bf02 <vsnprintf>
c010befa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010befd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bf00:	c9                   	leave  
c010bf01:	c3                   	ret    

c010bf02 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010bf02:	55                   	push   %ebp
c010bf03:	89 e5                	mov    %esp,%ebp
c010bf05:	83 ec 28             	sub    $0x28,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010bf08:	8b 45 08             	mov    0x8(%ebp),%eax
c010bf0b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010bf0e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bf11:	83 e8 01             	sub    $0x1,%eax
c010bf14:	03 45 08             	add    0x8(%ebp),%eax
c010bf17:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bf1a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010bf21:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bf25:	74 0a                	je     c010bf31 <vsnprintf+0x2f>
c010bf27:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010bf2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bf2d:	39 c2                	cmp    %eax,%edx
c010bf2f:	76 07                	jbe    c010bf38 <vsnprintf+0x36>
        return -E_INVAL;
c010bf31:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010bf36:	eb 2a                	jmp    c010bf62 <vsnprintf+0x60>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010bf38:	8b 45 14             	mov    0x14(%ebp),%eax
c010bf3b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bf3f:	8b 45 10             	mov    0x10(%ebp),%eax
c010bf42:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bf46:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010bf49:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bf4d:	c7 04 24 97 be 10 c0 	movl   $0xc010be97,(%esp)
c010bf54:	e8 49 fb ff ff       	call   c010baa2 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c010bf59:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bf5c:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010bf5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010bf62:	c9                   	leave  
c010bf63:	c3                   	ret    

c010bf64 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010bf64:	55                   	push   %ebp
c010bf65:	89 e5                	mov    %esp,%ebp
c010bf67:	57                   	push   %edi
c010bf68:	56                   	push   %esi
c010bf69:	53                   	push   %ebx
c010bf6a:	83 ec 34             	sub    $0x34,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010bf6d:	a1 a0 de 12 c0       	mov    0xc012dea0,%eax
c010bf72:	8b 15 a4 de 12 c0    	mov    0xc012dea4,%edx
c010bf78:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010bf7e:	6b c8 05             	imul   $0x5,%eax,%ecx
c010bf81:	01 cf                	add    %ecx,%edi
c010bf83:	b9 6d e6 ec de       	mov    $0xdeece66d,%ecx
c010bf88:	f7 e1                	mul    %ecx
c010bf8a:	8d 0c 17             	lea    (%edi,%edx,1),%ecx
c010bf8d:	89 ca                	mov    %ecx,%edx
c010bf8f:	83 c0 0b             	add    $0xb,%eax
c010bf92:	83 d2 00             	adc    $0x0,%edx
c010bf95:	89 c3                	mov    %eax,%ebx
c010bf97:	80 e7 ff             	and    $0xff,%bh
c010bf9a:	0f b7 f2             	movzwl %dx,%esi
c010bf9d:	89 1d a0 de 12 c0    	mov    %ebx,0xc012dea0
c010bfa3:	89 35 a4 de 12 c0    	mov    %esi,0xc012dea4
    unsigned long long result = (next >> 12);
c010bfa9:	a1 a0 de 12 c0       	mov    0xc012dea0,%eax
c010bfae:	8b 15 a4 de 12 c0    	mov    0xc012dea4,%edx
c010bfb4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010bfb8:	c1 ea 0c             	shr    $0xc,%edx
c010bfbb:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010bfbe:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010bfc1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010bfc8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bfcb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010bfce:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010bfd1:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010bfd4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010bfd7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010bfda:	89 d3                	mov    %edx,%ebx
c010bfdc:	89 c6                	mov    %eax,%esi
c010bfde:	89 75 d8             	mov    %esi,-0x28(%ebp)
c010bfe1:	89 5d e8             	mov    %ebx,-0x18(%ebp)
c010bfe4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bfe7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010bfea:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010bfee:	74 1c                	je     c010c00c <rand+0xa8>
c010bff0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bff3:	ba 00 00 00 00       	mov    $0x0,%edx
c010bff8:	f7 75 dc             	divl   -0x24(%ebp)
c010bffb:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010bffe:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c001:	ba 00 00 00 00       	mov    $0x0,%edx
c010c006:	f7 75 dc             	divl   -0x24(%ebp)
c010c009:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c00c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c00f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c012:	89 d6                	mov    %edx,%esi
c010c014:	89 c3                	mov    %eax,%ebx
c010c016:	89 f0                	mov    %esi,%eax
c010c018:	89 da                	mov    %ebx,%edx
c010c01a:	f7 75 dc             	divl   -0x24(%ebp)
c010c01d:	89 d3                	mov    %edx,%ebx
c010c01f:	89 c6                	mov    %eax,%esi
c010c021:	89 75 d8             	mov    %esi,-0x28(%ebp)
c010c024:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
c010c027:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c02a:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010c02d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c030:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c010c033:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010c036:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010c039:	89 c3                	mov    %eax,%ebx
c010c03b:	89 d6                	mov    %edx,%esi
c010c03d:	89 5d e0             	mov    %ebx,-0x20(%ebp)
c010c040:	89 75 e4             	mov    %esi,-0x1c(%ebp)
c010c043:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010c046:	83 c4 34             	add    $0x34,%esp
c010c049:	5b                   	pop    %ebx
c010c04a:	5e                   	pop    %esi
c010c04b:	5f                   	pop    %edi
c010c04c:	5d                   	pop    %ebp
c010c04d:	c3                   	ret    

c010c04e <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010c04e:	55                   	push   %ebp
c010c04f:	89 e5                	mov    %esp,%ebp
    next = seed;
c010c051:	8b 45 08             	mov    0x8(%ebp),%eax
c010c054:	ba 00 00 00 00       	mov    $0x0,%edx
c010c059:	a3 a0 de 12 c0       	mov    %eax,0xc012dea0
c010c05e:	89 15 a4 de 12 c0    	mov    %edx,0xc012dea4
}
c010c064:	5d                   	pop    %ebp
c010c065:	c3                   	ret    
	...

c010c068 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010c068:	55                   	push   %ebp
c010c069:	89 e5                	mov    %esp,%ebp
c010c06b:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010c06e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010c075:	eb 04                	jmp    c010c07b <strlen+0x13>
        cnt ++;
c010c077:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010c07b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c07e:	0f b6 00             	movzbl (%eax),%eax
c010c081:	84 c0                	test   %al,%al
c010c083:	0f 95 c0             	setne  %al
c010c086:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c08a:	84 c0                	test   %al,%al
c010c08c:	75 e9                	jne    c010c077 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010c08e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010c091:	c9                   	leave  
c010c092:	c3                   	ret    

c010c093 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010c093:	55                   	push   %ebp
c010c094:	89 e5                	mov    %esp,%ebp
c010c096:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010c099:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010c0a0:	eb 04                	jmp    c010c0a6 <strnlen+0x13>
        cnt ++;
c010c0a2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010c0a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c0a9:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010c0ac:	73 13                	jae    c010c0c1 <strnlen+0x2e>
c010c0ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0b1:	0f b6 00             	movzbl (%eax),%eax
c010c0b4:	84 c0                	test   %al,%al
c010c0b6:	0f 95 c0             	setne  %al
c010c0b9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c0bd:	84 c0                	test   %al,%al
c010c0bf:	75 e1                	jne    c010c0a2 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010c0c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010c0c4:	c9                   	leave  
c010c0c5:	c3                   	ret    

c010c0c6 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010c0c6:	55                   	push   %ebp
c010c0c7:	89 e5                	mov    %esp,%ebp
c010c0c9:	57                   	push   %edi
c010c0ca:	56                   	push   %esi
c010c0cb:	53                   	push   %ebx
c010c0cc:	83 ec 24             	sub    $0x24,%esp
c010c0cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010c0d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c0d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c0d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010c0db:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c0de:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c0e1:	89 d6                	mov    %edx,%esi
c010c0e3:	89 c3                	mov    %eax,%ebx
c010c0e5:	89 df                	mov    %ebx,%edi
c010c0e7:	ac                   	lods   %ds:(%esi),%al
c010c0e8:	aa                   	stos   %al,%es:(%edi)
c010c0e9:	84 c0                	test   %al,%al
c010c0eb:	75 fa                	jne    c010c0e7 <strcpy+0x21>
c010c0ed:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c0f0:	89 fb                	mov    %edi,%ebx
c010c0f2:	89 75 e8             	mov    %esi,-0x18(%ebp)
c010c0f5:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
c010c0f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c0fb:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010c0fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010c101:	83 c4 24             	add    $0x24,%esp
c010c104:	5b                   	pop    %ebx
c010c105:	5e                   	pop    %esi
c010c106:	5f                   	pop    %edi
c010c107:	5d                   	pop    %ebp
c010c108:	c3                   	ret    

c010c109 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010c109:	55                   	push   %ebp
c010c10a:	89 e5                	mov    %esp,%ebp
c010c10c:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010c10f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c112:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010c115:	eb 21                	jmp    c010c138 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010c117:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c11a:	0f b6 10             	movzbl (%eax),%edx
c010c11d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c120:	88 10                	mov    %dl,(%eax)
c010c122:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c125:	0f b6 00             	movzbl (%eax),%eax
c010c128:	84 c0                	test   %al,%al
c010c12a:	74 04                	je     c010c130 <strncpy+0x27>
            src ++;
c010c12c:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010c130:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010c134:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010c138:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c13c:	75 d9                	jne    c010c117 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010c13e:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010c141:	c9                   	leave  
c010c142:	c3                   	ret    

c010c143 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010c143:	55                   	push   %ebp
c010c144:	89 e5                	mov    %esp,%ebp
c010c146:	57                   	push   %edi
c010c147:	56                   	push   %esi
c010c148:	53                   	push   %ebx
c010c149:	83 ec 24             	sub    $0x24,%esp
c010c14c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c14f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c152:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c155:	89 45 ec             	mov    %eax,-0x14(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010c158:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c15b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c15e:	89 d6                	mov    %edx,%esi
c010c160:	89 c3                	mov    %eax,%ebx
c010c162:	89 df                	mov    %ebx,%edi
c010c164:	ac                   	lods   %ds:(%esi),%al
c010c165:	ae                   	scas   %es:(%edi),%al
c010c166:	75 08                	jne    c010c170 <strcmp+0x2d>
c010c168:	84 c0                	test   %al,%al
c010c16a:	75 f8                	jne    c010c164 <strcmp+0x21>
c010c16c:	31 c0                	xor    %eax,%eax
c010c16e:	eb 04                	jmp    c010c174 <strcmp+0x31>
c010c170:	19 c0                	sbb    %eax,%eax
c010c172:	0c 01                	or     $0x1,%al
c010c174:	89 fb                	mov    %edi,%ebx
c010c176:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c179:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c17c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c17f:	89 75 e4             	mov    %esi,-0x1c(%ebp)
c010c182:	89 5d e0             	mov    %ebx,-0x20(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010c185:	8b 45 e8             	mov    -0x18(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010c188:	83 c4 24             	add    $0x24,%esp
c010c18b:	5b                   	pop    %ebx
c010c18c:	5e                   	pop    %esi
c010c18d:	5f                   	pop    %edi
c010c18e:	5d                   	pop    %ebp
c010c18f:	c3                   	ret    

c010c190 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010c190:	55                   	push   %ebp
c010c191:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010c193:	eb 0c                	jmp    c010c1a1 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010c195:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010c199:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c19d:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010c1a1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c1a5:	74 1a                	je     c010c1c1 <strncmp+0x31>
c010c1a7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1aa:	0f b6 00             	movzbl (%eax),%eax
c010c1ad:	84 c0                	test   %al,%al
c010c1af:	74 10                	je     c010c1c1 <strncmp+0x31>
c010c1b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1b4:	0f b6 10             	movzbl (%eax),%edx
c010c1b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1ba:	0f b6 00             	movzbl (%eax),%eax
c010c1bd:	38 c2                	cmp    %al,%dl
c010c1bf:	74 d4                	je     c010c195 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010c1c1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c1c5:	74 1a                	je     c010c1e1 <strncmp+0x51>
c010c1c7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1ca:	0f b6 00             	movzbl (%eax),%eax
c010c1cd:	0f b6 d0             	movzbl %al,%edx
c010c1d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1d3:	0f b6 00             	movzbl (%eax),%eax
c010c1d6:	0f b6 c0             	movzbl %al,%eax
c010c1d9:	89 d1                	mov    %edx,%ecx
c010c1db:	29 c1                	sub    %eax,%ecx
c010c1dd:	89 c8                	mov    %ecx,%eax
c010c1df:	eb 05                	jmp    c010c1e6 <strncmp+0x56>
c010c1e1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c1e6:	5d                   	pop    %ebp
c010c1e7:	c3                   	ret    

c010c1e8 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010c1e8:	55                   	push   %ebp
c010c1e9:	89 e5                	mov    %esp,%ebp
c010c1eb:	83 ec 04             	sub    $0x4,%esp
c010c1ee:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1f1:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010c1f4:	eb 14                	jmp    c010c20a <strchr+0x22>
        if (*s == c) {
c010c1f6:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1f9:	0f b6 00             	movzbl (%eax),%eax
c010c1fc:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010c1ff:	75 05                	jne    c010c206 <strchr+0x1e>
            return (char *)s;
c010c201:	8b 45 08             	mov    0x8(%ebp),%eax
c010c204:	eb 13                	jmp    c010c219 <strchr+0x31>
        }
        s ++;
c010c206:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010c20a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c20d:	0f b6 00             	movzbl (%eax),%eax
c010c210:	84 c0                	test   %al,%al
c010c212:	75 e2                	jne    c010c1f6 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010c214:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c219:	c9                   	leave  
c010c21a:	c3                   	ret    

c010c21b <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010c21b:	55                   	push   %ebp
c010c21c:	89 e5                	mov    %esp,%ebp
c010c21e:	83 ec 04             	sub    $0x4,%esp
c010c221:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c224:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010c227:	eb 0f                	jmp    c010c238 <strfind+0x1d>
        if (*s == c) {
c010c229:	8b 45 08             	mov    0x8(%ebp),%eax
c010c22c:	0f b6 00             	movzbl (%eax),%eax
c010c22f:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010c232:	74 10                	je     c010c244 <strfind+0x29>
            break;
        }
        s ++;
c010c234:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010c238:	8b 45 08             	mov    0x8(%ebp),%eax
c010c23b:	0f b6 00             	movzbl (%eax),%eax
c010c23e:	84 c0                	test   %al,%al
c010c240:	75 e7                	jne    c010c229 <strfind+0xe>
c010c242:	eb 01                	jmp    c010c245 <strfind+0x2a>
        if (*s == c) {
            break;
c010c244:	90                   	nop
        }
        s ++;
    }
    return (char *)s;
c010c245:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010c248:	c9                   	leave  
c010c249:	c3                   	ret    

c010c24a <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010c24a:	55                   	push   %ebp
c010c24b:	89 e5                	mov    %esp,%ebp
c010c24d:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010c250:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010c257:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010c25e:	eb 04                	jmp    c010c264 <strtol+0x1a>
        s ++;
c010c260:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010c264:	8b 45 08             	mov    0x8(%ebp),%eax
c010c267:	0f b6 00             	movzbl (%eax),%eax
c010c26a:	3c 20                	cmp    $0x20,%al
c010c26c:	74 f2                	je     c010c260 <strtol+0x16>
c010c26e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c271:	0f b6 00             	movzbl (%eax),%eax
c010c274:	3c 09                	cmp    $0x9,%al
c010c276:	74 e8                	je     c010c260 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010c278:	8b 45 08             	mov    0x8(%ebp),%eax
c010c27b:	0f b6 00             	movzbl (%eax),%eax
c010c27e:	3c 2b                	cmp    $0x2b,%al
c010c280:	75 06                	jne    c010c288 <strtol+0x3e>
        s ++;
c010c282:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c286:	eb 15                	jmp    c010c29d <strtol+0x53>
    }
    else if (*s == '-') {
c010c288:	8b 45 08             	mov    0x8(%ebp),%eax
c010c28b:	0f b6 00             	movzbl (%eax),%eax
c010c28e:	3c 2d                	cmp    $0x2d,%al
c010c290:	75 0b                	jne    c010c29d <strtol+0x53>
        s ++, neg = 1;
c010c292:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c296:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010c29d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c2a1:	74 06                	je     c010c2a9 <strtol+0x5f>
c010c2a3:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010c2a7:	75 24                	jne    c010c2cd <strtol+0x83>
c010c2a9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2ac:	0f b6 00             	movzbl (%eax),%eax
c010c2af:	3c 30                	cmp    $0x30,%al
c010c2b1:	75 1a                	jne    c010c2cd <strtol+0x83>
c010c2b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2b6:	83 c0 01             	add    $0x1,%eax
c010c2b9:	0f b6 00             	movzbl (%eax),%eax
c010c2bc:	3c 78                	cmp    $0x78,%al
c010c2be:	75 0d                	jne    c010c2cd <strtol+0x83>
        s += 2, base = 16;
c010c2c0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010c2c4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010c2cb:	eb 2a                	jmp    c010c2f7 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010c2cd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c2d1:	75 17                	jne    c010c2ea <strtol+0xa0>
c010c2d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2d6:	0f b6 00             	movzbl (%eax),%eax
c010c2d9:	3c 30                	cmp    $0x30,%al
c010c2db:	75 0d                	jne    c010c2ea <strtol+0xa0>
        s ++, base = 8;
c010c2dd:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c2e1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010c2e8:	eb 0d                	jmp    c010c2f7 <strtol+0xad>
    }
    else if (base == 0) {
c010c2ea:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c2ee:	75 07                	jne    c010c2f7 <strtol+0xad>
        base = 10;
c010c2f0:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010c2f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2fa:	0f b6 00             	movzbl (%eax),%eax
c010c2fd:	3c 2f                	cmp    $0x2f,%al
c010c2ff:	7e 1b                	jle    c010c31c <strtol+0xd2>
c010c301:	8b 45 08             	mov    0x8(%ebp),%eax
c010c304:	0f b6 00             	movzbl (%eax),%eax
c010c307:	3c 39                	cmp    $0x39,%al
c010c309:	7f 11                	jg     c010c31c <strtol+0xd2>
            dig = *s - '0';
c010c30b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c30e:	0f b6 00             	movzbl (%eax),%eax
c010c311:	0f be c0             	movsbl %al,%eax
c010c314:	83 e8 30             	sub    $0x30,%eax
c010c317:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c31a:	eb 48                	jmp    c010c364 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010c31c:	8b 45 08             	mov    0x8(%ebp),%eax
c010c31f:	0f b6 00             	movzbl (%eax),%eax
c010c322:	3c 60                	cmp    $0x60,%al
c010c324:	7e 1b                	jle    c010c341 <strtol+0xf7>
c010c326:	8b 45 08             	mov    0x8(%ebp),%eax
c010c329:	0f b6 00             	movzbl (%eax),%eax
c010c32c:	3c 7a                	cmp    $0x7a,%al
c010c32e:	7f 11                	jg     c010c341 <strtol+0xf7>
            dig = *s - 'a' + 10;
c010c330:	8b 45 08             	mov    0x8(%ebp),%eax
c010c333:	0f b6 00             	movzbl (%eax),%eax
c010c336:	0f be c0             	movsbl %al,%eax
c010c339:	83 e8 57             	sub    $0x57,%eax
c010c33c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c33f:	eb 23                	jmp    c010c364 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010c341:	8b 45 08             	mov    0x8(%ebp),%eax
c010c344:	0f b6 00             	movzbl (%eax),%eax
c010c347:	3c 40                	cmp    $0x40,%al
c010c349:	7e 38                	jle    c010c383 <strtol+0x139>
c010c34b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c34e:	0f b6 00             	movzbl (%eax),%eax
c010c351:	3c 5a                	cmp    $0x5a,%al
c010c353:	7f 2e                	jg     c010c383 <strtol+0x139>
            dig = *s - 'A' + 10;
c010c355:	8b 45 08             	mov    0x8(%ebp),%eax
c010c358:	0f b6 00             	movzbl (%eax),%eax
c010c35b:	0f be c0             	movsbl %al,%eax
c010c35e:	83 e8 37             	sub    $0x37,%eax
c010c361:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010c364:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c367:	3b 45 10             	cmp    0x10(%ebp),%eax
c010c36a:	7d 16                	jge    c010c382 <strtol+0x138>
            break;
        }
        s ++, val = (val * base) + dig;
c010c36c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010c370:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c373:	0f af 45 10          	imul   0x10(%ebp),%eax
c010c377:	03 45 f4             	add    -0xc(%ebp),%eax
c010c37a:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010c37d:	e9 75 ff ff ff       	jmp    c010c2f7 <strtol+0xad>
        }
        else {
            break;
        }
        if (dig >= base) {
            break;
c010c382:	90                   	nop
        }
        s ++, val = (val * base) + dig;
        // we don't properly detect overflow!
    }

    if (endptr) {
c010c383:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c387:	74 08                	je     c010c391 <strtol+0x147>
        *endptr = (char *) s;
c010c389:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c38c:	8b 55 08             	mov    0x8(%ebp),%edx
c010c38f:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010c391:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010c395:	74 07                	je     c010c39e <strtol+0x154>
c010c397:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c39a:	f7 d8                	neg    %eax
c010c39c:	eb 03                	jmp    c010c3a1 <strtol+0x157>
c010c39e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010c3a1:	c9                   	leave  
c010c3a2:	c3                   	ret    

c010c3a3 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010c3a3:	55                   	push   %ebp
c010c3a4:	89 e5                	mov    %esp,%ebp
c010c3a6:	57                   	push   %edi
c010c3a7:	56                   	push   %esi
c010c3a8:	53                   	push   %ebx
c010c3a9:	83 ec 24             	sub    $0x24,%esp
c010c3ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c3af:	88 45 d0             	mov    %al,-0x30(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010c3b2:	0f be 45 d0          	movsbl -0x30(%ebp),%eax
c010c3b6:	8b 55 08             	mov    0x8(%ebp),%edx
c010c3b9:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c3bc:	88 45 ef             	mov    %al,-0x11(%ebp)
c010c3bf:	8b 45 10             	mov    0x10(%ebp),%eax
c010c3c2:	89 45 e8             	mov    %eax,-0x18(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010c3c5:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010c3c8:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c010c3cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c3cf:	89 ce                	mov    %ecx,%esi
c010c3d1:	89 d3                	mov    %edx,%ebx
c010c3d3:	89 f1                	mov    %esi,%ecx
c010c3d5:	89 df                	mov    %ebx,%edi
c010c3d7:	f3 aa                	rep stos %al,%es:(%edi)
c010c3d9:	89 fb                	mov    %edi,%ebx
c010c3db:	89 ce                	mov    %ecx,%esi
c010c3dd:	89 75 e4             	mov    %esi,-0x1c(%ebp)
c010c3e0:	89 5d e0             	mov    %ebx,-0x20(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010c3e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010c3e6:	83 c4 24             	add    $0x24,%esp
c010c3e9:	5b                   	pop    %ebx
c010c3ea:	5e                   	pop    %esi
c010c3eb:	5f                   	pop    %edi
c010c3ec:	5d                   	pop    %ebp
c010c3ed:	c3                   	ret    

c010c3ee <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010c3ee:	55                   	push   %ebp
c010c3ef:	89 e5                	mov    %esp,%ebp
c010c3f1:	57                   	push   %edi
c010c3f2:	56                   	push   %esi
c010c3f3:	53                   	push   %ebx
c010c3f4:	83 ec 38             	sub    $0x38,%esp
c010c3f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c3fd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c400:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c403:	8b 45 10             	mov    0x10(%ebp),%eax
c010c406:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010c409:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c40c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010c40f:	73 4e                	jae    c010c45f <memmove+0x71>
c010c411:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c414:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c417:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c41a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c41d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c420:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010c423:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c426:	89 c1                	mov    %eax,%ecx
c010c428:	c1 e9 02             	shr    $0x2,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010c42b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c42e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c431:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c010c434:	89 d7                	mov    %edx,%edi
c010c436:	89 c3                	mov    %eax,%ebx
c010c438:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c010c43b:	89 de                	mov    %ebx,%esi
c010c43d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c43f:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010c442:	83 e1 03             	and    $0x3,%ecx
c010c445:	74 02                	je     c010c449 <memmove+0x5b>
c010c447:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c449:	89 f3                	mov    %esi,%ebx
c010c44b:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c010c44e:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c010c451:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010c454:	89 7d d4             	mov    %edi,-0x2c(%ebp)
c010c457:	89 5d d0             	mov    %ebx,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010c45a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c45d:	eb 3b                	jmp    c010c49a <memmove+0xac>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010c45f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c462:	83 e8 01             	sub    $0x1,%eax
c010c465:	89 c2                	mov    %eax,%edx
c010c467:	03 55 ec             	add    -0x14(%ebp),%edx
c010c46a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c46d:	83 e8 01             	sub    $0x1,%eax
c010c470:	03 45 f0             	add    -0x10(%ebp),%eax
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010c473:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010c476:	89 4d bc             	mov    %ecx,-0x44(%ebp)
c010c479:	89 d6                	mov    %edx,%esi
c010c47b:	89 c3                	mov    %eax,%ebx
c010c47d:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c010c480:	89 df                	mov    %ebx,%edi
c010c482:	fd                   	std    
c010c483:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c485:	fc                   	cld    
c010c486:	89 fb                	mov    %edi,%ebx
c010c488:	89 4d bc             	mov    %ecx,-0x44(%ebp)
c010c48b:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c010c48e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010c491:	89 75 c8             	mov    %esi,-0x38(%ebp)
c010c494:	89 5d c4             	mov    %ebx,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010c497:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010c49a:	83 c4 38             	add    $0x38,%esp
c010c49d:	5b                   	pop    %ebx
c010c49e:	5e                   	pop    %esi
c010c49f:	5f                   	pop    %edi
c010c4a0:	5d                   	pop    %ebp
c010c4a1:	c3                   	ret    

c010c4a2 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010c4a2:	55                   	push   %ebp
c010c4a3:	89 e5                	mov    %esp,%ebp
c010c4a5:	57                   	push   %edi
c010c4a6:	56                   	push   %esi
c010c4a7:	53                   	push   %ebx
c010c4a8:	83 ec 24             	sub    $0x24,%esp
c010c4ab:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c4b1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c4b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c4b7:	8b 45 10             	mov    0x10(%ebp),%eax
c010c4ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010c4bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c4c0:	89 c1                	mov    %eax,%ecx
c010c4c2:	c1 e9 02             	shr    $0x2,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010c4c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c4c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c4cb:	89 4d d0             	mov    %ecx,-0x30(%ebp)
c010c4ce:	89 d7                	mov    %edx,%edi
c010c4d0:	89 c3                	mov    %eax,%ebx
c010c4d2:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010c4d5:	89 de                	mov    %ebx,%esi
c010c4d7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010c4d9:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010c4dc:	83 e1 03             	and    $0x3,%ecx
c010c4df:	74 02                	je     c010c4e3 <memcpy+0x41>
c010c4e1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010c4e3:	89 f3                	mov    %esi,%ebx
c010c4e5:	89 4d d0             	mov    %ecx,-0x30(%ebp)
c010c4e8:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010c4eb:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
c010c4ee:	89 7d e0             	mov    %edi,-0x20(%ebp)
c010c4f1:	89 5d dc             	mov    %ebx,-0x24(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010c4f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010c4f7:	83 c4 24             	add    $0x24,%esp
c010c4fa:	5b                   	pop    %ebx
c010c4fb:	5e                   	pop    %esi
c010c4fc:	5f                   	pop    %edi
c010c4fd:	5d                   	pop    %ebp
c010c4fe:	c3                   	ret    

c010c4ff <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010c4ff:	55                   	push   %ebp
c010c500:	89 e5                	mov    %esp,%ebp
c010c502:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010c505:	8b 45 08             	mov    0x8(%ebp),%eax
c010c508:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010c50b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c50e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010c511:	eb 32                	jmp    c010c545 <memcmp+0x46>
        if (*s1 != *s2) {
c010c513:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c516:	0f b6 10             	movzbl (%eax),%edx
c010c519:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c51c:	0f b6 00             	movzbl (%eax),%eax
c010c51f:	38 c2                	cmp    %al,%dl
c010c521:	74 1a                	je     c010c53d <memcmp+0x3e>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010c523:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c526:	0f b6 00             	movzbl (%eax),%eax
c010c529:	0f b6 d0             	movzbl %al,%edx
c010c52c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c52f:	0f b6 00             	movzbl (%eax),%eax
c010c532:	0f b6 c0             	movzbl %al,%eax
c010c535:	89 d1                	mov    %edx,%ecx
c010c537:	29 c1                	sub    %eax,%ecx
c010c539:	89 c8                	mov    %ecx,%eax
c010c53b:	eb 1c                	jmp    c010c559 <memcmp+0x5a>
        }
        s1 ++, s2 ++;
c010c53d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010c541:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010c545:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010c549:	0f 95 c0             	setne  %al
c010c54c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010c550:	84 c0                	test   %al,%al
c010c552:	75 bf                	jne    c010c513 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010c554:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c559:	c9                   	leave  
c010c55a:	c3                   	ret    
