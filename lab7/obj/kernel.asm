
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 10 13 00 	lgdtl  0x131018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 10 13 c0       	mov    $0xc0131000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 04 00 00 00       	call   c010002c <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>
	...

c010002c <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c010002c:	55                   	push   %ebp
c010002d:	89 e5                	mov    %esp,%ebp
c010002f:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100032:	ba a4 55 1c c0       	mov    $0xc01c55a4,%edx
c0100037:	b8 c9 22 1c c0       	mov    $0xc01c22c9,%eax
c010003c:	89 d1                	mov    %edx,%ecx
c010003e:	29 c1                	sub    %eax,%ecx
c0100040:	89 c8                	mov    %ecx,%eax
c0100042:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100046:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010004d:	00 
c010004e:	c7 04 24 c9 22 1c c0 	movl   $0xc01c22c9,(%esp)
c0100055:	e8 59 d7 00 00       	call   c010d7b3 <memset>

    cons_init();                // init the console
c010005a:	e8 11 17 00 00       	call   c0101770 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005f:	c7 45 f4 80 d9 10 c0 	movl   $0xc010d980,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100066:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100069:	89 44 24 04          	mov    %eax,0x4(%esp)
c010006d:	c7 04 24 9c d9 10 c0 	movl   $0xc010d99c,(%esp)
c0100074:	e8 ea 02 00 00       	call   c0100363 <cprintf>

    print_kerninfo();
c0100079:	e8 ee 08 00 00       	call   c010096c <print_kerninfo>

    grade_backtrace();
c010007e:	e8 a2 00 00 00       	call   c0100125 <grade_backtrace>

    pmm_init();                 // init physical memory management
c0100083:	e8 e7 56 00 00       	call   c010576f <pmm_init>

    pic_init();                 // init interrupt controller
c0100088:	e8 f0 20 00 00       	call   c010217d <pic_init>
    idt_init();                 // init interrupt descriptor table
c010008d:	e8 68 22 00 00       	call   c01022fa <idt_init>

    vmm_init();                 // init virtual memory management
c0100092:	e8 c9 86 00 00       	call   c0108760 <vmm_init>
    sched_init();               // init scheduler
c0100097:	e8 cb c4 00 00       	call   c010c567 <sched_init>
    proc_init();                // init process table
c010009c:	e8 c0 bd 00 00       	call   c010be61 <proc_init>
    
    ide_init();                 // init ide devices
c01000a1:	e8 09 18 00 00       	call   c01018af <ide_init>
    swap_init();                // init swap
c01000a6:	e8 8c 6d 00 00       	call   c0106e37 <swap_init>

    clock_init();               // init clock interrupt
c01000ab:	e8 d0 0d 00 00       	call   c0100e80 <clock_init>
    intr_enable();              // enable irq interrupt
c01000b0:	e8 2f 20 00 00       	call   c01020e4 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b5:	e8 66 bf 00 00       	call   c010c020 <cpu_idle>

c01000ba <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000ba:	55                   	push   %ebp
c01000bb:	89 e5                	mov    %esp,%ebp
c01000bd:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000c0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000c7:	00 
c01000c8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000cf:	00 
c01000d0:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000d7:	e8 ce 0c 00 00       	call   c0100daa <mon_backtrace>
}
c01000dc:	c9                   	leave  
c01000dd:	c3                   	ret    

c01000de <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000de:	55                   	push   %ebp
c01000df:	89 e5                	mov    %esp,%ebp
c01000e1:	53                   	push   %ebx
c01000e2:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e5:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000e8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000eb:	8d 55 08             	lea    0x8(%ebp),%edx
c01000ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01000f1:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000f5:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000f9:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000fd:	89 04 24             	mov    %eax,(%esp)
c0100100:	e8 b5 ff ff ff       	call   c01000ba <grade_backtrace2>
}
c0100105:	83 c4 14             	add    $0x14,%esp
c0100108:	5b                   	pop    %ebx
c0100109:	5d                   	pop    %ebp
c010010a:	c3                   	ret    

c010010b <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c010010b:	55                   	push   %ebp
c010010c:	89 e5                	mov    %esp,%ebp
c010010e:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c0100111:	8b 45 10             	mov    0x10(%ebp),%eax
c0100114:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100118:	8b 45 08             	mov    0x8(%ebp),%eax
c010011b:	89 04 24             	mov    %eax,(%esp)
c010011e:	e8 bb ff ff ff       	call   c01000de <grade_backtrace1>
}
c0100123:	c9                   	leave  
c0100124:	c3                   	ret    

c0100125 <grade_backtrace>:

void
grade_backtrace(void) {
c0100125:	55                   	push   %ebp
c0100126:	89 e5                	mov    %esp,%ebp
c0100128:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c010012b:	b8 2c 00 10 c0       	mov    $0xc010002c,%eax
c0100130:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100137:	ff 
c0100138:	89 44 24 04          	mov    %eax,0x4(%esp)
c010013c:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100143:	e8 c3 ff ff ff       	call   c010010b <grade_backtrace0>
}
c0100148:	c9                   	leave  
c0100149:	c3                   	ret    

c010014a <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c010014a:	55                   	push   %ebp
c010014b:	89 e5                	mov    %esp,%ebp
c010014d:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100150:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100153:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100156:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100159:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c010015c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100160:	0f b7 c0             	movzwl %ax,%eax
c0100163:	89 c2                	mov    %eax,%edx
c0100165:	83 e2 03             	and    $0x3,%edx
c0100168:	a1 e0 22 1c c0       	mov    0xc01c22e0,%eax
c010016d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100171:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100175:	c7 04 24 a1 d9 10 c0 	movl   $0xc010d9a1,(%esp)
c010017c:	e8 e2 01 00 00       	call   c0100363 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c0100181:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100185:	0f b7 d0             	movzwl %ax,%edx
c0100188:	a1 e0 22 1c c0       	mov    0xc01c22e0,%eax
c010018d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100191:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100195:	c7 04 24 af d9 10 c0 	movl   $0xc010d9af,(%esp)
c010019c:	e8 c2 01 00 00       	call   c0100363 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c01001a1:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001a5:	0f b7 d0             	movzwl %ax,%edx
c01001a8:	a1 e0 22 1c c0       	mov    0xc01c22e0,%eax
c01001ad:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001b1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001b5:	c7 04 24 bd d9 10 c0 	movl   $0xc010d9bd,(%esp)
c01001bc:	e8 a2 01 00 00       	call   c0100363 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001c1:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001c5:	0f b7 d0             	movzwl %ax,%edx
c01001c8:	a1 e0 22 1c c0       	mov    0xc01c22e0,%eax
c01001cd:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001d1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001d5:	c7 04 24 cb d9 10 c0 	movl   $0xc010d9cb,(%esp)
c01001dc:	e8 82 01 00 00       	call   c0100363 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001e1:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001e5:	0f b7 d0             	movzwl %ax,%edx
c01001e8:	a1 e0 22 1c c0       	mov    0xc01c22e0,%eax
c01001ed:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001f1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001f5:	c7 04 24 d9 d9 10 c0 	movl   $0xc010d9d9,(%esp)
c01001fc:	e8 62 01 00 00       	call   c0100363 <cprintf>
    round ++;
c0100201:	a1 e0 22 1c c0       	mov    0xc01c22e0,%eax
c0100206:	83 c0 01             	add    $0x1,%eax
c0100209:	a3 e0 22 1c c0       	mov    %eax,0xc01c22e0
}
c010020e:	c9                   	leave  
c010020f:	c3                   	ret    

c0100210 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c0100210:	55                   	push   %ebp
c0100211:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c0100213:	5d                   	pop    %ebp
c0100214:	c3                   	ret    

c0100215 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100215:	55                   	push   %ebp
c0100216:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100218:	5d                   	pop    %ebp
c0100219:	c3                   	ret    

c010021a <lab1_switch_test>:

static void
lab1_switch_test(void) {
c010021a:	55                   	push   %ebp
c010021b:	89 e5                	mov    %esp,%ebp
c010021d:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c0100220:	e8 25 ff ff ff       	call   c010014a <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100225:	c7 04 24 e8 d9 10 c0 	movl   $0xc010d9e8,(%esp)
c010022c:	e8 32 01 00 00       	call   c0100363 <cprintf>
    lab1_switch_to_user();
c0100231:	e8 da ff ff ff       	call   c0100210 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100236:	e8 0f ff ff ff       	call   c010014a <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c010023b:	c7 04 24 08 da 10 c0 	movl   $0xc010da08,(%esp)
c0100242:	e8 1c 01 00 00       	call   c0100363 <cprintf>
    lab1_switch_to_kernel();
c0100247:	e8 c9 ff ff ff       	call   c0100215 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c010024c:	e8 f9 fe ff ff       	call   c010014a <lab1_print_cur_status>
}
c0100251:	c9                   	leave  
c0100252:	c3                   	ret    
	...

c0100254 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100254:	55                   	push   %ebp
c0100255:	89 e5                	mov    %esp,%ebp
c0100257:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c010025a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010025e:	74 13                	je     c0100273 <readline+0x1f>
        cprintf("%s", prompt);
c0100260:	8b 45 08             	mov    0x8(%ebp),%eax
c0100263:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100267:	c7 04 24 27 da 10 c0 	movl   $0xc010da27,(%esp)
c010026e:	e8 f0 00 00 00       	call   c0100363 <cprintf>
    }
    int i = 0, c;
c0100273:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010027a:	eb 01                	jmp    c010027d <readline+0x29>
        else if (c == '\n' || c == '\r') {
            cputchar(c);
            buf[i] = '\0';
            return buf;
        }
    }
c010027c:	90                   	nop
    if (prompt != NULL) {
        cprintf("%s", prompt);
    }
    int i = 0, c;
    while (1) {
        c = getchar();
c010027d:	e8 6e 01 00 00       	call   c01003f0 <getchar>
c0100282:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100285:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100289:	79 07                	jns    c0100292 <readline+0x3e>
            return NULL;
c010028b:	b8 00 00 00 00       	mov    $0x0,%eax
c0100290:	eb 79                	jmp    c010030b <readline+0xb7>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0100292:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0100296:	7e 28                	jle    c01002c0 <readline+0x6c>
c0100298:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c010029f:	7f 1f                	jg     c01002c0 <readline+0x6c>
            cputchar(c);
c01002a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002a4:	89 04 24             	mov    %eax,(%esp)
c01002a7:	e8 df 00 00 00       	call   c010038b <cputchar>
            buf[i ++] = c;
c01002ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002af:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01002b2:	81 c2 00 23 1c c0    	add    $0xc01c2300,%edx
c01002b8:	88 02                	mov    %al,(%edx)
c01002ba:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01002be:	eb 46                	jmp    c0100306 <readline+0xb2>
        }
        else if (c == '\b' && i > 0) {
c01002c0:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002c4:	75 17                	jne    c01002dd <readline+0x89>
c01002c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002ca:	7e 11                	jle    c01002dd <readline+0x89>
            cputchar(c);
c01002cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002cf:	89 04 24             	mov    %eax,(%esp)
c01002d2:	e8 b4 00 00 00       	call   c010038b <cputchar>
            i --;
c01002d7:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002db:	eb 29                	jmp    c0100306 <readline+0xb2>
        }
        else if (c == '\n' || c == '\r') {
c01002dd:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002e1:	74 06                	je     c01002e9 <readline+0x95>
c01002e3:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002e7:	75 93                	jne    c010027c <readline+0x28>
            cputchar(c);
c01002e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002ec:	89 04 24             	mov    %eax,(%esp)
c01002ef:	e8 97 00 00 00       	call   c010038b <cputchar>
            buf[i] = '\0';
c01002f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002f7:	05 00 23 1c c0       	add    $0xc01c2300,%eax
c01002fc:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01002ff:	b8 00 23 1c c0       	mov    $0xc01c2300,%eax
c0100304:	eb 05                	jmp    c010030b <readline+0xb7>
        }
    }
c0100306:	e9 71 ff ff ff       	jmp    c010027c <readline+0x28>
}
c010030b:	c9                   	leave  
c010030c:	c3                   	ret    
c010030d:	00 00                	add    %al,(%eax)
	...

c0100310 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100310:	55                   	push   %ebp
c0100311:	89 e5                	mov    %esp,%ebp
c0100313:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100316:	8b 45 08             	mov    0x8(%ebp),%eax
c0100319:	89 04 24             	mov    %eax,(%esp)
c010031c:	e8 7b 14 00 00       	call   c010179c <cons_putc>
    (*cnt) ++;
c0100321:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100324:	8b 00                	mov    (%eax),%eax
c0100326:	8d 50 01             	lea    0x1(%eax),%edx
c0100329:	8b 45 0c             	mov    0xc(%ebp),%eax
c010032c:	89 10                	mov    %edx,(%eax)
}
c010032e:	c9                   	leave  
c010032f:	c3                   	ret    

c0100330 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c0100330:	55                   	push   %ebp
c0100331:	89 e5                	mov    %esp,%ebp
c0100333:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c0100336:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c010033d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100340:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100344:	8b 45 08             	mov    0x8(%ebp),%eax
c0100347:	89 44 24 08          	mov    %eax,0x8(%esp)
c010034b:	8d 45 f4             	lea    -0xc(%ebp),%eax
c010034e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100352:	c7 04 24 10 03 10 c0 	movl   $0xc0100310,(%esp)
c0100359:	e8 54 cb 00 00       	call   c010ceb2 <vprintfmt>
    return cnt;
c010035e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100361:	c9                   	leave  
c0100362:	c3                   	ret    

c0100363 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100363:	55                   	push   %ebp
c0100364:	89 e5                	mov    %esp,%ebp
c0100366:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0100369:	8d 55 0c             	lea    0xc(%ebp),%edx
c010036c:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010036f:	89 10                	mov    %edx,(%eax)
    cnt = vcprintf(fmt, ap);
c0100371:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100374:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100378:	8b 45 08             	mov    0x8(%ebp),%eax
c010037b:	89 04 24             	mov    %eax,(%esp)
c010037e:	e8 ad ff ff ff       	call   c0100330 <vcprintf>
c0100383:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100386:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100389:	c9                   	leave  
c010038a:	c3                   	ret    

c010038b <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010038b:	55                   	push   %ebp
c010038c:	89 e5                	mov    %esp,%ebp
c010038e:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100391:	8b 45 08             	mov    0x8(%ebp),%eax
c0100394:	89 04 24             	mov    %eax,(%esp)
c0100397:	e8 00 14 00 00       	call   c010179c <cons_putc>
}
c010039c:	c9                   	leave  
c010039d:	c3                   	ret    

c010039e <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c010039e:	55                   	push   %ebp
c010039f:	89 e5                	mov    %esp,%ebp
c01003a1:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c01003a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01003ab:	eb 13                	jmp    c01003c0 <cputs+0x22>
        cputch(c, &cnt);
c01003ad:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003b1:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003b4:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003b8:	89 04 24             	mov    %eax,(%esp)
c01003bb:	e8 50 ff ff ff       	call   c0100310 <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01003c3:	0f b6 00             	movzbl (%eax),%eax
c01003c6:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003c9:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003cd:	0f 95 c0             	setne  %al
c01003d0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01003d4:	84 c0                	test   %al,%al
c01003d6:	75 d5                	jne    c01003ad <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003d8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003db:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003df:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003e6:	e8 25 ff ff ff       	call   c0100310 <cputch>
    return cnt;
c01003eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003ee:	c9                   	leave  
c01003ef:	c3                   	ret    

c01003f0 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003f0:	55                   	push   %ebp
c01003f1:	89 e5                	mov    %esp,%ebp
c01003f3:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003f6:	e8 dd 13 00 00       	call   c01017d8 <cons_getc>
c01003fb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100402:	74 f2                	je     c01003f6 <getchar+0x6>
        /* do nothing */;
    return c;
c0100404:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100407:	c9                   	leave  
c0100408:	c3                   	ret    
c0100409:	00 00                	add    %al,(%eax)
	...

c010040c <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c010040c:	55                   	push   %ebp
c010040d:	89 e5                	mov    %esp,%ebp
c010040f:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c0100412:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100415:	8b 00                	mov    (%eax),%eax
c0100417:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010041a:	8b 45 10             	mov    0x10(%ebp),%eax
c010041d:	8b 00                	mov    (%eax),%eax
c010041f:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0100422:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100429:	e9 c6 00 00 00       	jmp    c01004f4 <stab_binsearch+0xe8>
        int true_m = (l + r) / 2, m = true_m;
c010042e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100431:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100434:	01 d0                	add    %edx,%eax
c0100436:	89 c2                	mov    %eax,%edx
c0100438:	c1 ea 1f             	shr    $0x1f,%edx
c010043b:	01 d0                	add    %edx,%eax
c010043d:	d1 f8                	sar    %eax
c010043f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0100442:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100445:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100448:	eb 04                	jmp    c010044e <stab_binsearch+0x42>
            m --;
c010044a:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010044e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100451:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100454:	7c 1b                	jl     c0100471 <stab_binsearch+0x65>
c0100456:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100459:	89 d0                	mov    %edx,%eax
c010045b:	01 c0                	add    %eax,%eax
c010045d:	01 d0                	add    %edx,%eax
c010045f:	c1 e0 02             	shl    $0x2,%eax
c0100462:	03 45 08             	add    0x8(%ebp),%eax
c0100465:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100469:	0f b6 c0             	movzbl %al,%eax
c010046c:	3b 45 14             	cmp    0x14(%ebp),%eax
c010046f:	75 d9                	jne    c010044a <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100471:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100474:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100477:	7d 0b                	jge    c0100484 <stab_binsearch+0x78>
            l = true_m + 1;
c0100479:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010047c:	83 c0 01             	add    $0x1,%eax
c010047f:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100482:	eb 70                	jmp    c01004f4 <stab_binsearch+0xe8>
        }

        // actual binary search
        any_matches = 1;
c0100484:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010048b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010048e:	89 d0                	mov    %edx,%eax
c0100490:	01 c0                	add    %eax,%eax
c0100492:	01 d0                	add    %edx,%eax
c0100494:	c1 e0 02             	shl    $0x2,%eax
c0100497:	03 45 08             	add    0x8(%ebp),%eax
c010049a:	8b 40 08             	mov    0x8(%eax),%eax
c010049d:	3b 45 18             	cmp    0x18(%ebp),%eax
c01004a0:	73 13                	jae    c01004b5 <stab_binsearch+0xa9>
            *region_left = m;
c01004a2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004a5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004a8:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c01004aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004ad:	83 c0 01             	add    $0x1,%eax
c01004b0:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004b3:	eb 3f                	jmp    c01004f4 <stab_binsearch+0xe8>
        } else if (stabs[m].n_value > addr) {
c01004b5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004b8:	89 d0                	mov    %edx,%eax
c01004ba:	01 c0                	add    %eax,%eax
c01004bc:	01 d0                	add    %edx,%eax
c01004be:	c1 e0 02             	shl    $0x2,%eax
c01004c1:	03 45 08             	add    0x8(%ebp),%eax
c01004c4:	8b 40 08             	mov    0x8(%eax),%eax
c01004c7:	3b 45 18             	cmp    0x18(%ebp),%eax
c01004ca:	76 16                	jbe    c01004e2 <stab_binsearch+0xd6>
            *region_right = m - 1;
c01004cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004cf:	8d 50 ff             	lea    -0x1(%eax),%edx
c01004d2:	8b 45 10             	mov    0x10(%ebp),%eax
c01004d5:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01004d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004da:	83 e8 01             	sub    $0x1,%eax
c01004dd:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004e0:	eb 12                	jmp    c01004f4 <stab_binsearch+0xe8>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01004e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004e8:	89 10                	mov    %edx,(%eax)
            l = m;
c01004ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004ed:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01004f0:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01004f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01004f7:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01004fa:	0f 8e 2e ff ff ff    	jle    c010042e <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c0100500:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100504:	75 0f                	jne    c0100515 <stab_binsearch+0x109>
        *region_right = *region_left - 1;
c0100506:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100509:	8b 00                	mov    (%eax),%eax
c010050b:	8d 50 ff             	lea    -0x1(%eax),%edx
c010050e:	8b 45 10             	mov    0x10(%ebp),%eax
c0100511:	89 10                	mov    %edx,(%eax)
c0100513:	eb 3b                	jmp    c0100550 <stab_binsearch+0x144>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c0100515:	8b 45 10             	mov    0x10(%ebp),%eax
c0100518:	8b 00                	mov    (%eax),%eax
c010051a:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c010051d:	eb 04                	jmp    c0100523 <stab_binsearch+0x117>
c010051f:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c0100523:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100526:	8b 00                	mov    (%eax),%eax
c0100528:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010052b:	7d 1b                	jge    c0100548 <stab_binsearch+0x13c>
c010052d:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100530:	89 d0                	mov    %edx,%eax
c0100532:	01 c0                	add    %eax,%eax
c0100534:	01 d0                	add    %edx,%eax
c0100536:	c1 e0 02             	shl    $0x2,%eax
c0100539:	03 45 08             	add    0x8(%ebp),%eax
c010053c:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100540:	0f b6 c0             	movzbl %al,%eax
c0100543:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100546:	75 d7                	jne    c010051f <stab_binsearch+0x113>
            /* do nothing */;
        *region_left = l;
c0100548:	8b 45 0c             	mov    0xc(%ebp),%eax
c010054b:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010054e:	89 10                	mov    %edx,(%eax)
    }
}
c0100550:	c9                   	leave  
c0100551:	c3                   	ret    

c0100552 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0100552:	55                   	push   %ebp
c0100553:	89 e5                	mov    %esp,%ebp
c0100555:	53                   	push   %ebx
c0100556:	83 ec 54             	sub    $0x54,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100559:	8b 45 0c             	mov    0xc(%ebp),%eax
c010055c:	c7 00 2c da 10 c0    	movl   $0xc010da2c,(%eax)
    info->eip_line = 0;
c0100562:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100565:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c010056c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010056f:	c7 40 08 2c da 10 c0 	movl   $0xc010da2c,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100576:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100579:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c0100580:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100583:	8b 55 08             	mov    0x8(%ebp),%edx
c0100586:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100589:	8b 45 0c             	mov    0xc(%ebp),%eax
c010058c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0100593:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c010059a:	76 21                	jbe    c01005bd <debuginfo_eip+0x6b>
        stabs = __STAB_BEGIN__;
c010059c:	c7 45 f4 60 07 11 c0 	movl   $0xc0110760,-0xc(%ebp)
        stab_end = __STAB_END__;
c01005a3:	c7 45 f0 58 80 12 c0 	movl   $0xc0128058,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c01005aa:	c7 45 ec 59 80 12 c0 	movl   $0xc0128059,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c01005b1:	c7 45 e8 47 ef 12 c0 	movl   $0xc012ef47,-0x18(%ebp)
c01005b8:	e9 ec 00 00 00       	jmp    c01006a9 <debuginfo_eip+0x157>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01005bd:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01005c4:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c01005c9:	85 c0                	test   %eax,%eax
c01005cb:	74 11                	je     c01005de <debuginfo_eip+0x8c>
c01005cd:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c01005d2:	8b 40 18             	mov    0x18(%eax),%eax
c01005d5:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01005d8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01005dc:	75 0a                	jne    c01005e8 <debuginfo_eip+0x96>
            return -1;
c01005de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01005e3:	e9 7e 03 00 00       	jmp    c0100966 <debuginfo_eip+0x414>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01005e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01005eb:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01005f2:	00 
c01005f3:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01005fa:	00 
c01005fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01005ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100602:	89 04 24             	mov    %eax,(%esp)
c0100605:	e8 99 8a 00 00       	call   c01090a3 <user_mem_check>
c010060a:	85 c0                	test   %eax,%eax
c010060c:	75 0a                	jne    c0100618 <debuginfo_eip+0xc6>
            return -1;
c010060e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100613:	e9 4e 03 00 00       	jmp    c0100966 <debuginfo_eip+0x414>
        }

        stabs = usd->stabs;
c0100618:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010061b:	8b 00                	mov    (%eax),%eax
c010061d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c0100620:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100623:	8b 40 04             	mov    0x4(%eax),%eax
c0100626:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100629:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010062c:	8b 40 08             	mov    0x8(%eax),%eax
c010062f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c0100632:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100635:	8b 40 0c             	mov    0xc(%eax),%eax
c0100638:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c010063b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010063e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100641:	29 c2                	sub    %eax,%edx
c0100643:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100646:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010064d:	00 
c010064e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100652:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100656:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100659:	89 04 24             	mov    %eax,(%esp)
c010065c:	e8 42 8a 00 00       	call   c01090a3 <user_mem_check>
c0100661:	85 c0                	test   %eax,%eax
c0100663:	75 0a                	jne    c010066f <debuginfo_eip+0x11d>
            return -1;
c0100665:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010066a:	e9 f7 02 00 00       	jmp    c0100966 <debuginfo_eip+0x414>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c010066f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100672:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100675:	89 d1                	mov    %edx,%ecx
c0100677:	29 c1                	sub    %eax,%ecx
c0100679:	89 c8                	mov    %ecx,%eax
c010067b:	89 c2                	mov    %eax,%edx
c010067d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100680:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100687:	00 
c0100688:	89 54 24 08          	mov    %edx,0x8(%esp)
c010068c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100690:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100693:	89 04 24             	mov    %eax,(%esp)
c0100696:	e8 08 8a 00 00       	call   c01090a3 <user_mem_check>
c010069b:	85 c0                	test   %eax,%eax
c010069d:	75 0a                	jne    c01006a9 <debuginfo_eip+0x157>
            return -1;
c010069f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006a4:	e9 bd 02 00 00       	jmp    c0100966 <debuginfo_eip+0x414>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c01006a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006ac:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01006af:	76 0d                	jbe    c01006be <debuginfo_eip+0x16c>
c01006b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006b4:	83 e8 01             	sub    $0x1,%eax
c01006b7:	0f b6 00             	movzbl (%eax),%eax
c01006ba:	84 c0                	test   %al,%al
c01006bc:	74 0a                	je     c01006c8 <debuginfo_eip+0x176>
        return -1;
c01006be:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006c3:	e9 9e 02 00 00       	jmp    c0100966 <debuginfo_eip+0x414>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01006c8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01006cf:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01006d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006d5:	89 d3                	mov    %edx,%ebx
c01006d7:	29 c3                	sub    %eax,%ebx
c01006d9:	89 d8                	mov    %ebx,%eax
c01006db:	c1 f8 02             	sar    $0x2,%eax
c01006de:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01006e4:	83 e8 01             	sub    $0x1,%eax
c01006e7:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01006ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01006ed:	89 44 24 10          	mov    %eax,0x10(%esp)
c01006f1:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01006f8:	00 
c01006f9:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01006fc:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100700:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100703:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100707:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010070a:	89 04 24             	mov    %eax,(%esp)
c010070d:	e8 fa fc ff ff       	call   c010040c <stab_binsearch>
    if (lfile == 0)
c0100712:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100715:	85 c0                	test   %eax,%eax
c0100717:	75 0a                	jne    c0100723 <debuginfo_eip+0x1d1>
        return -1;
c0100719:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010071e:	e9 43 02 00 00       	jmp    c0100966 <debuginfo_eip+0x414>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c0100723:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100726:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0100729:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010072c:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c010072f:	8b 45 08             	mov    0x8(%ebp),%eax
c0100732:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100736:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c010073d:	00 
c010073e:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100741:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100745:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0100748:	89 44 24 04          	mov    %eax,0x4(%esp)
c010074c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010074f:	89 04 24             	mov    %eax,(%esp)
c0100752:	e8 b5 fc ff ff       	call   c010040c <stab_binsearch>

    if (lfun <= rfun) {
c0100757:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010075a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010075d:	39 c2                	cmp    %eax,%edx
c010075f:	7f 72                	jg     c01007d3 <debuginfo_eip+0x281>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100761:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100764:	89 c2                	mov    %eax,%edx
c0100766:	89 d0                	mov    %edx,%eax
c0100768:	01 c0                	add    %eax,%eax
c010076a:	01 d0                	add    %edx,%eax
c010076c:	c1 e0 02             	shl    $0x2,%eax
c010076f:	03 45 f4             	add    -0xc(%ebp),%eax
c0100772:	8b 10                	mov    (%eax),%edx
c0100774:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100777:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010077a:	89 cb                	mov    %ecx,%ebx
c010077c:	29 c3                	sub    %eax,%ebx
c010077e:	89 d8                	mov    %ebx,%eax
c0100780:	39 c2                	cmp    %eax,%edx
c0100782:	73 1e                	jae    c01007a2 <debuginfo_eip+0x250>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c0100784:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100787:	89 c2                	mov    %eax,%edx
c0100789:	89 d0                	mov    %edx,%eax
c010078b:	01 c0                	add    %eax,%eax
c010078d:	01 d0                	add    %edx,%eax
c010078f:	c1 e0 02             	shl    $0x2,%eax
c0100792:	03 45 f4             	add    -0xc(%ebp),%eax
c0100795:	8b 00                	mov    (%eax),%eax
c0100797:	89 c2                	mov    %eax,%edx
c0100799:	03 55 ec             	add    -0x14(%ebp),%edx
c010079c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010079f:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c01007a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007a5:	89 c2                	mov    %eax,%edx
c01007a7:	89 d0                	mov    %edx,%eax
c01007a9:	01 c0                	add    %eax,%eax
c01007ab:	01 d0                	add    %edx,%eax
c01007ad:	c1 e0 02             	shl    $0x2,%eax
c01007b0:	03 45 f4             	add    -0xc(%ebp),%eax
c01007b3:	8b 50 08             	mov    0x8(%eax),%edx
c01007b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007b9:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01007bc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007bf:	8b 40 10             	mov    0x10(%eax),%eax
c01007c2:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01007c5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007c8:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01007cb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007ce:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01007d1:	eb 15                	jmp    c01007e8 <debuginfo_eip+0x296>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01007d3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007d6:	8b 55 08             	mov    0x8(%ebp),%edx
c01007d9:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01007dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007df:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01007e2:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007e5:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01007e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007eb:	8b 40 08             	mov    0x8(%eax),%eax
c01007ee:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01007f5:	00 
c01007f6:	89 04 24             	mov    %eax,(%esp)
c01007f9:	e8 2d ce 00 00       	call   c010d62b <strfind>
c01007fe:	89 c2                	mov    %eax,%edx
c0100800:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100803:	8b 40 08             	mov    0x8(%eax),%eax
c0100806:	29 c2                	sub    %eax,%edx
c0100808:	8b 45 0c             	mov    0xc(%ebp),%eax
c010080b:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c010080e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100811:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100815:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010081c:	00 
c010081d:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100820:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100824:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100827:	89 44 24 04          	mov    %eax,0x4(%esp)
c010082b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010082e:	89 04 24             	mov    %eax,(%esp)
c0100831:	e8 d6 fb ff ff       	call   c010040c <stab_binsearch>
    if (lline <= rline) {
c0100836:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100839:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010083c:	39 c2                	cmp    %eax,%edx
c010083e:	7f 20                	jg     c0100860 <debuginfo_eip+0x30e>
        info->eip_line = stabs[rline].n_desc;
c0100840:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100843:	89 c2                	mov    %eax,%edx
c0100845:	89 d0                	mov    %edx,%eax
c0100847:	01 c0                	add    %eax,%eax
c0100849:	01 d0                	add    %edx,%eax
c010084b:	c1 e0 02             	shl    $0x2,%eax
c010084e:	03 45 f4             	add    -0xc(%ebp),%eax
c0100851:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0100855:	0f b7 d0             	movzwl %ax,%edx
c0100858:	8b 45 0c             	mov    0xc(%ebp),%eax
c010085b:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c010085e:	eb 13                	jmp    c0100873 <debuginfo_eip+0x321>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100860:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100865:	e9 fc 00 00 00       	jmp    c0100966 <debuginfo_eip+0x414>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c010086a:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010086d:	83 e8 01             	sub    $0x1,%eax
c0100870:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100873:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100876:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100879:	39 c2                	cmp    %eax,%edx
c010087b:	7c 4a                	jl     c01008c7 <debuginfo_eip+0x375>
           && stabs[lline].n_type != N_SOL
c010087d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100880:	89 c2                	mov    %eax,%edx
c0100882:	89 d0                	mov    %edx,%eax
c0100884:	01 c0                	add    %eax,%eax
c0100886:	01 d0                	add    %edx,%eax
c0100888:	c1 e0 02             	shl    $0x2,%eax
c010088b:	03 45 f4             	add    -0xc(%ebp),%eax
c010088e:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100892:	3c 84                	cmp    $0x84,%al
c0100894:	74 31                	je     c01008c7 <debuginfo_eip+0x375>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0100896:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100899:	89 c2                	mov    %eax,%edx
c010089b:	89 d0                	mov    %edx,%eax
c010089d:	01 c0                	add    %eax,%eax
c010089f:	01 d0                	add    %edx,%eax
c01008a1:	c1 e0 02             	shl    $0x2,%eax
c01008a4:	03 45 f4             	add    -0xc(%ebp),%eax
c01008a7:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01008ab:	3c 64                	cmp    $0x64,%al
c01008ad:	75 bb                	jne    c010086a <debuginfo_eip+0x318>
c01008af:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008b2:	89 c2                	mov    %eax,%edx
c01008b4:	89 d0                	mov    %edx,%eax
c01008b6:	01 c0                	add    %eax,%eax
c01008b8:	01 d0                	add    %edx,%eax
c01008ba:	c1 e0 02             	shl    $0x2,%eax
c01008bd:	03 45 f4             	add    -0xc(%ebp),%eax
c01008c0:	8b 40 08             	mov    0x8(%eax),%eax
c01008c3:	85 c0                	test   %eax,%eax
c01008c5:	74 a3                	je     c010086a <debuginfo_eip+0x318>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01008c7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008ca:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008cd:	39 c2                	cmp    %eax,%edx
c01008cf:	7c 40                	jl     c0100911 <debuginfo_eip+0x3bf>
c01008d1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008d4:	89 c2                	mov    %eax,%edx
c01008d6:	89 d0                	mov    %edx,%eax
c01008d8:	01 c0                	add    %eax,%eax
c01008da:	01 d0                	add    %edx,%eax
c01008dc:	c1 e0 02             	shl    $0x2,%eax
c01008df:	03 45 f4             	add    -0xc(%ebp),%eax
c01008e2:	8b 10                	mov    (%eax),%edx
c01008e4:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01008e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01008ea:	89 cb                	mov    %ecx,%ebx
c01008ec:	29 c3                	sub    %eax,%ebx
c01008ee:	89 d8                	mov    %ebx,%eax
c01008f0:	39 c2                	cmp    %eax,%edx
c01008f2:	73 1d                	jae    c0100911 <debuginfo_eip+0x3bf>
        info->eip_file = stabstr + stabs[lline].n_strx;
c01008f4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008f7:	89 c2                	mov    %eax,%edx
c01008f9:	89 d0                	mov    %edx,%eax
c01008fb:	01 c0                	add    %eax,%eax
c01008fd:	01 d0                	add    %edx,%eax
c01008ff:	c1 e0 02             	shl    $0x2,%eax
c0100902:	03 45 f4             	add    -0xc(%ebp),%eax
c0100905:	8b 00                	mov    (%eax),%eax
c0100907:	89 c2                	mov    %eax,%edx
c0100909:	03 55 ec             	add    -0x14(%ebp),%edx
c010090c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010090f:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100911:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100914:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100917:	39 c2                	cmp    %eax,%edx
c0100919:	7d 46                	jge    c0100961 <debuginfo_eip+0x40f>
        for (lline = lfun + 1;
c010091b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010091e:	83 c0 01             	add    $0x1,%eax
c0100921:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100924:	eb 18                	jmp    c010093e <debuginfo_eip+0x3ec>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100926:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100929:	8b 40 14             	mov    0x14(%eax),%eax
c010092c:	8d 50 01             	lea    0x1(%eax),%edx
c010092f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100932:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0100935:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100938:	83 c0 01             	add    $0x1,%eax
c010093b:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c010093e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100941:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0100944:	39 c2                	cmp    %eax,%edx
c0100946:	7d 19                	jge    c0100961 <debuginfo_eip+0x40f>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100948:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010094b:	89 c2                	mov    %eax,%edx
c010094d:	89 d0                	mov    %edx,%eax
c010094f:	01 c0                	add    %eax,%eax
c0100951:	01 d0                	add    %edx,%eax
c0100953:	c1 e0 02             	shl    $0x2,%eax
c0100956:	03 45 f4             	add    -0xc(%ebp),%eax
c0100959:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010095d:	3c a0                	cmp    $0xa0,%al
c010095f:	74 c5                	je     c0100926 <debuginfo_eip+0x3d4>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100961:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100966:	83 c4 54             	add    $0x54,%esp
c0100969:	5b                   	pop    %ebx
c010096a:	5d                   	pop    %ebp
c010096b:	c3                   	ret    

c010096c <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c010096c:	55                   	push   %ebp
c010096d:	89 e5                	mov    %esp,%ebp
c010096f:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100972:	c7 04 24 36 da 10 c0 	movl   $0xc010da36,(%esp)
c0100979:	e8 e5 f9 ff ff       	call   c0100363 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c010097e:	c7 44 24 04 2c 00 10 	movl   $0xc010002c,0x4(%esp)
c0100985:	c0 
c0100986:	c7 04 24 4f da 10 c0 	movl   $0xc010da4f,(%esp)
c010098d:	e8 d1 f9 ff ff       	call   c0100363 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100992:	c7 44 24 04 6b d9 10 	movl   $0xc010d96b,0x4(%esp)
c0100999:	c0 
c010099a:	c7 04 24 67 da 10 c0 	movl   $0xc010da67,(%esp)
c01009a1:	e8 bd f9 ff ff       	call   c0100363 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c01009a6:	c7 44 24 04 c9 22 1c 	movl   $0xc01c22c9,0x4(%esp)
c01009ad:	c0 
c01009ae:	c7 04 24 7f da 10 c0 	movl   $0xc010da7f,(%esp)
c01009b5:	e8 a9 f9 ff ff       	call   c0100363 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c01009ba:	c7 44 24 04 a4 55 1c 	movl   $0xc01c55a4,0x4(%esp)
c01009c1:	c0 
c01009c2:	c7 04 24 97 da 10 c0 	movl   $0xc010da97,(%esp)
c01009c9:	e8 95 f9 ff ff       	call   c0100363 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c01009ce:	b8 a4 55 1c c0       	mov    $0xc01c55a4,%eax
c01009d3:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c01009d9:	b8 2c 00 10 c0       	mov    $0xc010002c,%eax
c01009de:	89 d1                	mov    %edx,%ecx
c01009e0:	29 c1                	sub    %eax,%ecx
c01009e2:	89 c8                	mov    %ecx,%eax
c01009e4:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c01009ea:	85 c0                	test   %eax,%eax
c01009ec:	0f 48 c2             	cmovs  %edx,%eax
c01009ef:	c1 f8 0a             	sar    $0xa,%eax
c01009f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01009f6:	c7 04 24 b0 da 10 c0 	movl   $0xc010dab0,(%esp)
c01009fd:	e8 61 f9 ff ff       	call   c0100363 <cprintf>
}
c0100a02:	c9                   	leave  
c0100a03:	c3                   	ret    

c0100a04 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100a04:	55                   	push   %ebp
c0100a05:	89 e5                	mov    %esp,%ebp
c0100a07:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100a0d:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100a10:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a14:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a17:	89 04 24             	mov    %eax,(%esp)
c0100a1a:	e8 33 fb ff ff       	call   c0100552 <debuginfo_eip>
c0100a1f:	85 c0                	test   %eax,%eax
c0100a21:	74 15                	je     c0100a38 <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100a23:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a26:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a2a:	c7 04 24 da da 10 c0 	movl   $0xc010dada,(%esp)
c0100a31:	e8 2d f9 ff ff       	call   c0100363 <cprintf>
c0100a36:	eb 69                	jmp    c0100aa1 <print_debuginfo+0x9d>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a38:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100a3f:	eb 1a                	jmp    c0100a5b <print_debuginfo+0x57>
            fnname[j] = info.eip_fn_name[j];
c0100a41:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100a44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a47:	01 d0                	add    %edx,%eax
c0100a49:	0f b6 10             	movzbl (%eax),%edx
c0100a4c:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
c0100a52:	03 45 f4             	add    -0xc(%ebp),%eax
c0100a55:	88 10                	mov    %dl,(%eax)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a57:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100a5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100a5e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100a61:	7f de                	jg     c0100a41 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100a63:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
c0100a69:	03 45 f4             	add    -0xc(%ebp),%eax
c0100a6c:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100a6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100a72:	8b 55 08             	mov    0x8(%ebp),%edx
c0100a75:	89 d1                	mov    %edx,%ecx
c0100a77:	29 c1                	sub    %eax,%ecx
c0100a79:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100a7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100a7f:	89 4c 24 10          	mov    %ecx,0x10(%esp)
                fnname, eip - info.eip_fn_addr);
c0100a83:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100a89:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100a8d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100a91:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a95:	c7 04 24 f6 da 10 c0 	movl   $0xc010daf6,(%esp)
c0100a9c:	e8 c2 f8 ff ff       	call   c0100363 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100aa1:	c9                   	leave  
c0100aa2:	c3                   	ret    

c0100aa3 <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100aa3:	55                   	push   %ebp
c0100aa4:	89 e5                	mov    %esp,%ebp
c0100aa6:	53                   	push   %ebx
c0100aa7:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100aaa:	8b 5d 04             	mov    0x4(%ebp),%ebx
c0100aad:	89 5d f8             	mov    %ebx,-0x8(%ebp)
    return eip;
c0100ab0:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0100ab3:	83 c4 10             	add    $0x10,%esp
c0100ab6:	5b                   	pop    %ebx
c0100ab7:	5d                   	pop    %ebp
c0100ab8:	c3                   	ret    

c0100ab9 <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100ab9:	55                   	push   %ebp
c0100aba:	89 e5                	mov    %esp,%ebp
c0100abc:	53                   	push   %ebx
c0100abd:	83 ec 34             	sub    $0x34,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100ac0:	89 eb                	mov    %ebp,%ebx
c0100ac2:	89 5d e0             	mov    %ebx,-0x20(%ebp)
    return ebp;
c0100ac5:	8b 45 e0             	mov    -0x20(%ebp),%eax
     *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
     *    (3.5) popup a calling stackframe
     *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
     *                   the calling funciton's ebp = ss:[ebp]
     */
    uint32_t ebp = read_ebp();
c0100ac8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t eip = read_eip();
c0100acb:	e8 d3 ff ff ff       	call   c0100aa3 <read_eip>
c0100ad0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int i;
    int j;
    uint32_t *args;
    for(i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i++) {
c0100ad3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0100ada:	e9 82 00 00 00       	jmp    c0100b61 <print_stackframe+0xa8>
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100adf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100ae2:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100ae6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ae9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100aed:	c7 04 24 08 db 10 c0 	movl   $0xc010db08,(%esp)
c0100af4:	e8 6a f8 ff ff       	call   c0100363 <cprintf>
        args = (uint32_t *)ebp + 2;
c0100af9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100afc:	83 c0 08             	add    $0x8,%eax
c0100aff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        for(j = 0; j < 4; j++)
c0100b02:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0100b09:	eb 1f                	jmp    c0100b2a <print_stackframe+0x71>
            cprintf("0x%08x ",args[j]);
c0100b0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b0e:	c1 e0 02             	shl    $0x2,%eax
c0100b11:	03 45 e4             	add    -0x1c(%ebp),%eax
c0100b14:	8b 00                	mov    (%eax),%eax
c0100b16:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b1a:	c7 04 24 24 db 10 c0 	movl   $0xc010db24,(%esp)
c0100b21:	e8 3d f8 ff ff       	call   c0100363 <cprintf>
    int j;
    uint32_t *args;
    for(i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i++) {
        cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
        args = (uint32_t *)ebp + 2;
        for(j = 0; j < 4; j++)
c0100b26:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100b2a:	83 7d e8 03          	cmpl   $0x3,-0x18(%ebp)
c0100b2e:	7e db                	jle    c0100b0b <print_stackframe+0x52>
            cprintf("0x%08x ",args[j]);
        cprintf("\n");
c0100b30:	c7 04 24 2c db 10 c0 	movl   $0xc010db2c,(%esp)
c0100b37:	e8 27 f8 ff ff       	call   c0100363 <cprintf>
        print_debuginfo(eip-1);
c0100b3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b3f:	83 e8 01             	sub    $0x1,%eax
c0100b42:	89 04 24             	mov    %eax,(%esp)
c0100b45:	e8 ba fe ff ff       	call   c0100a04 <print_debuginfo>
        eip = ((uint32_t *)ebp)[1];
c0100b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b4d:	83 c0 04             	add    $0x4,%eax
c0100b50:	8b 00                	mov    (%eax),%eax
c0100b52:	89 45 f0             	mov    %eax,-0x10(%ebp)
        ebp = ((uint32_t *)ebp)[0];
c0100b55:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b58:	8b 00                	mov    (%eax),%eax
c0100b5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t ebp = read_ebp();
    uint32_t eip = read_eip();
    int i;
    int j;
    uint32_t *args;
    for(i = 0; ebp != 0 && i < STACKFRAME_DEPTH; i++) {
c0100b5d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100b61:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100b65:	74 0a                	je     c0100b71 <print_stackframe+0xb8>
c0100b67:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100b6b:	0f 8e 6e ff ff ff    	jle    c0100adf <print_stackframe+0x26>
        cprintf("\n");
        print_debuginfo(eip-1);
        eip = ((uint32_t *)ebp)[1];
        ebp = ((uint32_t *)ebp)[0];
    }
}
c0100b71:	83 c4 34             	add    $0x34,%esp
c0100b74:	5b                   	pop    %ebx
c0100b75:	5d                   	pop    %ebp
c0100b76:	c3                   	ret    
	...

c0100b78 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100b78:	55                   	push   %ebp
c0100b79:	89 e5                	mov    %esp,%ebp
c0100b7b:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100b7e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100b85:	eb 0d                	jmp    c0100b94 <parse+0x1c>
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
c0100b87:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100b88:	eb 0a                	jmp    c0100b94 <parse+0x1c>
            *buf ++ = '\0';
c0100b8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b8d:	c6 00 00             	movb   $0x0,(%eax)
c0100b90:	83 45 08 01          	addl   $0x1,0x8(%ebp)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100b94:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b97:	0f b6 00             	movzbl (%eax),%eax
c0100b9a:	84 c0                	test   %al,%al
c0100b9c:	74 1d                	je     c0100bbb <parse+0x43>
c0100b9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ba1:	0f b6 00             	movzbl (%eax),%eax
c0100ba4:	0f be c0             	movsbl %al,%eax
c0100ba7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bab:	c7 04 24 b0 db 10 c0 	movl   $0xc010dbb0,(%esp)
c0100bb2:	e8 41 ca 00 00       	call   c010d5f8 <strchr>
c0100bb7:	85 c0                	test   %eax,%eax
c0100bb9:	75 cf                	jne    c0100b8a <parse+0x12>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100bbb:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bbe:	0f b6 00             	movzbl (%eax),%eax
c0100bc1:	84 c0                	test   %al,%al
c0100bc3:	74 5e                	je     c0100c23 <parse+0xab>
            break;
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100bc5:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100bc9:	75 14                	jne    c0100bdf <parse+0x67>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100bcb:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100bd2:	00 
c0100bd3:	c7 04 24 b5 db 10 c0 	movl   $0xc010dbb5,(%esp)
c0100bda:	e8 84 f7 ff ff       	call   c0100363 <cprintf>
        }
        argv[argc ++] = buf;
c0100bdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100be2:	c1 e0 02             	shl    $0x2,%eax
c0100be5:	03 45 0c             	add    0xc(%ebp),%eax
c0100be8:	8b 55 08             	mov    0x8(%ebp),%edx
c0100beb:	89 10                	mov    %edx,(%eax)
c0100bed:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100bf1:	eb 04                	jmp    c0100bf7 <parse+0x7f>
            buf ++;
c0100bf3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100bf7:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bfa:	0f b6 00             	movzbl (%eax),%eax
c0100bfd:	84 c0                	test   %al,%al
c0100bff:	74 86                	je     c0100b87 <parse+0xf>
c0100c01:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c04:	0f b6 00             	movzbl (%eax),%eax
c0100c07:	0f be c0             	movsbl %al,%eax
c0100c0a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c0e:	c7 04 24 b0 db 10 c0 	movl   $0xc010dbb0,(%esp)
c0100c15:	e8 de c9 00 00       	call   c010d5f8 <strchr>
c0100c1a:	85 c0                	test   %eax,%eax
c0100c1c:	74 d5                	je     c0100bf3 <parse+0x7b>
            buf ++;
        }
    }
c0100c1e:	e9 64 ff ff ff       	jmp    c0100b87 <parse+0xf>
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
            break;
c0100c23:	90                   	nop
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100c24:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100c27:	c9                   	leave  
c0100c28:	c3                   	ret    

c0100c29 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100c29:	55                   	push   %ebp
c0100c2a:	89 e5                	mov    %esp,%ebp
c0100c2c:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100c2f:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100c32:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c36:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c39:	89 04 24             	mov    %eax,(%esp)
c0100c3c:	e8 37 ff ff ff       	call   c0100b78 <parse>
c0100c41:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100c44:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100c48:	75 0a                	jne    c0100c54 <runcmd+0x2b>
        return 0;
c0100c4a:	b8 00 00 00 00       	mov    $0x0,%eax
c0100c4f:	e9 85 00 00 00       	jmp    c0100cd9 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100c54:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100c5b:	eb 5c                	jmp    c0100cb9 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100c5d:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100c60:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100c63:	89 d0                	mov    %edx,%eax
c0100c65:	01 c0                	add    %eax,%eax
c0100c67:	01 d0                	add    %edx,%eax
c0100c69:	c1 e0 02             	shl    $0x2,%eax
c0100c6c:	05 20 10 13 c0       	add    $0xc0131020,%eax
c0100c71:	8b 00                	mov    (%eax),%eax
c0100c73:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100c77:	89 04 24             	mov    %eax,(%esp)
c0100c7a:	e8 d4 c8 00 00       	call   c010d553 <strcmp>
c0100c7f:	85 c0                	test   %eax,%eax
c0100c81:	75 32                	jne    c0100cb5 <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100c83:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100c86:	89 d0                	mov    %edx,%eax
c0100c88:	01 c0                	add    %eax,%eax
c0100c8a:	01 d0                	add    %edx,%eax
c0100c8c:	c1 e0 02             	shl    $0x2,%eax
c0100c8f:	05 20 10 13 c0       	add    $0xc0131020,%eax
c0100c94:	8b 50 08             	mov    0x8(%eax),%edx
c0100c97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100c9a:	8d 48 ff             	lea    -0x1(%eax),%ecx
c0100c9d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100ca0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100ca4:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100ca7:	83 c0 04             	add    $0x4,%eax
c0100caa:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cae:	89 0c 24             	mov    %ecx,(%esp)
c0100cb1:	ff d2                	call   *%edx
c0100cb3:	eb 24                	jmp    c0100cd9 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100cb5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cbc:	83 f8 02             	cmp    $0x2,%eax
c0100cbf:	76 9c                	jbe    c0100c5d <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100cc1:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100cc4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cc8:	c7 04 24 d3 db 10 c0 	movl   $0xc010dbd3,(%esp)
c0100ccf:	e8 8f f6 ff ff       	call   c0100363 <cprintf>
    return 0;
c0100cd4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100cd9:	c9                   	leave  
c0100cda:	c3                   	ret    

c0100cdb <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100cdb:	55                   	push   %ebp
c0100cdc:	89 e5                	mov    %esp,%ebp
c0100cde:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100ce1:	c7 04 24 ec db 10 c0 	movl   $0xc010dbec,(%esp)
c0100ce8:	e8 76 f6 ff ff       	call   c0100363 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100ced:	c7 04 24 14 dc 10 c0 	movl   $0xc010dc14,(%esp)
c0100cf4:	e8 6a f6 ff ff       	call   c0100363 <cprintf>

    if (tf != NULL) {
c0100cf9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100cfd:	74 0e                	je     c0100d0d <kmonitor+0x32>
        print_trapframe(tf);
c0100cff:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d02:	89 04 24             	mov    %eax,(%esp)
c0100d05:	e8 a4 17 00 00       	call   c01024ae <print_trapframe>
c0100d0a:	eb 01                	jmp    c0100d0d <kmonitor+0x32>
        if ((buf = readline("K> ")) != NULL) {
            if (runcmd(buf, tf) < 0) {
                break;
            }
        }
    }
c0100d0c:	90                   	nop
        print_trapframe(tf);
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100d0d:	c7 04 24 39 dc 10 c0 	movl   $0xc010dc39,(%esp)
c0100d14:	e8 3b f5 ff ff       	call   c0100254 <readline>
c0100d19:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100d1c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100d20:	74 ea                	je     c0100d0c <kmonitor+0x31>
            if (runcmd(buf, tf) < 0) {
c0100d22:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d25:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d2c:	89 04 24             	mov    %eax,(%esp)
c0100d2f:	e8 f5 fe ff ff       	call   c0100c29 <runcmd>
c0100d34:	85 c0                	test   %eax,%eax
c0100d36:	79 d4                	jns    c0100d0c <kmonitor+0x31>
                break;
c0100d38:	90                   	nop
            }
        }
    }
}
c0100d39:	c9                   	leave  
c0100d3a:	c3                   	ret    

c0100d3b <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100d3b:	55                   	push   %ebp
c0100d3c:	89 e5                	mov    %esp,%ebp
c0100d3e:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d41:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d48:	eb 3f                	jmp    c0100d89 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100d4a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d4d:	89 d0                	mov    %edx,%eax
c0100d4f:	01 c0                	add    %eax,%eax
c0100d51:	01 d0                	add    %edx,%eax
c0100d53:	c1 e0 02             	shl    $0x2,%eax
c0100d56:	05 20 10 13 c0       	add    $0xc0131020,%eax
c0100d5b:	8b 48 04             	mov    0x4(%eax),%ecx
c0100d5e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d61:	89 d0                	mov    %edx,%eax
c0100d63:	01 c0                	add    %eax,%eax
c0100d65:	01 d0                	add    %edx,%eax
c0100d67:	c1 e0 02             	shl    $0x2,%eax
c0100d6a:	05 20 10 13 c0       	add    $0xc0131020,%eax
c0100d6f:	8b 00                	mov    (%eax),%eax
c0100d71:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100d75:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d79:	c7 04 24 3d dc 10 c0 	movl   $0xc010dc3d,(%esp)
c0100d80:	e8 de f5 ff ff       	call   c0100363 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d85:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100d89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d8c:	83 f8 02             	cmp    $0x2,%eax
c0100d8f:	76 b9                	jbe    c0100d4a <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100d91:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100d96:	c9                   	leave  
c0100d97:	c3                   	ret    

c0100d98 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100d98:	55                   	push   %ebp
c0100d99:	89 e5                	mov    %esp,%ebp
c0100d9b:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100d9e:	e8 c9 fb ff ff       	call   c010096c <print_kerninfo>
    return 0;
c0100da3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100da8:	c9                   	leave  
c0100da9:	c3                   	ret    

c0100daa <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100daa:	55                   	push   %ebp
c0100dab:	89 e5                	mov    %esp,%ebp
c0100dad:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100db0:	e8 04 fd ff ff       	call   c0100ab9 <print_stackframe>
    return 0;
c0100db5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dba:	c9                   	leave  
c0100dbb:	c3                   	ret    

c0100dbc <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100dbc:	55                   	push   %ebp
c0100dbd:	89 e5                	mov    %esp,%ebp
c0100dbf:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100dc2:	a1 00 27 1c c0       	mov    0xc01c2700,%eax
c0100dc7:	85 c0                	test   %eax,%eax
c0100dc9:	75 4c                	jne    c0100e17 <__panic+0x5b>
        goto panic_dead;
    }
    is_panic = 1;
c0100dcb:	c7 05 00 27 1c c0 01 	movl   $0x1,0xc01c2700
c0100dd2:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100dd5:	8d 55 14             	lea    0x14(%ebp),%edx
c0100dd8:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100ddb:	89 10                	mov    %edx,(%eax)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100ddd:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100de0:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100de4:	8b 45 08             	mov    0x8(%ebp),%eax
c0100de7:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100deb:	c7 04 24 46 dc 10 c0 	movl   $0xc010dc46,(%esp)
c0100df2:	e8 6c f5 ff ff       	call   c0100363 <cprintf>
    vcprintf(fmt, ap);
c0100df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100dfa:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100dfe:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e01:	89 04 24             	mov    %eax,(%esp)
c0100e04:	e8 27 f5 ff ff       	call   c0100330 <vcprintf>
    cprintf("\n");
c0100e09:	c7 04 24 62 dc 10 c0 	movl   $0xc010dc62,(%esp)
c0100e10:	e8 4e f5 ff ff       	call   c0100363 <cprintf>
c0100e15:	eb 01                	jmp    c0100e18 <__panic+0x5c>
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
    if (is_panic) {
        goto panic_dead;
c0100e17:	90                   	nop
    vcprintf(fmt, ap);
    cprintf("\n");
    va_end(ap);

panic_dead:
    intr_disable();
c0100e18:	e8 cd 12 00 00       	call   c01020ea <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100e1d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100e24:	e8 b2 fe ff ff       	call   c0100cdb <kmonitor>
    }
c0100e29:	eb f2                	jmp    c0100e1d <__panic+0x61>

c0100e2b <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100e2b:	55                   	push   %ebp
c0100e2c:	89 e5                	mov    %esp,%ebp
c0100e2e:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100e31:	8d 55 14             	lea    0x14(%ebp),%edx
c0100e34:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100e37:	89 10                	mov    %edx,(%eax)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100e39:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e3c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e40:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e43:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e47:	c7 04 24 64 dc 10 c0 	movl   $0xc010dc64,(%esp)
c0100e4e:	e8 10 f5 ff ff       	call   c0100363 <cprintf>
    vcprintf(fmt, ap);
c0100e53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e56:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e5a:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e5d:	89 04 24             	mov    %eax,(%esp)
c0100e60:	e8 cb f4 ff ff       	call   c0100330 <vcprintf>
    cprintf("\n");
c0100e65:	c7 04 24 62 dc 10 c0 	movl   $0xc010dc62,(%esp)
c0100e6c:	e8 f2 f4 ff ff       	call   c0100363 <cprintf>
    va_end(ap);
}
c0100e71:	c9                   	leave  
c0100e72:	c3                   	ret    

c0100e73 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100e73:	55                   	push   %ebp
c0100e74:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100e76:	a1 00 27 1c c0       	mov    0xc01c2700,%eax
}
c0100e7b:	5d                   	pop    %ebp
c0100e7c:	c3                   	ret    
c0100e7d:	00 00                	add    %al,(%eax)
	...

c0100e80 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100e80:	55                   	push   %ebp
c0100e81:	89 e5                	mov    %esp,%ebp
c0100e83:	83 ec 28             	sub    $0x28,%esp
c0100e86:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100e8c:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100e90:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100e94:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100e98:	ee                   	out    %al,(%dx)
c0100e99:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100e9f:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100ea3:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100ea7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100eab:	ee                   	out    %al,(%dx)
c0100eac:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100eb2:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100eb6:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100eba:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100ebe:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100ebf:	c7 05 b8 53 1c c0 00 	movl   $0x0,0xc01c53b8
c0100ec6:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100ec9:	c7 04 24 82 dc 10 c0 	movl   $0xc010dc82,(%esp)
c0100ed0:	e8 8e f4 ff ff       	call   c0100363 <cprintf>
    pic_enable(IRQ_TIMER);
c0100ed5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100edc:	e8 67 12 00 00       	call   c0102148 <pic_enable>
}
c0100ee1:	c9                   	leave  
c0100ee2:	c3                   	ret    
	...

c0100ee4 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100ee4:	55                   	push   %ebp
c0100ee5:	89 e5                	mov    %esp,%ebp
c0100ee7:	53                   	push   %ebx
c0100ee8:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100eeb:	9c                   	pushf  
c0100eec:	5b                   	pop    %ebx
c0100eed:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c0100ef0:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100ef3:	25 00 02 00 00       	and    $0x200,%eax
c0100ef8:	85 c0                	test   %eax,%eax
c0100efa:	74 0c                	je     c0100f08 <__intr_save+0x24>
        intr_disable();
c0100efc:	e8 e9 11 00 00       	call   c01020ea <intr_disable>
        return 1;
c0100f01:	b8 01 00 00 00       	mov    $0x1,%eax
c0100f06:	eb 05                	jmp    c0100f0d <__intr_save+0x29>
    }
    return 0;
c0100f08:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f0d:	83 c4 14             	add    $0x14,%esp
c0100f10:	5b                   	pop    %ebx
c0100f11:	5d                   	pop    %ebp
c0100f12:	c3                   	ret    

c0100f13 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0100f13:	55                   	push   %ebp
c0100f14:	89 e5                	mov    %esp,%ebp
c0100f16:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0100f19:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100f1d:	74 05                	je     c0100f24 <__intr_restore+0x11>
        intr_enable();
c0100f1f:	e8 c0 11 00 00       	call   c01020e4 <intr_enable>
    }
}
c0100f24:	c9                   	leave  
c0100f25:	c3                   	ret    

c0100f26 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0100f26:	55                   	push   %ebp
c0100f27:	89 e5                	mov    %esp,%ebp
c0100f29:	53                   	push   %ebx
c0100f2a:	83 ec 14             	sub    $0x14,%esp
c0100f2d:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f33:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0100f37:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0100f3b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f3f:	ec                   	in     (%dx),%al
c0100f40:	89 c3                	mov    %eax,%ebx
c0100f42:	88 5d f9             	mov    %bl,-0x7(%ebp)
    return data;
c0100f45:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f4b:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100f4f:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0100f53:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f57:	ec                   	in     (%dx),%al
c0100f58:	89 c3                	mov    %eax,%ebx
c0100f5a:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c0100f5d:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f63:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100f67:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0100f6b:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f6f:	ec                   	in     (%dx),%al
c0100f70:	89 c3                	mov    %eax,%ebx
c0100f72:	88 5d f1             	mov    %bl,-0xf(%ebp)
    return data;
c0100f75:	66 c7 45 ee 84 00    	movw   $0x84,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f7b:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100f7f:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0100f83:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f87:	ec                   	in     (%dx),%al
c0100f88:	89 c3                	mov    %eax,%ebx
c0100f8a:	88 5d ed             	mov    %bl,-0x13(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0100f8d:	83 c4 14             	add    $0x14,%esp
c0100f90:	5b                   	pop    %ebx
c0100f91:	5d                   	pop    %ebp
c0100f92:	c3                   	ret    

c0100f93 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0100f93:	55                   	push   %ebp
c0100f94:	89 e5                	mov    %esp,%ebp
c0100f96:	53                   	push   %ebx
c0100f97:	83 ec 24             	sub    $0x24,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0100f9a:	c7 45 f8 00 80 0b c0 	movl   $0xc00b8000,-0x8(%ebp)
    uint16_t was = *cp;
c0100fa1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100fa4:	0f b7 00             	movzwl (%eax),%eax
c0100fa7:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    *cp = (uint16_t) 0xA55A;
c0100fab:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100fae:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0100fb3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100fb6:	0f b7 00             	movzwl (%eax),%eax
c0100fb9:	66 3d 5a a5          	cmp    $0xa55a,%ax
c0100fbd:	74 12                	je     c0100fd1 <cga_init+0x3e>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0100fbf:	c7 45 f8 00 00 0b c0 	movl   $0xc00b0000,-0x8(%ebp)
        addr_6845 = MONO_BASE;
c0100fc6:	66 c7 05 26 27 1c c0 	movw   $0x3b4,0xc01c2726
c0100fcd:	b4 03 
c0100fcf:	eb 13                	jmp    c0100fe4 <cga_init+0x51>
    } else {
        *cp = was;
c0100fd1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0100fd4:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100fd8:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0100fdb:	66 c7 05 26 27 1c c0 	movw   $0x3d4,0xc01c2726
c0100fe2:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c0100fe4:	0f b7 05 26 27 1c c0 	movzwl 0xc01c2726,%eax
c0100feb:	0f b7 c0             	movzwl %ax,%eax
c0100fee:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0100ff2:	c6 45 ed 0e          	movb   $0xe,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100ff6:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100ffa:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100ffe:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0100fff:	0f b7 05 26 27 1c c0 	movzwl 0xc01c2726,%eax
c0101006:	83 c0 01             	add    $0x1,%eax
c0101009:	0f b7 c0             	movzwl %ax,%eax
c010100c:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101010:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101014:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101018:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010101c:	ec                   	in     (%dx),%al
c010101d:	89 c3                	mov    %eax,%ebx
c010101f:	88 5d e9             	mov    %bl,-0x17(%ebp)
    return data;
c0101022:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101026:	0f b6 c0             	movzbl %al,%eax
c0101029:	c1 e0 08             	shl    $0x8,%eax
c010102c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    outb(addr_6845, 15);
c010102f:	0f b7 05 26 27 1c c0 	movzwl 0xc01c2726,%eax
c0101036:	0f b7 c0             	movzwl %ax,%eax
c0101039:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
c010103d:	c6 45 e5 0f          	movb   $0xf,-0x1b(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101041:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101045:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101049:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c010104a:	0f b7 05 26 27 1c c0 	movzwl 0xc01c2726,%eax
c0101051:	83 c0 01             	add    $0x1,%eax
c0101054:	0f b7 c0             	movzwl %ax,%eax
c0101057:	66 89 45 e2          	mov    %ax,-0x1e(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010105b:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010105f:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101063:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101067:	ec                   	in     (%dx),%al
c0101068:	89 c3                	mov    %eax,%ebx
c010106a:	88 5d e1             	mov    %bl,-0x1f(%ebp)
    return data;
c010106d:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101071:	0f b6 c0             	movzbl %al,%eax
c0101074:	09 45 f0             	or     %eax,-0x10(%ebp)

    crt_buf = (uint16_t*) cp;
c0101077:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010107a:	a3 20 27 1c c0       	mov    %eax,0xc01c2720
    crt_pos = pos;
c010107f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101082:	66 a3 24 27 1c c0    	mov    %ax,0xc01c2724
}
c0101088:	83 c4 24             	add    $0x24,%esp
c010108b:	5b                   	pop    %ebx
c010108c:	5d                   	pop    %ebp
c010108d:	c3                   	ret    

c010108e <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c010108e:	55                   	push   %ebp
c010108f:	89 e5                	mov    %esp,%ebp
c0101091:	53                   	push   %ebx
c0101092:	83 ec 54             	sub    $0x54,%esp
c0101095:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c010109b:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010109f:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01010a3:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01010a7:	ee                   	out    %al,(%dx)
c01010a8:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c01010ae:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c01010b2:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01010b6:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01010ba:	ee                   	out    %al,(%dx)
c01010bb:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c01010c1:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c01010c5:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01010c9:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01010cd:	ee                   	out    %al,(%dx)
c01010ce:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01010d4:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c01010d8:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01010dc:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01010e0:	ee                   	out    %al,(%dx)
c01010e1:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01010e7:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01010eb:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01010ef:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01010f3:	ee                   	out    %al,(%dx)
c01010f4:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01010fa:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01010fe:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101102:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101106:	ee                   	out    %al,(%dx)
c0101107:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c010110d:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c0101111:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101115:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101119:	ee                   	out    %al,(%dx)
c010111a:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101120:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101124:	66 89 55 c6          	mov    %dx,-0x3a(%ebp)
c0101128:	0f b7 55 c6          	movzwl -0x3a(%ebp),%edx
c010112c:	ec                   	in     (%dx),%al
c010112d:	89 c3                	mov    %eax,%ebx
c010112f:	88 5d d9             	mov    %bl,-0x27(%ebp)
    return data;
c0101132:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c0101136:	3c ff                	cmp    $0xff,%al
c0101138:	0f 95 c0             	setne  %al
c010113b:	0f b6 c0             	movzbl %al,%eax
c010113e:	a3 28 27 1c c0       	mov    %eax,0xc01c2728
c0101143:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101149:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010114d:	66 89 55 c6          	mov    %dx,-0x3a(%ebp)
c0101151:	0f b7 55 c6          	movzwl -0x3a(%ebp),%edx
c0101155:	ec                   	in     (%dx),%al
c0101156:	89 c3                	mov    %eax,%ebx
c0101158:	88 5d d5             	mov    %bl,-0x2b(%ebp)
    return data;
c010115b:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101161:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0101165:	66 89 55 c6          	mov    %dx,-0x3a(%ebp)
c0101169:	0f b7 55 c6          	movzwl -0x3a(%ebp),%edx
c010116d:	ec                   	in     (%dx),%al
c010116e:	89 c3                	mov    %eax,%ebx
c0101170:	88 5d d1             	mov    %bl,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101173:	a1 28 27 1c c0       	mov    0xc01c2728,%eax
c0101178:	85 c0                	test   %eax,%eax
c010117a:	74 0c                	je     c0101188 <serial_init+0xfa>
        pic_enable(IRQ_COM1);
c010117c:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0101183:	e8 c0 0f 00 00       	call   c0102148 <pic_enable>
    }
}
c0101188:	83 c4 54             	add    $0x54,%esp
c010118b:	5b                   	pop    %ebx
c010118c:	5d                   	pop    %ebp
c010118d:	c3                   	ret    

c010118e <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c010118e:	55                   	push   %ebp
c010118f:	89 e5                	mov    %esp,%ebp
c0101191:	53                   	push   %ebx
c0101192:	83 ec 24             	sub    $0x24,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101195:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c010119c:	eb 09                	jmp    c01011a7 <lpt_putc_sub+0x19>
        delay();
c010119e:	e8 83 fd ff ff       	call   c0100f26 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c01011a3:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c01011a7:	66 c7 45 f6 79 03    	movw   $0x379,-0xa(%ebp)
c01011ad:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01011b1:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c01011b5:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c01011b9:	ec                   	in     (%dx),%al
c01011ba:	89 c3                	mov    %eax,%ebx
c01011bc:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c01011bf:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01011c3:	84 c0                	test   %al,%al
c01011c5:	78 09                	js     c01011d0 <lpt_putc_sub+0x42>
c01011c7:	81 7d f8 ff 31 00 00 	cmpl   $0x31ff,-0x8(%ebp)
c01011ce:	7e ce                	jle    c010119e <lpt_putc_sub+0x10>
        delay();
    }
    outb(LPTPORT + 0, c);
c01011d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01011d3:	0f b6 c0             	movzbl %al,%eax
c01011d6:	66 c7 45 f2 78 03    	movw   $0x378,-0xe(%ebp)
c01011dc:	88 45 f1             	mov    %al,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01011df:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01011e3:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01011e7:	ee                   	out    %al,(%dx)
c01011e8:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c01011ee:	c6 45 ed 0d          	movb   $0xd,-0x13(%ebp)
c01011f2:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01011f6:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01011fa:	ee                   	out    %al,(%dx)
c01011fb:	66 c7 45 ea 7a 03    	movw   $0x37a,-0x16(%ebp)
c0101201:	c6 45 e9 08          	movb   $0x8,-0x17(%ebp)
c0101205:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101209:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010120d:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c010120e:	83 c4 24             	add    $0x24,%esp
c0101211:	5b                   	pop    %ebx
c0101212:	5d                   	pop    %ebp
c0101213:	c3                   	ret    

c0101214 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c0101214:	55                   	push   %ebp
c0101215:	89 e5                	mov    %esp,%ebp
c0101217:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c010121a:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010121e:	74 0d                	je     c010122d <lpt_putc+0x19>
        lpt_putc_sub(c);
c0101220:	8b 45 08             	mov    0x8(%ebp),%eax
c0101223:	89 04 24             	mov    %eax,(%esp)
c0101226:	e8 63 ff ff ff       	call   c010118e <lpt_putc_sub>
c010122b:	eb 24                	jmp    c0101251 <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c010122d:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101234:	e8 55 ff ff ff       	call   c010118e <lpt_putc_sub>
        lpt_putc_sub(' ');
c0101239:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101240:	e8 49 ff ff ff       	call   c010118e <lpt_putc_sub>
        lpt_putc_sub('\b');
c0101245:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010124c:	e8 3d ff ff ff       	call   c010118e <lpt_putc_sub>
    }
}
c0101251:	c9                   	leave  
c0101252:	c3                   	ret    

c0101253 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0101253:	55                   	push   %ebp
c0101254:	89 e5                	mov    %esp,%ebp
c0101256:	53                   	push   %ebx
c0101257:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c010125a:	8b 45 08             	mov    0x8(%ebp),%eax
c010125d:	b0 00                	mov    $0x0,%al
c010125f:	85 c0                	test   %eax,%eax
c0101261:	75 07                	jne    c010126a <cga_putc+0x17>
        c |= 0x0700;
c0101263:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c010126a:	8b 45 08             	mov    0x8(%ebp),%eax
c010126d:	25 ff 00 00 00       	and    $0xff,%eax
c0101272:	83 f8 0a             	cmp    $0xa,%eax
c0101275:	74 4e                	je     c01012c5 <cga_putc+0x72>
c0101277:	83 f8 0d             	cmp    $0xd,%eax
c010127a:	74 59                	je     c01012d5 <cga_putc+0x82>
c010127c:	83 f8 08             	cmp    $0x8,%eax
c010127f:	0f 85 8c 00 00 00    	jne    c0101311 <cga_putc+0xbe>
    case '\b':
        if (crt_pos > 0) {
c0101285:	0f b7 05 24 27 1c c0 	movzwl 0xc01c2724,%eax
c010128c:	66 85 c0             	test   %ax,%ax
c010128f:	0f 84 a1 00 00 00    	je     c0101336 <cga_putc+0xe3>
            crt_pos --;
c0101295:	0f b7 05 24 27 1c c0 	movzwl 0xc01c2724,%eax
c010129c:	83 e8 01             	sub    $0x1,%eax
c010129f:	66 a3 24 27 1c c0    	mov    %ax,0xc01c2724
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c01012a5:	a1 20 27 1c c0       	mov    0xc01c2720,%eax
c01012aa:	0f b7 15 24 27 1c c0 	movzwl 0xc01c2724,%edx
c01012b1:	0f b7 d2             	movzwl %dx,%edx
c01012b4:	01 d2                	add    %edx,%edx
c01012b6:	01 c2                	add    %eax,%edx
c01012b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01012bb:	b0 00                	mov    $0x0,%al
c01012bd:	83 c8 20             	or     $0x20,%eax
c01012c0:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c01012c3:	eb 71                	jmp    c0101336 <cga_putc+0xe3>
    case '\n':
        crt_pos += CRT_COLS;
c01012c5:	0f b7 05 24 27 1c c0 	movzwl 0xc01c2724,%eax
c01012cc:	83 c0 50             	add    $0x50,%eax
c01012cf:	66 a3 24 27 1c c0    	mov    %ax,0xc01c2724
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c01012d5:	0f b7 1d 24 27 1c c0 	movzwl 0xc01c2724,%ebx
c01012dc:	0f b7 0d 24 27 1c c0 	movzwl 0xc01c2724,%ecx
c01012e3:	0f b7 c1             	movzwl %cx,%eax
c01012e6:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c01012ec:	c1 e8 10             	shr    $0x10,%eax
c01012ef:	89 c2                	mov    %eax,%edx
c01012f1:	66 c1 ea 06          	shr    $0x6,%dx
c01012f5:	89 d0                	mov    %edx,%eax
c01012f7:	c1 e0 02             	shl    $0x2,%eax
c01012fa:	01 d0                	add    %edx,%eax
c01012fc:	c1 e0 04             	shl    $0x4,%eax
c01012ff:	89 ca                	mov    %ecx,%edx
c0101301:	66 29 c2             	sub    %ax,%dx
c0101304:	89 d8                	mov    %ebx,%eax
c0101306:	66 29 d0             	sub    %dx,%ax
c0101309:	66 a3 24 27 1c c0    	mov    %ax,0xc01c2724
        break;
c010130f:	eb 26                	jmp    c0101337 <cga_putc+0xe4>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0101311:	8b 15 20 27 1c c0    	mov    0xc01c2720,%edx
c0101317:	0f b7 05 24 27 1c c0 	movzwl 0xc01c2724,%eax
c010131e:	0f b7 c8             	movzwl %ax,%ecx
c0101321:	01 c9                	add    %ecx,%ecx
c0101323:	01 d1                	add    %edx,%ecx
c0101325:	8b 55 08             	mov    0x8(%ebp),%edx
c0101328:	66 89 11             	mov    %dx,(%ecx)
c010132b:	83 c0 01             	add    $0x1,%eax
c010132e:	66 a3 24 27 1c c0    	mov    %ax,0xc01c2724
        break;
c0101334:	eb 01                	jmp    c0101337 <cga_putc+0xe4>
    case '\b':
        if (crt_pos > 0) {
            crt_pos --;
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
        }
        break;
c0101336:	90                   	nop
        crt_buf[crt_pos ++] = c;     // write the character
        break;
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0101337:	0f b7 05 24 27 1c c0 	movzwl 0xc01c2724,%eax
c010133e:	66 3d cf 07          	cmp    $0x7cf,%ax
c0101342:	76 5b                	jbe    c010139f <cga_putc+0x14c>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101344:	a1 20 27 1c c0       	mov    0xc01c2720,%eax
c0101349:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c010134f:	a1 20 27 1c c0       	mov    0xc01c2720,%eax
c0101354:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c010135b:	00 
c010135c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0101360:	89 04 24             	mov    %eax,(%esp)
c0101363:	e8 96 c4 00 00       	call   c010d7fe <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101368:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c010136f:	eb 15                	jmp    c0101386 <cga_putc+0x133>
            crt_buf[i] = 0x0700 | ' ';
c0101371:	a1 20 27 1c c0       	mov    0xc01c2720,%eax
c0101376:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101379:	01 d2                	add    %edx,%edx
c010137b:	01 d0                	add    %edx,%eax
c010137d:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101382:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101386:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c010138d:	7e e2                	jle    c0101371 <cga_putc+0x11e>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c010138f:	0f b7 05 24 27 1c c0 	movzwl 0xc01c2724,%eax
c0101396:	83 e8 50             	sub    $0x50,%eax
c0101399:	66 a3 24 27 1c c0    	mov    %ax,0xc01c2724
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c010139f:	0f b7 05 26 27 1c c0 	movzwl 0xc01c2726,%eax
c01013a6:	0f b7 c0             	movzwl %ax,%eax
c01013a9:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c01013ad:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c01013b1:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01013b5:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013b9:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c01013ba:	0f b7 05 24 27 1c c0 	movzwl 0xc01c2724,%eax
c01013c1:	66 c1 e8 08          	shr    $0x8,%ax
c01013c5:	0f b6 c0             	movzbl %al,%eax
c01013c8:	0f b7 15 26 27 1c c0 	movzwl 0xc01c2726,%edx
c01013cf:	83 c2 01             	add    $0x1,%edx
c01013d2:	0f b7 d2             	movzwl %dx,%edx
c01013d5:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c01013d9:	88 45 ed             	mov    %al,-0x13(%ebp)
c01013dc:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01013e0:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01013e4:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c01013e5:	0f b7 05 26 27 1c c0 	movzwl 0xc01c2726,%eax
c01013ec:	0f b7 c0             	movzwl %ax,%eax
c01013ef:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c01013f3:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c01013f7:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01013fb:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01013ff:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0101400:	0f b7 05 24 27 1c c0 	movzwl 0xc01c2724,%eax
c0101407:	0f b6 c0             	movzbl %al,%eax
c010140a:	0f b7 15 26 27 1c c0 	movzwl 0xc01c2726,%edx
c0101411:	83 c2 01             	add    $0x1,%edx
c0101414:	0f b7 d2             	movzwl %dx,%edx
c0101417:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010141b:	88 45 e5             	mov    %al,-0x1b(%ebp)
c010141e:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101422:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101426:	ee                   	out    %al,(%dx)
}
c0101427:	83 c4 34             	add    $0x34,%esp
c010142a:	5b                   	pop    %ebx
c010142b:	5d                   	pop    %ebp
c010142c:	c3                   	ret    

c010142d <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c010142d:	55                   	push   %ebp
c010142e:	89 e5                	mov    %esp,%ebp
c0101430:	53                   	push   %ebx
c0101431:	83 ec 14             	sub    $0x14,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101434:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
c010143b:	eb 09                	jmp    c0101446 <serial_putc_sub+0x19>
        delay();
c010143d:	e8 e4 fa ff ff       	call   c0100f26 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101442:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
c0101446:	66 c7 45 f6 fd 03    	movw   $0x3fd,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010144c:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101450:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101454:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101458:	ec                   	in     (%dx),%al
c0101459:	89 c3                	mov    %eax,%ebx
c010145b:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c010145e:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101462:	0f b6 c0             	movzbl %al,%eax
c0101465:	83 e0 20             	and    $0x20,%eax
c0101468:	85 c0                	test   %eax,%eax
c010146a:	75 09                	jne    c0101475 <serial_putc_sub+0x48>
c010146c:	81 7d f8 ff 31 00 00 	cmpl   $0x31ff,-0x8(%ebp)
c0101473:	7e c8                	jle    c010143d <serial_putc_sub+0x10>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101475:	8b 45 08             	mov    0x8(%ebp),%eax
c0101478:	0f b6 c0             	movzbl %al,%eax
c010147b:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
c0101481:	88 45 f1             	mov    %al,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101484:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101488:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010148c:	ee                   	out    %al,(%dx)
}
c010148d:	83 c4 14             	add    $0x14,%esp
c0101490:	5b                   	pop    %ebx
c0101491:	5d                   	pop    %ebp
c0101492:	c3                   	ret    

c0101493 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101493:	55                   	push   %ebp
c0101494:	89 e5                	mov    %esp,%ebp
c0101496:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c0101499:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010149d:	74 0d                	je     c01014ac <serial_putc+0x19>
        serial_putc_sub(c);
c010149f:	8b 45 08             	mov    0x8(%ebp),%eax
c01014a2:	89 04 24             	mov    %eax,(%esp)
c01014a5:	e8 83 ff ff ff       	call   c010142d <serial_putc_sub>
c01014aa:	eb 24                	jmp    c01014d0 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c01014ac:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01014b3:	e8 75 ff ff ff       	call   c010142d <serial_putc_sub>
        serial_putc_sub(' ');
c01014b8:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01014bf:	e8 69 ff ff ff       	call   c010142d <serial_putc_sub>
        serial_putc_sub('\b');
c01014c4:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01014cb:	e8 5d ff ff ff       	call   c010142d <serial_putc_sub>
    }
}
c01014d0:	c9                   	leave  
c01014d1:	c3                   	ret    

c01014d2 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c01014d2:	55                   	push   %ebp
c01014d3:	89 e5                	mov    %esp,%ebp
c01014d5:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c01014d8:	eb 32                	jmp    c010150c <cons_intr+0x3a>
        if (c != 0) {
c01014da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01014de:	74 2c                	je     c010150c <cons_intr+0x3a>
            cons.buf[cons.wpos ++] = c;
c01014e0:	a1 44 29 1c c0       	mov    0xc01c2944,%eax
c01014e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01014e8:	88 90 40 27 1c c0    	mov    %dl,-0x3fe3d8c0(%eax)
c01014ee:	83 c0 01             	add    $0x1,%eax
c01014f1:	a3 44 29 1c c0       	mov    %eax,0xc01c2944
            if (cons.wpos == CONSBUFSIZE) {
c01014f6:	a1 44 29 1c c0       	mov    0xc01c2944,%eax
c01014fb:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101500:	75 0a                	jne    c010150c <cons_intr+0x3a>
                cons.wpos = 0;
c0101502:	c7 05 44 29 1c c0 00 	movl   $0x0,0xc01c2944
c0101509:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c010150c:	8b 45 08             	mov    0x8(%ebp),%eax
c010150f:	ff d0                	call   *%eax
c0101511:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101514:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0101518:	75 c0                	jne    c01014da <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c010151a:	c9                   	leave  
c010151b:	c3                   	ret    

c010151c <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c010151c:	55                   	push   %ebp
c010151d:	89 e5                	mov    %esp,%ebp
c010151f:	53                   	push   %ebx
c0101520:	83 ec 14             	sub    $0x14,%esp
c0101523:	66 c7 45 f6 fd 03    	movw   $0x3fd,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101529:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c010152d:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101531:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101535:	ec                   	in     (%dx),%al
c0101536:	89 c3                	mov    %eax,%ebx
c0101538:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c010153b:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c010153f:	0f b6 c0             	movzbl %al,%eax
c0101542:	83 e0 01             	and    $0x1,%eax
c0101545:	85 c0                	test   %eax,%eax
c0101547:	75 07                	jne    c0101550 <serial_proc_data+0x34>
        return -1;
c0101549:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010154e:	eb 32                	jmp    c0101582 <serial_proc_data+0x66>
c0101550:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101556:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010155a:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010155e:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101562:	ec                   	in     (%dx),%al
c0101563:	89 c3                	mov    %eax,%ebx
c0101565:	88 5d f1             	mov    %bl,-0xf(%ebp)
    return data;
c0101568:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c010156c:	0f b6 c0             	movzbl %al,%eax
c010156f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    if (c == 127) {
c0101572:	83 7d f8 7f          	cmpl   $0x7f,-0x8(%ebp)
c0101576:	75 07                	jne    c010157f <serial_proc_data+0x63>
        c = '\b';
c0101578:	c7 45 f8 08 00 00 00 	movl   $0x8,-0x8(%ebp)
    }
    return c;
c010157f:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0101582:	83 c4 14             	add    $0x14,%esp
c0101585:	5b                   	pop    %ebx
c0101586:	5d                   	pop    %ebp
c0101587:	c3                   	ret    

c0101588 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101588:	55                   	push   %ebp
c0101589:	89 e5                	mov    %esp,%ebp
c010158b:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c010158e:	a1 28 27 1c c0       	mov    0xc01c2728,%eax
c0101593:	85 c0                	test   %eax,%eax
c0101595:	74 0c                	je     c01015a3 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c0101597:	c7 04 24 1c 15 10 c0 	movl   $0xc010151c,(%esp)
c010159e:	e8 2f ff ff ff       	call   c01014d2 <cons_intr>
    }
}
c01015a3:	c9                   	leave  
c01015a4:	c3                   	ret    

c01015a5 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c01015a5:	55                   	push   %ebp
c01015a6:	89 e5                	mov    %esp,%ebp
c01015a8:	53                   	push   %ebx
c01015a9:	83 ec 44             	sub    $0x44,%esp
c01015ac:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015b2:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c01015b6:	66 89 55 d6          	mov    %dx,-0x2a(%ebp)
c01015ba:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01015be:	ec                   	in     (%dx),%al
c01015bf:	89 c3                	mov    %eax,%ebx
c01015c1:	88 5d ef             	mov    %bl,-0x11(%ebp)
    return data;
c01015c4:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c01015c8:	0f b6 c0             	movzbl %al,%eax
c01015cb:	83 e0 01             	and    $0x1,%eax
c01015ce:	85 c0                	test   %eax,%eax
c01015d0:	75 0a                	jne    c01015dc <kbd_proc_data+0x37>
        return -1;
c01015d2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01015d7:	e9 61 01 00 00       	jmp    c010173d <kbd_proc_data+0x198>
c01015dc:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01015e2:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c01015e6:	66 89 55 d6          	mov    %dx,-0x2a(%ebp)
c01015ea:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c01015ee:	ec                   	in     (%dx),%al
c01015ef:	89 c3                	mov    %eax,%ebx
c01015f1:	88 5d eb             	mov    %bl,-0x15(%ebp)
    return data;
c01015f4:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c01015f8:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c01015fb:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c01015ff:	75 17                	jne    c0101618 <kbd_proc_data+0x73>
        // E0 escape character
        shift |= E0ESC;
c0101601:	a1 48 29 1c c0       	mov    0xc01c2948,%eax
c0101606:	83 c8 40             	or     $0x40,%eax
c0101609:	a3 48 29 1c c0       	mov    %eax,0xc01c2948
        return 0;
c010160e:	b8 00 00 00 00       	mov    $0x0,%eax
c0101613:	e9 25 01 00 00       	jmp    c010173d <kbd_proc_data+0x198>
    } else if (data & 0x80) {
c0101618:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010161c:	84 c0                	test   %al,%al
c010161e:	79 47                	jns    c0101667 <kbd_proc_data+0xc2>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101620:	a1 48 29 1c c0       	mov    0xc01c2948,%eax
c0101625:	83 e0 40             	and    $0x40,%eax
c0101628:	85 c0                	test   %eax,%eax
c010162a:	75 09                	jne    c0101635 <kbd_proc_data+0x90>
c010162c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101630:	83 e0 7f             	and    $0x7f,%eax
c0101633:	eb 04                	jmp    c0101639 <kbd_proc_data+0x94>
c0101635:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101639:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c010163c:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101640:	0f b6 80 60 10 13 c0 	movzbl -0x3fecefa0(%eax),%eax
c0101647:	83 c8 40             	or     $0x40,%eax
c010164a:	0f b6 c0             	movzbl %al,%eax
c010164d:	f7 d0                	not    %eax
c010164f:	89 c2                	mov    %eax,%edx
c0101651:	a1 48 29 1c c0       	mov    0xc01c2948,%eax
c0101656:	21 d0                	and    %edx,%eax
c0101658:	a3 48 29 1c c0       	mov    %eax,0xc01c2948
        return 0;
c010165d:	b8 00 00 00 00       	mov    $0x0,%eax
c0101662:	e9 d6 00 00 00       	jmp    c010173d <kbd_proc_data+0x198>
    } else if (shift & E0ESC) {
c0101667:	a1 48 29 1c c0       	mov    0xc01c2948,%eax
c010166c:	83 e0 40             	and    $0x40,%eax
c010166f:	85 c0                	test   %eax,%eax
c0101671:	74 11                	je     c0101684 <kbd_proc_data+0xdf>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0101673:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0101677:	a1 48 29 1c c0       	mov    0xc01c2948,%eax
c010167c:	83 e0 bf             	and    $0xffffffbf,%eax
c010167f:	a3 48 29 1c c0       	mov    %eax,0xc01c2948
    }

    shift |= shiftcode[data];
c0101684:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101688:	0f b6 80 60 10 13 c0 	movzbl -0x3fecefa0(%eax),%eax
c010168f:	0f b6 d0             	movzbl %al,%edx
c0101692:	a1 48 29 1c c0       	mov    0xc01c2948,%eax
c0101697:	09 d0                	or     %edx,%eax
c0101699:	a3 48 29 1c c0       	mov    %eax,0xc01c2948
    shift ^= togglecode[data];
c010169e:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016a2:	0f b6 80 60 11 13 c0 	movzbl -0x3feceea0(%eax),%eax
c01016a9:	0f b6 d0             	movzbl %al,%edx
c01016ac:	a1 48 29 1c c0       	mov    0xc01c2948,%eax
c01016b1:	31 d0                	xor    %edx,%eax
c01016b3:	a3 48 29 1c c0       	mov    %eax,0xc01c2948

    c = charcode[shift & (CTL | SHIFT)][data];
c01016b8:	a1 48 29 1c c0       	mov    0xc01c2948,%eax
c01016bd:	83 e0 03             	and    $0x3,%eax
c01016c0:	8b 14 85 60 15 13 c0 	mov    -0x3feceaa0(,%eax,4),%edx
c01016c7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01016cb:	01 d0                	add    %edx,%eax
c01016cd:	0f b6 00             	movzbl (%eax),%eax
c01016d0:	0f b6 c0             	movzbl %al,%eax
c01016d3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c01016d6:	a1 48 29 1c c0       	mov    0xc01c2948,%eax
c01016db:	83 e0 08             	and    $0x8,%eax
c01016de:	85 c0                	test   %eax,%eax
c01016e0:	74 22                	je     c0101704 <kbd_proc_data+0x15f>
        if ('a' <= c && c <= 'z')
c01016e2:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c01016e6:	7e 0c                	jle    c01016f4 <kbd_proc_data+0x14f>
c01016e8:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c01016ec:	7f 06                	jg     c01016f4 <kbd_proc_data+0x14f>
            c += 'A' - 'a';
c01016ee:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c01016f2:	eb 10                	jmp    c0101704 <kbd_proc_data+0x15f>
        else if ('A' <= c && c <= 'Z')
c01016f4:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c01016f8:	7e 0a                	jle    c0101704 <kbd_proc_data+0x15f>
c01016fa:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c01016fe:	7f 04                	jg     c0101704 <kbd_proc_data+0x15f>
            c += 'a' - 'A';
c0101700:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101704:	a1 48 29 1c c0       	mov    0xc01c2948,%eax
c0101709:	f7 d0                	not    %eax
c010170b:	83 e0 06             	and    $0x6,%eax
c010170e:	85 c0                	test   %eax,%eax
c0101710:	75 28                	jne    c010173a <kbd_proc_data+0x195>
c0101712:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101719:	75 1f                	jne    c010173a <kbd_proc_data+0x195>
        cprintf("Rebooting!\n");
c010171b:	c7 04 24 9d dc 10 c0 	movl   $0xc010dc9d,(%esp)
c0101722:	e8 3c ec ff ff       	call   c0100363 <cprintf>
c0101727:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c010172d:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101731:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c0101735:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0101739:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c010173a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010173d:	83 c4 44             	add    $0x44,%esp
c0101740:	5b                   	pop    %ebx
c0101741:	5d                   	pop    %ebp
c0101742:	c3                   	ret    

c0101743 <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0101743:	55                   	push   %ebp
c0101744:	89 e5                	mov    %esp,%ebp
c0101746:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c0101749:	c7 04 24 a5 15 10 c0 	movl   $0xc01015a5,(%esp)
c0101750:	e8 7d fd ff ff       	call   c01014d2 <cons_intr>
}
c0101755:	c9                   	leave  
c0101756:	c3                   	ret    

c0101757 <kbd_init>:

static void
kbd_init(void) {
c0101757:	55                   	push   %ebp
c0101758:	89 e5                	mov    %esp,%ebp
c010175a:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c010175d:	e8 e1 ff ff ff       	call   c0101743 <kbd_intr>
    pic_enable(IRQ_KBD);
c0101762:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0101769:	e8 da 09 00 00       	call   c0102148 <pic_enable>
}
c010176e:	c9                   	leave  
c010176f:	c3                   	ret    

c0101770 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0101770:	55                   	push   %ebp
c0101771:	89 e5                	mov    %esp,%ebp
c0101773:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c0101776:	e8 18 f8 ff ff       	call   c0100f93 <cga_init>
    serial_init();
c010177b:	e8 0e f9 ff ff       	call   c010108e <serial_init>
    kbd_init();
c0101780:	e8 d2 ff ff ff       	call   c0101757 <kbd_init>
    if (!serial_exists) {
c0101785:	a1 28 27 1c c0       	mov    0xc01c2728,%eax
c010178a:	85 c0                	test   %eax,%eax
c010178c:	75 0c                	jne    c010179a <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c010178e:	c7 04 24 a9 dc 10 c0 	movl   $0xc010dca9,(%esp)
c0101795:	e8 c9 eb ff ff       	call   c0100363 <cprintf>
    }
}
c010179a:	c9                   	leave  
c010179b:	c3                   	ret    

c010179c <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c010179c:	55                   	push   %ebp
c010179d:	89 e5                	mov    %esp,%ebp
c010179f:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01017a2:	e8 3d f7 ff ff       	call   c0100ee4 <__intr_save>
c01017a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c01017aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01017ad:	89 04 24             	mov    %eax,(%esp)
c01017b0:	e8 5f fa ff ff       	call   c0101214 <lpt_putc>
        cga_putc(c);
c01017b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01017b8:	89 04 24             	mov    %eax,(%esp)
c01017bb:	e8 93 fa ff ff       	call   c0101253 <cga_putc>
        serial_putc(c);
c01017c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01017c3:	89 04 24             	mov    %eax,(%esp)
c01017c6:	e8 c8 fc ff ff       	call   c0101493 <serial_putc>
    }
    local_intr_restore(intr_flag);
c01017cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01017ce:	89 04 24             	mov    %eax,(%esp)
c01017d1:	e8 3d f7 ff ff       	call   c0100f13 <__intr_restore>
}
c01017d6:	c9                   	leave  
c01017d7:	c3                   	ret    

c01017d8 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c01017d8:	55                   	push   %ebp
c01017d9:	89 e5                	mov    %esp,%ebp
c01017db:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c01017de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c01017e5:	e8 fa f6 ff ff       	call   c0100ee4 <__intr_save>
c01017ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c01017ed:	e8 96 fd ff ff       	call   c0101588 <serial_intr>
        kbd_intr();
c01017f2:	e8 4c ff ff ff       	call   c0101743 <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c01017f7:	8b 15 40 29 1c c0    	mov    0xc01c2940,%edx
c01017fd:	a1 44 29 1c c0       	mov    0xc01c2944,%eax
c0101802:	39 c2                	cmp    %eax,%edx
c0101804:	74 30                	je     c0101836 <cons_getc+0x5e>
            c = cons.buf[cons.rpos ++];
c0101806:	a1 40 29 1c c0       	mov    0xc01c2940,%eax
c010180b:	0f b6 90 40 27 1c c0 	movzbl -0x3fe3d8c0(%eax),%edx
c0101812:	0f b6 d2             	movzbl %dl,%edx
c0101815:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0101818:	83 c0 01             	add    $0x1,%eax
c010181b:	a3 40 29 1c c0       	mov    %eax,0xc01c2940
            if (cons.rpos == CONSBUFSIZE) {
c0101820:	a1 40 29 1c c0       	mov    0xc01c2940,%eax
c0101825:	3d 00 02 00 00       	cmp    $0x200,%eax
c010182a:	75 0a                	jne    c0101836 <cons_getc+0x5e>
                cons.rpos = 0;
c010182c:	c7 05 40 29 1c c0 00 	movl   $0x0,0xc01c2940
c0101833:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c0101836:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0101839:	89 04 24             	mov    %eax,(%esp)
c010183c:	e8 d2 f6 ff ff       	call   c0100f13 <__intr_restore>
    return c;
c0101841:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101844:	c9                   	leave  
c0101845:	c3                   	ret    
	...

c0101848 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0101848:	55                   	push   %ebp
c0101849:	89 e5                	mov    %esp,%ebp
c010184b:	53                   	push   %ebx
c010184c:	83 ec 14             	sub    $0x14,%esp
c010184f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101852:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0101856:	90                   	nop
c0101857:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c010185b:	83 c0 07             	add    $0x7,%eax
c010185e:	0f b7 c0             	movzwl %ax,%eax
c0101861:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101865:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101869:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c010186d:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101871:	ec                   	in     (%dx),%al
c0101872:	89 c3                	mov    %eax,%ebx
c0101874:	88 5d f5             	mov    %bl,-0xb(%ebp)
    return data;
c0101877:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010187b:	0f b6 c0             	movzbl %al,%eax
c010187e:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0101881:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0101884:	25 80 00 00 00       	and    $0x80,%eax
c0101889:	85 c0                	test   %eax,%eax
c010188b:	75 ca                	jne    c0101857 <ide_wait_ready+0xf>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c010188d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0101891:	74 11                	je     c01018a4 <ide_wait_ready+0x5c>
c0101893:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0101896:	83 e0 21             	and    $0x21,%eax
c0101899:	85 c0                	test   %eax,%eax
c010189b:	74 07                	je     c01018a4 <ide_wait_ready+0x5c>
        return -1;
c010189d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01018a2:	eb 05                	jmp    c01018a9 <ide_wait_ready+0x61>
    }
    return 0;
c01018a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01018a9:	83 c4 14             	add    $0x14,%esp
c01018ac:	5b                   	pop    %ebx
c01018ad:	5d                   	pop    %ebp
c01018ae:	c3                   	ret    

c01018af <ide_init>:

void
ide_init(void) {
c01018af:	55                   	push   %ebp
c01018b0:	89 e5                	mov    %esp,%ebp
c01018b2:	57                   	push   %edi
c01018b3:	56                   	push   %esi
c01018b4:	53                   	push   %ebx
c01018b5:	81 ec 6c 02 00 00    	sub    $0x26c,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c01018bb:	66 c7 45 e6 00 00    	movw   $0x0,-0x1a(%ebp)
c01018c1:	e9 e3 02 00 00       	jmp    c0101ba9 <ide_init+0x2fa>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c01018c6:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c01018ca:	c1 e0 03             	shl    $0x3,%eax
c01018cd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01018d4:	29 c2                	sub    %eax,%edx
c01018d6:	8d 82 60 29 1c c0    	lea    -0x3fe3d6a0(%edx),%eax
c01018dc:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c01018df:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c01018e3:	66 d1 e8             	shr    %ax
c01018e6:	0f b7 c0             	movzwl %ax,%eax
c01018e9:	0f b7 04 85 c8 dc 10 	movzwl -0x3fef2338(,%eax,4),%eax
c01018f0:	c0 
c01018f1:	66 89 45 da          	mov    %ax,-0x26(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c01018f5:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01018f9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101900:	00 
c0101901:	89 04 24             	mov    %eax,(%esp)
c0101904:	e8 3f ff ff ff       	call   c0101848 <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0101909:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c010190d:	83 e0 01             	and    $0x1,%eax
c0101910:	c1 e0 04             	shl    $0x4,%eax
c0101913:	83 c8 e0             	or     $0xffffffe0,%eax
c0101916:	0f b6 c0             	movzbl %al,%eax
c0101919:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010191d:	83 c2 06             	add    $0x6,%edx
c0101920:	0f b7 d2             	movzwl %dx,%edx
c0101923:	66 89 55 c2          	mov    %dx,-0x3e(%ebp)
c0101927:	88 45 c1             	mov    %al,-0x3f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010192a:	0f b6 45 c1          	movzbl -0x3f(%ebp),%eax
c010192e:	0f b7 55 c2          	movzwl -0x3e(%ebp),%edx
c0101932:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0101933:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101937:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010193e:	00 
c010193f:	89 04 24             	mov    %eax,(%esp)
c0101942:	e8 01 ff ff ff       	call   c0101848 <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0101947:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c010194b:	83 c0 07             	add    $0x7,%eax
c010194e:	0f b7 c0             	movzwl %ax,%eax
c0101951:	66 89 45 be          	mov    %ax,-0x42(%ebp)
c0101955:	c6 45 bd ec          	movb   $0xec,-0x43(%ebp)
c0101959:	0f b6 45 bd          	movzbl -0x43(%ebp),%eax
c010195d:	0f b7 55 be          	movzwl -0x42(%ebp),%edx
c0101961:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0101962:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c0101966:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010196d:	00 
c010196e:	89 04 24             	mov    %eax,(%esp)
c0101971:	e8 d2 fe ff ff       	call   c0101848 <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c0101976:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c010197a:	83 c0 07             	add    $0x7,%eax
c010197d:	0f b7 c0             	movzwl %ax,%eax
c0101980:	66 89 45 ba          	mov    %ax,-0x46(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101984:	0f b7 55 ba          	movzwl -0x46(%ebp),%edx
c0101988:	66 89 95 a6 fd ff ff 	mov    %dx,-0x25a(%ebp)
c010198f:	0f b7 95 a6 fd ff ff 	movzwl -0x25a(%ebp),%edx
c0101996:	ec                   	in     (%dx),%al
c0101997:	89 c3                	mov    %eax,%ebx
c0101999:	88 5d b9             	mov    %bl,-0x47(%ebp)
    return data;
c010199c:	0f b6 45 b9          	movzbl -0x47(%ebp),%eax
c01019a0:	84 c0                	test   %al,%al
c01019a2:	0f 84 fb 01 00 00    	je     c0101ba3 <ide_init+0x2f4>
c01019a8:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01019ac:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01019b3:	00 
c01019b4:	89 04 24             	mov    %eax,(%esp)
c01019b7:	e8 8c fe ff ff       	call   c0101848 <ide_wait_ready>
c01019bc:	85 c0                	test   %eax,%eax
c01019be:	0f 85 df 01 00 00    	jne    c0101ba3 <ide_init+0x2f4>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c01019c4:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c01019c8:	c1 e0 03             	shl    $0x3,%eax
c01019cb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019d2:	29 c2                	sub    %eax,%edx
c01019d4:	8d 82 60 29 1c c0    	lea    -0x3fe3d6a0(%edx),%eax
c01019da:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c01019dd:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01019e1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c01019e4:	8d 85 ac fd ff ff    	lea    -0x254(%ebp),%eax
c01019ea:	89 45 b0             	mov    %eax,-0x50(%ebp)
c01019ed:	c7 45 ac 80 00 00 00 	movl   $0x80,-0x54(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c01019f4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01019f7:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c01019fa:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01019fd:	89 ce                	mov    %ecx,%esi
c01019ff:	89 d3                	mov    %edx,%ebx
c0101a01:	89 f7                	mov    %esi,%edi
c0101a03:	89 d9                	mov    %ebx,%ecx
c0101a05:	89 c2                	mov    %eax,%edx
c0101a07:	fc                   	cld    
c0101a08:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101a0a:	89 cb                	mov    %ecx,%ebx
c0101a0c:	89 fe                	mov    %edi,%esi
c0101a0e:	89 75 b0             	mov    %esi,-0x50(%ebp)
c0101a11:	89 5d ac             	mov    %ebx,-0x54(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101a14:	8d 85 ac fd ff ff    	lea    -0x254(%ebp),%eax
c0101a1a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101a1d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101a20:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101a26:	89 45 d0             	mov    %eax,-0x30(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101a29:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101a2c:	25 00 00 00 04       	and    $0x4000000,%eax
c0101a31:	85 c0                	test   %eax,%eax
c0101a33:	74 0e                	je     c0101a43 <ide_init+0x194>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101a35:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101a38:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101a3e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0101a41:	eb 09                	jmp    c0101a4c <ide_init+0x19d>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101a43:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101a46:	8b 40 78             	mov    0x78(%eax),%eax
c0101a49:	89 45 e0             	mov    %eax,-0x20(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101a4c:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101a50:	c1 e0 03             	shl    $0x3,%eax
c0101a53:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a5a:	29 c2                	sub    %eax,%edx
c0101a5c:	81 c2 60 29 1c c0    	add    $0xc01c2960,%edx
c0101a62:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101a65:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c0101a68:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101a6c:	c1 e0 03             	shl    $0x3,%eax
c0101a6f:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a76:	29 c2                	sub    %eax,%edx
c0101a78:	81 c2 60 29 1c c0    	add    $0xc01c2960,%edx
c0101a7e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101a81:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c0101a84:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101a87:	83 c0 62             	add    $0x62,%eax
c0101a8a:	0f b7 00             	movzwl (%eax),%eax
c0101a8d:	0f b7 c0             	movzwl %ax,%eax
c0101a90:	25 00 02 00 00       	and    $0x200,%eax
c0101a95:	85 c0                	test   %eax,%eax
c0101a97:	75 24                	jne    c0101abd <ide_init+0x20e>
c0101a99:	c7 44 24 0c d0 dc 10 	movl   $0xc010dcd0,0xc(%esp)
c0101aa0:	c0 
c0101aa1:	c7 44 24 08 13 dd 10 	movl   $0xc010dd13,0x8(%esp)
c0101aa8:	c0 
c0101aa9:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c0101ab0:	00 
c0101ab1:	c7 04 24 28 dd 10 c0 	movl   $0xc010dd28,(%esp)
c0101ab8:	e8 ff f2 ff ff       	call   c0100dbc <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101abd:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101ac1:	c1 e0 03             	shl    $0x3,%eax
c0101ac4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101acb:	29 c2                	sub    %eax,%edx
c0101acd:	8d 82 60 29 1c c0    	lea    -0x3fe3d6a0(%edx),%eax
c0101ad3:	83 c0 0c             	add    $0xc,%eax
c0101ad6:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101ad9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101adc:	83 c0 36             	add    $0x36,%eax
c0101adf:	89 45 c8             	mov    %eax,-0x38(%ebp)
        unsigned int i, length = 40;
c0101ae2:	c7 45 c4 28 00 00 00 	movl   $0x28,-0x3c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101ae9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0101af0:	eb 30                	jmp    c0101b22 <ide_init+0x273>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101af2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101af5:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101af8:	01 c2                	add    %eax,%edx
c0101afa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101afd:	83 c0 01             	add    $0x1,%eax
c0101b00:	03 45 c8             	add    -0x38(%ebp),%eax
c0101b03:	0f b6 00             	movzbl (%eax),%eax
c0101b06:	88 02                	mov    %al,(%edx)
c0101b08:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b0b:	83 c0 01             	add    $0x1,%eax
c0101b0e:	03 45 cc             	add    -0x34(%ebp),%eax
c0101b11:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101b14:	8b 4d c8             	mov    -0x38(%ebp),%ecx
c0101b17:	01 ca                	add    %ecx,%edx
c0101b19:	0f b6 12             	movzbl (%edx),%edx
c0101b1c:	88 10                	mov    %dl,(%eax)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101b1e:	83 45 dc 02          	addl   $0x2,-0x24(%ebp)
c0101b22:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b25:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c0101b28:	72 c8                	jb     c0101af2 <ide_init+0x243>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101b2a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b2d:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101b30:	01 d0                	add    %edx,%eax
c0101b32:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101b35:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0101b39:	0f 95 c0             	setne  %al
c0101b3c:	83 6d dc 01          	subl   $0x1,-0x24(%ebp)
c0101b40:	84 c0                	test   %al,%al
c0101b42:	74 0f                	je     c0101b53 <ide_init+0x2a4>
c0101b44:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101b47:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0101b4a:	01 d0                	add    %edx,%eax
c0101b4c:	0f b6 00             	movzbl (%eax),%eax
c0101b4f:	3c 20                	cmp    $0x20,%al
c0101b51:	74 d7                	je     c0101b2a <ide_init+0x27b>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101b53:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101b57:	c1 e0 03             	shl    $0x3,%eax
c0101b5a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b61:	29 c2                	sub    %eax,%edx
c0101b63:	8d 82 60 29 1c c0    	lea    -0x3fe3d6a0(%edx),%eax
c0101b69:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101b6c:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101b70:	c1 e0 03             	shl    $0x3,%eax
c0101b73:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b7a:	29 c2                	sub    %eax,%edx
c0101b7c:	8d 82 60 29 1c c0    	lea    -0x3fe3d6a0(%edx),%eax
c0101b82:	8b 50 08             	mov    0x8(%eax),%edx
c0101b85:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101b89:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101b8d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101b91:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101b95:	c7 04 24 3a dd 10 c0 	movl   $0xc010dd3a,(%esp)
c0101b9c:	e8 c2 e7 ff ff       	call   c0100363 <cprintf>
c0101ba1:	eb 01                	jmp    c0101ba4 <ide_init+0x2f5>
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
        ide_wait_ready(iobase, 0);

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
            continue ;
c0101ba3:	90                   	nop

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101ba4:	66 83 45 e6 01       	addw   $0x1,-0x1a(%ebp)
c0101ba9:	66 83 7d e6 03       	cmpw   $0x3,-0x1a(%ebp)
c0101bae:	0f 86 12 fd ff ff    	jbe    c01018c6 <ide_init+0x17>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101bb4:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101bbb:	e8 88 05 00 00       	call   c0102148 <pic_enable>
    pic_enable(IRQ_IDE2);
c0101bc0:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101bc7:	e8 7c 05 00 00       	call   c0102148 <pic_enable>
}
c0101bcc:	81 c4 6c 02 00 00    	add    $0x26c,%esp
c0101bd2:	5b                   	pop    %ebx
c0101bd3:	5e                   	pop    %esi
c0101bd4:	5f                   	pop    %edi
c0101bd5:	5d                   	pop    %ebp
c0101bd6:	c3                   	ret    

c0101bd7 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101bd7:	55                   	push   %ebp
c0101bd8:	89 e5                	mov    %esp,%ebp
c0101bda:	83 ec 04             	sub    $0x4,%esp
c0101bdd:	8b 45 08             	mov    0x8(%ebp),%eax
c0101be0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101be4:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101be9:	77 24                	ja     c0101c0f <ide_device_valid+0x38>
c0101beb:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101bef:	c1 e0 03             	shl    $0x3,%eax
c0101bf2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bf9:	29 c2                	sub    %eax,%edx
c0101bfb:	8d 82 60 29 1c c0    	lea    -0x3fe3d6a0(%edx),%eax
c0101c01:	0f b6 00             	movzbl (%eax),%eax
c0101c04:	84 c0                	test   %al,%al
c0101c06:	74 07                	je     c0101c0f <ide_device_valid+0x38>
c0101c08:	b8 01 00 00 00       	mov    $0x1,%eax
c0101c0d:	eb 05                	jmp    c0101c14 <ide_device_valid+0x3d>
c0101c0f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c14:	c9                   	leave  
c0101c15:	c3                   	ret    

c0101c16 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101c16:	55                   	push   %ebp
c0101c17:	89 e5                	mov    %esp,%ebp
c0101c19:	83 ec 08             	sub    $0x8,%esp
c0101c1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c1f:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101c23:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c27:	89 04 24             	mov    %eax,(%esp)
c0101c2a:	e8 a8 ff ff ff       	call   c0101bd7 <ide_device_valid>
c0101c2f:	85 c0                	test   %eax,%eax
c0101c31:	74 1b                	je     c0101c4e <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101c33:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101c37:	c1 e0 03             	shl    $0x3,%eax
c0101c3a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c41:	29 c2                	sub    %eax,%edx
c0101c43:	8d 82 60 29 1c c0    	lea    -0x3fe3d6a0(%edx),%eax
c0101c49:	8b 40 08             	mov    0x8(%eax),%eax
c0101c4c:	eb 05                	jmp    c0101c53 <ide_device_size+0x3d>
    }
    return 0;
c0101c4e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101c53:	c9                   	leave  
c0101c54:	c3                   	ret    

c0101c55 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101c55:	55                   	push   %ebp
c0101c56:	89 e5                	mov    %esp,%ebp
c0101c58:	57                   	push   %edi
c0101c59:	56                   	push   %esi
c0101c5a:	53                   	push   %ebx
c0101c5b:	83 ec 5c             	sub    $0x5c,%esp
c0101c5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c61:	66 89 45 b4          	mov    %ax,-0x4c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101c65:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101c6c:	77 24                	ja     c0101c92 <ide_read_secs+0x3d>
c0101c6e:	66 83 7d b4 03       	cmpw   $0x3,-0x4c(%ebp)
c0101c73:	77 1d                	ja     c0101c92 <ide_read_secs+0x3d>
c0101c75:	0f b7 45 b4          	movzwl -0x4c(%ebp),%eax
c0101c79:	c1 e0 03             	shl    $0x3,%eax
c0101c7c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101c83:	29 c2                	sub    %eax,%edx
c0101c85:	8d 82 60 29 1c c0    	lea    -0x3fe3d6a0(%edx),%eax
c0101c8b:	0f b6 00             	movzbl (%eax),%eax
c0101c8e:	84 c0                	test   %al,%al
c0101c90:	75 24                	jne    c0101cb6 <ide_read_secs+0x61>
c0101c92:	c7 44 24 0c 58 dd 10 	movl   $0xc010dd58,0xc(%esp)
c0101c99:	c0 
c0101c9a:	c7 44 24 08 13 dd 10 	movl   $0xc010dd13,0x8(%esp)
c0101ca1:	c0 
c0101ca2:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101ca9:	00 
c0101caa:	c7 04 24 28 dd 10 c0 	movl   $0xc010dd28,(%esp)
c0101cb1:	e8 06 f1 ff ff       	call   c0100dbc <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101cb6:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101cbd:	77 0f                	ja     c0101cce <ide_read_secs+0x79>
c0101cbf:	8b 45 14             	mov    0x14(%ebp),%eax
c0101cc2:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101cc5:	01 d0                	add    %edx,%eax
c0101cc7:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101ccc:	76 24                	jbe    c0101cf2 <ide_read_secs+0x9d>
c0101cce:	c7 44 24 0c 80 dd 10 	movl   $0xc010dd80,0xc(%esp)
c0101cd5:	c0 
c0101cd6:	c7 44 24 08 13 dd 10 	movl   $0xc010dd13,0x8(%esp)
c0101cdd:	c0 
c0101cde:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101ce5:	00 
c0101ce6:	c7 04 24 28 dd 10 c0 	movl   $0xc010dd28,(%esp)
c0101ced:	e8 ca f0 ff ff       	call   c0100dbc <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101cf2:	0f b7 45 b4          	movzwl -0x4c(%ebp),%eax
c0101cf6:	66 d1 e8             	shr    %ax
c0101cf9:	0f b7 c0             	movzwl %ax,%eax
c0101cfc:	0f b7 04 85 c8 dc 10 	movzwl -0x3fef2338(,%eax,4),%eax
c0101d03:	c0 
c0101d04:	66 89 45 e2          	mov    %ax,-0x1e(%ebp)
c0101d08:	0f b7 45 b4          	movzwl -0x4c(%ebp),%eax
c0101d0c:	66 d1 e8             	shr    %ax
c0101d0f:	0f b7 c0             	movzwl %ax,%eax
c0101d12:	0f b7 04 85 ca dc 10 	movzwl -0x3fef2336(,%eax,4),%eax
c0101d19:	c0 
c0101d1a:	66 89 45 e0          	mov    %ax,-0x20(%ebp)

    ide_wait_ready(iobase, 0);
c0101d1e:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
c0101d22:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101d29:	00 
c0101d2a:	89 04 24             	mov    %eax,(%esp)
c0101d2d:	e8 16 fb ff ff       	call   c0101848 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101d32:	0f b7 45 e0          	movzwl -0x20(%ebp),%eax
c0101d36:	83 c0 02             	add    $0x2,%eax
c0101d39:	0f b7 c0             	movzwl %ax,%eax
c0101d3c:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c0101d40:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101d44:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101d48:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101d4c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101d4d:	8b 45 14             	mov    0x14(%ebp),%eax
c0101d50:	0f b6 c0             	movzbl %al,%eax
c0101d53:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101d57:	83 c2 02             	add    $0x2,%edx
c0101d5a:	0f b7 d2             	movzwl %dx,%edx
c0101d5d:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101d61:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101d64:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101d68:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101d6c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101d6d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d70:	0f b6 c0             	movzbl %al,%eax
c0101d73:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101d77:	83 c2 03             	add    $0x3,%edx
c0101d7a:	0f b7 d2             	movzwl %dx,%edx
c0101d7d:	66 89 55 d6          	mov    %dx,-0x2a(%ebp)
c0101d81:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101d84:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101d88:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101d8c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101d8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d90:	c1 e8 08             	shr    $0x8,%eax
c0101d93:	0f b6 c0             	movzbl %al,%eax
c0101d96:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101d9a:	83 c2 04             	add    $0x4,%edx
c0101d9d:	0f b7 d2             	movzwl %dx,%edx
c0101da0:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101da4:	88 45 d1             	mov    %al,-0x2f(%ebp)
c0101da7:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0101dab:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0101daf:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101db0:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101db3:	c1 e8 10             	shr    $0x10,%eax
c0101db6:	0f b6 c0             	movzbl %al,%eax
c0101db9:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101dbd:	83 c2 05             	add    $0x5,%edx
c0101dc0:	0f b7 d2             	movzwl %dx,%edx
c0101dc3:	66 89 55 ce          	mov    %dx,-0x32(%ebp)
c0101dc7:	88 45 cd             	mov    %al,-0x33(%ebp)
c0101dca:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c0101dce:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c0101dd2:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101dd3:	0f b7 45 b4          	movzwl -0x4c(%ebp),%eax
c0101dd7:	83 e0 01             	and    $0x1,%eax
c0101dda:	89 c2                	mov    %eax,%edx
c0101ddc:	c1 e2 04             	shl    $0x4,%edx
c0101ddf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101de2:	c1 e8 18             	shr    $0x18,%eax
c0101de5:	83 e0 0f             	and    $0xf,%eax
c0101de8:	09 d0                	or     %edx,%eax
c0101dea:	83 c8 e0             	or     $0xffffffe0,%eax
c0101ded:	0f b6 c0             	movzbl %al,%eax
c0101df0:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101df4:	83 c2 06             	add    $0x6,%edx
c0101df7:	0f b7 d2             	movzwl %dx,%edx
c0101dfa:	66 89 55 ca          	mov    %dx,-0x36(%ebp)
c0101dfe:	88 45 c9             	mov    %al,-0x37(%ebp)
c0101e01:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0101e05:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c0101e09:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101e0a:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
c0101e0e:	83 c0 07             	add    $0x7,%eax
c0101e11:	0f b7 c0             	movzwl %ax,%eax
c0101e14:	66 89 45 c6          	mov    %ax,-0x3a(%ebp)
c0101e18:	c6 45 c5 20          	movb   $0x20,-0x3b(%ebp)
c0101e1c:	0f b6 45 c5          	movzbl -0x3b(%ebp),%eax
c0101e20:	0f b7 55 c6          	movzwl -0x3a(%ebp),%edx
c0101e24:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101e25:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101e2c:	eb 5c                	jmp    c0101e8a <ide_read_secs+0x235>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101e2e:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
c0101e32:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101e39:	00 
c0101e3a:	89 04 24             	mov    %eax,(%esp)
c0101e3d:	e8 06 fa ff ff       	call   c0101848 <ide_wait_ready>
c0101e42:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0101e45:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0101e49:	75 47                	jne    c0101e92 <ide_read_secs+0x23d>
            goto out;
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101e4b:	0f b7 45 e2          	movzwl -0x1e(%ebp),%eax
c0101e4f:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101e52:	8b 45 10             	mov    0x10(%ebp),%eax
c0101e55:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0101e58:	c7 45 b8 80 00 00 00 	movl   $0x80,-0x48(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101e5f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0101e62:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c0101e65:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0101e68:	89 ce                	mov    %ecx,%esi
c0101e6a:	89 d3                	mov    %edx,%ebx
c0101e6c:	89 f7                	mov    %esi,%edi
c0101e6e:	89 d9                	mov    %ebx,%ecx
c0101e70:	89 c2                	mov    %eax,%edx
c0101e72:	fc                   	cld    
c0101e73:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101e75:	89 cb                	mov    %ecx,%ebx
c0101e77:	89 fe                	mov    %edi,%esi
c0101e79:	89 75 bc             	mov    %esi,-0x44(%ebp)
c0101e7c:	89 5d b8             	mov    %ebx,-0x48(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101e7f:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101e83:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101e8a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101e8e:	75 9e                	jne    c0101e2e <ide_read_secs+0x1d9>
c0101e90:	eb 01                	jmp    c0101e93 <ide_read_secs+0x23e>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c0101e92:	90                   	nop
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101e93:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c0101e96:	83 c4 5c             	add    $0x5c,%esp
c0101e99:	5b                   	pop    %ebx
c0101e9a:	5e                   	pop    %esi
c0101e9b:	5f                   	pop    %edi
c0101e9c:	5d                   	pop    %ebp
c0101e9d:	c3                   	ret    

c0101e9e <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101e9e:	55                   	push   %ebp
c0101e9f:	89 e5                	mov    %esp,%ebp
c0101ea1:	56                   	push   %esi
c0101ea2:	53                   	push   %ebx
c0101ea3:	83 ec 50             	sub    $0x50,%esp
c0101ea6:	8b 45 08             	mov    0x8(%ebp),%eax
c0101ea9:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101ead:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101eb4:	77 24                	ja     c0101eda <ide_write_secs+0x3c>
c0101eb6:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101ebb:	77 1d                	ja     c0101eda <ide_write_secs+0x3c>
c0101ebd:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101ec1:	c1 e0 03             	shl    $0x3,%eax
c0101ec4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ecb:	29 c2                	sub    %eax,%edx
c0101ecd:	8d 82 60 29 1c c0    	lea    -0x3fe3d6a0(%edx),%eax
c0101ed3:	0f b6 00             	movzbl (%eax),%eax
c0101ed6:	84 c0                	test   %al,%al
c0101ed8:	75 24                	jne    c0101efe <ide_write_secs+0x60>
c0101eda:	c7 44 24 0c 58 dd 10 	movl   $0xc010dd58,0xc(%esp)
c0101ee1:	c0 
c0101ee2:	c7 44 24 08 13 dd 10 	movl   $0xc010dd13,0x8(%esp)
c0101ee9:	c0 
c0101eea:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101ef1:	00 
c0101ef2:	c7 04 24 28 dd 10 c0 	movl   $0xc010dd28,(%esp)
c0101ef9:	e8 be ee ff ff       	call   c0100dbc <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101efe:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101f05:	77 0f                	ja     c0101f16 <ide_write_secs+0x78>
c0101f07:	8b 45 14             	mov    0x14(%ebp),%eax
c0101f0a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101f0d:	01 d0                	add    %edx,%eax
c0101f0f:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101f14:	76 24                	jbe    c0101f3a <ide_write_secs+0x9c>
c0101f16:	c7 44 24 0c 80 dd 10 	movl   $0xc010dd80,0xc(%esp)
c0101f1d:	c0 
c0101f1e:	c7 44 24 08 13 dd 10 	movl   $0xc010dd13,0x8(%esp)
c0101f25:	c0 
c0101f26:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101f2d:	00 
c0101f2e:	c7 04 24 28 dd 10 c0 	movl   $0xc010dd28,(%esp)
c0101f35:	e8 82 ee ff ff       	call   c0100dbc <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101f3a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f3e:	66 d1 e8             	shr    %ax
c0101f41:	0f b7 c0             	movzwl %ax,%eax
c0101f44:	0f b7 04 85 c8 dc 10 	movzwl -0x3fef2338(,%eax,4),%eax
c0101f4b:	c0 
c0101f4c:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101f50:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f54:	66 d1 e8             	shr    %ax
c0101f57:	0f b7 c0             	movzwl %ax,%eax
c0101f5a:	0f b7 04 85 ca dc 10 	movzwl -0x3fef2336(,%eax,4),%eax
c0101f61:	c0 
c0101f62:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101f66:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101f6a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101f71:	00 
c0101f72:	89 04 24             	mov    %eax,(%esp)
c0101f75:	e8 ce f8 ff ff       	call   c0101848 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101f7a:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101f7e:	83 c0 02             	add    $0x2,%eax
c0101f81:	0f b7 c0             	movzwl %ax,%eax
c0101f84:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101f88:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101f8c:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101f90:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101f94:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101f95:	8b 45 14             	mov    0x14(%ebp),%eax
c0101f98:	0f b6 c0             	movzbl %al,%eax
c0101f9b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f9f:	83 c2 02             	add    $0x2,%edx
c0101fa2:	0f b7 d2             	movzwl %dx,%edx
c0101fa5:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101fa9:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101fac:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101fb0:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101fb4:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101fb5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101fb8:	0f b6 c0             	movzbl %al,%eax
c0101fbb:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101fbf:	83 c2 03             	add    $0x3,%edx
c0101fc2:	0f b7 d2             	movzwl %dx,%edx
c0101fc5:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101fc9:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101fcc:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101fd0:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101fd4:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101fd5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101fd8:	c1 e8 08             	shr    $0x8,%eax
c0101fdb:	0f b6 c0             	movzbl %al,%eax
c0101fde:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101fe2:	83 c2 04             	add    $0x4,%edx
c0101fe5:	0f b7 d2             	movzwl %dx,%edx
c0101fe8:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101fec:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101fef:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101ff3:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101ff7:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101ff8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101ffb:	c1 e8 10             	shr    $0x10,%eax
c0101ffe:	0f b6 c0             	movzbl %al,%eax
c0102001:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102005:	83 c2 05             	add    $0x5,%edx
c0102008:	0f b7 d2             	movzwl %dx,%edx
c010200b:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c010200f:	88 45 dd             	mov    %al,-0x23(%ebp)
c0102012:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102016:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010201a:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c010201b:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010201f:	83 e0 01             	and    $0x1,%eax
c0102022:	89 c2                	mov    %eax,%edx
c0102024:	c1 e2 04             	shl    $0x4,%edx
c0102027:	8b 45 0c             	mov    0xc(%ebp),%eax
c010202a:	c1 e8 18             	shr    $0x18,%eax
c010202d:	83 e0 0f             	and    $0xf,%eax
c0102030:	09 d0                	or     %edx,%eax
c0102032:	83 c8 e0             	or     $0xffffffe0,%eax
c0102035:	0f b6 c0             	movzbl %al,%eax
c0102038:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010203c:	83 c2 06             	add    $0x6,%edx
c010203f:	0f b7 d2             	movzwl %dx,%edx
c0102042:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0102046:	88 45 d9             	mov    %al,-0x27(%ebp)
c0102049:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c010204d:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102051:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0102052:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102056:	83 c0 07             	add    $0x7,%eax
c0102059:	0f b7 c0             	movzwl %ax,%eax
c010205c:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0102060:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c0102064:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0102068:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010206c:	ee                   	out    %al,(%dx)

    int ret = 0;
c010206d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0102074:	eb 58                	jmp    c01020ce <ide_write_secs+0x230>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0102076:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010207a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0102081:	00 
c0102082:	89 04 24             	mov    %eax,(%esp)
c0102085:	e8 be f7 ff ff       	call   c0101848 <ide_wait_ready>
c010208a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010208d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102091:	75 43                	jne    c01020d6 <ide_write_secs+0x238>
            goto out;
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c0102093:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0102097:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010209a:	8b 45 10             	mov    0x10(%ebp),%eax
c010209d:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01020a0:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c01020a7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01020aa:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c01020ad:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01020b0:	89 ce                	mov    %ecx,%esi
c01020b2:	89 d3                	mov    %edx,%ebx
c01020b4:	89 d9                	mov    %ebx,%ecx
c01020b6:	89 c2                	mov    %eax,%edx
c01020b8:	fc                   	cld    
c01020b9:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c01020bb:	89 cb                	mov    %ecx,%ebx
c01020bd:	89 75 cc             	mov    %esi,-0x34(%ebp)
c01020c0:	89 5d c8             	mov    %ebx,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01020c3:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c01020c7:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c01020ce:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01020d2:	75 a2                	jne    c0102076 <ide_write_secs+0x1d8>
c01020d4:	eb 01                	jmp    c01020d7 <ide_write_secs+0x239>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c01020d6:	90                   	nop
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c01020d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01020da:	83 c4 50             	add    $0x50,%esp
c01020dd:	5b                   	pop    %ebx
c01020de:	5e                   	pop    %esi
c01020df:	5d                   	pop    %ebp
c01020e0:	c3                   	ret    
c01020e1:	00 00                	add    %al,(%eax)
	...

c01020e4 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01020e4:	55                   	push   %ebp
c01020e5:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c01020e7:	fb                   	sti    
    sti();
}
c01020e8:	5d                   	pop    %ebp
c01020e9:	c3                   	ret    

c01020ea <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01020ea:	55                   	push   %ebp
c01020eb:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c01020ed:	fa                   	cli    
    cli();
}
c01020ee:	5d                   	pop    %ebp
c01020ef:	c3                   	ret    

c01020f0 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c01020f0:	55                   	push   %ebp
c01020f1:	89 e5                	mov    %esp,%ebp
c01020f3:	83 ec 14             	sub    $0x14,%esp
c01020f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01020f9:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c01020fd:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102101:	66 a3 70 15 13 c0    	mov    %ax,0xc0131570
    if (did_init) {
c0102107:	a1 40 2a 1c c0       	mov    0xc01c2a40,%eax
c010210c:	85 c0                	test   %eax,%eax
c010210e:	74 36                	je     c0102146 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102110:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102114:	0f b6 c0             	movzbl %al,%eax
c0102117:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010211d:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102120:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102124:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102128:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102129:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010212d:	66 c1 e8 08          	shr    $0x8,%ax
c0102131:	0f b6 c0             	movzbl %al,%eax
c0102134:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c010213a:	88 45 f9             	mov    %al,-0x7(%ebp)
c010213d:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102141:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102145:	ee                   	out    %al,(%dx)
    }
}
c0102146:	c9                   	leave  
c0102147:	c3                   	ret    

c0102148 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102148:	55                   	push   %ebp
c0102149:	89 e5                	mov    %esp,%ebp
c010214b:	53                   	push   %ebx
c010214c:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c010214f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102152:	ba 01 00 00 00       	mov    $0x1,%edx
c0102157:	89 d3                	mov    %edx,%ebx
c0102159:	89 c1                	mov    %eax,%ecx
c010215b:	d3 e3                	shl    %cl,%ebx
c010215d:	89 d8                	mov    %ebx,%eax
c010215f:	89 c2                	mov    %eax,%edx
c0102161:	f7 d2                	not    %edx
c0102163:	0f b7 05 70 15 13 c0 	movzwl 0xc0131570,%eax
c010216a:	21 d0                	and    %edx,%eax
c010216c:	0f b7 c0             	movzwl %ax,%eax
c010216f:	89 04 24             	mov    %eax,(%esp)
c0102172:	e8 79 ff ff ff       	call   c01020f0 <pic_setmask>
}
c0102177:	83 c4 04             	add    $0x4,%esp
c010217a:	5b                   	pop    %ebx
c010217b:	5d                   	pop    %ebp
c010217c:	c3                   	ret    

c010217d <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c010217d:	55                   	push   %ebp
c010217e:	89 e5                	mov    %esp,%ebp
c0102180:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c0102183:	c7 05 40 2a 1c c0 01 	movl   $0x1,0xc01c2a40
c010218a:	00 00 00 
c010218d:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c0102193:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c0102197:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c010219b:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c010219f:	ee                   	out    %al,(%dx)
c01021a0:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01021a6:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c01021aa:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01021ae:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01021b2:	ee                   	out    %al,(%dx)
c01021b3:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c01021b9:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c01021bd:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01021c1:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01021c5:	ee                   	out    %al,(%dx)
c01021c6:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c01021cc:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c01021d0:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01021d4:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01021d8:	ee                   	out    %al,(%dx)
c01021d9:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c01021df:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c01021e3:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01021e7:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01021eb:	ee                   	out    %al,(%dx)
c01021ec:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c01021f2:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c01021f6:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01021fa:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01021fe:	ee                   	out    %al,(%dx)
c01021ff:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c0102205:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c0102209:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c010220d:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0102211:	ee                   	out    %al,(%dx)
c0102212:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102218:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c010221c:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102220:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0102224:	ee                   	out    %al,(%dx)
c0102225:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c010222b:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c010222f:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102233:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102237:	ee                   	out    %al,(%dx)
c0102238:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c010223e:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c0102242:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102246:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c010224a:	ee                   	out    %al,(%dx)
c010224b:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c0102251:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c0102255:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0102259:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c010225d:	ee                   	out    %al,(%dx)
c010225e:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c0102264:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c0102268:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c010226c:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c0102270:	ee                   	out    %al,(%dx)
c0102271:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c0102277:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c010227b:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c010227f:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c0102283:	ee                   	out    %al,(%dx)
c0102284:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c010228a:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c010228e:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0102292:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c0102296:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c0102297:	0f b7 05 70 15 13 c0 	movzwl 0xc0131570,%eax
c010229e:	66 83 f8 ff          	cmp    $0xffff,%ax
c01022a2:	74 12                	je     c01022b6 <pic_init+0x139>
        pic_setmask(irq_mask);
c01022a4:	0f b7 05 70 15 13 c0 	movzwl 0xc0131570,%eax
c01022ab:	0f b7 c0             	movzwl %ax,%eax
c01022ae:	89 04 24             	mov    %eax,(%esp)
c01022b1:	e8 3a fe ff ff       	call   c01020f0 <pic_setmask>
    }
}
c01022b6:	c9                   	leave  
c01022b7:	c3                   	ret    

c01022b8 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01022b8:	55                   	push   %ebp
c01022b9:	89 e5                	mov    %esp,%ebp
c01022bb:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01022be:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01022c5:	00 
c01022c6:	c7 04 24 c0 dd 10 c0 	movl   $0xc010ddc0,(%esp)
c01022cd:	e8 91 e0 ff ff       	call   c0100363 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c01022d2:	c7 04 24 ca dd 10 c0 	movl   $0xc010ddca,(%esp)
c01022d9:	e8 85 e0 ff ff       	call   c0100363 <cprintf>
    panic("EOT: kernel seems ok.");
c01022de:	c7 44 24 08 d8 dd 10 	movl   $0xc010ddd8,0x8(%esp)
c01022e5:	c0 
c01022e6:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c01022ed:	00 
c01022ee:	c7 04 24 ee dd 10 c0 	movl   $0xc010ddee,(%esp)
c01022f5:	e8 c2 ea ff ff       	call   c0100dbc <__panic>

c01022fa <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c01022fa:	55                   	push   %ebp
c01022fb:	89 e5                	mov    %esp,%ebp
c01022fd:	83 ec 10             	sub    $0x10,%esp
     /* LAB5 2011010312 */
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for(i = 0; i < 256; i++) {
c0102300:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102307:	e9 c3 00 00 00       	jmp    c01023cf <idt_init+0xd5>
        SETGATE(idt[i], 0, KERNEL_CS, __vectors[i], DPL_KERNEL);
c010230c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010230f:	8b 04 85 00 16 13 c0 	mov    -0x3fecea00(,%eax,4),%eax
c0102316:	89 c2                	mov    %eax,%edx
c0102318:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010231b:	66 89 14 c5 60 2a 1c 	mov    %dx,-0x3fe3d5a0(,%eax,8)
c0102322:	c0 
c0102323:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102326:	66 c7 04 c5 62 2a 1c 	movw   $0x8,-0x3fe3d59e(,%eax,8)
c010232d:	c0 08 00 
c0102330:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102333:	0f b6 14 c5 64 2a 1c 	movzbl -0x3fe3d59c(,%eax,8),%edx
c010233a:	c0 
c010233b:	83 e2 e0             	and    $0xffffffe0,%edx
c010233e:	88 14 c5 64 2a 1c c0 	mov    %dl,-0x3fe3d59c(,%eax,8)
c0102345:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102348:	0f b6 14 c5 64 2a 1c 	movzbl -0x3fe3d59c(,%eax,8),%edx
c010234f:	c0 
c0102350:	83 e2 1f             	and    $0x1f,%edx
c0102353:	88 14 c5 64 2a 1c c0 	mov    %dl,-0x3fe3d59c(,%eax,8)
c010235a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010235d:	0f b6 14 c5 65 2a 1c 	movzbl -0x3fe3d59b(,%eax,8),%edx
c0102364:	c0 
c0102365:	83 e2 f0             	and    $0xfffffff0,%edx
c0102368:	83 ca 0e             	or     $0xe,%edx
c010236b:	88 14 c5 65 2a 1c c0 	mov    %dl,-0x3fe3d59b(,%eax,8)
c0102372:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102375:	0f b6 14 c5 65 2a 1c 	movzbl -0x3fe3d59b(,%eax,8),%edx
c010237c:	c0 
c010237d:	83 e2 ef             	and    $0xffffffef,%edx
c0102380:	88 14 c5 65 2a 1c c0 	mov    %dl,-0x3fe3d59b(,%eax,8)
c0102387:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010238a:	0f b6 14 c5 65 2a 1c 	movzbl -0x3fe3d59b(,%eax,8),%edx
c0102391:	c0 
c0102392:	83 e2 9f             	and    $0xffffff9f,%edx
c0102395:	88 14 c5 65 2a 1c c0 	mov    %dl,-0x3fe3d59b(,%eax,8)
c010239c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010239f:	0f b6 14 c5 65 2a 1c 	movzbl -0x3fe3d59b(,%eax,8),%edx
c01023a6:	c0 
c01023a7:	83 ca 80             	or     $0xffffff80,%edx
c01023aa:	88 14 c5 65 2a 1c c0 	mov    %dl,-0x3fe3d59b(,%eax,8)
c01023b1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023b4:	8b 04 85 00 16 13 c0 	mov    -0x3fecea00(,%eax,4),%eax
c01023bb:	c1 e8 10             	shr    $0x10,%eax
c01023be:	89 c2                	mov    %eax,%edx
c01023c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01023c3:	66 89 14 c5 66 2a 1c 	mov    %dx,-0x3fe3d59a(,%eax,8)
c01023ca:	c0 
     /* LAB5 2011010312 */
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
    extern uintptr_t __vectors[];
    int i;
    for(i = 0; i < 256; i++) {
c01023cb:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01023cf:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
c01023d6:	0f 8e 30 ff ff ff    	jle    c010230c <idt_init+0x12>
        SETGATE(idt[i], 0, KERNEL_CS, __vectors[i], DPL_KERNEL);
    }
    SETGATE(idt[T_SYSCALL], 1, KERNEL_CS, __vectors[T_SYSCALL], DPL_USER);
c01023dc:	a1 00 18 13 c0       	mov    0xc0131800,%eax
c01023e1:	66 a3 60 2e 1c c0    	mov    %ax,0xc01c2e60
c01023e7:	66 c7 05 62 2e 1c c0 	movw   $0x8,0xc01c2e62
c01023ee:	08 00 
c01023f0:	0f b6 05 64 2e 1c c0 	movzbl 0xc01c2e64,%eax
c01023f7:	83 e0 e0             	and    $0xffffffe0,%eax
c01023fa:	a2 64 2e 1c c0       	mov    %al,0xc01c2e64
c01023ff:	0f b6 05 64 2e 1c c0 	movzbl 0xc01c2e64,%eax
c0102406:	83 e0 1f             	and    $0x1f,%eax
c0102409:	a2 64 2e 1c c0       	mov    %al,0xc01c2e64
c010240e:	0f b6 05 65 2e 1c c0 	movzbl 0xc01c2e65,%eax
c0102415:	83 c8 0f             	or     $0xf,%eax
c0102418:	a2 65 2e 1c c0       	mov    %al,0xc01c2e65
c010241d:	0f b6 05 65 2e 1c c0 	movzbl 0xc01c2e65,%eax
c0102424:	83 e0 ef             	and    $0xffffffef,%eax
c0102427:	a2 65 2e 1c c0       	mov    %al,0xc01c2e65
c010242c:	0f b6 05 65 2e 1c c0 	movzbl 0xc01c2e65,%eax
c0102433:	83 c8 60             	or     $0x60,%eax
c0102436:	a2 65 2e 1c c0       	mov    %al,0xc01c2e65
c010243b:	0f b6 05 65 2e 1c c0 	movzbl 0xc01c2e65,%eax
c0102442:	83 c8 80             	or     $0xffffff80,%eax
c0102445:	a2 65 2e 1c c0       	mov    %al,0xc01c2e65
c010244a:	a1 00 18 13 c0       	mov    0xc0131800,%eax
c010244f:	c1 e8 10             	shr    $0x10,%eax
c0102452:	66 a3 66 2e 1c c0    	mov    %ax,0xc01c2e66
c0102458:	c7 45 f8 80 15 13 c0 	movl   $0xc0131580,-0x8(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c010245f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0102462:	0f 01 18             	lidtl  (%eax)
    lidt(&idt_pd);
}
c0102465:	c9                   	leave  
c0102466:	c3                   	ret    

c0102467 <trapname>:

static const char *
trapname(int trapno) {
c0102467:	55                   	push   %ebp
c0102468:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c010246a:	8b 45 08             	mov    0x8(%ebp),%eax
c010246d:	83 f8 13             	cmp    $0x13,%eax
c0102470:	77 0c                	ja     c010247e <trapname+0x17>
        return excnames[trapno];
c0102472:	8b 45 08             	mov    0x8(%ebp),%eax
c0102475:	8b 04 85 60 e2 10 c0 	mov    -0x3fef1da0(,%eax,4),%eax
c010247c:	eb 18                	jmp    c0102496 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c010247e:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c0102482:	7e 0d                	jle    c0102491 <trapname+0x2a>
c0102484:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0102488:	7f 07                	jg     c0102491 <trapname+0x2a>
        return "Hardware Interrupt";
c010248a:	b8 ff dd 10 c0       	mov    $0xc010ddff,%eax
c010248f:	eb 05                	jmp    c0102496 <trapname+0x2f>
    }
    return "(unknown trap)";
c0102491:	b8 12 de 10 c0       	mov    $0xc010de12,%eax
}
c0102496:	5d                   	pop    %ebp
c0102497:	c3                   	ret    

c0102498 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c0102498:	55                   	push   %ebp
c0102499:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c010249b:	8b 45 08             	mov    0x8(%ebp),%eax
c010249e:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024a2:	66 83 f8 08          	cmp    $0x8,%ax
c01024a6:	0f 94 c0             	sete   %al
c01024a9:	0f b6 c0             	movzbl %al,%eax
}
c01024ac:	5d                   	pop    %ebp
c01024ad:	c3                   	ret    

c01024ae <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c01024ae:	55                   	push   %ebp
c01024af:	89 e5                	mov    %esp,%ebp
c01024b1:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c01024b4:	8b 45 08             	mov    0x8(%ebp),%eax
c01024b7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024bb:	c7 04 24 53 de 10 c0 	movl   $0xc010de53,(%esp)
c01024c2:	e8 9c de ff ff       	call   c0100363 <cprintf>
    print_regs(&tf->tf_regs);
c01024c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ca:	89 04 24             	mov    %eax,(%esp)
c01024cd:	e8 a1 01 00 00       	call   c0102673 <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c01024d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01024d5:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c01024d9:	0f b7 c0             	movzwl %ax,%eax
c01024dc:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024e0:	c7 04 24 64 de 10 c0 	movl   $0xc010de64,(%esp)
c01024e7:	e8 77 de ff ff       	call   c0100363 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c01024ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01024ef:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c01024f3:	0f b7 c0             	movzwl %ax,%eax
c01024f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024fa:	c7 04 24 77 de 10 c0 	movl   $0xc010de77,(%esp)
c0102501:	e8 5d de ff ff       	call   c0100363 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102506:	8b 45 08             	mov    0x8(%ebp),%eax
c0102509:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c010250d:	0f b7 c0             	movzwl %ax,%eax
c0102510:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102514:	c7 04 24 8a de 10 c0 	movl   $0xc010de8a,(%esp)
c010251b:	e8 43 de ff ff       	call   c0100363 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c0102520:	8b 45 08             	mov    0x8(%ebp),%eax
c0102523:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c0102527:	0f b7 c0             	movzwl %ax,%eax
c010252a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010252e:	c7 04 24 9d de 10 c0 	movl   $0xc010de9d,(%esp)
c0102535:	e8 29 de ff ff       	call   c0100363 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c010253a:	8b 45 08             	mov    0x8(%ebp),%eax
c010253d:	8b 40 30             	mov    0x30(%eax),%eax
c0102540:	89 04 24             	mov    %eax,(%esp)
c0102543:	e8 1f ff ff ff       	call   c0102467 <trapname>
c0102548:	8b 55 08             	mov    0x8(%ebp),%edx
c010254b:	8b 52 30             	mov    0x30(%edx),%edx
c010254e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102552:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102556:	c7 04 24 b0 de 10 c0 	movl   $0xc010deb0,(%esp)
c010255d:	e8 01 de ff ff       	call   c0100363 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c0102562:	8b 45 08             	mov    0x8(%ebp),%eax
c0102565:	8b 40 34             	mov    0x34(%eax),%eax
c0102568:	89 44 24 04          	mov    %eax,0x4(%esp)
c010256c:	c7 04 24 c2 de 10 c0 	movl   $0xc010dec2,(%esp)
c0102573:	e8 eb dd ff ff       	call   c0100363 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c0102578:	8b 45 08             	mov    0x8(%ebp),%eax
c010257b:	8b 40 38             	mov    0x38(%eax),%eax
c010257e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102582:	c7 04 24 d1 de 10 c0 	movl   $0xc010ded1,(%esp)
c0102589:	e8 d5 dd ff ff       	call   c0100363 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c010258e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102591:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c0102595:	0f b7 c0             	movzwl %ax,%eax
c0102598:	89 44 24 04          	mov    %eax,0x4(%esp)
c010259c:	c7 04 24 e0 de 10 c0 	movl   $0xc010dee0,(%esp)
c01025a3:	e8 bb dd ff ff       	call   c0100363 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01025a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01025ab:	8b 40 40             	mov    0x40(%eax),%eax
c01025ae:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025b2:	c7 04 24 f3 de 10 c0 	movl   $0xc010def3,(%esp)
c01025b9:	e8 a5 dd ff ff       	call   c0100363 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01025be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01025c5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c01025cc:	eb 3e                	jmp    c010260c <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c01025ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01025d1:	8b 50 40             	mov    0x40(%eax),%edx
c01025d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01025d7:	21 d0                	and    %edx,%eax
c01025d9:	85 c0                	test   %eax,%eax
c01025db:	74 28                	je     c0102605 <print_trapframe+0x157>
c01025dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025e0:	8b 04 85 a0 15 13 c0 	mov    -0x3fecea60(,%eax,4),%eax
c01025e7:	85 c0                	test   %eax,%eax
c01025e9:	74 1a                	je     c0102605 <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c01025eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01025ee:	8b 04 85 a0 15 13 c0 	mov    -0x3fecea60(,%eax,4),%eax
c01025f5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025f9:	c7 04 24 02 df 10 c0 	movl   $0xc010df02,(%esp)
c0102600:	e8 5e dd ff ff       	call   c0100363 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102605:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102609:	d1 65 f0             	shll   -0x10(%ebp)
c010260c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010260f:	83 f8 17             	cmp    $0x17,%eax
c0102612:	76 ba                	jbe    c01025ce <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0102614:	8b 45 08             	mov    0x8(%ebp),%eax
c0102617:	8b 40 40             	mov    0x40(%eax),%eax
c010261a:	25 00 30 00 00       	and    $0x3000,%eax
c010261f:	c1 e8 0c             	shr    $0xc,%eax
c0102622:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102626:	c7 04 24 06 df 10 c0 	movl   $0xc010df06,(%esp)
c010262d:	e8 31 dd ff ff       	call   c0100363 <cprintf>

    if (!trap_in_kernel(tf)) {
c0102632:	8b 45 08             	mov    0x8(%ebp),%eax
c0102635:	89 04 24             	mov    %eax,(%esp)
c0102638:	e8 5b fe ff ff       	call   c0102498 <trap_in_kernel>
c010263d:	85 c0                	test   %eax,%eax
c010263f:	75 30                	jne    c0102671 <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0102641:	8b 45 08             	mov    0x8(%ebp),%eax
c0102644:	8b 40 44             	mov    0x44(%eax),%eax
c0102647:	89 44 24 04          	mov    %eax,0x4(%esp)
c010264b:	c7 04 24 0f df 10 c0 	movl   $0xc010df0f,(%esp)
c0102652:	e8 0c dd ff ff       	call   c0100363 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c0102657:	8b 45 08             	mov    0x8(%ebp),%eax
c010265a:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c010265e:	0f b7 c0             	movzwl %ax,%eax
c0102661:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102665:	c7 04 24 1e df 10 c0 	movl   $0xc010df1e,(%esp)
c010266c:	e8 f2 dc ff ff       	call   c0100363 <cprintf>
    }
}
c0102671:	c9                   	leave  
c0102672:	c3                   	ret    

c0102673 <print_regs>:

void
print_regs(struct pushregs *regs) {
c0102673:	55                   	push   %ebp
c0102674:	89 e5                	mov    %esp,%ebp
c0102676:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c0102679:	8b 45 08             	mov    0x8(%ebp),%eax
c010267c:	8b 00                	mov    (%eax),%eax
c010267e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102682:	c7 04 24 31 df 10 c0 	movl   $0xc010df31,(%esp)
c0102689:	e8 d5 dc ff ff       	call   c0100363 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c010268e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102691:	8b 40 04             	mov    0x4(%eax),%eax
c0102694:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102698:	c7 04 24 40 df 10 c0 	movl   $0xc010df40,(%esp)
c010269f:	e8 bf dc ff ff       	call   c0100363 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01026a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01026a7:	8b 40 08             	mov    0x8(%eax),%eax
c01026aa:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026ae:	c7 04 24 4f df 10 c0 	movl   $0xc010df4f,(%esp)
c01026b5:	e8 a9 dc ff ff       	call   c0100363 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01026ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01026bd:	8b 40 0c             	mov    0xc(%eax),%eax
c01026c0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026c4:	c7 04 24 5e df 10 c0 	movl   $0xc010df5e,(%esp)
c01026cb:	e8 93 dc ff ff       	call   c0100363 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c01026d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01026d3:	8b 40 10             	mov    0x10(%eax),%eax
c01026d6:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026da:	c7 04 24 6d df 10 c0 	movl   $0xc010df6d,(%esp)
c01026e1:	e8 7d dc ff ff       	call   c0100363 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c01026e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01026e9:	8b 40 14             	mov    0x14(%eax),%eax
c01026ec:	89 44 24 04          	mov    %eax,0x4(%esp)
c01026f0:	c7 04 24 7c df 10 c0 	movl   $0xc010df7c,(%esp)
c01026f7:	e8 67 dc ff ff       	call   c0100363 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c01026fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01026ff:	8b 40 18             	mov    0x18(%eax),%eax
c0102702:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102706:	c7 04 24 8b df 10 c0 	movl   $0xc010df8b,(%esp)
c010270d:	e8 51 dc ff ff       	call   c0100363 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0102712:	8b 45 08             	mov    0x8(%ebp),%eax
c0102715:	8b 40 1c             	mov    0x1c(%eax),%eax
c0102718:	89 44 24 04          	mov    %eax,0x4(%esp)
c010271c:	c7 04 24 9a df 10 c0 	movl   $0xc010df9a,(%esp)
c0102723:	e8 3b dc ff ff       	call   c0100363 <cprintf>
}
c0102728:	c9                   	leave  
c0102729:	c3                   	ret    

c010272a <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c010272a:	55                   	push   %ebp
c010272b:	89 e5                	mov    %esp,%ebp
c010272d:	53                   	push   %ebx
c010272e:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0102731:	8b 45 08             	mov    0x8(%ebp),%eax
c0102734:	8b 40 34             	mov    0x34(%eax),%eax
c0102737:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010273a:	84 c0                	test   %al,%al
c010273c:	74 07                	je     c0102745 <print_pgfault+0x1b>
c010273e:	b9 a9 df 10 c0       	mov    $0xc010dfa9,%ecx
c0102743:	eb 05                	jmp    c010274a <print_pgfault+0x20>
c0102745:	b9 ba df 10 c0       	mov    $0xc010dfba,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c010274a:	8b 45 08             	mov    0x8(%ebp),%eax
c010274d:	8b 40 34             	mov    0x34(%eax),%eax
c0102750:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102753:	85 c0                	test   %eax,%eax
c0102755:	74 07                	je     c010275e <print_pgfault+0x34>
c0102757:	ba 57 00 00 00       	mov    $0x57,%edx
c010275c:	eb 05                	jmp    c0102763 <print_pgfault+0x39>
c010275e:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c0102763:	8b 45 08             	mov    0x8(%ebp),%eax
c0102766:	8b 40 34             	mov    0x34(%eax),%eax
c0102769:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010276c:	85 c0                	test   %eax,%eax
c010276e:	74 07                	je     c0102777 <print_pgfault+0x4d>
c0102770:	b8 55 00 00 00       	mov    $0x55,%eax
c0102775:	eb 05                	jmp    c010277c <print_pgfault+0x52>
c0102777:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c010277c:	0f 20 d3             	mov    %cr2,%ebx
c010277f:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c0102782:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c0102785:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0102789:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010278d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102791:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0102795:	c7 04 24 c8 df 10 c0 	movl   $0xc010dfc8,(%esp)
c010279c:	e8 c2 db ff ff       	call   c0100363 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c01027a1:	83 c4 34             	add    $0x34,%esp
c01027a4:	5b                   	pop    %ebx
c01027a5:	5d                   	pop    %ebp
c01027a6:	c3                   	ret    

c01027a7 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01027a7:	55                   	push   %ebp
c01027a8:	89 e5                	mov    %esp,%ebp
c01027aa:	53                   	push   %ebx
c01027ab:	83 ec 24             	sub    $0x24,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c01027ae:	a1 ac 54 1c c0       	mov    0xc01c54ac,%eax
c01027b3:	85 c0                	test   %eax,%eax
c01027b5:	74 0b                	je     c01027c2 <pgfault_handler+0x1b>
            print_pgfault(tf);
c01027b7:	8b 45 08             	mov    0x8(%ebp),%eax
c01027ba:	89 04 24             	mov    %eax,(%esp)
c01027bd:	e8 68 ff ff ff       	call   c010272a <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c01027c2:	a1 ac 54 1c c0       	mov    0xc01c54ac,%eax
c01027c7:	85 c0                	test   %eax,%eax
c01027c9:	74 3d                	je     c0102808 <pgfault_handler+0x61>
        assert(current == idleproc);
c01027cb:	8b 15 28 33 1c c0    	mov    0xc01c3328,%edx
c01027d1:	a1 20 33 1c c0       	mov    0xc01c3320,%eax
c01027d6:	39 c2                	cmp    %eax,%edx
c01027d8:	74 24                	je     c01027fe <pgfault_handler+0x57>
c01027da:	c7 44 24 0c eb df 10 	movl   $0xc010dfeb,0xc(%esp)
c01027e1:	c0 
c01027e2:	c7 44 24 08 ff df 10 	movl   $0xc010dfff,0x8(%esp)
c01027e9:	c0 
c01027ea:	c7 44 24 04 b0 00 00 	movl   $0xb0,0x4(%esp)
c01027f1:	00 
c01027f2:	c7 04 24 ee dd 10 c0 	movl   $0xc010ddee,(%esp)
c01027f9:	e8 be e5 ff ff       	call   c0100dbc <__panic>
        mm = check_mm_struct;
c01027fe:	a1 ac 54 1c c0       	mov    0xc01c54ac,%eax
c0102803:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102806:	eb 46                	jmp    c010284e <pgfault_handler+0xa7>
    }
    else {
        if (current == NULL) {
c0102808:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010280d:	85 c0                	test   %eax,%eax
c010280f:	75 32                	jne    c0102843 <pgfault_handler+0x9c>
            print_trapframe(tf);
c0102811:	8b 45 08             	mov    0x8(%ebp),%eax
c0102814:	89 04 24             	mov    %eax,(%esp)
c0102817:	e8 92 fc ff ff       	call   c01024ae <print_trapframe>
            print_pgfault(tf);
c010281c:	8b 45 08             	mov    0x8(%ebp),%eax
c010281f:	89 04 24             	mov    %eax,(%esp)
c0102822:	e8 03 ff ff ff       	call   c010272a <print_pgfault>
            panic("unhandled page fault.\n");
c0102827:	c7 44 24 08 14 e0 10 	movl   $0xc010e014,0x8(%esp)
c010282e:	c0 
c010282f:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c0102836:	00 
c0102837:	c7 04 24 ee dd 10 c0 	movl   $0xc010ddee,(%esp)
c010283e:	e8 79 e5 ff ff       	call   c0100dbc <__panic>
        }
        mm = current->mm;
c0102843:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c0102848:	8b 40 18             	mov    0x18(%eax),%eax
c010284b:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c010284e:	0f 20 d3             	mov    %cr2,%ebx
c0102851:	89 5d f0             	mov    %ebx,-0x10(%ebp)
    return cr2;
c0102854:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0102857:	89 c2                	mov    %eax,%edx
c0102859:	8b 45 08             	mov    0x8(%ebp),%eax
c010285c:	8b 40 34             	mov    0x34(%eax),%eax
c010285f:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102863:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102867:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010286a:	89 04 24             	mov    %eax,(%esp)
c010286d:	e8 fb 65 00 00       	call   c0108e6d <do_pgfault>
}
c0102872:	83 c4 24             	add    $0x24,%esp
c0102875:	5b                   	pop    %ebx
c0102876:	5d                   	pop    %ebp
c0102877:	c3                   	ret    

c0102878 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0102878:	55                   	push   %ebp
c0102879:	89 e5                	mov    %esp,%ebp
c010287b:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c010287e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c0102885:	8b 45 08             	mov    0x8(%ebp),%eax
c0102888:	8b 40 30             	mov    0x30(%eax),%eax
c010288b:	83 f8 2f             	cmp    $0x2f,%eax
c010288e:	77 38                	ja     c01028c8 <trap_dispatch+0x50>
c0102890:	83 f8 2e             	cmp    $0x2e,%eax
c0102893:	0f 83 d5 01 00 00    	jae    c0102a6e <trap_dispatch+0x1f6>
c0102899:	83 f8 20             	cmp    $0x20,%eax
c010289c:	0f 84 02 01 00 00    	je     c01029a4 <trap_dispatch+0x12c>
c01028a2:	83 f8 20             	cmp    $0x20,%eax
c01028a5:	77 0a                	ja     c01028b1 <trap_dispatch+0x39>
c01028a7:	83 f8 0e             	cmp    $0xe,%eax
c01028aa:	74 3e                	je     c01028ea <trap_dispatch+0x72>
c01028ac:	e9 75 01 00 00       	jmp    c0102a26 <trap_dispatch+0x1ae>
c01028b1:	83 f8 21             	cmp    $0x21,%eax
c01028b4:	0f 84 2a 01 00 00    	je     c01029e4 <trap_dispatch+0x16c>
c01028ba:	83 f8 24             	cmp    $0x24,%eax
c01028bd:	0f 84 f8 00 00 00    	je     c01029bb <trap_dispatch+0x143>
c01028c3:	e9 5e 01 00 00       	jmp    c0102a26 <trap_dispatch+0x1ae>
c01028c8:	83 f8 78             	cmp    $0x78,%eax
c01028cb:	0f 82 55 01 00 00    	jb     c0102a26 <trap_dispatch+0x1ae>
c01028d1:	83 f8 79             	cmp    $0x79,%eax
c01028d4:	0f 86 30 01 00 00    	jbe    c0102a0a <trap_dispatch+0x192>
c01028da:	3d 80 00 00 00       	cmp    $0x80,%eax
c01028df:	0f 84 b5 00 00 00    	je     c010299a <trap_dispatch+0x122>
c01028e5:	e9 3c 01 00 00       	jmp    c0102a26 <trap_dispatch+0x1ae>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c01028ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01028ed:	89 04 24             	mov    %eax,(%esp)
c01028f0:	e8 b2 fe ff ff       	call   c01027a7 <pgfault_handler>
c01028f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01028f8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01028fc:	0f 84 6f 01 00 00    	je     c0102a71 <trap_dispatch+0x1f9>
            print_trapframe(tf);
c0102902:	8b 45 08             	mov    0x8(%ebp),%eax
c0102905:	89 04 24             	mov    %eax,(%esp)
c0102908:	e8 a1 fb ff ff       	call   c01024ae <print_trapframe>
            if (current == NULL) {
c010290d:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c0102912:	85 c0                	test   %eax,%eax
c0102914:	75 23                	jne    c0102939 <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c0102916:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102919:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010291d:	c7 44 24 08 2c e0 10 	movl   $0xc010e02c,0x8(%esp)
c0102924:	c0 
c0102925:	c7 44 24 04 cc 00 00 	movl   $0xcc,0x4(%esp)
c010292c:	00 
c010292d:	c7 04 24 ee dd 10 c0 	movl   $0xc010ddee,(%esp)
c0102934:	e8 83 e4 ff ff       	call   c0100dbc <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102939:	8b 45 08             	mov    0x8(%ebp),%eax
c010293c:	89 04 24             	mov    %eax,(%esp)
c010293f:	e8 54 fb ff ff       	call   c0102498 <trap_in_kernel>
c0102944:	85 c0                	test   %eax,%eax
c0102946:	74 23                	je     c010296b <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0102948:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010294b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010294f:	c7 44 24 08 4c e0 10 	movl   $0xc010e04c,0x8(%esp)
c0102956:	c0 
c0102957:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c010295e:	00 
c010295f:	c7 04 24 ee dd 10 c0 	movl   $0xc010ddee,(%esp)
c0102966:	e8 51 e4 ff ff       	call   c0100dbc <__panic>
                }
                cprintf("killed by kernel.\n");
c010296b:	c7 04 24 7a e0 10 c0 	movl   $0xc010e07a,(%esp)
c0102972:	e8 ec d9 ff ff       	call   c0100363 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c0102977:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010297a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010297e:	c7 44 24 08 90 e0 10 	movl   $0xc010e090,0x8(%esp)
c0102985:	c0 
c0102986:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c010298d:	00 
c010298e:	c7 04 24 ee dd 10 c0 	movl   $0xc010ddee,(%esp)
c0102995:	e8 22 e4 ff ff       	call   c0100dbc <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
    case T_SYSCALL:
        syscall();
c010299a:	e8 18 a2 00 00       	call   c010cbb7 <syscall>
        break;
c010299f:	e9 ce 00 00 00       	jmp    c0102a72 <trap_dispatch+0x1fa>
        /* LAB7 2011010312 */
        /* you should upate you lab6 code
         * IMPORTANT FUNCTIONS:
	     * run_timer_list
         */
        ticks++;
c01029a4:	a1 b8 53 1c c0       	mov    0xc01c53b8,%eax
c01029a9:	83 c0 01             	add    $0x1,%eax
c01029ac:	a3 b8 53 1c c0       	mov    %eax,0xc01c53b8
        run_timer_list();
c01029b1:	e8 46 9f 00 00       	call   c010c8fc <run_timer_list>
        break;
c01029b6:	e9 b7 00 00 00       	jmp    c0102a72 <trap_dispatch+0x1fa>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c01029bb:	e8 18 ee ff ff       	call   c01017d8 <cons_getc>
c01029c0:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c01029c3:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c01029c7:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c01029cb:	89 54 24 08          	mov    %edx,0x8(%esp)
c01029cf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01029d3:	c7 04 24 b9 e0 10 c0 	movl   $0xc010e0b9,(%esp)
c01029da:	e8 84 d9 ff ff       	call   c0100363 <cprintf>
        break;
c01029df:	e9 8e 00 00 00       	jmp    c0102a72 <trap_dispatch+0x1fa>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c01029e4:	e8 ef ed ff ff       	call   c01017d8 <cons_getc>
c01029e9:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c01029ec:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c01029f0:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c01029f4:	89 54 24 08          	mov    %edx,0x8(%esp)
c01029f8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01029fc:	c7 04 24 cb e0 10 c0 	movl   $0xc010e0cb,(%esp)
c0102a03:	e8 5b d9 ff ff       	call   c0100363 <cprintf>
        break;
c0102a08:	eb 68                	jmp    c0102a72 <trap_dispatch+0x1fa>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102a0a:	c7 44 24 08 da e0 10 	movl   $0xc010e0da,0x8(%esp)
c0102a11:	c0 
c0102a12:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c0102a19:	00 
c0102a1a:	c7 04 24 ee dd 10 c0 	movl   $0xc010ddee,(%esp)
c0102a21:	e8 96 e3 ff ff       	call   c0100dbc <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102a26:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a29:	89 04 24             	mov    %eax,(%esp)
c0102a2c:	e8 7d fa ff ff       	call   c01024ae <print_trapframe>
        if (current != NULL) {
c0102a31:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c0102a36:	85 c0                	test   %eax,%eax
c0102a38:	74 18                	je     c0102a52 <trap_dispatch+0x1da>
            cprintf("unhandled trap.\n");
c0102a3a:	c7 04 24 ea e0 10 c0 	movl   $0xc010e0ea,(%esp)
c0102a41:	e8 1d d9 ff ff       	call   c0100363 <cprintf>
            do_exit(-E_KILLED);
c0102a46:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a4d:	e8 20 86 00 00       	call   c010b072 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c0102a52:	c7 44 24 08 fb e0 10 	movl   $0xc010e0fb,0x8(%esp)
c0102a59:	c0 
c0102a5a:	c7 44 24 04 0f 01 00 	movl   $0x10f,0x4(%esp)
c0102a61:	00 
c0102a62:	c7 04 24 ee dd 10 c0 	movl   $0xc010ddee,(%esp)
c0102a69:	e8 4e e3 ff ff       	call   c0100dbc <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c0102a6e:	90                   	nop
c0102a6f:	eb 01                	jmp    c0102a72 <trap_dispatch+0x1fa>
                cprintf("killed by kernel.\n");
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
                do_exit(-E_KILLED);
            }
        }
        break;
c0102a71:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c0102a72:	c9                   	leave  
c0102a73:	c3                   	ret    

c0102a74 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c0102a74:	55                   	push   %ebp
c0102a75:	89 e5                	mov    %esp,%ebp
c0102a77:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c0102a7a:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c0102a7f:	85 c0                	test   %eax,%eax
c0102a81:	75 0d                	jne    c0102a90 <trap+0x1c>
        trap_dispatch(tf);
c0102a83:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a86:	89 04 24             	mov    %eax,(%esp)
c0102a89:	e8 ea fd ff ff       	call   c0102878 <trap_dispatch>
c0102a8e:	eb 6c                	jmp    c0102afc <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c0102a90:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c0102a95:	8b 40 3c             	mov    0x3c(%eax),%eax
c0102a98:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c0102a9b:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c0102aa0:	8b 55 08             	mov    0x8(%ebp),%edx
c0102aa3:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c0102aa6:	8b 45 08             	mov    0x8(%ebp),%eax
c0102aa9:	89 04 24             	mov    %eax,(%esp)
c0102aac:	e8 e7 f9 ff ff       	call   c0102498 <trap_in_kernel>
c0102ab1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c0102ab4:	8b 45 08             	mov    0x8(%ebp),%eax
c0102ab7:	89 04 24             	mov    %eax,(%esp)
c0102aba:	e8 b9 fd ff ff       	call   c0102878 <trap_dispatch>
    
        current->tf = otf;
c0102abf:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c0102ac4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102ac7:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102aca:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102ace:	75 2c                	jne    c0102afc <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102ad0:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c0102ad5:	8b 40 44             	mov    0x44(%eax),%eax
c0102ad8:	83 e0 01             	and    $0x1,%eax
c0102adb:	84 c0                	test   %al,%al
c0102add:	74 0c                	je     c0102aeb <trap+0x77>
                do_exit(-E_KILLED);
c0102adf:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102ae6:	e8 87 85 00 00       	call   c010b072 <do_exit>
            }
            if (current->need_resched) {
c0102aeb:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c0102af0:	8b 40 10             	mov    0x10(%eax),%eax
c0102af3:	85 c0                	test   %eax,%eax
c0102af5:	74 05                	je     c0102afc <trap+0x88>
                schedule();
c0102af7:	e8 73 9b 00 00       	call   c010c66f <schedule>
            }
        }
    }
}
c0102afc:	c9                   	leave  
c0102afd:	c3                   	ret    
	...

c0102b00 <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102b00:	1e                   	push   %ds
    pushl %es
c0102b01:	06                   	push   %es
    pushl %fs
c0102b02:	0f a0                	push   %fs
    pushl %gs
c0102b04:	0f a8                	push   %gs
    pushal
c0102b06:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102b07:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102b0c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102b0e:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102b10:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102b11:	e8 5e ff ff ff       	call   c0102a74 <trap>

    # pop the pushed stack pointer
    popl %esp
c0102b16:	5c                   	pop    %esp

c0102b17 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102b17:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102b18:	0f a9                	pop    %gs
    popl %fs
c0102b1a:	0f a1                	pop    %fs
    popl %es
c0102b1c:	07                   	pop    %es
    popl %ds
c0102b1d:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102b1e:	83 c4 08             	add    $0x8,%esp
    iret
c0102b21:	cf                   	iret   

c0102b22 <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102b22:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102b26:	e9 ec ff ff ff       	jmp    c0102b17 <__trapret>
	...

c0102b2c <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102b2c:	6a 00                	push   $0x0
  pushl $0
c0102b2e:	6a 00                	push   $0x0
  jmp __alltraps
c0102b30:	e9 cb ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b35 <vector1>:
.globl vector1
vector1:
  pushl $0
c0102b35:	6a 00                	push   $0x0
  pushl $1
c0102b37:	6a 01                	push   $0x1
  jmp __alltraps
c0102b39:	e9 c2 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b3e <vector2>:
.globl vector2
vector2:
  pushl $0
c0102b3e:	6a 00                	push   $0x0
  pushl $2
c0102b40:	6a 02                	push   $0x2
  jmp __alltraps
c0102b42:	e9 b9 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b47 <vector3>:
.globl vector3
vector3:
  pushl $0
c0102b47:	6a 00                	push   $0x0
  pushl $3
c0102b49:	6a 03                	push   $0x3
  jmp __alltraps
c0102b4b:	e9 b0 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b50 <vector4>:
.globl vector4
vector4:
  pushl $0
c0102b50:	6a 00                	push   $0x0
  pushl $4
c0102b52:	6a 04                	push   $0x4
  jmp __alltraps
c0102b54:	e9 a7 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b59 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102b59:	6a 00                	push   $0x0
  pushl $5
c0102b5b:	6a 05                	push   $0x5
  jmp __alltraps
c0102b5d:	e9 9e ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b62 <vector6>:
.globl vector6
vector6:
  pushl $0
c0102b62:	6a 00                	push   $0x0
  pushl $6
c0102b64:	6a 06                	push   $0x6
  jmp __alltraps
c0102b66:	e9 95 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b6b <vector7>:
.globl vector7
vector7:
  pushl $0
c0102b6b:	6a 00                	push   $0x0
  pushl $7
c0102b6d:	6a 07                	push   $0x7
  jmp __alltraps
c0102b6f:	e9 8c ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b74 <vector8>:
.globl vector8
vector8:
  pushl $8
c0102b74:	6a 08                	push   $0x8
  jmp __alltraps
c0102b76:	e9 85 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b7b <vector9>:
.globl vector9
vector9:
  pushl $9
c0102b7b:	6a 09                	push   $0x9
  jmp __alltraps
c0102b7d:	e9 7e ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b82 <vector10>:
.globl vector10
vector10:
  pushl $10
c0102b82:	6a 0a                	push   $0xa
  jmp __alltraps
c0102b84:	e9 77 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b89 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102b89:	6a 0b                	push   $0xb
  jmp __alltraps
c0102b8b:	e9 70 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b90 <vector12>:
.globl vector12
vector12:
  pushl $12
c0102b90:	6a 0c                	push   $0xc
  jmp __alltraps
c0102b92:	e9 69 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b97 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102b97:	6a 0d                	push   $0xd
  jmp __alltraps
c0102b99:	e9 62 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102b9e <vector14>:
.globl vector14
vector14:
  pushl $14
c0102b9e:	6a 0e                	push   $0xe
  jmp __alltraps
c0102ba0:	e9 5b ff ff ff       	jmp    c0102b00 <__alltraps>

c0102ba5 <vector15>:
.globl vector15
vector15:
  pushl $0
c0102ba5:	6a 00                	push   $0x0
  pushl $15
c0102ba7:	6a 0f                	push   $0xf
  jmp __alltraps
c0102ba9:	e9 52 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bae <vector16>:
.globl vector16
vector16:
  pushl $0
c0102bae:	6a 00                	push   $0x0
  pushl $16
c0102bb0:	6a 10                	push   $0x10
  jmp __alltraps
c0102bb2:	e9 49 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bb7 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102bb7:	6a 11                	push   $0x11
  jmp __alltraps
c0102bb9:	e9 42 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bbe <vector18>:
.globl vector18
vector18:
  pushl $0
c0102bbe:	6a 00                	push   $0x0
  pushl $18
c0102bc0:	6a 12                	push   $0x12
  jmp __alltraps
c0102bc2:	e9 39 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bc7 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102bc7:	6a 00                	push   $0x0
  pushl $19
c0102bc9:	6a 13                	push   $0x13
  jmp __alltraps
c0102bcb:	e9 30 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bd0 <vector20>:
.globl vector20
vector20:
  pushl $0
c0102bd0:	6a 00                	push   $0x0
  pushl $20
c0102bd2:	6a 14                	push   $0x14
  jmp __alltraps
c0102bd4:	e9 27 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bd9 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102bd9:	6a 00                	push   $0x0
  pushl $21
c0102bdb:	6a 15                	push   $0x15
  jmp __alltraps
c0102bdd:	e9 1e ff ff ff       	jmp    c0102b00 <__alltraps>

c0102be2 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102be2:	6a 00                	push   $0x0
  pushl $22
c0102be4:	6a 16                	push   $0x16
  jmp __alltraps
c0102be6:	e9 15 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102beb <vector23>:
.globl vector23
vector23:
  pushl $0
c0102beb:	6a 00                	push   $0x0
  pushl $23
c0102bed:	6a 17                	push   $0x17
  jmp __alltraps
c0102bef:	e9 0c ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bf4 <vector24>:
.globl vector24
vector24:
  pushl $0
c0102bf4:	6a 00                	push   $0x0
  pushl $24
c0102bf6:	6a 18                	push   $0x18
  jmp __alltraps
c0102bf8:	e9 03 ff ff ff       	jmp    c0102b00 <__alltraps>

c0102bfd <vector25>:
.globl vector25
vector25:
  pushl $0
c0102bfd:	6a 00                	push   $0x0
  pushl $25
c0102bff:	6a 19                	push   $0x19
  jmp __alltraps
c0102c01:	e9 fa fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c06 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102c06:	6a 00                	push   $0x0
  pushl $26
c0102c08:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102c0a:	e9 f1 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c0f <vector27>:
.globl vector27
vector27:
  pushl $0
c0102c0f:	6a 00                	push   $0x0
  pushl $27
c0102c11:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102c13:	e9 e8 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c18 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102c18:	6a 00                	push   $0x0
  pushl $28
c0102c1a:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102c1c:	e9 df fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c21 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102c21:	6a 00                	push   $0x0
  pushl $29
c0102c23:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102c25:	e9 d6 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c2a <vector30>:
.globl vector30
vector30:
  pushl $0
c0102c2a:	6a 00                	push   $0x0
  pushl $30
c0102c2c:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102c2e:	e9 cd fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c33 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102c33:	6a 00                	push   $0x0
  pushl $31
c0102c35:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102c37:	e9 c4 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c3c <vector32>:
.globl vector32
vector32:
  pushl $0
c0102c3c:	6a 00                	push   $0x0
  pushl $32
c0102c3e:	6a 20                	push   $0x20
  jmp __alltraps
c0102c40:	e9 bb fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c45 <vector33>:
.globl vector33
vector33:
  pushl $0
c0102c45:	6a 00                	push   $0x0
  pushl $33
c0102c47:	6a 21                	push   $0x21
  jmp __alltraps
c0102c49:	e9 b2 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c4e <vector34>:
.globl vector34
vector34:
  pushl $0
c0102c4e:	6a 00                	push   $0x0
  pushl $34
c0102c50:	6a 22                	push   $0x22
  jmp __alltraps
c0102c52:	e9 a9 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c57 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102c57:	6a 00                	push   $0x0
  pushl $35
c0102c59:	6a 23                	push   $0x23
  jmp __alltraps
c0102c5b:	e9 a0 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c60 <vector36>:
.globl vector36
vector36:
  pushl $0
c0102c60:	6a 00                	push   $0x0
  pushl $36
c0102c62:	6a 24                	push   $0x24
  jmp __alltraps
c0102c64:	e9 97 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c69 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102c69:	6a 00                	push   $0x0
  pushl $37
c0102c6b:	6a 25                	push   $0x25
  jmp __alltraps
c0102c6d:	e9 8e fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c72 <vector38>:
.globl vector38
vector38:
  pushl $0
c0102c72:	6a 00                	push   $0x0
  pushl $38
c0102c74:	6a 26                	push   $0x26
  jmp __alltraps
c0102c76:	e9 85 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c7b <vector39>:
.globl vector39
vector39:
  pushl $0
c0102c7b:	6a 00                	push   $0x0
  pushl $39
c0102c7d:	6a 27                	push   $0x27
  jmp __alltraps
c0102c7f:	e9 7c fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c84 <vector40>:
.globl vector40
vector40:
  pushl $0
c0102c84:	6a 00                	push   $0x0
  pushl $40
c0102c86:	6a 28                	push   $0x28
  jmp __alltraps
c0102c88:	e9 73 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c8d <vector41>:
.globl vector41
vector41:
  pushl $0
c0102c8d:	6a 00                	push   $0x0
  pushl $41
c0102c8f:	6a 29                	push   $0x29
  jmp __alltraps
c0102c91:	e9 6a fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c96 <vector42>:
.globl vector42
vector42:
  pushl $0
c0102c96:	6a 00                	push   $0x0
  pushl $42
c0102c98:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102c9a:	e9 61 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102c9f <vector43>:
.globl vector43
vector43:
  pushl $0
c0102c9f:	6a 00                	push   $0x0
  pushl $43
c0102ca1:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102ca3:	e9 58 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102ca8 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102ca8:	6a 00                	push   $0x0
  pushl $44
c0102caa:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102cac:	e9 4f fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cb1 <vector45>:
.globl vector45
vector45:
  pushl $0
c0102cb1:	6a 00                	push   $0x0
  pushl $45
c0102cb3:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102cb5:	e9 46 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cba <vector46>:
.globl vector46
vector46:
  pushl $0
c0102cba:	6a 00                	push   $0x0
  pushl $46
c0102cbc:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102cbe:	e9 3d fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cc3 <vector47>:
.globl vector47
vector47:
  pushl $0
c0102cc3:	6a 00                	push   $0x0
  pushl $47
c0102cc5:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102cc7:	e9 34 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102ccc <vector48>:
.globl vector48
vector48:
  pushl $0
c0102ccc:	6a 00                	push   $0x0
  pushl $48
c0102cce:	6a 30                	push   $0x30
  jmp __alltraps
c0102cd0:	e9 2b fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cd5 <vector49>:
.globl vector49
vector49:
  pushl $0
c0102cd5:	6a 00                	push   $0x0
  pushl $49
c0102cd7:	6a 31                	push   $0x31
  jmp __alltraps
c0102cd9:	e9 22 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cde <vector50>:
.globl vector50
vector50:
  pushl $0
c0102cde:	6a 00                	push   $0x0
  pushl $50
c0102ce0:	6a 32                	push   $0x32
  jmp __alltraps
c0102ce2:	e9 19 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102ce7 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102ce7:	6a 00                	push   $0x0
  pushl $51
c0102ce9:	6a 33                	push   $0x33
  jmp __alltraps
c0102ceb:	e9 10 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cf0 <vector52>:
.globl vector52
vector52:
  pushl $0
c0102cf0:	6a 00                	push   $0x0
  pushl $52
c0102cf2:	6a 34                	push   $0x34
  jmp __alltraps
c0102cf4:	e9 07 fe ff ff       	jmp    c0102b00 <__alltraps>

c0102cf9 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102cf9:	6a 00                	push   $0x0
  pushl $53
c0102cfb:	6a 35                	push   $0x35
  jmp __alltraps
c0102cfd:	e9 fe fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d02 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102d02:	6a 00                	push   $0x0
  pushl $54
c0102d04:	6a 36                	push   $0x36
  jmp __alltraps
c0102d06:	e9 f5 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d0b <vector55>:
.globl vector55
vector55:
  pushl $0
c0102d0b:	6a 00                	push   $0x0
  pushl $55
c0102d0d:	6a 37                	push   $0x37
  jmp __alltraps
c0102d0f:	e9 ec fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d14 <vector56>:
.globl vector56
vector56:
  pushl $0
c0102d14:	6a 00                	push   $0x0
  pushl $56
c0102d16:	6a 38                	push   $0x38
  jmp __alltraps
c0102d18:	e9 e3 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d1d <vector57>:
.globl vector57
vector57:
  pushl $0
c0102d1d:	6a 00                	push   $0x0
  pushl $57
c0102d1f:	6a 39                	push   $0x39
  jmp __alltraps
c0102d21:	e9 da fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d26 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102d26:	6a 00                	push   $0x0
  pushl $58
c0102d28:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102d2a:	e9 d1 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d2f <vector59>:
.globl vector59
vector59:
  pushl $0
c0102d2f:	6a 00                	push   $0x0
  pushl $59
c0102d31:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102d33:	e9 c8 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d38 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102d38:	6a 00                	push   $0x0
  pushl $60
c0102d3a:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102d3c:	e9 bf fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d41 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102d41:	6a 00                	push   $0x0
  pushl $61
c0102d43:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102d45:	e9 b6 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d4a <vector62>:
.globl vector62
vector62:
  pushl $0
c0102d4a:	6a 00                	push   $0x0
  pushl $62
c0102d4c:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102d4e:	e9 ad fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d53 <vector63>:
.globl vector63
vector63:
  pushl $0
c0102d53:	6a 00                	push   $0x0
  pushl $63
c0102d55:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102d57:	e9 a4 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d5c <vector64>:
.globl vector64
vector64:
  pushl $0
c0102d5c:	6a 00                	push   $0x0
  pushl $64
c0102d5e:	6a 40                	push   $0x40
  jmp __alltraps
c0102d60:	e9 9b fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d65 <vector65>:
.globl vector65
vector65:
  pushl $0
c0102d65:	6a 00                	push   $0x0
  pushl $65
c0102d67:	6a 41                	push   $0x41
  jmp __alltraps
c0102d69:	e9 92 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d6e <vector66>:
.globl vector66
vector66:
  pushl $0
c0102d6e:	6a 00                	push   $0x0
  pushl $66
c0102d70:	6a 42                	push   $0x42
  jmp __alltraps
c0102d72:	e9 89 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d77 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102d77:	6a 00                	push   $0x0
  pushl $67
c0102d79:	6a 43                	push   $0x43
  jmp __alltraps
c0102d7b:	e9 80 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d80 <vector68>:
.globl vector68
vector68:
  pushl $0
c0102d80:	6a 00                	push   $0x0
  pushl $68
c0102d82:	6a 44                	push   $0x44
  jmp __alltraps
c0102d84:	e9 77 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d89 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102d89:	6a 00                	push   $0x0
  pushl $69
c0102d8b:	6a 45                	push   $0x45
  jmp __alltraps
c0102d8d:	e9 6e fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d92 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102d92:	6a 00                	push   $0x0
  pushl $70
c0102d94:	6a 46                	push   $0x46
  jmp __alltraps
c0102d96:	e9 65 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102d9b <vector71>:
.globl vector71
vector71:
  pushl $0
c0102d9b:	6a 00                	push   $0x0
  pushl $71
c0102d9d:	6a 47                	push   $0x47
  jmp __alltraps
c0102d9f:	e9 5c fd ff ff       	jmp    c0102b00 <__alltraps>

c0102da4 <vector72>:
.globl vector72
vector72:
  pushl $0
c0102da4:	6a 00                	push   $0x0
  pushl $72
c0102da6:	6a 48                	push   $0x48
  jmp __alltraps
c0102da8:	e9 53 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dad <vector73>:
.globl vector73
vector73:
  pushl $0
c0102dad:	6a 00                	push   $0x0
  pushl $73
c0102daf:	6a 49                	push   $0x49
  jmp __alltraps
c0102db1:	e9 4a fd ff ff       	jmp    c0102b00 <__alltraps>

c0102db6 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102db6:	6a 00                	push   $0x0
  pushl $74
c0102db8:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102dba:	e9 41 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dbf <vector75>:
.globl vector75
vector75:
  pushl $0
c0102dbf:	6a 00                	push   $0x0
  pushl $75
c0102dc1:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102dc3:	e9 38 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dc8 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102dc8:	6a 00                	push   $0x0
  pushl $76
c0102dca:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102dcc:	e9 2f fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dd1 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102dd1:	6a 00                	push   $0x0
  pushl $77
c0102dd3:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102dd5:	e9 26 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dda <vector78>:
.globl vector78
vector78:
  pushl $0
c0102dda:	6a 00                	push   $0x0
  pushl $78
c0102ddc:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102dde:	e9 1d fd ff ff       	jmp    c0102b00 <__alltraps>

c0102de3 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102de3:	6a 00                	push   $0x0
  pushl $79
c0102de5:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102de7:	e9 14 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dec <vector80>:
.globl vector80
vector80:
  pushl $0
c0102dec:	6a 00                	push   $0x0
  pushl $80
c0102dee:	6a 50                	push   $0x50
  jmp __alltraps
c0102df0:	e9 0b fd ff ff       	jmp    c0102b00 <__alltraps>

c0102df5 <vector81>:
.globl vector81
vector81:
  pushl $0
c0102df5:	6a 00                	push   $0x0
  pushl $81
c0102df7:	6a 51                	push   $0x51
  jmp __alltraps
c0102df9:	e9 02 fd ff ff       	jmp    c0102b00 <__alltraps>

c0102dfe <vector82>:
.globl vector82
vector82:
  pushl $0
c0102dfe:	6a 00                	push   $0x0
  pushl $82
c0102e00:	6a 52                	push   $0x52
  jmp __alltraps
c0102e02:	e9 f9 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e07 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102e07:	6a 00                	push   $0x0
  pushl $83
c0102e09:	6a 53                	push   $0x53
  jmp __alltraps
c0102e0b:	e9 f0 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e10 <vector84>:
.globl vector84
vector84:
  pushl $0
c0102e10:	6a 00                	push   $0x0
  pushl $84
c0102e12:	6a 54                	push   $0x54
  jmp __alltraps
c0102e14:	e9 e7 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e19 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102e19:	6a 00                	push   $0x0
  pushl $85
c0102e1b:	6a 55                	push   $0x55
  jmp __alltraps
c0102e1d:	e9 de fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e22 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102e22:	6a 00                	push   $0x0
  pushl $86
c0102e24:	6a 56                	push   $0x56
  jmp __alltraps
c0102e26:	e9 d5 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e2b <vector87>:
.globl vector87
vector87:
  pushl $0
c0102e2b:	6a 00                	push   $0x0
  pushl $87
c0102e2d:	6a 57                	push   $0x57
  jmp __alltraps
c0102e2f:	e9 cc fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e34 <vector88>:
.globl vector88
vector88:
  pushl $0
c0102e34:	6a 00                	push   $0x0
  pushl $88
c0102e36:	6a 58                	push   $0x58
  jmp __alltraps
c0102e38:	e9 c3 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e3d <vector89>:
.globl vector89
vector89:
  pushl $0
c0102e3d:	6a 00                	push   $0x0
  pushl $89
c0102e3f:	6a 59                	push   $0x59
  jmp __alltraps
c0102e41:	e9 ba fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e46 <vector90>:
.globl vector90
vector90:
  pushl $0
c0102e46:	6a 00                	push   $0x0
  pushl $90
c0102e48:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102e4a:	e9 b1 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e4f <vector91>:
.globl vector91
vector91:
  pushl $0
c0102e4f:	6a 00                	push   $0x0
  pushl $91
c0102e51:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102e53:	e9 a8 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e58 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102e58:	6a 00                	push   $0x0
  pushl $92
c0102e5a:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102e5c:	e9 9f fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e61 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102e61:	6a 00                	push   $0x0
  pushl $93
c0102e63:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102e65:	e9 96 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e6a <vector94>:
.globl vector94
vector94:
  pushl $0
c0102e6a:	6a 00                	push   $0x0
  pushl $94
c0102e6c:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102e6e:	e9 8d fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e73 <vector95>:
.globl vector95
vector95:
  pushl $0
c0102e73:	6a 00                	push   $0x0
  pushl $95
c0102e75:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102e77:	e9 84 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e7c <vector96>:
.globl vector96
vector96:
  pushl $0
c0102e7c:	6a 00                	push   $0x0
  pushl $96
c0102e7e:	6a 60                	push   $0x60
  jmp __alltraps
c0102e80:	e9 7b fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e85 <vector97>:
.globl vector97
vector97:
  pushl $0
c0102e85:	6a 00                	push   $0x0
  pushl $97
c0102e87:	6a 61                	push   $0x61
  jmp __alltraps
c0102e89:	e9 72 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e8e <vector98>:
.globl vector98
vector98:
  pushl $0
c0102e8e:	6a 00                	push   $0x0
  pushl $98
c0102e90:	6a 62                	push   $0x62
  jmp __alltraps
c0102e92:	e9 69 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102e97 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102e97:	6a 00                	push   $0x0
  pushl $99
c0102e99:	6a 63                	push   $0x63
  jmp __alltraps
c0102e9b:	e9 60 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ea0 <vector100>:
.globl vector100
vector100:
  pushl $0
c0102ea0:	6a 00                	push   $0x0
  pushl $100
c0102ea2:	6a 64                	push   $0x64
  jmp __alltraps
c0102ea4:	e9 57 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ea9 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102ea9:	6a 00                	push   $0x0
  pushl $101
c0102eab:	6a 65                	push   $0x65
  jmp __alltraps
c0102ead:	e9 4e fc ff ff       	jmp    c0102b00 <__alltraps>

c0102eb2 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102eb2:	6a 00                	push   $0x0
  pushl $102
c0102eb4:	6a 66                	push   $0x66
  jmp __alltraps
c0102eb6:	e9 45 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ebb <vector103>:
.globl vector103
vector103:
  pushl $0
c0102ebb:	6a 00                	push   $0x0
  pushl $103
c0102ebd:	6a 67                	push   $0x67
  jmp __alltraps
c0102ebf:	e9 3c fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ec4 <vector104>:
.globl vector104
vector104:
  pushl $0
c0102ec4:	6a 00                	push   $0x0
  pushl $104
c0102ec6:	6a 68                	push   $0x68
  jmp __alltraps
c0102ec8:	e9 33 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ecd <vector105>:
.globl vector105
vector105:
  pushl $0
c0102ecd:	6a 00                	push   $0x0
  pushl $105
c0102ecf:	6a 69                	push   $0x69
  jmp __alltraps
c0102ed1:	e9 2a fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ed6 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102ed6:	6a 00                	push   $0x0
  pushl $106
c0102ed8:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102eda:	e9 21 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102edf <vector107>:
.globl vector107
vector107:
  pushl $0
c0102edf:	6a 00                	push   $0x0
  pushl $107
c0102ee1:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102ee3:	e9 18 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ee8 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102ee8:	6a 00                	push   $0x0
  pushl $108
c0102eea:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102eec:	e9 0f fc ff ff       	jmp    c0102b00 <__alltraps>

c0102ef1 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102ef1:	6a 00                	push   $0x0
  pushl $109
c0102ef3:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102ef5:	e9 06 fc ff ff       	jmp    c0102b00 <__alltraps>

c0102efa <vector110>:
.globl vector110
vector110:
  pushl $0
c0102efa:	6a 00                	push   $0x0
  pushl $110
c0102efc:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102efe:	e9 fd fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f03 <vector111>:
.globl vector111
vector111:
  pushl $0
c0102f03:	6a 00                	push   $0x0
  pushl $111
c0102f05:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102f07:	e9 f4 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f0c <vector112>:
.globl vector112
vector112:
  pushl $0
c0102f0c:	6a 00                	push   $0x0
  pushl $112
c0102f0e:	6a 70                	push   $0x70
  jmp __alltraps
c0102f10:	e9 eb fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f15 <vector113>:
.globl vector113
vector113:
  pushl $0
c0102f15:	6a 00                	push   $0x0
  pushl $113
c0102f17:	6a 71                	push   $0x71
  jmp __alltraps
c0102f19:	e9 e2 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f1e <vector114>:
.globl vector114
vector114:
  pushl $0
c0102f1e:	6a 00                	push   $0x0
  pushl $114
c0102f20:	6a 72                	push   $0x72
  jmp __alltraps
c0102f22:	e9 d9 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f27 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102f27:	6a 00                	push   $0x0
  pushl $115
c0102f29:	6a 73                	push   $0x73
  jmp __alltraps
c0102f2b:	e9 d0 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f30 <vector116>:
.globl vector116
vector116:
  pushl $0
c0102f30:	6a 00                	push   $0x0
  pushl $116
c0102f32:	6a 74                	push   $0x74
  jmp __alltraps
c0102f34:	e9 c7 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f39 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102f39:	6a 00                	push   $0x0
  pushl $117
c0102f3b:	6a 75                	push   $0x75
  jmp __alltraps
c0102f3d:	e9 be fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f42 <vector118>:
.globl vector118
vector118:
  pushl $0
c0102f42:	6a 00                	push   $0x0
  pushl $118
c0102f44:	6a 76                	push   $0x76
  jmp __alltraps
c0102f46:	e9 b5 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f4b <vector119>:
.globl vector119
vector119:
  pushl $0
c0102f4b:	6a 00                	push   $0x0
  pushl $119
c0102f4d:	6a 77                	push   $0x77
  jmp __alltraps
c0102f4f:	e9 ac fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f54 <vector120>:
.globl vector120
vector120:
  pushl $0
c0102f54:	6a 00                	push   $0x0
  pushl $120
c0102f56:	6a 78                	push   $0x78
  jmp __alltraps
c0102f58:	e9 a3 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f5d <vector121>:
.globl vector121
vector121:
  pushl $0
c0102f5d:	6a 00                	push   $0x0
  pushl $121
c0102f5f:	6a 79                	push   $0x79
  jmp __alltraps
c0102f61:	e9 9a fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f66 <vector122>:
.globl vector122
vector122:
  pushl $0
c0102f66:	6a 00                	push   $0x0
  pushl $122
c0102f68:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102f6a:	e9 91 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f6f <vector123>:
.globl vector123
vector123:
  pushl $0
c0102f6f:	6a 00                	push   $0x0
  pushl $123
c0102f71:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102f73:	e9 88 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f78 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102f78:	6a 00                	push   $0x0
  pushl $124
c0102f7a:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102f7c:	e9 7f fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f81 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102f81:	6a 00                	push   $0x0
  pushl $125
c0102f83:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102f85:	e9 76 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f8a <vector126>:
.globl vector126
vector126:
  pushl $0
c0102f8a:	6a 00                	push   $0x0
  pushl $126
c0102f8c:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102f8e:	e9 6d fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f93 <vector127>:
.globl vector127
vector127:
  pushl $0
c0102f93:	6a 00                	push   $0x0
  pushl $127
c0102f95:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102f97:	e9 64 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102f9c <vector128>:
.globl vector128
vector128:
  pushl $0
c0102f9c:	6a 00                	push   $0x0
  pushl $128
c0102f9e:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102fa3:	e9 58 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fa8 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102fa8:	6a 00                	push   $0x0
  pushl $129
c0102faa:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102faf:	e9 4c fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fb4 <vector130>:
.globl vector130
vector130:
  pushl $0
c0102fb4:	6a 00                	push   $0x0
  pushl $130
c0102fb6:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102fbb:	e9 40 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fc0 <vector131>:
.globl vector131
vector131:
  pushl $0
c0102fc0:	6a 00                	push   $0x0
  pushl $131
c0102fc2:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102fc7:	e9 34 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fcc <vector132>:
.globl vector132
vector132:
  pushl $0
c0102fcc:	6a 00                	push   $0x0
  pushl $132
c0102fce:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102fd3:	e9 28 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fd8 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102fd8:	6a 00                	push   $0x0
  pushl $133
c0102fda:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102fdf:	e9 1c fb ff ff       	jmp    c0102b00 <__alltraps>

c0102fe4 <vector134>:
.globl vector134
vector134:
  pushl $0
c0102fe4:	6a 00                	push   $0x0
  pushl $134
c0102fe6:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102feb:	e9 10 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102ff0 <vector135>:
.globl vector135
vector135:
  pushl $0
c0102ff0:	6a 00                	push   $0x0
  pushl $135
c0102ff2:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102ff7:	e9 04 fb ff ff       	jmp    c0102b00 <__alltraps>

c0102ffc <vector136>:
.globl vector136
vector136:
  pushl $0
c0102ffc:	6a 00                	push   $0x0
  pushl $136
c0102ffe:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0103003:	e9 f8 fa ff ff       	jmp    c0102b00 <__alltraps>

c0103008 <vector137>:
.globl vector137
vector137:
  pushl $0
c0103008:	6a 00                	push   $0x0
  pushl $137
c010300a:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c010300f:	e9 ec fa ff ff       	jmp    c0102b00 <__alltraps>

c0103014 <vector138>:
.globl vector138
vector138:
  pushl $0
c0103014:	6a 00                	push   $0x0
  pushl $138
c0103016:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c010301b:	e9 e0 fa ff ff       	jmp    c0102b00 <__alltraps>

c0103020 <vector139>:
.globl vector139
vector139:
  pushl $0
c0103020:	6a 00                	push   $0x0
  pushl $139
c0103022:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0103027:	e9 d4 fa ff ff       	jmp    c0102b00 <__alltraps>

c010302c <vector140>:
.globl vector140
vector140:
  pushl $0
c010302c:	6a 00                	push   $0x0
  pushl $140
c010302e:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0103033:	e9 c8 fa ff ff       	jmp    c0102b00 <__alltraps>

c0103038 <vector141>:
.globl vector141
vector141:
  pushl $0
c0103038:	6a 00                	push   $0x0
  pushl $141
c010303a:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c010303f:	e9 bc fa ff ff       	jmp    c0102b00 <__alltraps>

c0103044 <vector142>:
.globl vector142
vector142:
  pushl $0
c0103044:	6a 00                	push   $0x0
  pushl $142
c0103046:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c010304b:	e9 b0 fa ff ff       	jmp    c0102b00 <__alltraps>

c0103050 <vector143>:
.globl vector143
vector143:
  pushl $0
c0103050:	6a 00                	push   $0x0
  pushl $143
c0103052:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0103057:	e9 a4 fa ff ff       	jmp    c0102b00 <__alltraps>

c010305c <vector144>:
.globl vector144
vector144:
  pushl $0
c010305c:	6a 00                	push   $0x0
  pushl $144
c010305e:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0103063:	e9 98 fa ff ff       	jmp    c0102b00 <__alltraps>

c0103068 <vector145>:
.globl vector145
vector145:
  pushl $0
c0103068:	6a 00                	push   $0x0
  pushl $145
c010306a:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c010306f:	e9 8c fa ff ff       	jmp    c0102b00 <__alltraps>

c0103074 <vector146>:
.globl vector146
vector146:
  pushl $0
c0103074:	6a 00                	push   $0x0
  pushl $146
c0103076:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c010307b:	e9 80 fa ff ff       	jmp    c0102b00 <__alltraps>

c0103080 <vector147>:
.globl vector147
vector147:
  pushl $0
c0103080:	6a 00                	push   $0x0
  pushl $147
c0103082:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0103087:	e9 74 fa ff ff       	jmp    c0102b00 <__alltraps>

c010308c <vector148>:
.globl vector148
vector148:
  pushl $0
c010308c:	6a 00                	push   $0x0
  pushl $148
c010308e:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c0103093:	e9 68 fa ff ff       	jmp    c0102b00 <__alltraps>

c0103098 <vector149>:
.globl vector149
vector149:
  pushl $0
c0103098:	6a 00                	push   $0x0
  pushl $149
c010309a:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c010309f:	e9 5c fa ff ff       	jmp    c0102b00 <__alltraps>

c01030a4 <vector150>:
.globl vector150
vector150:
  pushl $0
c01030a4:	6a 00                	push   $0x0
  pushl $150
c01030a6:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c01030ab:	e9 50 fa ff ff       	jmp    c0102b00 <__alltraps>

c01030b0 <vector151>:
.globl vector151
vector151:
  pushl $0
c01030b0:	6a 00                	push   $0x0
  pushl $151
c01030b2:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c01030b7:	e9 44 fa ff ff       	jmp    c0102b00 <__alltraps>

c01030bc <vector152>:
.globl vector152
vector152:
  pushl $0
c01030bc:	6a 00                	push   $0x0
  pushl $152
c01030be:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c01030c3:	e9 38 fa ff ff       	jmp    c0102b00 <__alltraps>

c01030c8 <vector153>:
.globl vector153
vector153:
  pushl $0
c01030c8:	6a 00                	push   $0x0
  pushl $153
c01030ca:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c01030cf:	e9 2c fa ff ff       	jmp    c0102b00 <__alltraps>

c01030d4 <vector154>:
.globl vector154
vector154:
  pushl $0
c01030d4:	6a 00                	push   $0x0
  pushl $154
c01030d6:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c01030db:	e9 20 fa ff ff       	jmp    c0102b00 <__alltraps>

c01030e0 <vector155>:
.globl vector155
vector155:
  pushl $0
c01030e0:	6a 00                	push   $0x0
  pushl $155
c01030e2:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c01030e7:	e9 14 fa ff ff       	jmp    c0102b00 <__alltraps>

c01030ec <vector156>:
.globl vector156
vector156:
  pushl $0
c01030ec:	6a 00                	push   $0x0
  pushl $156
c01030ee:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c01030f3:	e9 08 fa ff ff       	jmp    c0102b00 <__alltraps>

c01030f8 <vector157>:
.globl vector157
vector157:
  pushl $0
c01030f8:	6a 00                	push   $0x0
  pushl $157
c01030fa:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c01030ff:	e9 fc f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103104 <vector158>:
.globl vector158
vector158:
  pushl $0
c0103104:	6a 00                	push   $0x0
  pushl $158
c0103106:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c010310b:	e9 f0 f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103110 <vector159>:
.globl vector159
vector159:
  pushl $0
c0103110:	6a 00                	push   $0x0
  pushl $159
c0103112:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c0103117:	e9 e4 f9 ff ff       	jmp    c0102b00 <__alltraps>

c010311c <vector160>:
.globl vector160
vector160:
  pushl $0
c010311c:	6a 00                	push   $0x0
  pushl $160
c010311e:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0103123:	e9 d8 f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103128 <vector161>:
.globl vector161
vector161:
  pushl $0
c0103128:	6a 00                	push   $0x0
  pushl $161
c010312a:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c010312f:	e9 cc f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103134 <vector162>:
.globl vector162
vector162:
  pushl $0
c0103134:	6a 00                	push   $0x0
  pushl $162
c0103136:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c010313b:	e9 c0 f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103140 <vector163>:
.globl vector163
vector163:
  pushl $0
c0103140:	6a 00                	push   $0x0
  pushl $163
c0103142:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c0103147:	e9 b4 f9 ff ff       	jmp    c0102b00 <__alltraps>

c010314c <vector164>:
.globl vector164
vector164:
  pushl $0
c010314c:	6a 00                	push   $0x0
  pushl $164
c010314e:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c0103153:	e9 a8 f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103158 <vector165>:
.globl vector165
vector165:
  pushl $0
c0103158:	6a 00                	push   $0x0
  pushl $165
c010315a:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c010315f:	e9 9c f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103164 <vector166>:
.globl vector166
vector166:
  pushl $0
c0103164:	6a 00                	push   $0x0
  pushl $166
c0103166:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c010316b:	e9 90 f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103170 <vector167>:
.globl vector167
vector167:
  pushl $0
c0103170:	6a 00                	push   $0x0
  pushl $167
c0103172:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c0103177:	e9 84 f9 ff ff       	jmp    c0102b00 <__alltraps>

c010317c <vector168>:
.globl vector168
vector168:
  pushl $0
c010317c:	6a 00                	push   $0x0
  pushl $168
c010317e:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c0103183:	e9 78 f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103188 <vector169>:
.globl vector169
vector169:
  pushl $0
c0103188:	6a 00                	push   $0x0
  pushl $169
c010318a:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c010318f:	e9 6c f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103194 <vector170>:
.globl vector170
vector170:
  pushl $0
c0103194:	6a 00                	push   $0x0
  pushl $170
c0103196:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c010319b:	e9 60 f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031a0 <vector171>:
.globl vector171
vector171:
  pushl $0
c01031a0:	6a 00                	push   $0x0
  pushl $171
c01031a2:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c01031a7:	e9 54 f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031ac <vector172>:
.globl vector172
vector172:
  pushl $0
c01031ac:	6a 00                	push   $0x0
  pushl $172
c01031ae:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c01031b3:	e9 48 f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031b8 <vector173>:
.globl vector173
vector173:
  pushl $0
c01031b8:	6a 00                	push   $0x0
  pushl $173
c01031ba:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c01031bf:	e9 3c f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031c4 <vector174>:
.globl vector174
vector174:
  pushl $0
c01031c4:	6a 00                	push   $0x0
  pushl $174
c01031c6:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c01031cb:	e9 30 f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031d0 <vector175>:
.globl vector175
vector175:
  pushl $0
c01031d0:	6a 00                	push   $0x0
  pushl $175
c01031d2:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c01031d7:	e9 24 f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031dc <vector176>:
.globl vector176
vector176:
  pushl $0
c01031dc:	6a 00                	push   $0x0
  pushl $176
c01031de:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c01031e3:	e9 18 f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031e8 <vector177>:
.globl vector177
vector177:
  pushl $0
c01031e8:	6a 00                	push   $0x0
  pushl $177
c01031ea:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c01031ef:	e9 0c f9 ff ff       	jmp    c0102b00 <__alltraps>

c01031f4 <vector178>:
.globl vector178
vector178:
  pushl $0
c01031f4:	6a 00                	push   $0x0
  pushl $178
c01031f6:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c01031fb:	e9 00 f9 ff ff       	jmp    c0102b00 <__alltraps>

c0103200 <vector179>:
.globl vector179
vector179:
  pushl $0
c0103200:	6a 00                	push   $0x0
  pushl $179
c0103202:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c0103207:	e9 f4 f8 ff ff       	jmp    c0102b00 <__alltraps>

c010320c <vector180>:
.globl vector180
vector180:
  pushl $0
c010320c:	6a 00                	push   $0x0
  pushl $180
c010320e:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0103213:	e9 e8 f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103218 <vector181>:
.globl vector181
vector181:
  pushl $0
c0103218:	6a 00                	push   $0x0
  pushl $181
c010321a:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c010321f:	e9 dc f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103224 <vector182>:
.globl vector182
vector182:
  pushl $0
c0103224:	6a 00                	push   $0x0
  pushl $182
c0103226:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c010322b:	e9 d0 f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103230 <vector183>:
.globl vector183
vector183:
  pushl $0
c0103230:	6a 00                	push   $0x0
  pushl $183
c0103232:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c0103237:	e9 c4 f8 ff ff       	jmp    c0102b00 <__alltraps>

c010323c <vector184>:
.globl vector184
vector184:
  pushl $0
c010323c:	6a 00                	push   $0x0
  pushl $184
c010323e:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c0103243:	e9 b8 f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103248 <vector185>:
.globl vector185
vector185:
  pushl $0
c0103248:	6a 00                	push   $0x0
  pushl $185
c010324a:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c010324f:	e9 ac f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103254 <vector186>:
.globl vector186
vector186:
  pushl $0
c0103254:	6a 00                	push   $0x0
  pushl $186
c0103256:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c010325b:	e9 a0 f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103260 <vector187>:
.globl vector187
vector187:
  pushl $0
c0103260:	6a 00                	push   $0x0
  pushl $187
c0103262:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c0103267:	e9 94 f8 ff ff       	jmp    c0102b00 <__alltraps>

c010326c <vector188>:
.globl vector188
vector188:
  pushl $0
c010326c:	6a 00                	push   $0x0
  pushl $188
c010326e:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c0103273:	e9 88 f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103278 <vector189>:
.globl vector189
vector189:
  pushl $0
c0103278:	6a 00                	push   $0x0
  pushl $189
c010327a:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c010327f:	e9 7c f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103284 <vector190>:
.globl vector190
vector190:
  pushl $0
c0103284:	6a 00                	push   $0x0
  pushl $190
c0103286:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c010328b:	e9 70 f8 ff ff       	jmp    c0102b00 <__alltraps>

c0103290 <vector191>:
.globl vector191
vector191:
  pushl $0
c0103290:	6a 00                	push   $0x0
  pushl $191
c0103292:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c0103297:	e9 64 f8 ff ff       	jmp    c0102b00 <__alltraps>

c010329c <vector192>:
.globl vector192
vector192:
  pushl $0
c010329c:	6a 00                	push   $0x0
  pushl $192
c010329e:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01032a3:	e9 58 f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032a8 <vector193>:
.globl vector193
vector193:
  pushl $0
c01032a8:	6a 00                	push   $0x0
  pushl $193
c01032aa:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c01032af:	e9 4c f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032b4 <vector194>:
.globl vector194
vector194:
  pushl $0
c01032b4:	6a 00                	push   $0x0
  pushl $194
c01032b6:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c01032bb:	e9 40 f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032c0 <vector195>:
.globl vector195
vector195:
  pushl $0
c01032c0:	6a 00                	push   $0x0
  pushl $195
c01032c2:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c01032c7:	e9 34 f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032cc <vector196>:
.globl vector196
vector196:
  pushl $0
c01032cc:	6a 00                	push   $0x0
  pushl $196
c01032ce:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c01032d3:	e9 28 f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032d8 <vector197>:
.globl vector197
vector197:
  pushl $0
c01032d8:	6a 00                	push   $0x0
  pushl $197
c01032da:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c01032df:	e9 1c f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032e4 <vector198>:
.globl vector198
vector198:
  pushl $0
c01032e4:	6a 00                	push   $0x0
  pushl $198
c01032e6:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c01032eb:	e9 10 f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032f0 <vector199>:
.globl vector199
vector199:
  pushl $0
c01032f0:	6a 00                	push   $0x0
  pushl $199
c01032f2:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c01032f7:	e9 04 f8 ff ff       	jmp    c0102b00 <__alltraps>

c01032fc <vector200>:
.globl vector200
vector200:
  pushl $0
c01032fc:	6a 00                	push   $0x0
  pushl $200
c01032fe:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0103303:	e9 f8 f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103308 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103308:	6a 00                	push   $0x0
  pushl $201
c010330a:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c010330f:	e9 ec f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103314 <vector202>:
.globl vector202
vector202:
  pushl $0
c0103314:	6a 00                	push   $0x0
  pushl $202
c0103316:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c010331b:	e9 e0 f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103320 <vector203>:
.globl vector203
vector203:
  pushl $0
c0103320:	6a 00                	push   $0x0
  pushl $203
c0103322:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c0103327:	e9 d4 f7 ff ff       	jmp    c0102b00 <__alltraps>

c010332c <vector204>:
.globl vector204
vector204:
  pushl $0
c010332c:	6a 00                	push   $0x0
  pushl $204
c010332e:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0103333:	e9 c8 f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103338 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103338:	6a 00                	push   $0x0
  pushl $205
c010333a:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c010333f:	e9 bc f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103344 <vector206>:
.globl vector206
vector206:
  pushl $0
c0103344:	6a 00                	push   $0x0
  pushl $206
c0103346:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c010334b:	e9 b0 f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103350 <vector207>:
.globl vector207
vector207:
  pushl $0
c0103350:	6a 00                	push   $0x0
  pushl $207
c0103352:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c0103357:	e9 a4 f7 ff ff       	jmp    c0102b00 <__alltraps>

c010335c <vector208>:
.globl vector208
vector208:
  pushl $0
c010335c:	6a 00                	push   $0x0
  pushl $208
c010335e:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c0103363:	e9 98 f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103368 <vector209>:
.globl vector209
vector209:
  pushl $0
c0103368:	6a 00                	push   $0x0
  pushl $209
c010336a:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c010336f:	e9 8c f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103374 <vector210>:
.globl vector210
vector210:
  pushl $0
c0103374:	6a 00                	push   $0x0
  pushl $210
c0103376:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c010337b:	e9 80 f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103380 <vector211>:
.globl vector211
vector211:
  pushl $0
c0103380:	6a 00                	push   $0x0
  pushl $211
c0103382:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c0103387:	e9 74 f7 ff ff       	jmp    c0102b00 <__alltraps>

c010338c <vector212>:
.globl vector212
vector212:
  pushl $0
c010338c:	6a 00                	push   $0x0
  pushl $212
c010338e:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c0103393:	e9 68 f7 ff ff       	jmp    c0102b00 <__alltraps>

c0103398 <vector213>:
.globl vector213
vector213:
  pushl $0
c0103398:	6a 00                	push   $0x0
  pushl $213
c010339a:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c010339f:	e9 5c f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033a4 <vector214>:
.globl vector214
vector214:
  pushl $0
c01033a4:	6a 00                	push   $0x0
  pushl $214
c01033a6:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01033ab:	e9 50 f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033b0 <vector215>:
.globl vector215
vector215:
  pushl $0
c01033b0:	6a 00                	push   $0x0
  pushl $215
c01033b2:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01033b7:	e9 44 f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033bc <vector216>:
.globl vector216
vector216:
  pushl $0
c01033bc:	6a 00                	push   $0x0
  pushl $216
c01033be:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01033c3:	e9 38 f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033c8 <vector217>:
.globl vector217
vector217:
  pushl $0
c01033c8:	6a 00                	push   $0x0
  pushl $217
c01033ca:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01033cf:	e9 2c f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033d4 <vector218>:
.globl vector218
vector218:
  pushl $0
c01033d4:	6a 00                	push   $0x0
  pushl $218
c01033d6:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c01033db:	e9 20 f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033e0 <vector219>:
.globl vector219
vector219:
  pushl $0
c01033e0:	6a 00                	push   $0x0
  pushl $219
c01033e2:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c01033e7:	e9 14 f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033ec <vector220>:
.globl vector220
vector220:
  pushl $0
c01033ec:	6a 00                	push   $0x0
  pushl $220
c01033ee:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c01033f3:	e9 08 f7 ff ff       	jmp    c0102b00 <__alltraps>

c01033f8 <vector221>:
.globl vector221
vector221:
  pushl $0
c01033f8:	6a 00                	push   $0x0
  pushl $221
c01033fa:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c01033ff:	e9 fc f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103404 <vector222>:
.globl vector222
vector222:
  pushl $0
c0103404:	6a 00                	push   $0x0
  pushl $222
c0103406:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c010340b:	e9 f0 f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103410 <vector223>:
.globl vector223
vector223:
  pushl $0
c0103410:	6a 00                	push   $0x0
  pushl $223
c0103412:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c0103417:	e9 e4 f6 ff ff       	jmp    c0102b00 <__alltraps>

c010341c <vector224>:
.globl vector224
vector224:
  pushl $0
c010341c:	6a 00                	push   $0x0
  pushl $224
c010341e:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0103423:	e9 d8 f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103428 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103428:	6a 00                	push   $0x0
  pushl $225
c010342a:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c010342f:	e9 cc f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103434 <vector226>:
.globl vector226
vector226:
  pushl $0
c0103434:	6a 00                	push   $0x0
  pushl $226
c0103436:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c010343b:	e9 c0 f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103440 <vector227>:
.globl vector227
vector227:
  pushl $0
c0103440:	6a 00                	push   $0x0
  pushl $227
c0103442:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c0103447:	e9 b4 f6 ff ff       	jmp    c0102b00 <__alltraps>

c010344c <vector228>:
.globl vector228
vector228:
  pushl $0
c010344c:	6a 00                	push   $0x0
  pushl $228
c010344e:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c0103453:	e9 a8 f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103458 <vector229>:
.globl vector229
vector229:
  pushl $0
c0103458:	6a 00                	push   $0x0
  pushl $229
c010345a:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c010345f:	e9 9c f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103464 <vector230>:
.globl vector230
vector230:
  pushl $0
c0103464:	6a 00                	push   $0x0
  pushl $230
c0103466:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c010346b:	e9 90 f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103470 <vector231>:
.globl vector231
vector231:
  pushl $0
c0103470:	6a 00                	push   $0x0
  pushl $231
c0103472:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c0103477:	e9 84 f6 ff ff       	jmp    c0102b00 <__alltraps>

c010347c <vector232>:
.globl vector232
vector232:
  pushl $0
c010347c:	6a 00                	push   $0x0
  pushl $232
c010347e:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c0103483:	e9 78 f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103488 <vector233>:
.globl vector233
vector233:
  pushl $0
c0103488:	6a 00                	push   $0x0
  pushl $233
c010348a:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c010348f:	e9 6c f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103494 <vector234>:
.globl vector234
vector234:
  pushl $0
c0103494:	6a 00                	push   $0x0
  pushl $234
c0103496:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c010349b:	e9 60 f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034a0 <vector235>:
.globl vector235
vector235:
  pushl $0
c01034a0:	6a 00                	push   $0x0
  pushl $235
c01034a2:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01034a7:	e9 54 f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034ac <vector236>:
.globl vector236
vector236:
  pushl $0
c01034ac:	6a 00                	push   $0x0
  pushl $236
c01034ae:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01034b3:	e9 48 f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034b8 <vector237>:
.globl vector237
vector237:
  pushl $0
c01034b8:	6a 00                	push   $0x0
  pushl $237
c01034ba:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01034bf:	e9 3c f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034c4 <vector238>:
.globl vector238
vector238:
  pushl $0
c01034c4:	6a 00                	push   $0x0
  pushl $238
c01034c6:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01034cb:	e9 30 f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034d0 <vector239>:
.globl vector239
vector239:
  pushl $0
c01034d0:	6a 00                	push   $0x0
  pushl $239
c01034d2:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c01034d7:	e9 24 f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034dc <vector240>:
.globl vector240
vector240:
  pushl $0
c01034dc:	6a 00                	push   $0x0
  pushl $240
c01034de:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c01034e3:	e9 18 f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034e8 <vector241>:
.globl vector241
vector241:
  pushl $0
c01034e8:	6a 00                	push   $0x0
  pushl $241
c01034ea:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c01034ef:	e9 0c f6 ff ff       	jmp    c0102b00 <__alltraps>

c01034f4 <vector242>:
.globl vector242
vector242:
  pushl $0
c01034f4:	6a 00                	push   $0x0
  pushl $242
c01034f6:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c01034fb:	e9 00 f6 ff ff       	jmp    c0102b00 <__alltraps>

c0103500 <vector243>:
.globl vector243
vector243:
  pushl $0
c0103500:	6a 00                	push   $0x0
  pushl $243
c0103502:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c0103507:	e9 f4 f5 ff ff       	jmp    c0102b00 <__alltraps>

c010350c <vector244>:
.globl vector244
vector244:
  pushl $0
c010350c:	6a 00                	push   $0x0
  pushl $244
c010350e:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0103513:	e9 e8 f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103518 <vector245>:
.globl vector245
vector245:
  pushl $0
c0103518:	6a 00                	push   $0x0
  pushl $245
c010351a:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c010351f:	e9 dc f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103524 <vector246>:
.globl vector246
vector246:
  pushl $0
c0103524:	6a 00                	push   $0x0
  pushl $246
c0103526:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c010352b:	e9 d0 f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103530 <vector247>:
.globl vector247
vector247:
  pushl $0
c0103530:	6a 00                	push   $0x0
  pushl $247
c0103532:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c0103537:	e9 c4 f5 ff ff       	jmp    c0102b00 <__alltraps>

c010353c <vector248>:
.globl vector248
vector248:
  pushl $0
c010353c:	6a 00                	push   $0x0
  pushl $248
c010353e:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c0103543:	e9 b8 f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103548 <vector249>:
.globl vector249
vector249:
  pushl $0
c0103548:	6a 00                	push   $0x0
  pushl $249
c010354a:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c010354f:	e9 ac f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103554 <vector250>:
.globl vector250
vector250:
  pushl $0
c0103554:	6a 00                	push   $0x0
  pushl $250
c0103556:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c010355b:	e9 a0 f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103560 <vector251>:
.globl vector251
vector251:
  pushl $0
c0103560:	6a 00                	push   $0x0
  pushl $251
c0103562:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c0103567:	e9 94 f5 ff ff       	jmp    c0102b00 <__alltraps>

c010356c <vector252>:
.globl vector252
vector252:
  pushl $0
c010356c:	6a 00                	push   $0x0
  pushl $252
c010356e:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c0103573:	e9 88 f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103578 <vector253>:
.globl vector253
vector253:
  pushl $0
c0103578:	6a 00                	push   $0x0
  pushl $253
c010357a:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c010357f:	e9 7c f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103584 <vector254>:
.globl vector254
vector254:
  pushl $0
c0103584:	6a 00                	push   $0x0
  pushl $254
c0103586:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c010358b:	e9 70 f5 ff ff       	jmp    c0102b00 <__alltraps>

c0103590 <vector255>:
.globl vector255
vector255:
  pushl $0
c0103590:	6a 00                	push   $0x0
  pushl $255
c0103592:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c0103597:	e9 64 f5 ff ff       	jmp    c0102b00 <__alltraps>

c010359c <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010359c:	55                   	push   %ebp
c010359d:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010359f:	8b 55 08             	mov    0x8(%ebp),%edx
c01035a2:	a1 d0 53 1c c0       	mov    0xc01c53d0,%eax
c01035a7:	89 d1                	mov    %edx,%ecx
c01035a9:	29 c1                	sub    %eax,%ecx
c01035ab:	89 c8                	mov    %ecx,%eax
c01035ad:	c1 f8 05             	sar    $0x5,%eax
}
c01035b0:	5d                   	pop    %ebp
c01035b1:	c3                   	ret    

c01035b2 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01035b2:	55                   	push   %ebp
c01035b3:	89 e5                	mov    %esp,%ebp
c01035b5:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01035b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01035bb:	89 04 24             	mov    %eax,(%esp)
c01035be:	e8 d9 ff ff ff       	call   c010359c <page2ppn>
c01035c3:	c1 e0 0c             	shl    $0xc,%eax
}
c01035c6:	c9                   	leave  
c01035c7:	c3                   	ret    

c01035c8 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c01035c8:	55                   	push   %ebp
c01035c9:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01035cb:	8b 45 08             	mov    0x8(%ebp),%eax
c01035ce:	8b 00                	mov    (%eax),%eax
}
c01035d0:	5d                   	pop    %ebp
c01035d1:	c3                   	ret    

c01035d2 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c01035d2:	55                   	push   %ebp
c01035d3:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c01035d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01035d8:	8b 55 0c             	mov    0xc(%ebp),%edx
c01035db:	89 10                	mov    %edx,(%eax)
}
c01035dd:	5d                   	pop    %ebp
c01035de:	c3                   	ret    

c01035df <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c01035df:	55                   	push   %ebp
c01035e0:	89 e5                	mov    %esp,%ebp
c01035e2:	83 ec 10             	sub    $0x10,%esp
c01035e5:	c7 45 fc bc 53 1c c0 	movl   $0xc01c53bc,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01035ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01035ef:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01035f2:	89 50 04             	mov    %edx,0x4(%eax)
c01035f5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01035f8:	8b 50 04             	mov    0x4(%eax),%edx
c01035fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01035fe:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0103600:	c7 05 c4 53 1c c0 00 	movl   $0x0,0xc01c53c4
c0103607:	00 00 00 
}
c010360a:	c9                   	leave  
c010360b:	c3                   	ret    

c010360c <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c010360c:	55                   	push   %ebp
c010360d:	89 e5                	mov    %esp,%ebp
c010360f:	53                   	push   %ebx
c0103610:	83 ec 44             	sub    $0x44,%esp
    assert(n > 0);
c0103613:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103617:	75 24                	jne    c010363d <default_init_memmap+0x31>
c0103619:	c7 44 24 0c b0 e2 10 	movl   $0xc010e2b0,0xc(%esp)
c0103620:	c0 
c0103621:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103628:	c0 
c0103629:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c0103630:	00 
c0103631:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103638:	e8 7f d7 ff ff       	call   c0100dbc <__panic>
    struct Page *p = base;
c010363d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103640:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c0103643:	e9 dc 00 00 00       	jmp    c0103724 <default_init_memmap+0x118>
        assert(PageReserved(p));
c0103648:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010364b:	83 c0 04             	add    $0x4,%eax
c010364e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0103655:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103658:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010365b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010365e:	0f a3 10             	bt     %edx,(%eax)
c0103661:	19 db                	sbb    %ebx,%ebx
c0103663:	89 5d e8             	mov    %ebx,-0x18(%ebp)
    return oldbit != 0;
c0103666:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010366a:	0f 95 c0             	setne  %al
c010366d:	0f b6 c0             	movzbl %al,%eax
c0103670:	85 c0                	test   %eax,%eax
c0103672:	75 24                	jne    c0103698 <default_init_memmap+0x8c>
c0103674:	c7 44 24 0c e1 e2 10 	movl   $0xc010e2e1,0xc(%esp)
c010367b:	c0 
c010367c:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103683:	c0 
c0103684:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c010368b:	00 
c010368c:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103693:	e8 24 d7 ff ff       	call   c0100dbc <__panic>
        p->flags = 0;
c0103698:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010369b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        SetPageProperty(p);
c01036a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036a5:	83 c0 04             	add    $0x4,%eax
c01036a8:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c01036af:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01036b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01036b5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01036b8:	0f ab 10             	bts    %edx,(%eax)
        p->property = 0;
c01036bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036be:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        set_page_ref(p, 0);
c01036c5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01036cc:	00 
c01036cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036d0:	89 04 24             	mov    %eax,(%esp)
c01036d3:	e8 fa fe ff ff       	call   c01035d2 <set_page_ref>
        list_add_before(&free_list, &(p->page_link));
c01036d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01036db:	83 c0 0c             	add    $0xc,%eax
c01036de:	c7 45 dc bc 53 1c c0 	movl   $0xc01c53bc,-0x24(%ebp)
c01036e5:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c01036e8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01036eb:	8b 00                	mov    (%eax),%eax
c01036ed:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01036f0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01036f3:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01036f6:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01036f9:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01036fc:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01036ff:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103702:	89 10                	mov    %edx,(%eax)
c0103704:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103707:	8b 10                	mov    (%eax),%edx
c0103709:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010370c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010370f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103712:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103715:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103718:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010371b:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010371e:	89 10                	mov    %edx,(%eax)

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0103720:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0103724:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103727:	c1 e0 05             	shl    $0x5,%eax
c010372a:	03 45 08             	add    0x8(%ebp),%eax
c010372d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103730:	0f 85 12 ff ff ff    	jne    c0103648 <default_init_memmap+0x3c>
        p->property = 0;
        set_page_ref(p, 0);
        list_add_before(&free_list, &(p->page_link));
    }

    nr_free += n;
c0103736:	a1 c4 53 1c c0       	mov    0xc01c53c4,%eax
c010373b:	03 45 0c             	add    0xc(%ebp),%eax
c010373e:	a3 c4 53 1c c0       	mov    %eax,0xc01c53c4
    //first block
    base->property = n;
c0103743:	8b 45 08             	mov    0x8(%ebp),%eax
c0103746:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103749:	89 50 08             	mov    %edx,0x8(%eax)
}
c010374c:	83 c4 44             	add    $0x44,%esp
c010374f:	5b                   	pop    %ebx
c0103750:	5d                   	pop    %ebp
c0103751:	c3                   	ret    

c0103752 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c0103752:	55                   	push   %ebp
c0103753:	89 e5                	mov    %esp,%ebp
c0103755:	83 ec 68             	sub    $0x68,%esp
    assert(n > 0);
c0103758:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010375c:	75 24                	jne    c0103782 <default_alloc_pages+0x30>
c010375e:	c7 44 24 0c b0 e2 10 	movl   $0xc010e2b0,0xc(%esp)
c0103765:	c0 
c0103766:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c010376d:	c0 
c010376e:	c7 44 24 04 58 00 00 	movl   $0x58,0x4(%esp)
c0103775:	00 
c0103776:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c010377d:	e8 3a d6 ff ff       	call   c0100dbc <__panic>
    if (n > nr_free) {
c0103782:	a1 c4 53 1c c0       	mov    0xc01c53c4,%eax
c0103787:	3b 45 08             	cmp    0x8(%ebp),%eax
c010378a:	73 0a                	jae    c0103796 <default_alloc_pages+0x44>
        return NULL;
c010378c:	b8 00 00 00 00       	mov    $0x0,%eax
c0103791:	e9 37 01 00 00       	jmp    c01038cd <default_alloc_pages+0x17b>
    }
    list_entry_t *le, *len;
    le = &free_list;
c0103796:	c7 45 f4 bc 53 1c c0 	movl   $0xc01c53bc,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
c010379d:	e9 0a 01 00 00       	jmp    c01038ac <default_alloc_pages+0x15a>
      struct Page *p = le2page(le, page_link);
c01037a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037a5:	83 e8 0c             	sub    $0xc,%eax
c01037a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
      if(p->property >= n){
c01037ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01037ae:	8b 40 08             	mov    0x8(%eax),%eax
c01037b1:	3b 45 08             	cmp    0x8(%ebp),%eax
c01037b4:	0f 82 f2 00 00 00    	jb     c01038ac <default_alloc_pages+0x15a>
        int i;
        for(i=0;i<n;i++){
c01037ba:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01037c1:	eb 7c                	jmp    c010383f <default_alloc_pages+0xed>
c01037c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037c6:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01037c9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01037cc:	8b 40 04             	mov    0x4(%eax),%eax
          len = list_next(le);
c01037cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
          struct Page *pp = le2page(le, page_link);
c01037d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037d5:	83 e8 0c             	sub    $0xc,%eax
c01037d8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
          SetPageReserved(pp);
c01037db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01037de:	83 c0 04             	add    $0x4,%eax
c01037e1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01037e8:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01037eb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01037ee:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01037f1:	0f ab 10             	bts    %edx,(%eax)
          ClearPageProperty(pp);
c01037f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01037f7:	83 c0 04             	add    $0x4,%eax
c01037fa:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0103801:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103804:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103807:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010380a:	0f b3 10             	btr    %edx,(%eax)
c010380d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103810:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103813:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103816:	8b 40 04             	mov    0x4(%eax),%eax
c0103819:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010381c:	8b 12                	mov    (%edx),%edx
c010381e:	89 55 c8             	mov    %edx,-0x38(%ebp)
c0103821:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103824:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103827:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010382a:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010382d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103830:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103833:	89 10                	mov    %edx,(%eax)
          list_del(le);
          le = len;
c0103835:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103838:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while((le=list_next(le)) != &free_list) {
      struct Page *p = le2page(le, page_link);
      if(p->property >= n){
        int i;
        for(i=0;i<n;i++){
c010383b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c010383f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103842:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103845:	0f 82 78 ff ff ff    	jb     c01037c3 <default_alloc_pages+0x71>
          SetPageReserved(pp);
          ClearPageProperty(pp);
          list_del(le);
          le = len;
        }
        if(p->property>n){
c010384b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010384e:	8b 40 08             	mov    0x8(%eax),%eax
c0103851:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103854:	76 12                	jbe    c0103868 <default_alloc_pages+0x116>
          (le2page(le,page_link))->property = p->property - n;
c0103856:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103859:	8d 50 f4             	lea    -0xc(%eax),%edx
c010385c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010385f:	8b 40 08             	mov    0x8(%eax),%eax
c0103862:	2b 45 08             	sub    0x8(%ebp),%eax
c0103865:	89 42 08             	mov    %eax,0x8(%edx)
        }
        ClearPageProperty(p);
c0103868:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010386b:	83 c0 04             	add    $0x4,%eax
c010386e:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0103875:	89 45 bc             	mov    %eax,-0x44(%ebp)
c0103878:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010387b:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010387e:	0f b3 10             	btr    %edx,(%eax)
        SetPageReserved(p);
c0103881:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103884:	83 c0 04             	add    $0x4,%eax
c0103887:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
c010388e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103891:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103894:	8b 55 b8             	mov    -0x48(%ebp),%edx
c0103897:	0f ab 10             	bts    %edx,(%eax)
        nr_free -= n;
c010389a:	a1 c4 53 1c c0       	mov    0xc01c53c4,%eax
c010389f:	2b 45 08             	sub    0x8(%ebp),%eax
c01038a2:	a3 c4 53 1c c0       	mov    %eax,0xc01c53c4
        return p;
c01038a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01038aa:	eb 21                	jmp    c01038cd <default_alloc_pages+0x17b>
c01038ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038af:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01038b2:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01038b5:	8b 40 04             	mov    0x4(%eax),%eax
        return NULL;
    }
    list_entry_t *le, *len;
    le = &free_list;

    while((le=list_next(le)) != &free_list) {
c01038b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01038bb:	81 7d f4 bc 53 1c c0 	cmpl   $0xc01c53bc,-0xc(%ebp)
c01038c2:	0f 85 da fe ff ff    	jne    c01037a2 <default_alloc_pages+0x50>
        SetPageReserved(p);
        nr_free -= n;
        return p;
      }
    }
    return NULL;
c01038c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01038cd:	c9                   	leave  
c01038ce:	c3                   	ret    

c01038cf <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c01038cf:	55                   	push   %ebp
c01038d0:	89 e5                	mov    %esp,%ebp
c01038d2:	53                   	push   %ebx
c01038d3:	83 ec 64             	sub    $0x64,%esp
    assert(n > 0);
c01038d6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01038da:	75 24                	jne    c0103900 <default_free_pages+0x31>
c01038dc:	c7 44 24 0c b0 e2 10 	movl   $0xc010e2b0,0xc(%esp)
c01038e3:	c0 
c01038e4:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c01038eb:	c0 
c01038ec:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c01038f3:	00 
c01038f4:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c01038fb:	e8 bc d4 ff ff       	call   c0100dbc <__panic>
    assert(PageReserved(base));
c0103900:	8b 45 08             	mov    0x8(%ebp),%eax
c0103903:	83 c0 04             	add    $0x4,%eax
c0103906:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010390d:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0103910:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103913:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0103916:	0f a3 10             	bt     %edx,(%eax)
c0103919:	19 db                	sbb    %ebx,%ebx
c010391b:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
    return oldbit != 0;
c010391e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0103922:	0f 95 c0             	setne  %al
c0103925:	0f b6 c0             	movzbl %al,%eax
c0103928:	85 c0                	test   %eax,%eax
c010392a:	75 24                	jne    c0103950 <default_free_pages+0x81>
c010392c:	c7 44 24 0c f1 e2 10 	movl   $0xc010e2f1,0xc(%esp)
c0103933:	c0 
c0103934:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c010393b:	c0 
c010393c:	c7 44 24 04 7a 00 00 	movl   $0x7a,0x4(%esp)
c0103943:	00 
c0103944:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c010394b:	e8 6c d4 ff ff       	call   c0100dbc <__panic>

    list_entry_t *le = &free_list;
c0103950:	c7 45 f4 bc 53 1c c0 	movl   $0xc01c53bc,-0xc(%ebp)
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c0103957:	eb 11                	jmp    c010396a <default_free_pages+0x9b>
      p = le2page(le, page_link);
c0103959:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010395c:	83 e8 0c             	sub    $0xc,%eax
c010395f:	89 45 f0             	mov    %eax,-0x10(%ebp)
      if(p>base){
c0103962:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103965:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103968:	77 1a                	ja     c0103984 <default_free_pages+0xb5>
        break;
c010396a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010396d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0103970:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103973:	8b 40 04             	mov    0x4(%eax),%eax
    assert(n > 0);
    assert(PageReserved(base));

    list_entry_t *le = &free_list;
    struct Page * p;
    while((le=list_next(le)) != &free_list) {
c0103976:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103979:	81 7d f4 bc 53 1c c0 	cmpl   $0xc01c53bc,-0xc(%ebp)
c0103980:	75 d7                	jne    c0103959 <default_free_pages+0x8a>
c0103982:	eb 01                	jmp    c0103985 <default_free_pages+0xb6>
      p = le2page(le, page_link);
      if(p>base){
        break;
c0103984:	90                   	nop
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c0103985:	8b 45 08             	mov    0x8(%ebp),%eax
c0103988:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010398b:	eb 4b                	jmp    c01039d8 <default_free_pages+0x109>
      list_add_before(le, &(p->page_link));
c010398d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103990:	8d 50 0c             	lea    0xc(%eax),%edx
c0103993:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103996:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0103999:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010399c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010399f:	8b 00                	mov    (%eax),%eax
c01039a1:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01039a4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01039a7:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01039aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01039ad:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01039b0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01039b3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01039b6:	89 10                	mov    %edx,(%eax)
c01039b8:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01039bb:	8b 10                	mov    (%eax),%edx
c01039bd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01039c0:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01039c3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01039c6:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01039c9:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01039cc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01039cf:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01039d2:	89 10                	mov    %edx,(%eax)
      if(p>base){
        break;
      }
    }
    //list_add_before(le, base->page_link);
    for(p=base;p<base+n;p++){
c01039d4:	83 45 f0 20          	addl   $0x20,-0x10(%ebp)
c01039d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01039db:	c1 e0 05             	shl    $0x5,%eax
c01039de:	03 45 08             	add    0x8(%ebp),%eax
c01039e1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01039e4:	77 a7                	ja     c010398d <default_free_pages+0xbe>
      list_add_before(le, &(p->page_link));
    }
    base->flags = 0;
c01039e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01039e9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    set_page_ref(base, 0);
c01039f0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01039f7:	00 
c01039f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01039fb:	89 04 24             	mov    %eax,(%esp)
c01039fe:	e8 cf fb ff ff       	call   c01035d2 <set_page_ref>
    ClearPageProperty(base);
c0103a03:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a06:	83 c0 04             	add    $0x4,%eax
c0103a09:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0103a10:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a13:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103a16:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0103a19:	0f b3 10             	btr    %edx,(%eax)
    SetPageProperty(base);
c0103a1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a1f:	83 c0 04             	add    $0x4,%eax
c0103a22:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0103a29:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103a2c:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0103a2f:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0103a32:	0f ab 10             	bts    %edx,(%eax)
    base->property = n;
c0103a35:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a38:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103a3b:	89 50 08             	mov    %edx,0x8(%eax)
    
    p = le2page(le,page_link) ;
c0103a3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a41:	83 e8 0c             	sub    $0xc,%eax
c0103a44:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if( base+n == p ){
c0103a47:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a4a:	c1 e0 05             	shl    $0x5,%eax
c0103a4d:	03 45 08             	add    0x8(%ebp),%eax
c0103a50:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103a53:	75 1e                	jne    c0103a73 <default_free_pages+0x1a4>
      base->property += p->property;
c0103a55:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a58:	8b 50 08             	mov    0x8(%eax),%edx
c0103a5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a5e:	8b 40 08             	mov    0x8(%eax),%eax
c0103a61:	01 c2                	add    %eax,%edx
c0103a63:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a66:	89 50 08             	mov    %edx,0x8(%eax)
      p->property = 0;
c0103a69:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a6c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    le = list_prev(&(base->page_link));
c0103a73:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a76:	83 c0 0c             	add    $0xc,%eax
c0103a79:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0103a7c:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103a7f:	8b 00                	mov    (%eax),%eax
c0103a81:	89 45 f4             	mov    %eax,-0xc(%ebp)
    p = le2page(le, page_link);
c0103a84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103a87:	83 e8 0c             	sub    $0xc,%eax
c0103a8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if(le!=&free_list && p==base-1){
c0103a8d:	81 7d f4 bc 53 1c c0 	cmpl   $0xc01c53bc,-0xc(%ebp)
c0103a94:	74 57                	je     c0103aed <default_free_pages+0x21e>
c0103a96:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a99:	83 e8 20             	sub    $0x20,%eax
c0103a9c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103a9f:	75 4c                	jne    c0103aed <default_free_pages+0x21e>
      while(le!=&free_list){
c0103aa1:	eb 41                	jmp    c0103ae4 <default_free_pages+0x215>
        if(p->property){
c0103aa3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103aa6:	8b 40 08             	mov    0x8(%eax),%eax
c0103aa9:	85 c0                	test   %eax,%eax
c0103aab:	74 20                	je     c0103acd <default_free_pages+0x1fe>
          p->property += base->property;
c0103aad:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ab0:	8b 50 08             	mov    0x8(%eax),%edx
c0103ab3:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ab6:	8b 40 08             	mov    0x8(%eax),%eax
c0103ab9:	01 c2                	add    %eax,%edx
c0103abb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103abe:	89 50 08             	mov    %edx,0x8(%eax)
          base->property = 0;
c0103ac1:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ac4:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
          break;
c0103acb:	eb 20                	jmp    c0103aed <default_free_pages+0x21e>
c0103acd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ad0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0103ad3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103ad6:	8b 00                	mov    (%eax),%eax
        }
        le = list_prev(le);
c0103ad8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        p = le2page(le,page_link);
c0103adb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ade:	83 e8 0c             	sub    $0xc,%eax
c0103ae1:	89 45 f0             	mov    %eax,-0x10(%ebp)
      p->property = 0;
    }
    le = list_prev(&(base->page_link));
    p = le2page(le, page_link);
    if(le!=&free_list && p==base-1){
      while(le!=&free_list){
c0103ae4:	81 7d f4 bc 53 1c c0 	cmpl   $0xc01c53bc,-0xc(%ebp)
c0103aeb:	75 b6                	jne    c0103aa3 <default_free_pages+0x1d4>
        }
        le = list_prev(le);
        p = le2page(le,page_link);
      }
    }
    nr_free += n;
c0103aed:	a1 c4 53 1c c0       	mov    0xc01c53c4,%eax
c0103af2:	03 45 0c             	add    0xc(%ebp),%eax
c0103af5:	a3 c4 53 1c c0       	mov    %eax,0xc01c53c4
    return ;
}
c0103afa:	83 c4 64             	add    $0x64,%esp
c0103afd:	5b                   	pop    %ebx
c0103afe:	5d                   	pop    %ebp
c0103aff:	c3                   	ret    

c0103b00 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103b00:	55                   	push   %ebp
c0103b01:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103b03:	a1 c4 53 1c c0       	mov    0xc01c53c4,%eax
}
c0103b08:	5d                   	pop    %ebp
c0103b09:	c3                   	ret    

c0103b0a <basic_check>:

static void
basic_check(void) {
c0103b0a:	55                   	push   %ebp
c0103b0b:	89 e5                	mov    %esp,%ebp
c0103b0d:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103b10:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103b17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b1a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b20:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103b23:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b2a:	e8 0e 16 00 00       	call   c010513d <alloc_pages>
c0103b2f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103b32:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103b36:	75 24                	jne    c0103b5c <basic_check+0x52>
c0103b38:	c7 44 24 0c 04 e3 10 	movl   $0xc010e304,0xc(%esp)
c0103b3f:	c0 
c0103b40:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103b47:	c0 
c0103b48:	c7 44 24 04 ad 00 00 	movl   $0xad,0x4(%esp)
c0103b4f:	00 
c0103b50:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103b57:	e8 60 d2 ff ff       	call   c0100dbc <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103b5c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b63:	e8 d5 15 00 00       	call   c010513d <alloc_pages>
c0103b68:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103b6b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103b6f:	75 24                	jne    c0103b95 <basic_check+0x8b>
c0103b71:	c7 44 24 0c 20 e3 10 	movl   $0xc010e320,0xc(%esp)
c0103b78:	c0 
c0103b79:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103b80:	c0 
c0103b81:	c7 44 24 04 ae 00 00 	movl   $0xae,0x4(%esp)
c0103b88:	00 
c0103b89:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103b90:	e8 27 d2 ff ff       	call   c0100dbc <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103b95:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103b9c:	e8 9c 15 00 00       	call   c010513d <alloc_pages>
c0103ba1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103ba4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103ba8:	75 24                	jne    c0103bce <basic_check+0xc4>
c0103baa:	c7 44 24 0c 3c e3 10 	movl   $0xc010e33c,0xc(%esp)
c0103bb1:	c0 
c0103bb2:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103bb9:	c0 
c0103bba:	c7 44 24 04 af 00 00 	movl   $0xaf,0x4(%esp)
c0103bc1:	00 
c0103bc2:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103bc9:	e8 ee d1 ff ff       	call   c0100dbc <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103bce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bd1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103bd4:	74 10                	je     c0103be6 <basic_check+0xdc>
c0103bd6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bd9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103bdc:	74 08                	je     c0103be6 <basic_check+0xdc>
c0103bde:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103be1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103be4:	75 24                	jne    c0103c0a <basic_check+0x100>
c0103be6:	c7 44 24 0c 58 e3 10 	movl   $0xc010e358,0xc(%esp)
c0103bed:	c0 
c0103bee:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103bf5:	c0 
c0103bf6:	c7 44 24 04 b1 00 00 	movl   $0xb1,0x4(%esp)
c0103bfd:	00 
c0103bfe:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103c05:	e8 b2 d1 ff ff       	call   c0100dbc <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103c0a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c0d:	89 04 24             	mov    %eax,(%esp)
c0103c10:	e8 b3 f9 ff ff       	call   c01035c8 <page_ref>
c0103c15:	85 c0                	test   %eax,%eax
c0103c17:	75 1e                	jne    c0103c37 <basic_check+0x12d>
c0103c19:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c1c:	89 04 24             	mov    %eax,(%esp)
c0103c1f:	e8 a4 f9 ff ff       	call   c01035c8 <page_ref>
c0103c24:	85 c0                	test   %eax,%eax
c0103c26:	75 0f                	jne    c0103c37 <basic_check+0x12d>
c0103c28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c2b:	89 04 24             	mov    %eax,(%esp)
c0103c2e:	e8 95 f9 ff ff       	call   c01035c8 <page_ref>
c0103c33:	85 c0                	test   %eax,%eax
c0103c35:	74 24                	je     c0103c5b <basic_check+0x151>
c0103c37:	c7 44 24 0c 7c e3 10 	movl   $0xc010e37c,0xc(%esp)
c0103c3e:	c0 
c0103c3f:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103c46:	c0 
c0103c47:	c7 44 24 04 b2 00 00 	movl   $0xb2,0x4(%esp)
c0103c4e:	00 
c0103c4f:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103c56:	e8 61 d1 ff ff       	call   c0100dbc <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103c5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c5e:	89 04 24             	mov    %eax,(%esp)
c0103c61:	e8 4c f9 ff ff       	call   c01035b2 <page2pa>
c0103c66:	8b 15 80 32 1c c0    	mov    0xc01c3280,%edx
c0103c6c:	c1 e2 0c             	shl    $0xc,%edx
c0103c6f:	39 d0                	cmp    %edx,%eax
c0103c71:	72 24                	jb     c0103c97 <basic_check+0x18d>
c0103c73:	c7 44 24 0c b8 e3 10 	movl   $0xc010e3b8,0xc(%esp)
c0103c7a:	c0 
c0103c7b:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103c82:	c0 
c0103c83:	c7 44 24 04 b4 00 00 	movl   $0xb4,0x4(%esp)
c0103c8a:	00 
c0103c8b:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103c92:	e8 25 d1 ff ff       	call   c0100dbc <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103c97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c9a:	89 04 24             	mov    %eax,(%esp)
c0103c9d:	e8 10 f9 ff ff       	call   c01035b2 <page2pa>
c0103ca2:	8b 15 80 32 1c c0    	mov    0xc01c3280,%edx
c0103ca8:	c1 e2 0c             	shl    $0xc,%edx
c0103cab:	39 d0                	cmp    %edx,%eax
c0103cad:	72 24                	jb     c0103cd3 <basic_check+0x1c9>
c0103caf:	c7 44 24 0c d5 e3 10 	movl   $0xc010e3d5,0xc(%esp)
c0103cb6:	c0 
c0103cb7:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103cbe:	c0 
c0103cbf:	c7 44 24 04 b5 00 00 	movl   $0xb5,0x4(%esp)
c0103cc6:	00 
c0103cc7:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103cce:	e8 e9 d0 ff ff       	call   c0100dbc <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103cd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cd6:	89 04 24             	mov    %eax,(%esp)
c0103cd9:	e8 d4 f8 ff ff       	call   c01035b2 <page2pa>
c0103cde:	8b 15 80 32 1c c0    	mov    0xc01c3280,%edx
c0103ce4:	c1 e2 0c             	shl    $0xc,%edx
c0103ce7:	39 d0                	cmp    %edx,%eax
c0103ce9:	72 24                	jb     c0103d0f <basic_check+0x205>
c0103ceb:	c7 44 24 0c f2 e3 10 	movl   $0xc010e3f2,0xc(%esp)
c0103cf2:	c0 
c0103cf3:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103cfa:	c0 
c0103cfb:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c0103d02:	00 
c0103d03:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103d0a:	e8 ad d0 ff ff       	call   c0100dbc <__panic>

    list_entry_t free_list_store = free_list;
c0103d0f:	a1 bc 53 1c c0       	mov    0xc01c53bc,%eax
c0103d14:	8b 15 c0 53 1c c0    	mov    0xc01c53c0,%edx
c0103d1a:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103d1d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0103d20:	c7 45 e0 bc 53 1c c0 	movl   $0xc01c53bc,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103d27:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d2a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0103d2d:	89 50 04             	mov    %edx,0x4(%eax)
c0103d30:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d33:	8b 50 04             	mov    0x4(%eax),%edx
c0103d36:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103d39:	89 10                	mov    %edx,(%eax)
c0103d3b:	c7 45 dc bc 53 1c c0 	movl   $0xc01c53bc,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0103d42:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103d45:	8b 40 04             	mov    0x4(%eax),%eax
c0103d48:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0103d4b:	0f 94 c0             	sete   %al
c0103d4e:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0103d51:	85 c0                	test   %eax,%eax
c0103d53:	75 24                	jne    c0103d79 <basic_check+0x26f>
c0103d55:	c7 44 24 0c 0f e4 10 	movl   $0xc010e40f,0xc(%esp)
c0103d5c:	c0 
c0103d5d:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103d64:	c0 
c0103d65:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
c0103d6c:	00 
c0103d6d:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103d74:	e8 43 d0 ff ff       	call   c0100dbc <__panic>

    unsigned int nr_free_store = nr_free;
c0103d79:	a1 c4 53 1c c0       	mov    0xc01c53c4,%eax
c0103d7e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0103d81:	c7 05 c4 53 1c c0 00 	movl   $0x0,0xc01c53c4
c0103d88:	00 00 00 

    assert(alloc_page() == NULL);
c0103d8b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103d92:	e8 a6 13 00 00       	call   c010513d <alloc_pages>
c0103d97:	85 c0                	test   %eax,%eax
c0103d99:	74 24                	je     c0103dbf <basic_check+0x2b5>
c0103d9b:	c7 44 24 0c 26 e4 10 	movl   $0xc010e426,0xc(%esp)
c0103da2:	c0 
c0103da3:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103daa:	c0 
c0103dab:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
c0103db2:	00 
c0103db3:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103dba:	e8 fd cf ff ff       	call   c0100dbc <__panic>

    free_page(p0);
c0103dbf:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103dc6:	00 
c0103dc7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103dca:	89 04 24             	mov    %eax,(%esp)
c0103dcd:	e8 d6 13 00 00       	call   c01051a8 <free_pages>
    free_page(p1);
c0103dd2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103dd9:	00 
c0103dda:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ddd:	89 04 24             	mov    %eax,(%esp)
c0103de0:	e8 c3 13 00 00       	call   c01051a8 <free_pages>
    free_page(p2);
c0103de5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103dec:	00 
c0103ded:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103df0:	89 04 24             	mov    %eax,(%esp)
c0103df3:	e8 b0 13 00 00       	call   c01051a8 <free_pages>
    assert(nr_free == 3);
c0103df8:	a1 c4 53 1c c0       	mov    0xc01c53c4,%eax
c0103dfd:	83 f8 03             	cmp    $0x3,%eax
c0103e00:	74 24                	je     c0103e26 <basic_check+0x31c>
c0103e02:	c7 44 24 0c 3b e4 10 	movl   $0xc010e43b,0xc(%esp)
c0103e09:	c0 
c0103e0a:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103e11:	c0 
c0103e12:	c7 44 24 04 c4 00 00 	movl   $0xc4,0x4(%esp)
c0103e19:	00 
c0103e1a:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103e21:	e8 96 cf ff ff       	call   c0100dbc <__panic>

    assert((p0 = alloc_page()) != NULL);
c0103e26:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e2d:	e8 0b 13 00 00       	call   c010513d <alloc_pages>
c0103e32:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103e35:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103e39:	75 24                	jne    c0103e5f <basic_check+0x355>
c0103e3b:	c7 44 24 0c 04 e3 10 	movl   $0xc010e304,0xc(%esp)
c0103e42:	c0 
c0103e43:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103e4a:	c0 
c0103e4b:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0103e52:	00 
c0103e53:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103e5a:	e8 5d cf ff ff       	call   c0100dbc <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103e5f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e66:	e8 d2 12 00 00       	call   c010513d <alloc_pages>
c0103e6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103e6e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103e72:	75 24                	jne    c0103e98 <basic_check+0x38e>
c0103e74:	c7 44 24 0c 20 e3 10 	movl   $0xc010e320,0xc(%esp)
c0103e7b:	c0 
c0103e7c:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103e83:	c0 
c0103e84:	c7 44 24 04 c7 00 00 	movl   $0xc7,0x4(%esp)
c0103e8b:	00 
c0103e8c:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103e93:	e8 24 cf ff ff       	call   c0100dbc <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103e98:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e9f:	e8 99 12 00 00       	call   c010513d <alloc_pages>
c0103ea4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103ea7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103eab:	75 24                	jne    c0103ed1 <basic_check+0x3c7>
c0103ead:	c7 44 24 0c 3c e3 10 	movl   $0xc010e33c,0xc(%esp)
c0103eb4:	c0 
c0103eb5:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103ebc:	c0 
c0103ebd:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c0103ec4:	00 
c0103ec5:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103ecc:	e8 eb ce ff ff       	call   c0100dbc <__panic>

    assert(alloc_page() == NULL);
c0103ed1:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103ed8:	e8 60 12 00 00       	call   c010513d <alloc_pages>
c0103edd:	85 c0                	test   %eax,%eax
c0103edf:	74 24                	je     c0103f05 <basic_check+0x3fb>
c0103ee1:	c7 44 24 0c 26 e4 10 	movl   $0xc010e426,0xc(%esp)
c0103ee8:	c0 
c0103ee9:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103ef0:	c0 
c0103ef1:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c0103ef8:	00 
c0103ef9:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103f00:	e8 b7 ce ff ff       	call   c0100dbc <__panic>

    free_page(p0);
c0103f05:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0103f0c:	00 
c0103f0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103f10:	89 04 24             	mov    %eax,(%esp)
c0103f13:	e8 90 12 00 00       	call   c01051a8 <free_pages>
c0103f18:	c7 45 d8 bc 53 1c c0 	movl   $0xc01c53bc,-0x28(%ebp)
c0103f1f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0103f22:	8b 40 04             	mov    0x4(%eax),%eax
c0103f25:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0103f28:	0f 94 c0             	sete   %al
c0103f2b:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0103f2e:	85 c0                	test   %eax,%eax
c0103f30:	74 24                	je     c0103f56 <basic_check+0x44c>
c0103f32:	c7 44 24 0c 48 e4 10 	movl   $0xc010e448,0xc(%esp)
c0103f39:	c0 
c0103f3a:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103f41:	c0 
c0103f42:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c0103f49:	00 
c0103f4a:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103f51:	e8 66 ce ff ff       	call   c0100dbc <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0103f56:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f5d:	e8 db 11 00 00       	call   c010513d <alloc_pages>
c0103f62:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103f65:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103f68:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103f6b:	74 24                	je     c0103f91 <basic_check+0x487>
c0103f6d:	c7 44 24 0c 60 e4 10 	movl   $0xc010e460,0xc(%esp)
c0103f74:	c0 
c0103f75:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103f7c:	c0 
c0103f7d:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c0103f84:	00 
c0103f85:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103f8c:	e8 2b ce ff ff       	call   c0100dbc <__panic>
    assert(alloc_page() == NULL);
c0103f91:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103f98:	e8 a0 11 00 00       	call   c010513d <alloc_pages>
c0103f9d:	85 c0                	test   %eax,%eax
c0103f9f:	74 24                	je     c0103fc5 <basic_check+0x4bb>
c0103fa1:	c7 44 24 0c 26 e4 10 	movl   $0xc010e426,0xc(%esp)
c0103fa8:	c0 
c0103fa9:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103fb0:	c0 
c0103fb1:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c0103fb8:	00 
c0103fb9:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103fc0:	e8 f7 cd ff ff       	call   c0100dbc <__panic>

    assert(nr_free == 0);
c0103fc5:	a1 c4 53 1c c0       	mov    0xc01c53c4,%eax
c0103fca:	85 c0                	test   %eax,%eax
c0103fcc:	74 24                	je     c0103ff2 <basic_check+0x4e8>
c0103fce:	c7 44 24 0c 79 e4 10 	movl   $0xc010e479,0xc(%esp)
c0103fd5:	c0 
c0103fd6:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0103fdd:	c0 
c0103fde:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c0103fe5:	00 
c0103fe6:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0103fed:	e8 ca cd ff ff       	call   c0100dbc <__panic>
    free_list = free_list_store;
c0103ff2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103ff5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103ff8:	a3 bc 53 1c c0       	mov    %eax,0xc01c53bc
c0103ffd:	89 15 c0 53 1c c0    	mov    %edx,0xc01c53c0
    nr_free = nr_free_store;
c0104003:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104006:	a3 c4 53 1c c0       	mov    %eax,0xc01c53c4

    free_page(p);
c010400b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104012:	00 
c0104013:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104016:	89 04 24             	mov    %eax,(%esp)
c0104019:	e8 8a 11 00 00       	call   c01051a8 <free_pages>
    free_page(p1);
c010401e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104025:	00 
c0104026:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104029:	89 04 24             	mov    %eax,(%esp)
c010402c:	e8 77 11 00 00       	call   c01051a8 <free_pages>
    free_page(p2);
c0104031:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104038:	00 
c0104039:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010403c:	89 04 24             	mov    %eax,(%esp)
c010403f:	e8 64 11 00 00       	call   c01051a8 <free_pages>
}
c0104044:	c9                   	leave  
c0104045:	c3                   	ret    

c0104046 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0104046:	55                   	push   %ebp
c0104047:	89 e5                	mov    %esp,%ebp
c0104049:	53                   	push   %ebx
c010404a:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0104050:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0104057:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c010405e:	c7 45 ec bc 53 1c c0 	movl   $0xc01c53bc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104065:	eb 6b                	jmp    c01040d2 <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c0104067:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010406a:	83 e8 0c             	sub    $0xc,%eax
c010406d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0104070:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104073:	83 c0 04             	add    $0x4,%eax
c0104076:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c010407d:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104080:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104083:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104086:	0f a3 10             	bt     %edx,(%eax)
c0104089:	19 db                	sbb    %ebx,%ebx
c010408b:	89 5d c8             	mov    %ebx,-0x38(%ebp)
    return oldbit != 0;
c010408e:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0104092:	0f 95 c0             	setne  %al
c0104095:	0f b6 c0             	movzbl %al,%eax
c0104098:	85 c0                	test   %eax,%eax
c010409a:	75 24                	jne    c01040c0 <default_check+0x7a>
c010409c:	c7 44 24 0c 86 e4 10 	movl   $0xc010e486,0xc(%esp)
c01040a3:	c0 
c01040a4:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c01040ab:	c0 
c01040ac:	c7 44 24 04 e4 00 00 	movl   $0xe4,0x4(%esp)
c01040b3:	00 
c01040b4:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c01040bb:	e8 fc cc ff ff       	call   c0100dbc <__panic>
        count ++, total += p->property;
c01040c0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01040c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01040c7:	8b 50 08             	mov    0x8(%eax),%edx
c01040ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01040cd:	01 d0                	add    %edx,%eax
c01040cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01040d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01040d5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01040d8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01040db:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01040de:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01040e1:	81 7d ec bc 53 1c c0 	cmpl   $0xc01c53bc,-0x14(%ebp)
c01040e8:	0f 85 79 ff ff ff    	jne    c0104067 <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c01040ee:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01040f1:	e8 e4 10 00 00       	call   c01051da <nr_free_pages>
c01040f6:	39 c3                	cmp    %eax,%ebx
c01040f8:	74 24                	je     c010411e <default_check+0xd8>
c01040fa:	c7 44 24 0c 96 e4 10 	movl   $0xc010e496,0xc(%esp)
c0104101:	c0 
c0104102:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0104109:	c0 
c010410a:	c7 44 24 04 e7 00 00 	movl   $0xe7,0x4(%esp)
c0104111:	00 
c0104112:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0104119:	e8 9e cc ff ff       	call   c0100dbc <__panic>

    basic_check();
c010411e:	e8 e7 f9 ff ff       	call   c0103b0a <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0104123:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010412a:	e8 0e 10 00 00       	call   c010513d <alloc_pages>
c010412f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c0104132:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104136:	75 24                	jne    c010415c <default_check+0x116>
c0104138:	c7 44 24 0c af e4 10 	movl   $0xc010e4af,0xc(%esp)
c010413f:	c0 
c0104140:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0104147:	c0 
c0104148:	c7 44 24 04 ec 00 00 	movl   $0xec,0x4(%esp)
c010414f:	00 
c0104150:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0104157:	e8 60 cc ff ff       	call   c0100dbc <__panic>
    assert(!PageProperty(p0));
c010415c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010415f:	83 c0 04             	add    $0x4,%eax
c0104162:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c0104169:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010416c:	8b 45 bc             	mov    -0x44(%ebp),%eax
c010416f:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104172:	0f a3 10             	bt     %edx,(%eax)
c0104175:	19 db                	sbb    %ebx,%ebx
c0104177:	89 5d b8             	mov    %ebx,-0x48(%ebp)
    return oldbit != 0;
c010417a:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010417e:	0f 95 c0             	setne  %al
c0104181:	0f b6 c0             	movzbl %al,%eax
c0104184:	85 c0                	test   %eax,%eax
c0104186:	74 24                	je     c01041ac <default_check+0x166>
c0104188:	c7 44 24 0c ba e4 10 	movl   $0xc010e4ba,0xc(%esp)
c010418f:	c0 
c0104190:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0104197:	c0 
c0104198:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c010419f:	00 
c01041a0:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c01041a7:	e8 10 cc ff ff       	call   c0100dbc <__panic>

    list_entry_t free_list_store = free_list;
c01041ac:	a1 bc 53 1c c0       	mov    0xc01c53bc,%eax
c01041b1:	8b 15 c0 53 1c c0    	mov    0xc01c53c0,%edx
c01041b7:	89 45 80             	mov    %eax,-0x80(%ebp)
c01041ba:	89 55 84             	mov    %edx,-0x7c(%ebp)
c01041bd:	c7 45 b4 bc 53 1c c0 	movl   $0xc01c53bc,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01041c4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01041c7:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01041ca:	89 50 04             	mov    %edx,0x4(%eax)
c01041cd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01041d0:	8b 50 04             	mov    0x4(%eax),%edx
c01041d3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01041d6:	89 10                	mov    %edx,(%eax)
c01041d8:	c7 45 b0 bc 53 1c c0 	movl   $0xc01c53bc,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01041df:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01041e2:	8b 40 04             	mov    0x4(%eax),%eax
c01041e5:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c01041e8:	0f 94 c0             	sete   %al
c01041eb:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c01041ee:	85 c0                	test   %eax,%eax
c01041f0:	75 24                	jne    c0104216 <default_check+0x1d0>
c01041f2:	c7 44 24 0c 0f e4 10 	movl   $0xc010e40f,0xc(%esp)
c01041f9:	c0 
c01041fa:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0104201:	c0 
c0104202:	c7 44 24 04 f1 00 00 	movl   $0xf1,0x4(%esp)
c0104209:	00 
c010420a:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0104211:	e8 a6 cb ff ff       	call   c0100dbc <__panic>
    assert(alloc_page() == NULL);
c0104216:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010421d:	e8 1b 0f 00 00       	call   c010513d <alloc_pages>
c0104222:	85 c0                	test   %eax,%eax
c0104224:	74 24                	je     c010424a <default_check+0x204>
c0104226:	c7 44 24 0c 26 e4 10 	movl   $0xc010e426,0xc(%esp)
c010422d:	c0 
c010422e:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0104235:	c0 
c0104236:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c010423d:	00 
c010423e:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0104245:	e8 72 cb ff ff       	call   c0100dbc <__panic>

    unsigned int nr_free_store = nr_free;
c010424a:	a1 c4 53 1c c0       	mov    0xc01c53c4,%eax
c010424f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0104252:	c7 05 c4 53 1c c0 00 	movl   $0x0,0xc01c53c4
c0104259:	00 00 00 

    free_pages(p0 + 2, 3);
c010425c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010425f:	83 c0 40             	add    $0x40,%eax
c0104262:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c0104269:	00 
c010426a:	89 04 24             	mov    %eax,(%esp)
c010426d:	e8 36 0f 00 00       	call   c01051a8 <free_pages>
    assert(alloc_pages(4) == NULL);
c0104272:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0104279:	e8 bf 0e 00 00       	call   c010513d <alloc_pages>
c010427e:	85 c0                	test   %eax,%eax
c0104280:	74 24                	je     c01042a6 <default_check+0x260>
c0104282:	c7 44 24 0c cc e4 10 	movl   $0xc010e4cc,0xc(%esp)
c0104289:	c0 
c010428a:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0104291:	c0 
c0104292:	c7 44 24 04 f8 00 00 	movl   $0xf8,0x4(%esp)
c0104299:	00 
c010429a:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c01042a1:	e8 16 cb ff ff       	call   c0100dbc <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01042a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042a9:	83 c0 40             	add    $0x40,%eax
c01042ac:	83 c0 04             	add    $0x4,%eax
c01042af:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c01042b6:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01042b9:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01042bc:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01042bf:	0f a3 10             	bt     %edx,(%eax)
c01042c2:	19 db                	sbb    %ebx,%ebx
c01042c4:	89 5d a4             	mov    %ebx,-0x5c(%ebp)
    return oldbit != 0;
c01042c7:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c01042cb:	0f 95 c0             	setne  %al
c01042ce:	0f b6 c0             	movzbl %al,%eax
c01042d1:	85 c0                	test   %eax,%eax
c01042d3:	74 0e                	je     c01042e3 <default_check+0x29d>
c01042d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01042d8:	83 c0 40             	add    $0x40,%eax
c01042db:	8b 40 08             	mov    0x8(%eax),%eax
c01042de:	83 f8 03             	cmp    $0x3,%eax
c01042e1:	74 24                	je     c0104307 <default_check+0x2c1>
c01042e3:	c7 44 24 0c e4 e4 10 	movl   $0xc010e4e4,0xc(%esp)
c01042ea:	c0 
c01042eb:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c01042f2:	c0 
c01042f3:	c7 44 24 04 f9 00 00 	movl   $0xf9,0x4(%esp)
c01042fa:	00 
c01042fb:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0104302:	e8 b5 ca ff ff       	call   c0100dbc <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0104307:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c010430e:	e8 2a 0e 00 00       	call   c010513d <alloc_pages>
c0104313:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0104316:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010431a:	75 24                	jne    c0104340 <default_check+0x2fa>
c010431c:	c7 44 24 0c 10 e5 10 	movl   $0xc010e510,0xc(%esp)
c0104323:	c0 
c0104324:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c010432b:	c0 
c010432c:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0104333:	00 
c0104334:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c010433b:	e8 7c ca ff ff       	call   c0100dbc <__panic>
    assert(alloc_page() == NULL);
c0104340:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104347:	e8 f1 0d 00 00       	call   c010513d <alloc_pages>
c010434c:	85 c0                	test   %eax,%eax
c010434e:	74 24                	je     c0104374 <default_check+0x32e>
c0104350:	c7 44 24 0c 26 e4 10 	movl   $0xc010e426,0xc(%esp)
c0104357:	c0 
c0104358:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c010435f:	c0 
c0104360:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c0104367:	00 
c0104368:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c010436f:	e8 48 ca ff ff       	call   c0100dbc <__panic>
    assert(p0 + 2 == p1);
c0104374:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104377:	83 c0 40             	add    $0x40,%eax
c010437a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010437d:	74 24                	je     c01043a3 <default_check+0x35d>
c010437f:	c7 44 24 0c 2e e5 10 	movl   $0xc010e52e,0xc(%esp)
c0104386:	c0 
c0104387:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c010438e:	c0 
c010438f:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0104396:	00 
c0104397:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c010439e:	e8 19 ca ff ff       	call   c0100dbc <__panic>

    p2 = p0 + 1;
c01043a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043a6:	83 c0 20             	add    $0x20,%eax
c01043a9:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c01043ac:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01043b3:	00 
c01043b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043b7:	89 04 24             	mov    %eax,(%esp)
c01043ba:	e8 e9 0d 00 00       	call   c01051a8 <free_pages>
    free_pages(p1, 3);
c01043bf:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01043c6:	00 
c01043c7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01043ca:	89 04 24             	mov    %eax,(%esp)
c01043cd:	e8 d6 0d 00 00       	call   c01051a8 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c01043d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01043d5:	83 c0 04             	add    $0x4,%eax
c01043d8:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c01043df:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01043e2:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01043e5:	8b 55 a0             	mov    -0x60(%ebp),%edx
c01043e8:	0f a3 10             	bt     %edx,(%eax)
c01043eb:	19 db                	sbb    %ebx,%ebx
c01043ed:	89 5d 98             	mov    %ebx,-0x68(%ebp)
    return oldbit != 0;
c01043f0:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c01043f4:	0f 95 c0             	setne  %al
c01043f7:	0f b6 c0             	movzbl %al,%eax
c01043fa:	85 c0                	test   %eax,%eax
c01043fc:	74 0b                	je     c0104409 <default_check+0x3c3>
c01043fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104401:	8b 40 08             	mov    0x8(%eax),%eax
c0104404:	83 f8 01             	cmp    $0x1,%eax
c0104407:	74 24                	je     c010442d <default_check+0x3e7>
c0104409:	c7 44 24 0c 3c e5 10 	movl   $0xc010e53c,0xc(%esp)
c0104410:	c0 
c0104411:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0104418:	c0 
c0104419:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0104420:	00 
c0104421:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0104428:	e8 8f c9 ff ff       	call   c0100dbc <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c010442d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104430:	83 c0 04             	add    $0x4,%eax
c0104433:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c010443a:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010443d:	8b 45 90             	mov    -0x70(%ebp),%eax
c0104440:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0104443:	0f a3 10             	bt     %edx,(%eax)
c0104446:	19 db                	sbb    %ebx,%ebx
c0104448:	89 5d 8c             	mov    %ebx,-0x74(%ebp)
    return oldbit != 0;
c010444b:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c010444f:	0f 95 c0             	setne  %al
c0104452:	0f b6 c0             	movzbl %al,%eax
c0104455:	85 c0                	test   %eax,%eax
c0104457:	74 0b                	je     c0104464 <default_check+0x41e>
c0104459:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010445c:	8b 40 08             	mov    0x8(%eax),%eax
c010445f:	83 f8 03             	cmp    $0x3,%eax
c0104462:	74 24                	je     c0104488 <default_check+0x442>
c0104464:	c7 44 24 0c 64 e5 10 	movl   $0xc010e564,0xc(%esp)
c010446b:	c0 
c010446c:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0104473:	c0 
c0104474:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c010447b:	00 
c010447c:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0104483:	e8 34 c9 ff ff       	call   c0100dbc <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c0104488:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010448f:	e8 a9 0c 00 00       	call   c010513d <alloc_pages>
c0104494:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104497:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010449a:	83 e8 20             	sub    $0x20,%eax
c010449d:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01044a0:	74 24                	je     c01044c6 <default_check+0x480>
c01044a2:	c7 44 24 0c 8a e5 10 	movl   $0xc010e58a,0xc(%esp)
c01044a9:	c0 
c01044aa:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c01044b1:	c0 
c01044b2:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c01044b9:	00 
c01044ba:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c01044c1:	e8 f6 c8 ff ff       	call   c0100dbc <__panic>
    free_page(p0);
c01044c6:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01044cd:	00 
c01044ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01044d1:	89 04 24             	mov    %eax,(%esp)
c01044d4:	e8 cf 0c 00 00       	call   c01051a8 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c01044d9:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01044e0:	e8 58 0c 00 00       	call   c010513d <alloc_pages>
c01044e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01044e8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01044eb:	83 c0 20             	add    $0x20,%eax
c01044ee:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01044f1:	74 24                	je     c0104517 <default_check+0x4d1>
c01044f3:	c7 44 24 0c a8 e5 10 	movl   $0xc010e5a8,0xc(%esp)
c01044fa:	c0 
c01044fb:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0104502:	c0 
c0104503:	c7 44 24 04 06 01 00 	movl   $0x106,0x4(%esp)
c010450a:	00 
c010450b:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0104512:	e8 a5 c8 ff ff       	call   c0100dbc <__panic>

    free_pages(p0, 2);
c0104517:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010451e:	00 
c010451f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104522:	89 04 24             	mov    %eax,(%esp)
c0104525:	e8 7e 0c 00 00       	call   c01051a8 <free_pages>
    free_page(p2);
c010452a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104531:	00 
c0104532:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104535:	89 04 24             	mov    %eax,(%esp)
c0104538:	e8 6b 0c 00 00       	call   c01051a8 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c010453d:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104544:	e8 f4 0b 00 00       	call   c010513d <alloc_pages>
c0104549:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010454c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104550:	75 24                	jne    c0104576 <default_check+0x530>
c0104552:	c7 44 24 0c c8 e5 10 	movl   $0xc010e5c8,0xc(%esp)
c0104559:	c0 
c010455a:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0104561:	c0 
c0104562:	c7 44 24 04 0b 01 00 	movl   $0x10b,0x4(%esp)
c0104569:	00 
c010456a:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0104571:	e8 46 c8 ff ff       	call   c0100dbc <__panic>
    assert(alloc_page() == NULL);
c0104576:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010457d:	e8 bb 0b 00 00       	call   c010513d <alloc_pages>
c0104582:	85 c0                	test   %eax,%eax
c0104584:	74 24                	je     c01045aa <default_check+0x564>
c0104586:	c7 44 24 0c 26 e4 10 	movl   $0xc010e426,0xc(%esp)
c010458d:	c0 
c010458e:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0104595:	c0 
c0104596:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c010459d:	00 
c010459e:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c01045a5:	e8 12 c8 ff ff       	call   c0100dbc <__panic>

    assert(nr_free == 0);
c01045aa:	a1 c4 53 1c c0       	mov    0xc01c53c4,%eax
c01045af:	85 c0                	test   %eax,%eax
c01045b1:	74 24                	je     c01045d7 <default_check+0x591>
c01045b3:	c7 44 24 0c 79 e4 10 	movl   $0xc010e479,0xc(%esp)
c01045ba:	c0 
c01045bb:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c01045c2:	c0 
c01045c3:	c7 44 24 04 0e 01 00 	movl   $0x10e,0x4(%esp)
c01045ca:	00 
c01045cb:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c01045d2:	e8 e5 c7 ff ff       	call   c0100dbc <__panic>
    nr_free = nr_free_store;
c01045d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01045da:	a3 c4 53 1c c0       	mov    %eax,0xc01c53c4

    free_list = free_list_store;
c01045df:	8b 45 80             	mov    -0x80(%ebp),%eax
c01045e2:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01045e5:	a3 bc 53 1c c0       	mov    %eax,0xc01c53bc
c01045ea:	89 15 c0 53 1c c0    	mov    %edx,0xc01c53c0
    free_pages(p0, 5);
c01045f0:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c01045f7:	00 
c01045f8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01045fb:	89 04 24             	mov    %eax,(%esp)
c01045fe:	e8 a5 0b 00 00       	call   c01051a8 <free_pages>

    le = &free_list;
c0104603:	c7 45 ec bc 53 1c c0 	movl   $0xc01c53bc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010460a:	eb 1f                	jmp    c010462b <default_check+0x5e5>
        struct Page *p = le2page(le, page_link);
c010460c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010460f:	83 e8 0c             	sub    $0xc,%eax
c0104612:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c0104615:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0104619:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010461c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010461f:	8b 40 08             	mov    0x8(%eax),%eax
c0104622:	89 d1                	mov    %edx,%ecx
c0104624:	29 c1                	sub    %eax,%ecx
c0104626:	89 c8                	mov    %ecx,%eax
c0104628:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010462b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010462e:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104631:	8b 45 88             	mov    -0x78(%ebp),%eax
c0104634:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104637:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010463a:	81 7d ec bc 53 1c c0 	cmpl   $0xc01c53bc,-0x14(%ebp)
c0104641:	75 c9                	jne    c010460c <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0104643:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104647:	74 24                	je     c010466d <default_check+0x627>
c0104649:	c7 44 24 0c e6 e5 10 	movl   $0xc010e5e6,0xc(%esp)
c0104650:	c0 
c0104651:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0104658:	c0 
c0104659:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0104660:	00 
c0104661:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0104668:	e8 4f c7 ff ff       	call   c0100dbc <__panic>
    assert(total == 0);
c010466d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104671:	74 24                	je     c0104697 <default_check+0x651>
c0104673:	c7 44 24 0c f1 e5 10 	movl   $0xc010e5f1,0xc(%esp)
c010467a:	c0 
c010467b:	c7 44 24 08 b6 e2 10 	movl   $0xc010e2b6,0x8(%esp)
c0104682:	c0 
c0104683:	c7 44 24 04 1a 01 00 	movl   $0x11a,0x4(%esp)
c010468a:	00 
c010468b:	c7 04 24 cb e2 10 c0 	movl   $0xc010e2cb,(%esp)
c0104692:	e8 25 c7 ff ff       	call   c0100dbc <__panic>
}
c0104697:	81 c4 94 00 00 00    	add    $0x94,%esp
c010469d:	5b                   	pop    %ebx
c010469e:	5d                   	pop    %ebp
c010469f:	c3                   	ret    

c01046a0 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01046a0:	55                   	push   %ebp
c01046a1:	89 e5                	mov    %esp,%ebp
c01046a3:	53                   	push   %ebx
c01046a4:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01046a7:	9c                   	pushf  
c01046a8:	5b                   	pop    %ebx
c01046a9:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c01046ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01046af:	25 00 02 00 00       	and    $0x200,%eax
c01046b4:	85 c0                	test   %eax,%eax
c01046b6:	74 0c                	je     c01046c4 <__intr_save+0x24>
        intr_disable();
c01046b8:	e8 2d da ff ff       	call   c01020ea <intr_disable>
        return 1;
c01046bd:	b8 01 00 00 00       	mov    $0x1,%eax
c01046c2:	eb 05                	jmp    c01046c9 <__intr_save+0x29>
    }
    return 0;
c01046c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01046c9:	83 c4 14             	add    $0x14,%esp
c01046cc:	5b                   	pop    %ebx
c01046cd:	5d                   	pop    %ebp
c01046ce:	c3                   	ret    

c01046cf <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01046cf:	55                   	push   %ebp
c01046d0:	89 e5                	mov    %esp,%ebp
c01046d2:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01046d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01046d9:	74 05                	je     c01046e0 <__intr_restore+0x11>
        intr_enable();
c01046db:	e8 04 da ff ff       	call   c01020e4 <intr_enable>
    }
}
c01046e0:	c9                   	leave  
c01046e1:	c3                   	ret    

c01046e2 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01046e2:	55                   	push   %ebp
c01046e3:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01046e5:	8b 55 08             	mov    0x8(%ebp),%edx
c01046e8:	a1 d0 53 1c c0       	mov    0xc01c53d0,%eax
c01046ed:	89 d1                	mov    %edx,%ecx
c01046ef:	29 c1                	sub    %eax,%ecx
c01046f1:	89 c8                	mov    %ecx,%eax
c01046f3:	c1 f8 05             	sar    $0x5,%eax
}
c01046f6:	5d                   	pop    %ebp
c01046f7:	c3                   	ret    

c01046f8 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01046f8:	55                   	push   %ebp
c01046f9:	89 e5                	mov    %esp,%ebp
c01046fb:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c01046fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0104701:	89 04 24             	mov    %eax,(%esp)
c0104704:	e8 d9 ff ff ff       	call   c01046e2 <page2ppn>
c0104709:	c1 e0 0c             	shl    $0xc,%eax
}
c010470c:	c9                   	leave  
c010470d:	c3                   	ret    

c010470e <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010470e:	55                   	push   %ebp
c010470f:	89 e5                	mov    %esp,%ebp
c0104711:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104714:	8b 45 08             	mov    0x8(%ebp),%eax
c0104717:	89 c2                	mov    %eax,%edx
c0104719:	c1 ea 0c             	shr    $0xc,%edx
c010471c:	a1 80 32 1c c0       	mov    0xc01c3280,%eax
c0104721:	39 c2                	cmp    %eax,%edx
c0104723:	72 1c                	jb     c0104741 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104725:	c7 44 24 08 2c e6 10 	movl   $0xc010e62c,0x8(%esp)
c010472c:	c0 
c010472d:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104734:	00 
c0104735:	c7 04 24 4b e6 10 c0 	movl   $0xc010e64b,(%esp)
c010473c:	e8 7b c6 ff ff       	call   c0100dbc <__panic>
    }
    return &pages[PPN(pa)];
c0104741:	a1 d0 53 1c c0       	mov    0xc01c53d0,%eax
c0104746:	8b 55 08             	mov    0x8(%ebp),%edx
c0104749:	c1 ea 0c             	shr    $0xc,%edx
c010474c:	c1 e2 05             	shl    $0x5,%edx
c010474f:	01 d0                	add    %edx,%eax
}
c0104751:	c9                   	leave  
c0104752:	c3                   	ret    

c0104753 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104753:	55                   	push   %ebp
c0104754:	89 e5                	mov    %esp,%ebp
c0104756:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104759:	8b 45 08             	mov    0x8(%ebp),%eax
c010475c:	89 04 24             	mov    %eax,(%esp)
c010475f:	e8 94 ff ff ff       	call   c01046f8 <page2pa>
c0104764:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104767:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010476a:	c1 e8 0c             	shr    $0xc,%eax
c010476d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104770:	a1 80 32 1c c0       	mov    0xc01c3280,%eax
c0104775:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104778:	72 23                	jb     c010479d <page2kva+0x4a>
c010477a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010477d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104781:	c7 44 24 08 5c e6 10 	movl   $0xc010e65c,0x8(%esp)
c0104788:	c0 
c0104789:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104790:	00 
c0104791:	c7 04 24 4b e6 10 c0 	movl   $0xc010e64b,(%esp)
c0104798:	e8 1f c6 ff ff       	call   c0100dbc <__panic>
c010479d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047a0:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01047a5:	c9                   	leave  
c01047a6:	c3                   	ret    

c01047a7 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c01047a7:	55                   	push   %ebp
c01047a8:	89 e5                	mov    %esp,%ebp
c01047aa:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c01047ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01047b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01047b3:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01047ba:	77 23                	ja     c01047df <kva2page+0x38>
c01047bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01047c3:	c7 44 24 08 80 e6 10 	movl   $0xc010e680,0x8(%esp)
c01047ca:	c0 
c01047cb:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c01047d2:	00 
c01047d3:	c7 04 24 4b e6 10 c0 	movl   $0xc010e64b,(%esp)
c01047da:	e8 dd c5 ff ff       	call   c0100dbc <__panic>
c01047df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01047e2:	05 00 00 00 40       	add    $0x40000000,%eax
c01047e7:	89 04 24             	mov    %eax,(%esp)
c01047ea:	e8 1f ff ff ff       	call   c010470e <pa2page>
}
c01047ef:	c9                   	leave  
c01047f0:	c3                   	ret    

c01047f1 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c01047f1:	55                   	push   %ebp
c01047f2:	89 e5                	mov    %esp,%ebp
c01047f4:	53                   	push   %ebx
c01047f5:	83 ec 24             	sub    $0x24,%esp
  struct Page * page = alloc_pages(1 << order);
c01047f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01047fb:	ba 01 00 00 00       	mov    $0x1,%edx
c0104800:	89 d3                	mov    %edx,%ebx
c0104802:	89 c1                	mov    %eax,%ecx
c0104804:	d3 e3                	shl    %cl,%ebx
c0104806:	89 d8                	mov    %ebx,%eax
c0104808:	89 04 24             	mov    %eax,(%esp)
c010480b:	e8 2d 09 00 00       	call   c010513d <alloc_pages>
c0104810:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0104813:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104817:	75 07                	jne    c0104820 <__slob_get_free_pages+0x2f>
    return NULL;
c0104819:	b8 00 00 00 00       	mov    $0x0,%eax
c010481e:	eb 0b                	jmp    c010482b <__slob_get_free_pages+0x3a>
  return page2kva(page);
c0104820:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104823:	89 04 24             	mov    %eax,(%esp)
c0104826:	e8 28 ff ff ff       	call   c0104753 <page2kva>
}
c010482b:	83 c4 24             	add    $0x24,%esp
c010482e:	5b                   	pop    %ebx
c010482f:	5d                   	pop    %ebp
c0104830:	c3                   	ret    

c0104831 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104831:	55                   	push   %ebp
c0104832:	89 e5                	mov    %esp,%ebp
c0104834:	53                   	push   %ebx
c0104835:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c0104838:	8b 45 0c             	mov    0xc(%ebp),%eax
c010483b:	ba 01 00 00 00       	mov    $0x1,%edx
c0104840:	89 d3                	mov    %edx,%ebx
c0104842:	89 c1                	mov    %eax,%ecx
c0104844:	d3 e3                	shl    %cl,%ebx
c0104846:	89 d8                	mov    %ebx,%eax
c0104848:	89 c3                	mov    %eax,%ebx
c010484a:	8b 45 08             	mov    0x8(%ebp),%eax
c010484d:	89 04 24             	mov    %eax,(%esp)
c0104850:	e8 52 ff ff ff       	call   c01047a7 <kva2page>
c0104855:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0104859:	89 04 24             	mov    %eax,(%esp)
c010485c:	e8 47 09 00 00       	call   c01051a8 <free_pages>
}
c0104861:	83 c4 14             	add    $0x14,%esp
c0104864:	5b                   	pop    %ebx
c0104865:	5d                   	pop    %ebp
c0104866:	c3                   	ret    

c0104867 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104867:	55                   	push   %ebp
c0104868:	89 e5                	mov    %esp,%ebp
c010486a:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c010486d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104870:	83 c0 08             	add    $0x8,%eax
c0104873:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0104878:	76 24                	jbe    c010489e <slob_alloc+0x37>
c010487a:	c7 44 24 0c a4 e6 10 	movl   $0xc010e6a4,0xc(%esp)
c0104881:	c0 
c0104882:	c7 44 24 08 c3 e6 10 	movl   $0xc010e6c3,0x8(%esp)
c0104889:	c0 
c010488a:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0104891:	00 
c0104892:	c7 04 24 d8 e6 10 c0 	movl   $0xc010e6d8,(%esp)
c0104899:	e8 1e c5 ff ff       	call   c0100dbc <__panic>

	slob_t *prev, *cur, *aligned = 0;
c010489e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c01048a5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01048ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01048af:	83 c0 07             	add    $0x7,%eax
c01048b2:	c1 e8 03             	shr    $0x3,%eax
c01048b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c01048b8:	e8 e3 fd ff ff       	call   c01046a0 <__intr_save>
c01048bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c01048c0:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c01048c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c01048c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01048cb:	8b 40 04             	mov    0x4(%eax),%eax
c01048ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c01048d1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01048d5:	74 27                	je     c01048fe <slob_alloc+0x97>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c01048d7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01048da:	8b 45 10             	mov    0x10(%ebp),%eax
c01048dd:	01 d0                	add    %edx,%eax
c01048df:	8d 50 ff             	lea    -0x1(%eax),%edx
c01048e2:	8b 45 10             	mov    0x10(%ebp),%eax
c01048e5:	f7 d8                	neg    %eax
c01048e7:	21 d0                	and    %edx,%eax
c01048e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c01048ec:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01048ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01048f2:	89 d1                	mov    %edx,%ecx
c01048f4:	29 c1                	sub    %eax,%ecx
c01048f6:	89 c8                	mov    %ecx,%eax
c01048f8:	c1 f8 03             	sar    $0x3,%eax
c01048fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c01048fe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104901:	8b 00                	mov    (%eax),%eax
c0104903:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104906:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104909:	01 ca                	add    %ecx,%edx
c010490b:	39 d0                	cmp    %edx,%eax
c010490d:	0f 8c a6 00 00 00    	jl     c01049b9 <slob_alloc+0x152>
			if (delta) { /* need to fragment head to align? */
c0104913:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104917:	74 38                	je     c0104951 <slob_alloc+0xea>
				aligned->units = cur->units - delta;
c0104919:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010491c:	8b 00                	mov    (%eax),%eax
c010491e:	89 c2                	mov    %eax,%edx
c0104920:	2b 55 e8             	sub    -0x18(%ebp),%edx
c0104923:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104926:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104928:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010492b:	8b 50 04             	mov    0x4(%eax),%edx
c010492e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104931:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104934:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104937:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010493a:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c010493d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104940:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104943:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104945:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104948:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c010494b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010494e:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104951:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104954:	8b 00                	mov    (%eax),%eax
c0104956:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104959:	75 0e                	jne    c0104969 <slob_alloc+0x102>
				prev->next = cur->next; /* unlink */
c010495b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010495e:	8b 50 04             	mov    0x4(%eax),%edx
c0104961:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104964:	89 50 04             	mov    %edx,0x4(%eax)
c0104967:	eb 38                	jmp    c01049a1 <slob_alloc+0x13a>
			else { /* fragment */
				prev->next = cur + units;
c0104969:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010496c:	c1 e0 03             	shl    $0x3,%eax
c010496f:	89 c2                	mov    %eax,%edx
c0104971:	03 55 f0             	add    -0x10(%ebp),%edx
c0104974:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104977:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c010497a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010497d:	8b 40 04             	mov    0x4(%eax),%eax
c0104980:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104983:	8b 12                	mov    (%edx),%edx
c0104985:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0104988:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c010498a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010498d:	8b 40 04             	mov    0x4(%eax),%eax
c0104990:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104993:	8b 52 04             	mov    0x4(%edx),%edx
c0104996:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0104999:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010499c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010499f:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c01049a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01049a4:	a3 08 1a 13 c0       	mov    %eax,0xc0131a08
			spin_unlock_irqrestore(&slob_lock, flags);
c01049a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049ac:	89 04 24             	mov    %eax,(%esp)
c01049af:	e8 1b fd ff ff       	call   c01046cf <__intr_restore>
			return cur;
c01049b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01049b7:	eb 7f                	jmp    c0104a38 <slob_alloc+0x1d1>
		}
		if (cur == slobfree) {
c01049b9:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c01049be:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c01049c1:	75 61                	jne    c0104a24 <slob_alloc+0x1bd>
			spin_unlock_irqrestore(&slob_lock, flags);
c01049c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01049c6:	89 04 24             	mov    %eax,(%esp)
c01049c9:	e8 01 fd ff ff       	call   c01046cf <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c01049ce:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c01049d5:	75 07                	jne    c01049de <slob_alloc+0x177>
				return 0;
c01049d7:	b8 00 00 00 00       	mov    $0x0,%eax
c01049dc:	eb 5a                	jmp    c0104a38 <slob_alloc+0x1d1>

			cur = (slob_t *)__slob_get_free_page(gfp);
c01049de:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01049e5:	00 
c01049e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01049e9:	89 04 24             	mov    %eax,(%esp)
c01049ec:	e8 00 fe ff ff       	call   c01047f1 <__slob_get_free_pages>
c01049f1:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c01049f4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01049f8:	75 07                	jne    c0104a01 <slob_alloc+0x19a>
				return 0;
c01049fa:	b8 00 00 00 00       	mov    $0x0,%eax
c01049ff:	eb 37                	jmp    c0104a38 <slob_alloc+0x1d1>

			slob_free(cur, PAGE_SIZE);
c0104a01:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0104a08:	00 
c0104a09:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a0c:	89 04 24             	mov    %eax,(%esp)
c0104a0f:	e8 26 00 00 00       	call   c0104a3a <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0104a14:	e8 87 fc ff ff       	call   c01046a0 <__intr_save>
c0104a19:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104a1c:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104a21:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104a24:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a27:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a2d:	8b 40 04             	mov    0x4(%eax),%eax
c0104a30:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104a33:	e9 99 fe ff ff       	jmp    c01048d1 <slob_alloc+0x6a>
}
c0104a38:	c9                   	leave  
c0104a39:	c3                   	ret    

c0104a3a <slob_free>:

static void slob_free(void *block, int size)
{
c0104a3a:	55                   	push   %ebp
c0104a3b:	89 e5                	mov    %esp,%ebp
c0104a3d:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104a40:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a43:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104a46:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104a4a:	0f 84 f7 00 00 00    	je     c0104b47 <slob_free+0x10d>
		return;

	if (size)
c0104a50:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104a54:	74 10                	je     c0104a66 <slob_free+0x2c>
		b->units = SLOB_UNITS(size);
c0104a56:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104a59:	83 c0 07             	add    $0x7,%eax
c0104a5c:	c1 e8 03             	shr    $0x3,%eax
c0104a5f:	89 c2                	mov    %eax,%edx
c0104a61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a64:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104a66:	e8 35 fc ff ff       	call   c01046a0 <__intr_save>
c0104a6b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104a6e:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104a73:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a76:	eb 27                	jmp    c0104a9f <slob_free+0x65>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104a78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a7b:	8b 40 04             	mov    0x4(%eax),%eax
c0104a7e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104a81:	77 13                	ja     c0104a96 <slob_free+0x5c>
c0104a83:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104a86:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104a89:	77 27                	ja     c0104ab2 <slob_free+0x78>
c0104a8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a8e:	8b 40 04             	mov    0x4(%eax),%eax
c0104a91:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104a94:	77 1c                	ja     c0104ab2 <slob_free+0x78>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104a96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a99:	8b 40 04             	mov    0x4(%eax),%eax
c0104a9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104aa2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104aa5:	76 d1                	jbe    c0104a78 <slob_free+0x3e>
c0104aa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aaa:	8b 40 04             	mov    0x4(%eax),%eax
c0104aad:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104ab0:	76 c6                	jbe    c0104a78 <slob_free+0x3e>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104ab2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ab5:	8b 00                	mov    (%eax),%eax
c0104ab7:	c1 e0 03             	shl    $0x3,%eax
c0104aba:	89 c2                	mov    %eax,%edx
c0104abc:	03 55 f0             	add    -0x10(%ebp),%edx
c0104abf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ac2:	8b 40 04             	mov    0x4(%eax),%eax
c0104ac5:	39 c2                	cmp    %eax,%edx
c0104ac7:	75 25                	jne    c0104aee <slob_free+0xb4>
		b->units += cur->next->units;
c0104ac9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104acc:	8b 10                	mov    (%eax),%edx
c0104ace:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ad1:	8b 40 04             	mov    0x4(%eax),%eax
c0104ad4:	8b 00                	mov    (%eax),%eax
c0104ad6:	01 c2                	add    %eax,%edx
c0104ad8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104adb:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104add:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ae0:	8b 40 04             	mov    0x4(%eax),%eax
c0104ae3:	8b 50 04             	mov    0x4(%eax),%edx
c0104ae6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ae9:	89 50 04             	mov    %edx,0x4(%eax)
c0104aec:	eb 0c                	jmp    c0104afa <slob_free+0xc0>
	} else
		b->next = cur->next;
c0104aee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104af1:	8b 50 04             	mov    0x4(%eax),%edx
c0104af4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104af7:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104afa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104afd:	8b 00                	mov    (%eax),%eax
c0104aff:	c1 e0 03             	shl    $0x3,%eax
c0104b02:	03 45 f4             	add    -0xc(%ebp),%eax
c0104b05:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104b08:	75 1f                	jne    c0104b29 <slob_free+0xef>
		cur->units += b->units;
c0104b0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b0d:	8b 10                	mov    (%eax),%edx
c0104b0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b12:	8b 00                	mov    (%eax),%eax
c0104b14:	01 c2                	add    %eax,%edx
c0104b16:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b19:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104b1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104b1e:	8b 50 04             	mov    0x4(%eax),%edx
c0104b21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b24:	89 50 04             	mov    %edx,0x4(%eax)
c0104b27:	eb 09                	jmp    c0104b32 <slob_free+0xf8>
	} else
		cur->next = b;
c0104b29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b2c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104b2f:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104b32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b35:	a3 08 1a 13 c0       	mov    %eax,0xc0131a08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104b3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104b3d:	89 04 24             	mov    %eax,(%esp)
c0104b40:	e8 8a fb ff ff       	call   c01046cf <__intr_restore>
c0104b45:	eb 01                	jmp    c0104b48 <slob_free+0x10e>
{
	slob_t *cur, *b = (slob_t *)block;
	unsigned long flags;

	if (!block)
		return;
c0104b47:	90                   	nop
		cur->next = b;

	slobfree = cur;

	spin_unlock_irqrestore(&slob_lock, flags);
}
c0104b48:	c9                   	leave  
c0104b49:	c3                   	ret    

c0104b4a <check_slab>:



void check_slab(void) {
c0104b4a:	55                   	push   %ebp
c0104b4b:	89 e5                	mov    %esp,%ebp
c0104b4d:	83 ec 18             	sub    $0x18,%esp
  cprintf("check_slab() success\n");
c0104b50:	c7 04 24 ea e6 10 c0 	movl   $0xc010e6ea,(%esp)
c0104b57:	e8 07 b8 ff ff       	call   c0100363 <cprintf>
}
c0104b5c:	c9                   	leave  
c0104b5d:	c3                   	ret    

c0104b5e <slab_init>:
void
slab_init(void) {
c0104b5e:	55                   	push   %ebp
c0104b5f:	89 e5                	mov    %esp,%ebp
c0104b61:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104b64:	c7 04 24 00 e7 10 c0 	movl   $0xc010e700,(%esp)
c0104b6b:	e8 f3 b7 ff ff       	call   c0100363 <cprintf>
  check_slab();
c0104b70:	e8 d5 ff ff ff       	call   c0104b4a <check_slab>
}
c0104b75:	c9                   	leave  
c0104b76:	c3                   	ret    

c0104b77 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104b77:	55                   	push   %ebp
c0104b78:	89 e5                	mov    %esp,%ebp
c0104b7a:	83 ec 18             	sub    $0x18,%esp
    slab_init();
c0104b7d:	e8 dc ff ff ff       	call   c0104b5e <slab_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104b82:	c7 04 24 14 e7 10 c0 	movl   $0xc010e714,(%esp)
c0104b89:	e8 d5 b7 ff ff       	call   c0100363 <cprintf>
}
c0104b8e:	c9                   	leave  
c0104b8f:	c3                   	ret    

c0104b90 <slab_allocated>:

size_t
slab_allocated(void) {
c0104b90:	55                   	push   %ebp
c0104b91:	89 e5                	mov    %esp,%ebp
  return 0;
c0104b93:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b98:	5d                   	pop    %ebp
c0104b99:	c3                   	ret    

c0104b9a <kallocated>:

size_t
kallocated(void) {
c0104b9a:	55                   	push   %ebp
c0104b9b:	89 e5                	mov    %esp,%ebp
   return slab_allocated();
c0104b9d:	e8 ee ff ff ff       	call   c0104b90 <slab_allocated>
}
c0104ba2:	5d                   	pop    %ebp
c0104ba3:	c3                   	ret    

c0104ba4 <find_order>:

static int find_order(int size)
{
c0104ba4:	55                   	push   %ebp
c0104ba5:	89 e5                	mov    %esp,%ebp
c0104ba7:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104baa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104bb1:	eb 07                	jmp    c0104bba <find_order+0x16>
		order++;
c0104bb3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0104bb7:	d1 7d 08             	sarl   0x8(%ebp)
c0104bba:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104bc1:	7f f0                	jg     c0104bb3 <find_order+0xf>
		order++;
	return order;
c0104bc3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104bc6:	c9                   	leave  
c0104bc7:	c3                   	ret    

c0104bc8 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104bc8:	55                   	push   %ebp
c0104bc9:	89 e5                	mov    %esp,%ebp
c0104bcb:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104bce:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104bd5:	77 38                	ja     c0104c0f <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104bd7:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bda:	8d 50 08             	lea    0x8(%eax),%edx
c0104bdd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104be4:	00 
c0104be5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104be8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104bec:	89 14 24             	mov    %edx,(%esp)
c0104bef:	e8 73 fc ff ff       	call   c0104867 <slob_alloc>
c0104bf4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104bf7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104bfb:	74 08                	je     c0104c05 <__kmalloc+0x3d>
c0104bfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c00:	83 c0 08             	add    $0x8,%eax
c0104c03:	eb 05                	jmp    c0104c0a <__kmalloc+0x42>
c0104c05:	b8 00 00 00 00       	mov    $0x0,%eax
c0104c0a:	e9 a6 00 00 00       	jmp    c0104cb5 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104c0f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104c16:	00 
c0104c17:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c1a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c1e:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104c25:	e8 3d fc ff ff       	call   c0104867 <slob_alloc>
c0104c2a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104c2d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104c31:	75 07                	jne    c0104c3a <__kmalloc+0x72>
		return 0;
c0104c33:	b8 00 00 00 00       	mov    $0x0,%eax
c0104c38:	eb 7b                	jmp    c0104cb5 <__kmalloc+0xed>

	bb->order = find_order(size);
c0104c3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104c3d:	89 04 24             	mov    %eax,(%esp)
c0104c40:	e8 5f ff ff ff       	call   c0104ba4 <find_order>
c0104c45:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c48:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104c4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c4d:	8b 00                	mov    (%eax),%eax
c0104c4f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104c53:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104c56:	89 04 24             	mov    %eax,(%esp)
c0104c59:	e8 93 fb ff ff       	call   c01047f1 <__slob_get_free_pages>
c0104c5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c61:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104c64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c67:	8b 40 04             	mov    0x4(%eax),%eax
c0104c6a:	85 c0                	test   %eax,%eax
c0104c6c:	74 2f                	je     c0104c9d <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104c6e:	e8 2d fa ff ff       	call   c01046a0 <__intr_save>
c0104c73:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104c76:	8b 15 64 32 1c c0    	mov    0xc01c3264,%edx
c0104c7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c7f:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104c82:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c85:	a3 64 32 1c c0       	mov    %eax,0xc01c3264
		spin_unlock_irqrestore(&block_lock, flags);
c0104c8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c8d:	89 04 24             	mov    %eax,(%esp)
c0104c90:	e8 3a fa ff ff       	call   c01046cf <__intr_restore>
		return bb->pages;
c0104c95:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c98:	8b 40 04             	mov    0x4(%eax),%eax
c0104c9b:	eb 18                	jmp    c0104cb5 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104c9d:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104ca4:	00 
c0104ca5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104ca8:	89 04 24             	mov    %eax,(%esp)
c0104cab:	e8 8a fd ff ff       	call   c0104a3a <slob_free>
	return 0;
c0104cb0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104cb5:	c9                   	leave  
c0104cb6:	c3                   	ret    

c0104cb7 <kmalloc>:

void *
kmalloc(size_t size)
{
c0104cb7:	55                   	push   %ebp
c0104cb8:	89 e5                	mov    %esp,%ebp
c0104cba:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104cbd:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104cc4:	00 
c0104cc5:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cc8:	89 04 24             	mov    %eax,(%esp)
c0104ccb:	e8 f8 fe ff ff       	call   c0104bc8 <__kmalloc>
}
c0104cd0:	c9                   	leave  
c0104cd1:	c3                   	ret    

c0104cd2 <kfree>:


void kfree(void *block)
{
c0104cd2:	55                   	push   %ebp
c0104cd3:	89 e5                	mov    %esp,%ebp
c0104cd5:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104cd8:	c7 45 f0 64 32 1c c0 	movl   $0xc01c3264,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104cdf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104ce3:	0f 84 a4 00 00 00    	je     c0104d8d <kfree+0xbb>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104ce9:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cec:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104cf1:	85 c0                	test   %eax,%eax
c0104cf3:	75 7f                	jne    c0104d74 <kfree+0xa2>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104cf5:	e8 a6 f9 ff ff       	call   c01046a0 <__intr_save>
c0104cfa:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104cfd:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
c0104d02:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d05:	eb 5c                	jmp    c0104d63 <kfree+0x91>
			if (bb->pages == block) {
c0104d07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d0a:	8b 40 04             	mov    0x4(%eax),%eax
c0104d0d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104d10:	75 3f                	jne    c0104d51 <kfree+0x7f>
				*last = bb->next;
c0104d12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d15:	8b 50 08             	mov    0x8(%eax),%edx
c0104d18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d1b:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0104d1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d20:	89 04 24             	mov    %eax,(%esp)
c0104d23:	e8 a7 f9 ff ff       	call   c01046cf <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c0104d28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d2b:	8b 10                	mov    (%eax),%edx
c0104d2d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d30:	89 54 24 04          	mov    %edx,0x4(%esp)
c0104d34:	89 04 24             	mov    %eax,(%esp)
c0104d37:	e8 f5 fa ff ff       	call   c0104831 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c0104d3c:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104d43:	00 
c0104d44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d47:	89 04 24             	mov    %eax,(%esp)
c0104d4a:	e8 eb fc ff ff       	call   c0104a3a <slob_free>
				return;
c0104d4f:	eb 3d                	jmp    c0104d8e <kfree+0xbc>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104d51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d54:	83 c0 08             	add    $0x8,%eax
c0104d57:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104d5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d5d:	8b 40 08             	mov    0x8(%eax),%eax
c0104d60:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d63:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104d67:	75 9e                	jne    c0104d07 <kfree+0x35>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0104d69:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104d6c:	89 04 24             	mov    %eax,(%esp)
c0104d6f:	e8 5b f9 ff ff       	call   c01046cf <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0104d74:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d77:	83 e8 08             	sub    $0x8,%eax
c0104d7a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104d81:	00 
c0104d82:	89 04 24             	mov    %eax,(%esp)
c0104d85:	e8 b0 fc ff ff       	call   c0104a3a <slob_free>
	return;
c0104d8a:	90                   	nop
c0104d8b:	eb 01                	jmp    c0104d8e <kfree+0xbc>
{
	bigblock_t *bb, **last = &bigblocks;
	unsigned long flags;

	if (!block)
		return;
c0104d8d:	90                   	nop
		spin_unlock_irqrestore(&block_lock, flags);
	}

	slob_free((slob_t *)block - 1, 0);
	return;
}
c0104d8e:	c9                   	leave  
c0104d8f:	c3                   	ret    

c0104d90 <ksize>:


unsigned int ksize(const void *block)
{
c0104d90:	55                   	push   %ebp
c0104d91:	89 e5                	mov    %esp,%ebp
c0104d93:	53                   	push   %ebx
c0104d94:	83 ec 24             	sub    $0x24,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0104d97:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104d9b:	75 07                	jne    c0104da4 <ksize+0x14>
		return 0;
c0104d9d:	b8 00 00 00 00       	mov    $0x0,%eax
c0104da2:	eb 6d                	jmp    c0104e11 <ksize+0x81>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104da4:	8b 45 08             	mov    0x8(%ebp),%eax
c0104da7:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104dac:	85 c0                	test   %eax,%eax
c0104dae:	75 56                	jne    c0104e06 <ksize+0x76>
		spin_lock_irqsave(&block_lock, flags);
c0104db0:	e8 eb f8 ff ff       	call   c01046a0 <__intr_save>
c0104db5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0104db8:	a1 64 32 1c c0       	mov    0xc01c3264,%eax
c0104dbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104dc0:	eb 33                	jmp    c0104df5 <ksize+0x65>
			if (bb->pages == block) {
c0104dc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dc5:	8b 40 04             	mov    0x4(%eax),%eax
c0104dc8:	3b 45 08             	cmp    0x8(%ebp),%eax
c0104dcb:	75 1f                	jne    c0104dec <ksize+0x5c>
				spin_unlock_irqrestore(&slob_lock, flags);
c0104dcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dd0:	89 04 24             	mov    %eax,(%esp)
c0104dd3:	e8 f7 f8 ff ff       	call   c01046cf <__intr_restore>
				return PAGE_SIZE << bb->order;
c0104dd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ddb:	8b 00                	mov    (%eax),%eax
c0104ddd:	ba 00 10 00 00       	mov    $0x1000,%edx
c0104de2:	89 d3                	mov    %edx,%ebx
c0104de4:	89 c1                	mov    %eax,%ecx
c0104de6:	d3 e3                	shl    %cl,%ebx
c0104de8:	89 d8                	mov    %ebx,%eax
c0104dea:	eb 25                	jmp    c0104e11 <ksize+0x81>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0104dec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104def:	8b 40 08             	mov    0x8(%eax),%eax
c0104df2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104df5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104df9:	75 c7                	jne    c0104dc2 <ksize+0x32>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0104dfb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dfe:	89 04 24             	mov    %eax,(%esp)
c0104e01:	e8 c9 f8 ff ff       	call   c01046cf <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0104e06:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e09:	83 e8 08             	sub    $0x8,%eax
c0104e0c:	8b 00                	mov    (%eax),%eax
c0104e0e:	c1 e0 03             	shl    $0x3,%eax
}
c0104e11:	83 c4 24             	add    $0x24,%esp
c0104e14:	5b                   	pop    %ebx
c0104e15:	5d                   	pop    %ebp
c0104e16:	c3                   	ret    
	...

c0104e18 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0104e18:	55                   	push   %ebp
c0104e19:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0104e1b:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e1e:	a1 d0 53 1c c0       	mov    0xc01c53d0,%eax
c0104e23:	89 d1                	mov    %edx,%ecx
c0104e25:	29 c1                	sub    %eax,%ecx
c0104e27:	89 c8                	mov    %ecx,%eax
c0104e29:	c1 f8 05             	sar    $0x5,%eax
}
c0104e2c:	5d                   	pop    %ebp
c0104e2d:	c3                   	ret    

c0104e2e <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104e2e:	55                   	push   %ebp
c0104e2f:	89 e5                	mov    %esp,%ebp
c0104e31:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104e34:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e37:	89 04 24             	mov    %eax,(%esp)
c0104e3a:	e8 d9 ff ff ff       	call   c0104e18 <page2ppn>
c0104e3f:	c1 e0 0c             	shl    $0xc,%eax
}
c0104e42:	c9                   	leave  
c0104e43:	c3                   	ret    

c0104e44 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104e44:	55                   	push   %ebp
c0104e45:	89 e5                	mov    %esp,%ebp
c0104e47:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104e4a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e4d:	89 c2                	mov    %eax,%edx
c0104e4f:	c1 ea 0c             	shr    $0xc,%edx
c0104e52:	a1 80 32 1c c0       	mov    0xc01c3280,%eax
c0104e57:	39 c2                	cmp    %eax,%edx
c0104e59:	72 1c                	jb     c0104e77 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104e5b:	c7 44 24 08 30 e7 10 	movl   $0xc010e730,0x8(%esp)
c0104e62:	c0 
c0104e63:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104e6a:	00 
c0104e6b:	c7 04 24 4f e7 10 c0 	movl   $0xc010e74f,(%esp)
c0104e72:	e8 45 bf ff ff       	call   c0100dbc <__panic>
    }
    return &pages[PPN(pa)];
c0104e77:	a1 d0 53 1c c0       	mov    0xc01c53d0,%eax
c0104e7c:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e7f:	c1 ea 0c             	shr    $0xc,%edx
c0104e82:	c1 e2 05             	shl    $0x5,%edx
c0104e85:	01 d0                	add    %edx,%eax
}
c0104e87:	c9                   	leave  
c0104e88:	c3                   	ret    

c0104e89 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104e89:	55                   	push   %ebp
c0104e8a:	89 e5                	mov    %esp,%ebp
c0104e8c:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104e8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e92:	89 04 24             	mov    %eax,(%esp)
c0104e95:	e8 94 ff ff ff       	call   c0104e2e <page2pa>
c0104e9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104e9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ea0:	c1 e8 0c             	shr    $0xc,%eax
c0104ea3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104ea6:	a1 80 32 1c c0       	mov    0xc01c3280,%eax
c0104eab:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104eae:	72 23                	jb     c0104ed3 <page2kva+0x4a>
c0104eb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104eb3:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104eb7:	c7 44 24 08 60 e7 10 	movl   $0xc010e760,0x8(%esp)
c0104ebe:	c0 
c0104ebf:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104ec6:	00 
c0104ec7:	c7 04 24 4f e7 10 c0 	movl   $0xc010e74f,(%esp)
c0104ece:	e8 e9 be ff ff       	call   c0100dbc <__panic>
c0104ed3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ed6:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104edb:	c9                   	leave  
c0104edc:	c3                   	ret    

c0104edd <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0104edd:	55                   	push   %ebp
c0104ede:	89 e5                	mov    %esp,%ebp
c0104ee0:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0104ee3:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ee6:	83 e0 01             	and    $0x1,%eax
c0104ee9:	85 c0                	test   %eax,%eax
c0104eeb:	75 1c                	jne    c0104f09 <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0104eed:	c7 44 24 08 84 e7 10 	movl   $0xc010e784,0x8(%esp)
c0104ef4:	c0 
c0104ef5:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0104efc:	00 
c0104efd:	c7 04 24 4f e7 10 c0 	movl   $0xc010e74f,(%esp)
c0104f04:	e8 b3 be ff ff       	call   c0100dbc <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0104f09:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f0c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104f11:	89 04 24             	mov    %eax,(%esp)
c0104f14:	e8 2b ff ff ff       	call   c0104e44 <pa2page>
}
c0104f19:	c9                   	leave  
c0104f1a:	c3                   	ret    

c0104f1b <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0104f1b:	55                   	push   %ebp
c0104f1c:	89 e5                	mov    %esp,%ebp
c0104f1e:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0104f21:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f24:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104f29:	89 04 24             	mov    %eax,(%esp)
c0104f2c:	e8 13 ff ff ff       	call   c0104e44 <pa2page>
}
c0104f31:	c9                   	leave  
c0104f32:	c3                   	ret    

c0104f33 <page_ref>:

static inline int
page_ref(struct Page *page) {
c0104f33:	55                   	push   %ebp
c0104f34:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0104f36:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f39:	8b 00                	mov    (%eax),%eax
}
c0104f3b:	5d                   	pop    %ebp
c0104f3c:	c3                   	ret    

c0104f3d <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0104f3d:	55                   	push   %ebp
c0104f3e:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0104f40:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f43:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104f46:	89 10                	mov    %edx,(%eax)
}
c0104f48:	5d                   	pop    %ebp
c0104f49:	c3                   	ret    

c0104f4a <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0104f4a:	55                   	push   %ebp
c0104f4b:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0104f4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f50:	8b 00                	mov    (%eax),%eax
c0104f52:	8d 50 01             	lea    0x1(%eax),%edx
c0104f55:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f58:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104f5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f5d:	8b 00                	mov    (%eax),%eax
}
c0104f5f:	5d                   	pop    %ebp
c0104f60:	c3                   	ret    

c0104f61 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0104f61:	55                   	push   %ebp
c0104f62:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0104f64:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f67:	8b 00                	mov    (%eax),%eax
c0104f69:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104f6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f6f:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0104f71:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f74:	8b 00                	mov    (%eax),%eax
}
c0104f76:	5d                   	pop    %ebp
c0104f77:	c3                   	ret    

c0104f78 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0104f78:	55                   	push   %ebp
c0104f79:	89 e5                	mov    %esp,%ebp
c0104f7b:	53                   	push   %ebx
c0104f7c:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0104f7f:	9c                   	pushf  
c0104f80:	5b                   	pop    %ebx
c0104f81:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c0104f84:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0104f87:	25 00 02 00 00       	and    $0x200,%eax
c0104f8c:	85 c0                	test   %eax,%eax
c0104f8e:	74 0c                	je     c0104f9c <__intr_save+0x24>
        intr_disable();
c0104f90:	e8 55 d1 ff ff       	call   c01020ea <intr_disable>
        return 1;
c0104f95:	b8 01 00 00 00       	mov    $0x1,%eax
c0104f9a:	eb 05                	jmp    c0104fa1 <__intr_save+0x29>
    }
    return 0;
c0104f9c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104fa1:	83 c4 14             	add    $0x14,%esp
c0104fa4:	5b                   	pop    %ebx
c0104fa5:	5d                   	pop    %ebp
c0104fa6:	c3                   	ret    

c0104fa7 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0104fa7:	55                   	push   %ebp
c0104fa8:	89 e5                	mov    %esp,%ebp
c0104faa:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0104fad:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104fb1:	74 05                	je     c0104fb8 <__intr_restore+0x11>
        intr_enable();
c0104fb3:	e8 2c d1 ff ff       	call   c01020e4 <intr_enable>
    }
}
c0104fb8:	c9                   	leave  
c0104fb9:	c3                   	ret    

c0104fba <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0104fba:	55                   	push   %ebp
c0104fbb:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c0104fbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fc0:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0104fc3:	b8 23 00 00 00       	mov    $0x23,%eax
c0104fc8:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0104fca:	b8 23 00 00 00       	mov    $0x23,%eax
c0104fcf:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c0104fd1:	b8 10 00 00 00       	mov    $0x10,%eax
c0104fd6:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0104fd8:	b8 10 00 00 00       	mov    $0x10,%eax
c0104fdd:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c0104fdf:	b8 10 00 00 00       	mov    $0x10,%eax
c0104fe4:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0104fe6:	ea ed 4f 10 c0 08 00 	ljmp   $0x8,$0xc0104fed
}
c0104fed:	5d                   	pop    %ebp
c0104fee:	c3                   	ret    

c0104fef <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c0104fef:	55                   	push   %ebp
c0104ff0:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c0104ff2:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ff5:	a3 a4 32 1c c0       	mov    %eax,0xc01c32a4
}
c0104ffa:	5d                   	pop    %ebp
c0104ffb:	c3                   	ret    

c0104ffc <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c0104ffc:	55                   	push   %ebp
c0104ffd:	89 e5                	mov    %esp,%ebp
c0104fff:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c0105002:	b8 00 10 13 c0       	mov    $0xc0131000,%eax
c0105007:	89 04 24             	mov    %eax,(%esp)
c010500a:	e8 e0 ff ff ff       	call   c0104fef <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c010500f:	66 c7 05 a8 32 1c c0 	movw   $0x10,0xc01c32a8
c0105016:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c0105018:	66 c7 05 48 1a 13 c0 	movw   $0x68,0xc0131a48
c010501f:	68 00 
c0105021:	b8 a0 32 1c c0       	mov    $0xc01c32a0,%eax
c0105026:	66 a3 4a 1a 13 c0    	mov    %ax,0xc0131a4a
c010502c:	b8 a0 32 1c c0       	mov    $0xc01c32a0,%eax
c0105031:	c1 e8 10             	shr    $0x10,%eax
c0105034:	a2 4c 1a 13 c0       	mov    %al,0xc0131a4c
c0105039:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c0105040:	83 e0 f0             	and    $0xfffffff0,%eax
c0105043:	83 c8 09             	or     $0x9,%eax
c0105046:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c010504b:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c0105052:	83 e0 ef             	and    $0xffffffef,%eax
c0105055:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c010505a:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c0105061:	83 e0 9f             	and    $0xffffff9f,%eax
c0105064:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c0105069:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c0105070:	83 c8 80             	or     $0xffffff80,%eax
c0105073:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c0105078:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c010507f:	83 e0 f0             	and    $0xfffffff0,%eax
c0105082:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c0105087:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c010508e:	83 e0 ef             	and    $0xffffffef,%eax
c0105091:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c0105096:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c010509d:	83 e0 df             	and    $0xffffffdf,%eax
c01050a0:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c01050a5:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c01050ac:	83 c8 40             	or     $0x40,%eax
c01050af:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c01050b4:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c01050bb:	83 e0 7f             	and    $0x7f,%eax
c01050be:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c01050c3:	b8 a0 32 1c c0       	mov    $0xc01c32a0,%eax
c01050c8:	c1 e8 18             	shr    $0x18,%eax
c01050cb:	a2 4f 1a 13 c0       	mov    %al,0xc0131a4f

    // reload all segment registers
    lgdt(&gdt_pd);
c01050d0:	c7 04 24 50 1a 13 c0 	movl   $0xc0131a50,(%esp)
c01050d7:	e8 de fe ff ff       	call   c0104fba <lgdt>
c01050dc:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c01050e2:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01050e6:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c01050e9:	c9                   	leave  
c01050ea:	c3                   	ret    

c01050eb <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c01050eb:	55                   	push   %ebp
c01050ec:	89 e5                	mov    %esp,%ebp
c01050ee:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c01050f1:	c7 05 c8 53 1c c0 10 	movl   $0xc010e610,0xc01c53c8
c01050f8:	e6 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c01050fb:	a1 c8 53 1c c0       	mov    0xc01c53c8,%eax
c0105100:	8b 00                	mov    (%eax),%eax
c0105102:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105106:	c7 04 24 b0 e7 10 c0 	movl   $0xc010e7b0,(%esp)
c010510d:	e8 51 b2 ff ff       	call   c0100363 <cprintf>
    pmm_manager->init();
c0105112:	a1 c8 53 1c c0       	mov    0xc01c53c8,%eax
c0105117:	8b 40 04             	mov    0x4(%eax),%eax
c010511a:	ff d0                	call   *%eax
}
c010511c:	c9                   	leave  
c010511d:	c3                   	ret    

c010511e <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c010511e:	55                   	push   %ebp
c010511f:	89 e5                	mov    %esp,%ebp
c0105121:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c0105124:	a1 c8 53 1c c0       	mov    0xc01c53c8,%eax
c0105129:	8b 50 08             	mov    0x8(%eax),%edx
c010512c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010512f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105133:	8b 45 08             	mov    0x8(%ebp),%eax
c0105136:	89 04 24             	mov    %eax,(%esp)
c0105139:	ff d2                	call   *%edx
}
c010513b:	c9                   	leave  
c010513c:	c3                   	ret    

c010513d <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c010513d:	55                   	push   %ebp
c010513e:	89 e5                	mov    %esp,%ebp
c0105140:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c0105143:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c010514a:	e8 29 fe ff ff       	call   c0104f78 <__intr_save>
c010514f:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0105152:	a1 c8 53 1c c0       	mov    0xc01c53c8,%eax
c0105157:	8b 50 0c             	mov    0xc(%eax),%edx
c010515a:	8b 45 08             	mov    0x8(%ebp),%eax
c010515d:	89 04 24             	mov    %eax,(%esp)
c0105160:	ff d2                	call   *%edx
c0105162:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0105165:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105168:	89 04 24             	mov    %eax,(%esp)
c010516b:	e8 37 fe ff ff       	call   c0104fa7 <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0105170:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105174:	75 2d                	jne    c01051a3 <alloc_pages+0x66>
c0105176:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c010517a:	77 27                	ja     c01051a3 <alloc_pages+0x66>
c010517c:	a1 0c 33 1c c0       	mov    0xc01c330c,%eax
c0105181:	85 c0                	test   %eax,%eax
c0105183:	74 1e                	je     c01051a3 <alloc_pages+0x66>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0105185:	8b 55 08             	mov    0x8(%ebp),%edx
c0105188:	a1 ac 54 1c c0       	mov    0xc01c54ac,%eax
c010518d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105194:	00 
c0105195:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105199:	89 04 24             	mov    %eax,(%esp)
c010519c:	e8 a2 1d 00 00       	call   c0106f43 <swap_out>
    }
c01051a1:	eb a7                	jmp    c010514a <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c01051a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01051a6:	c9                   	leave  
c01051a7:	c3                   	ret    

c01051a8 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c01051a8:	55                   	push   %ebp
c01051a9:	89 e5                	mov    %esp,%ebp
c01051ab:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c01051ae:	e8 c5 fd ff ff       	call   c0104f78 <__intr_save>
c01051b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c01051b6:	a1 c8 53 1c c0       	mov    0xc01c53c8,%eax
c01051bb:	8b 50 10             	mov    0x10(%eax),%edx
c01051be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01051c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01051c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01051c8:	89 04 24             	mov    %eax,(%esp)
c01051cb:	ff d2                	call   *%edx
    }
    local_intr_restore(intr_flag);
c01051cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051d0:	89 04 24             	mov    %eax,(%esp)
c01051d3:	e8 cf fd ff ff       	call   c0104fa7 <__intr_restore>
}
c01051d8:	c9                   	leave  
c01051d9:	c3                   	ret    

c01051da <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c01051da:	55                   	push   %ebp
c01051db:	89 e5                	mov    %esp,%ebp
c01051dd:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c01051e0:	e8 93 fd ff ff       	call   c0104f78 <__intr_save>
c01051e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c01051e8:	a1 c8 53 1c c0       	mov    0xc01c53c8,%eax
c01051ed:	8b 40 14             	mov    0x14(%eax),%eax
c01051f0:	ff d0                	call   *%eax
c01051f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c01051f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051f8:	89 04 24             	mov    %eax,(%esp)
c01051fb:	e8 a7 fd ff ff       	call   c0104fa7 <__intr_restore>
    return ret;
c0105200:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0105203:	c9                   	leave  
c0105204:	c3                   	ret    

c0105205 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c0105205:	55                   	push   %ebp
c0105206:	89 e5                	mov    %esp,%ebp
c0105208:	57                   	push   %edi
c0105209:	56                   	push   %esi
c010520a:	53                   	push   %ebx
c010520b:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c0105211:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c0105218:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c010521f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0105226:	c7 04 24 c7 e7 10 c0 	movl   $0xc010e7c7,(%esp)
c010522d:	e8 31 b1 ff ff       	call   c0100363 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105232:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105239:	e9 0b 01 00 00       	jmp    c0105349 <page_init+0x144>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010523e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105241:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105244:	89 d0                	mov    %edx,%eax
c0105246:	c1 e0 02             	shl    $0x2,%eax
c0105249:	01 d0                	add    %edx,%eax
c010524b:	c1 e0 02             	shl    $0x2,%eax
c010524e:	01 c8                	add    %ecx,%eax
c0105250:	8b 50 08             	mov    0x8(%eax),%edx
c0105253:	8b 40 04             	mov    0x4(%eax),%eax
c0105256:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0105259:	89 55 bc             	mov    %edx,-0x44(%ebp)
c010525c:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010525f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105262:	89 d0                	mov    %edx,%eax
c0105264:	c1 e0 02             	shl    $0x2,%eax
c0105267:	01 d0                	add    %edx,%eax
c0105269:	c1 e0 02             	shl    $0x2,%eax
c010526c:	01 c8                	add    %ecx,%eax
c010526e:	8b 50 10             	mov    0x10(%eax),%edx
c0105271:	8b 40 0c             	mov    0xc(%eax),%eax
c0105274:	03 45 b8             	add    -0x48(%ebp),%eax
c0105277:	13 55 bc             	adc    -0x44(%ebp),%edx
c010527a:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010527d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
c0105280:	8b 4d c4             	mov    -0x3c(%ebp),%ecx

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0105283:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105286:	89 d0                	mov    %edx,%eax
c0105288:	c1 e0 02             	shl    $0x2,%eax
c010528b:	01 d0                	add    %edx,%eax
c010528d:	c1 e0 02             	shl    $0x2,%eax
c0105290:	01 c8                	add    %ecx,%eax
c0105292:	83 c0 14             	add    $0x14,%eax
c0105295:	8b 00                	mov    (%eax),%eax
c0105297:	89 45 84             	mov    %eax,-0x7c(%ebp)
c010529a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010529d:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01052a0:	89 c6                	mov    %eax,%esi
c01052a2:	89 d7                	mov    %edx,%edi
c01052a4:	83 c6 ff             	add    $0xffffffff,%esi
c01052a7:	83 d7 ff             	adc    $0xffffffff,%edi
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
c01052aa:	8b 4d c4             	mov    -0x3c(%ebp),%ecx

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c01052ad:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052b0:	89 d0                	mov    %edx,%eax
c01052b2:	c1 e0 02             	shl    $0x2,%eax
c01052b5:	01 d0                	add    %edx,%eax
c01052b7:	c1 e0 02             	shl    $0x2,%eax
c01052ba:	01 c8                	add    %ecx,%eax
c01052bc:	8b 48 0c             	mov    0xc(%eax),%ecx
c01052bf:	8b 58 10             	mov    0x10(%eax),%ebx
c01052c2:	8b 45 84             	mov    -0x7c(%ebp),%eax
c01052c5:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c01052c9:	89 74 24 14          	mov    %esi,0x14(%esp)
c01052cd:	89 7c 24 18          	mov    %edi,0x18(%esp)
c01052d1:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01052d4:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01052d7:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01052db:	89 54 24 10          	mov    %edx,0x10(%esp)
c01052df:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01052e3:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c01052e7:	c7 04 24 d4 e7 10 c0 	movl   $0xc010e7d4,(%esp)
c01052ee:	e8 70 b0 ff ff       	call   c0100363 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c01052f3:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01052f6:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01052f9:	89 d0                	mov    %edx,%eax
c01052fb:	c1 e0 02             	shl    $0x2,%eax
c01052fe:	01 d0                	add    %edx,%eax
c0105300:	c1 e0 02             	shl    $0x2,%eax
c0105303:	01 c8                	add    %ecx,%eax
c0105305:	83 c0 14             	add    $0x14,%eax
c0105308:	8b 00                	mov    (%eax),%eax
c010530a:	83 f8 01             	cmp    $0x1,%eax
c010530d:	75 36                	jne    c0105345 <page_init+0x140>
            if (maxpa < end && begin < KMEMSIZE) {
c010530f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105312:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105315:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105318:	77 2b                	ja     c0105345 <page_init+0x140>
c010531a:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c010531d:	72 05                	jb     c0105324 <page_init+0x11f>
c010531f:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c0105322:	73 21                	jae    c0105345 <page_init+0x140>
c0105324:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105328:	77 1b                	ja     c0105345 <page_init+0x140>
c010532a:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010532e:	72 09                	jb     c0105339 <page_init+0x134>
c0105330:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c0105337:	77 0c                	ja     c0105345 <page_init+0x140>
                maxpa = end;
c0105339:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010533c:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010533f:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105342:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105345:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105349:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010534c:	8b 00                	mov    (%eax),%eax
c010534e:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0105351:	0f 8f e7 fe ff ff    	jg     c010523e <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c0105357:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010535b:	72 1d                	jb     c010537a <page_init+0x175>
c010535d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105361:	77 09                	ja     c010536c <page_init+0x167>
c0105363:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c010536a:	76 0e                	jbe    c010537a <page_init+0x175>
        maxpa = KMEMSIZE;
c010536c:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0105373:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c010537a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010537d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105380:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0105384:	c1 ea 0c             	shr    $0xc,%edx
c0105387:	a3 80 32 1c c0       	mov    %eax,0xc01c3280
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c010538c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c0105393:	b8 a4 55 1c c0       	mov    $0xc01c55a4,%eax
c0105398:	83 e8 01             	sub    $0x1,%eax
c010539b:	03 45 ac             	add    -0x54(%ebp),%eax
c010539e:	89 45 a8             	mov    %eax,-0x58(%ebp)
c01053a1:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01053a4:	ba 00 00 00 00       	mov    $0x0,%edx
c01053a9:	f7 75 ac             	divl   -0x54(%ebp)
c01053ac:	89 d0                	mov    %edx,%eax
c01053ae:	8b 55 a8             	mov    -0x58(%ebp),%edx
c01053b1:	89 d1                	mov    %edx,%ecx
c01053b3:	29 c1                	sub    %eax,%ecx
c01053b5:	89 c8                	mov    %ecx,%eax
c01053b7:	a3 d0 53 1c c0       	mov    %eax,0xc01c53d0

    for (i = 0; i < npage; i ++) {
c01053bc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01053c3:	eb 27                	jmp    c01053ec <page_init+0x1e7>
        SetPageReserved(pages + i);
c01053c5:	a1 d0 53 1c c0       	mov    0xc01c53d0,%eax
c01053ca:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053cd:	c1 e2 05             	shl    $0x5,%edx
c01053d0:	01 d0                	add    %edx,%eax
c01053d2:	83 c0 04             	add    $0x4,%eax
c01053d5:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c01053dc:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01053df:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01053e2:	8b 55 90             	mov    -0x70(%ebp),%edx
c01053e5:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c01053e8:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01053ec:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01053ef:	a1 80 32 1c c0       	mov    0xc01c3280,%eax
c01053f4:	39 c2                	cmp    %eax,%edx
c01053f6:	72 cd                	jb     c01053c5 <page_init+0x1c0>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c01053f8:	a1 80 32 1c c0       	mov    0xc01c3280,%eax
c01053fd:	89 c2                	mov    %eax,%edx
c01053ff:	c1 e2 05             	shl    $0x5,%edx
c0105402:	a1 d0 53 1c c0       	mov    0xc01c53d0,%eax
c0105407:	01 d0                	add    %edx,%eax
c0105409:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c010540c:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c0105413:	77 23                	ja     c0105438 <page_init+0x233>
c0105415:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105418:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010541c:	c7 44 24 08 04 e8 10 	movl   $0xc010e804,0x8(%esp)
c0105423:	c0 
c0105424:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c010542b:	00 
c010542c:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0105433:	e8 84 b9 ff ff       	call   c0100dbc <__panic>
c0105438:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010543b:	05 00 00 00 40       	add    $0x40000000,%eax
c0105440:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c0105443:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010544a:	e9 7c 01 00 00       	jmp    c01055cb <page_init+0x3c6>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010544f:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105452:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105455:	89 d0                	mov    %edx,%eax
c0105457:	c1 e0 02             	shl    $0x2,%eax
c010545a:	01 d0                	add    %edx,%eax
c010545c:	c1 e0 02             	shl    $0x2,%eax
c010545f:	01 c8                	add    %ecx,%eax
c0105461:	8b 50 08             	mov    0x8(%eax),%edx
c0105464:	8b 40 04             	mov    0x4(%eax),%eax
c0105467:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010546a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010546d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105470:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105473:	89 d0                	mov    %edx,%eax
c0105475:	c1 e0 02             	shl    $0x2,%eax
c0105478:	01 d0                	add    %edx,%eax
c010547a:	c1 e0 02             	shl    $0x2,%eax
c010547d:	01 c8                	add    %ecx,%eax
c010547f:	8b 50 10             	mov    0x10(%eax),%edx
c0105482:	8b 40 0c             	mov    0xc(%eax),%eax
c0105485:	03 45 d0             	add    -0x30(%ebp),%eax
c0105488:	13 55 d4             	adc    -0x2c(%ebp),%edx
c010548b:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010548e:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0105491:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105494:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105497:	89 d0                	mov    %edx,%eax
c0105499:	c1 e0 02             	shl    $0x2,%eax
c010549c:	01 d0                	add    %edx,%eax
c010549e:	c1 e0 02             	shl    $0x2,%eax
c01054a1:	01 c8                	add    %ecx,%eax
c01054a3:	83 c0 14             	add    $0x14,%eax
c01054a6:	8b 00                	mov    (%eax),%eax
c01054a8:	83 f8 01             	cmp    $0x1,%eax
c01054ab:	0f 85 16 01 00 00    	jne    c01055c7 <page_init+0x3c2>
            if (begin < freemem) {
c01054b1:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01054b4:	ba 00 00 00 00       	mov    $0x0,%edx
c01054b9:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01054bc:	72 17                	jb     c01054d5 <page_init+0x2d0>
c01054be:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01054c1:	77 05                	ja     c01054c8 <page_init+0x2c3>
c01054c3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01054c6:	76 0d                	jbe    c01054d5 <page_init+0x2d0>
                begin = freemem;
c01054c8:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01054cb:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01054ce:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c01054d5:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01054d9:	72 1d                	jb     c01054f8 <page_init+0x2f3>
c01054db:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01054df:	77 09                	ja     c01054ea <page_init+0x2e5>
c01054e1:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c01054e8:	76 0e                	jbe    c01054f8 <page_init+0x2f3>
                end = KMEMSIZE;
c01054ea:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c01054f1:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c01054f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01054fb:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01054fe:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105501:	0f 87 c0 00 00 00    	ja     c01055c7 <page_init+0x3c2>
c0105507:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010550a:	72 09                	jb     c0105515 <page_init+0x310>
c010550c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010550f:	0f 83 b2 00 00 00    	jae    c01055c7 <page_init+0x3c2>
                begin = ROUNDUP(begin, PGSIZE);
c0105515:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c010551c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010551f:	03 45 9c             	add    -0x64(%ebp),%eax
c0105522:	83 e8 01             	sub    $0x1,%eax
c0105525:	89 45 98             	mov    %eax,-0x68(%ebp)
c0105528:	8b 45 98             	mov    -0x68(%ebp),%eax
c010552b:	ba 00 00 00 00       	mov    $0x0,%edx
c0105530:	f7 75 9c             	divl   -0x64(%ebp)
c0105533:	89 d0                	mov    %edx,%eax
c0105535:	8b 55 98             	mov    -0x68(%ebp),%edx
c0105538:	89 d1                	mov    %edx,%ecx
c010553a:	29 c1                	sub    %eax,%ecx
c010553c:	89 c8                	mov    %ecx,%eax
c010553e:	ba 00 00 00 00       	mov    $0x0,%edx
c0105543:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105546:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0105549:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010554c:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010554f:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0105552:	ba 00 00 00 00       	mov    $0x0,%edx
c0105557:	89 c1                	mov    %eax,%ecx
c0105559:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
c010555f:	89 8d 78 ff ff ff    	mov    %ecx,-0x88(%ebp)
c0105565:	89 d1                	mov    %edx,%ecx
c0105567:	83 e1 00             	and    $0x0,%ecx
c010556a:	89 8d 7c ff ff ff    	mov    %ecx,-0x84(%ebp)
c0105570:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
c0105576:	8b 95 7c ff ff ff    	mov    -0x84(%ebp),%edx
c010557c:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010557f:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c0105582:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105585:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105588:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010558b:	77 3a                	ja     c01055c7 <page_init+0x3c2>
c010558d:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105590:	72 05                	jb     c0105597 <page_init+0x392>
c0105592:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105595:	73 30                	jae    c01055c7 <page_init+0x3c2>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0105597:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010559a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c010559d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01055a0:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01055a3:	29 c8                	sub    %ecx,%eax
c01055a5:	19 da                	sbb    %ebx,%edx
c01055a7:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c01055ab:	c1 ea 0c             	shr    $0xc,%edx
c01055ae:	89 c3                	mov    %eax,%ebx
c01055b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01055b3:	89 04 24             	mov    %eax,(%esp)
c01055b6:	e8 89 f8 ff ff       	call   c0104e44 <pa2page>
c01055bb:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01055bf:	89 04 24             	mov    %eax,(%esp)
c01055c2:	e8 57 fb ff ff       	call   c010511e <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c01055c7:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01055cb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01055ce:	8b 00                	mov    (%eax),%eax
c01055d0:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01055d3:	0f 8f 76 fe ff ff    	jg     c010544f <page_init+0x24a>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c01055d9:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c01055df:	5b                   	pop    %ebx
c01055e0:	5e                   	pop    %esi
c01055e1:	5f                   	pop    %edi
c01055e2:	5d                   	pop    %ebp
c01055e3:	c3                   	ret    

c01055e4 <enable_paging>:

static void
enable_paging(void) {
c01055e4:	55                   	push   %ebp
c01055e5:	89 e5                	mov    %esp,%ebp
c01055e7:	53                   	push   %ebx
c01055e8:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c01055eb:	a1 cc 53 1c c0       	mov    0xc01c53cc,%eax
c01055f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c01055f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01055f6:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c01055f9:	0f 20 c3             	mov    %cr0,%ebx
c01055fc:	89 5d f0             	mov    %ebx,-0x10(%ebp)
    return cr0;
c01055ff:	8b 45 f0             	mov    -0x10(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c0105602:	89 45 f8             	mov    %eax,-0x8(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c0105605:	81 4d f8 2f 00 05 80 	orl    $0x8005002f,-0x8(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c010560c:	83 65 f8 f3          	andl   $0xfffffff3,-0x8(%ebp)
c0105610:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0105613:	89 45 ec             	mov    %eax,-0x14(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c0105616:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105619:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c010561c:	83 c4 10             	add    $0x10,%esp
c010561f:	5b                   	pop    %ebx
c0105620:	5d                   	pop    %ebp
c0105621:	c3                   	ret    

c0105622 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c0105622:	55                   	push   %ebp
c0105623:	89 e5                	mov    %esp,%ebp
c0105625:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0105628:	8b 45 14             	mov    0x14(%ebp),%eax
c010562b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010562e:	31 d0                	xor    %edx,%eax
c0105630:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105635:	85 c0                	test   %eax,%eax
c0105637:	74 24                	je     c010565d <boot_map_segment+0x3b>
c0105639:	c7 44 24 0c 36 e8 10 	movl   $0xc010e836,0xc(%esp)
c0105640:	c0 
c0105641:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0105648:	c0 
c0105649:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c0105650:	00 
c0105651:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0105658:	e8 5f b7 ff ff       	call   c0100dbc <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c010565d:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0105664:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105667:	25 ff 0f 00 00       	and    $0xfff,%eax
c010566c:	03 45 10             	add    0x10(%ebp),%eax
c010566f:	03 45 f0             	add    -0x10(%ebp),%eax
c0105672:	83 e8 01             	sub    $0x1,%eax
c0105675:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105678:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010567b:	ba 00 00 00 00       	mov    $0x0,%edx
c0105680:	f7 75 f0             	divl   -0x10(%ebp)
c0105683:	89 d0                	mov    %edx,%eax
c0105685:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0105688:	89 d1                	mov    %edx,%ecx
c010568a:	29 c1                	sub    %eax,%ecx
c010568c:	89 c8                	mov    %ecx,%eax
c010568e:	c1 e8 0c             	shr    $0xc,%eax
c0105691:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0105694:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105697:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010569a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010569d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01056a2:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c01056a5:	8b 45 14             	mov    0x14(%ebp),%eax
c01056a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01056ab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01056ae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01056b3:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01056b6:	eb 6b                	jmp    c0105723 <boot_map_segment+0x101>
        pte_t *ptep = get_pte(pgdir, la, 1);
c01056b8:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01056bf:	00 
c01056c0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01056c3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01056c7:	8b 45 08             	mov    0x8(%ebp),%eax
c01056ca:	89 04 24             	mov    %eax,(%esp)
c01056cd:	e8 d1 01 00 00       	call   c01058a3 <get_pte>
c01056d2:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c01056d5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01056d9:	75 24                	jne    c01056ff <boot_map_segment+0xdd>
c01056db:	c7 44 24 0c 62 e8 10 	movl   $0xc010e862,0xc(%esp)
c01056e2:	c0 
c01056e3:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c01056ea:	c0 
c01056eb:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c01056f2:	00 
c01056f3:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c01056fa:	e8 bd b6 ff ff       	call   c0100dbc <__panic>
        *ptep = pa | PTE_P | perm;
c01056ff:	8b 45 18             	mov    0x18(%ebp),%eax
c0105702:	8b 55 14             	mov    0x14(%ebp),%edx
c0105705:	09 d0                	or     %edx,%eax
c0105707:	89 c2                	mov    %eax,%edx
c0105709:	83 ca 01             	or     $0x1,%edx
c010570c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010570f:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0105711:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0105715:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c010571c:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0105723:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105727:	75 8f                	jne    c01056b8 <boot_map_segment+0x96>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c0105729:	c9                   	leave  
c010572a:	c3                   	ret    

c010572b <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c010572b:	55                   	push   %ebp
c010572c:	89 e5                	mov    %esp,%ebp
c010572e:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c0105731:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105738:	e8 00 fa ff ff       	call   c010513d <alloc_pages>
c010573d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0105740:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105744:	75 1c                	jne    c0105762 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c0105746:	c7 44 24 08 6f e8 10 	movl   $0xc010e86f,0x8(%esp)
c010574d:	c0 
c010574e:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0105755:	00 
c0105756:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c010575d:	e8 5a b6 ff ff       	call   c0100dbc <__panic>
    }
    return page2kva(p);
c0105762:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105765:	89 04 24             	mov    %eax,(%esp)
c0105768:	e8 1c f7 ff ff       	call   c0104e89 <page2kva>
}
c010576d:	c9                   	leave  
c010576e:	c3                   	ret    

c010576f <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c010576f:	55                   	push   %ebp
c0105770:	89 e5                	mov    %esp,%ebp
c0105772:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0105775:	e8 71 f9 ff ff       	call   c01050eb <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c010577a:	e8 86 fa ff ff       	call   c0105205 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c010577f:	e8 64 09 00 00       	call   c01060e8 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c0105784:	e8 a2 ff ff ff       	call   c010572b <boot_alloc_page>
c0105789:	a3 84 32 1c c0       	mov    %eax,0xc01c3284
    memset(boot_pgdir, 0, PGSIZE);
c010578e:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c0105793:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010579a:	00 
c010579b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01057a2:	00 
c01057a3:	89 04 24             	mov    %eax,(%esp)
c01057a6:	e8 08 80 00 00       	call   c010d7b3 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c01057ab:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c01057b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01057b3:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01057ba:	77 23                	ja     c01057df <pmm_init+0x70>
c01057bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057bf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01057c3:	c7 44 24 08 04 e8 10 	movl   $0xc010e804,0x8(%esp)
c01057ca:	c0 
c01057cb:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c01057d2:	00 
c01057d3:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c01057da:	e8 dd b5 ff ff       	call   c0100dbc <__panic>
c01057df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057e2:	05 00 00 00 40       	add    $0x40000000,%eax
c01057e7:	a3 cc 53 1c c0       	mov    %eax,0xc01c53cc

    check_pgdir();
c01057ec:	e8 15 09 00 00       	call   c0106106 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c01057f1:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c01057f6:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c01057fc:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c0105801:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105804:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c010580b:	77 23                	ja     c0105830 <pmm_init+0xc1>
c010580d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105810:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105814:	c7 44 24 08 04 e8 10 	movl   $0xc010e804,0x8(%esp)
c010581b:	c0 
c010581c:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c0105823:	00 
c0105824:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c010582b:	e8 8c b5 ff ff       	call   c0100dbc <__panic>
c0105830:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105833:	05 00 00 00 40       	add    $0x40000000,%eax
c0105838:	83 c8 03             	or     $0x3,%eax
c010583b:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c010583d:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c0105842:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0105849:	00 
c010584a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105851:	00 
c0105852:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c0105859:	38 
c010585a:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c0105861:	c0 
c0105862:	89 04 24             	mov    %eax,(%esp)
c0105865:	e8 b8 fd ff ff       	call   c0105622 <boot_map_segment>

    //temporary map: 
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M     
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c010586a:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c010586f:	8b 15 84 32 1c c0    	mov    0xc01c3284,%edx
c0105875:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c010587b:	89 10                	mov    %edx,(%eax)

    enable_paging();
c010587d:	e8 62 fd ff ff       	call   c01055e4 <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0105882:	e8 75 f7 ff ff       	call   c0104ffc <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c0105887:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c010588c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0105892:	e8 0a 0f 00 00       	call   c01067a1 <check_boot_pgdir>

    print_pgdir();
c0105897:	e8 7e 13 00 00       	call   c0106c1a <print_pgdir>
    
    kmalloc_init();
c010589c:	e8 d6 f2 ff ff       	call   c0104b77 <kmalloc_init>

}
c01058a1:	c9                   	leave  
c01058a2:	c3                   	ret    

c01058a3 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c01058a3:	55                   	push   %ebp
c01058a4:	89 e5                	mov    %esp,%ebp
c01058a6:	83 ec 38             	sub    $0x38,%esp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
    pde_t *pdep = &pgdir[PDX(la)];
c01058a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01058ac:	c1 e8 16             	shr    $0x16,%eax
c01058af:	c1 e0 02             	shl    $0x2,%eax
c01058b2:	03 45 08             	add    0x8(%ebp),%eax
c01058b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(*pdep & PTE_P)) {
c01058b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01058bb:	8b 00                	mov    (%eax),%eax
c01058bd:	83 e0 01             	and    $0x1,%eax
c01058c0:	85 c0                	test   %eax,%eax
c01058c2:	0f 85 c4 00 00 00    	jne    c010598c <get_pte+0xe9>
        if (!create)
c01058c8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01058cc:	75 0a                	jne    c01058d8 <get_pte+0x35>
            return NULL;
c01058ce:	b8 00 00 00 00       	mov    $0x0,%eax
c01058d3:	e9 10 01 00 00       	jmp    c01059e8 <get_pte+0x145>
        struct Page* page;
        if (create && (page = alloc_pages(1)) == NULL)
c01058d8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01058dc:	74 1f                	je     c01058fd <get_pte+0x5a>
c01058de:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01058e5:	e8 53 f8 ff ff       	call   c010513d <alloc_pages>
c01058ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01058ed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01058f1:	75 0a                	jne    c01058fd <get_pte+0x5a>
            return NULL;
c01058f3:	b8 00 00 00 00       	mov    $0x0,%eax
c01058f8:	e9 eb 00 00 00       	jmp    c01059e8 <get_pte+0x145>
        set_page_ref(page, 1);
c01058fd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105904:	00 
c0105905:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105908:	89 04 24             	mov    %eax,(%esp)
c010590b:	e8 2d f6 ff ff       	call   c0104f3d <set_page_ref>
        uintptr_t phia = page2pa(page);
c0105910:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105913:	89 04 24             	mov    %eax,(%esp)
c0105916:	e8 13 f5 ff ff       	call   c0104e2e <page2pa>
c010591b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        memset(KADDR(phia), 0, PGSIZE);
c010591e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105921:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105924:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105927:	c1 e8 0c             	shr    $0xc,%eax
c010592a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010592d:	a1 80 32 1c c0       	mov    0xc01c3280,%eax
c0105932:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0105935:	72 23                	jb     c010595a <get_pte+0xb7>
c0105937:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010593a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010593e:	c7 44 24 08 60 e7 10 	movl   $0xc010e760,0x8(%esp)
c0105945:	c0 
c0105946:	c7 44 24 04 98 01 00 	movl   $0x198,0x4(%esp)
c010594d:	00 
c010594e:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0105955:	e8 62 b4 ff ff       	call   c0100dbc <__panic>
c010595a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010595d:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105962:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105969:	00 
c010596a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105971:	00 
c0105972:	89 04 24             	mov    %eax,(%esp)
c0105975:	e8 39 7e 00 00       	call   c010d7b3 <memset>
        *pdep = PDE_ADDR(phia) | PTE_U | PTE_W | PTE_P;
c010597a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010597d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105982:	89 c2                	mov    %eax,%edx
c0105984:	83 ca 07             	or     $0x7,%edx
c0105987:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010598a:	89 10                	mov    %edx,(%eax)
    }
    return &((pte_t *)KADDR(PDE_ADDR(*pdep)))[PTX(la)];
c010598c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010598f:	8b 00                	mov    (%eax),%eax
c0105991:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105996:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105999:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010599c:	c1 e8 0c             	shr    $0xc,%eax
c010599f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01059a2:	a1 80 32 1c c0       	mov    0xc01c3280,%eax
c01059a7:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c01059aa:	72 23                	jb     c01059cf <get_pte+0x12c>
c01059ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059af:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01059b3:	c7 44 24 08 60 e7 10 	movl   $0xc010e760,0x8(%esp)
c01059ba:	c0 
c01059bb:	c7 44 24 04 9b 01 00 	movl   $0x19b,0x4(%esp)
c01059c2:	00 
c01059c3:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c01059ca:	e8 ed b3 ff ff       	call   c0100dbc <__panic>
c01059cf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059d2:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01059d7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01059da:	c1 ea 0c             	shr    $0xc,%edx
c01059dd:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c01059e3:	c1 e2 02             	shl    $0x2,%edx
c01059e6:	01 d0                	add    %edx,%eax
}
c01059e8:	c9                   	leave  
c01059e9:	c3                   	ret    

c01059ea <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c01059ea:	55                   	push   %ebp
c01059eb:	89 e5                	mov    %esp,%ebp
c01059ed:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c01059f0:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01059f7:	00 
c01059f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01059fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01059ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a02:	89 04 24             	mov    %eax,(%esp)
c0105a05:	e8 99 fe ff ff       	call   c01058a3 <get_pte>
c0105a0a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0105a0d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105a11:	74 08                	je     c0105a1b <get_page+0x31>
        *ptep_store = ptep;
c0105a13:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a16:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105a19:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0105a1b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a1f:	74 1b                	je     c0105a3c <get_page+0x52>
c0105a21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a24:	8b 00                	mov    (%eax),%eax
c0105a26:	83 e0 01             	and    $0x1,%eax
c0105a29:	84 c0                	test   %al,%al
c0105a2b:	74 0f                	je     c0105a3c <get_page+0x52>
        return pte2page(*ptep);
c0105a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a30:	8b 00                	mov    (%eax),%eax
c0105a32:	89 04 24             	mov    %eax,(%esp)
c0105a35:	e8 a3 f4 ff ff       	call   c0104edd <pte2page>
c0105a3a:	eb 05                	jmp    c0105a41 <get_page+0x57>
    }
    return NULL;
c0105a3c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105a41:	c9                   	leave  
c0105a42:	c3                   	ret    

c0105a43 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0105a43:	55                   	push   %ebp
c0105a44:	89 e5                	mov    %esp,%ebp
c0105a46:	83 ec 28             	sub    $0x28,%esp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
    if (*ptep & PTE_P) {
c0105a49:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a4c:	8b 00                	mov    (%eax),%eax
c0105a4e:	83 e0 01             	and    $0x1,%eax
c0105a51:	84 c0                	test   %al,%al
c0105a53:	74 52                	je     c0105aa7 <page_remove_pte+0x64>
        struct Page *page = pte2page(*ptep);
c0105a55:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a58:	8b 00                	mov    (%eax),%eax
c0105a5a:	89 04 24             	mov    %eax,(%esp)
c0105a5d:	e8 7b f4 ff ff       	call   c0104edd <pte2page>
c0105a62:	89 45 f4             	mov    %eax,-0xc(%ebp)
        page_ref_dec(page);
c0105a65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a68:	89 04 24             	mov    %eax,(%esp)
c0105a6b:	e8 f1 f4 ff ff       	call   c0104f61 <page_ref_dec>
        if(page->ref == 0) {
c0105a70:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a73:	8b 00                	mov    (%eax),%eax
c0105a75:	85 c0                	test   %eax,%eax
c0105a77:	75 13                	jne    c0105a8c <page_remove_pte+0x49>
            free_page(page);
c0105a79:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105a80:	00 
c0105a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a84:	89 04 24             	mov    %eax,(%esp)
c0105a87:	e8 1c f7 ff ff       	call   c01051a8 <free_pages>
        }
        *ptep = 0;
c0105a8c:	8b 45 10             	mov    0x10(%ebp),%eax
c0105a8f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        tlb_invalidate(pgdir, la);
c0105a95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105a98:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105a9c:	8b 45 08             	mov    0x8(%ebp),%eax
c0105a9f:	89 04 24             	mov    %eax,(%esp)
c0105aa2:	e8 0b 05 00 00       	call   c0105fb2 <tlb_invalidate>
    }
}
c0105aa7:	c9                   	leave  
c0105aa8:	c3                   	ret    

c0105aa9 <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105aa9:	55                   	push   %ebp
c0105aaa:	89 e5                	mov    %esp,%ebp
c0105aac:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105aaf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ab2:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105ab7:	85 c0                	test   %eax,%eax
c0105ab9:	75 0c                	jne    c0105ac7 <unmap_range+0x1e>
c0105abb:	8b 45 10             	mov    0x10(%ebp),%eax
c0105abe:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105ac3:	85 c0                	test   %eax,%eax
c0105ac5:	74 24                	je     c0105aeb <unmap_range+0x42>
c0105ac7:	c7 44 24 0c 88 e8 10 	movl   $0xc010e888,0xc(%esp)
c0105ace:	c0 
c0105acf:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0105ad6:	c0 
c0105ad7:	c7 44 24 04 d6 01 00 	movl   $0x1d6,0x4(%esp)
c0105ade:	00 
c0105adf:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0105ae6:	e8 d1 b2 ff ff       	call   c0100dbc <__panic>
    assert(USER_ACCESS(start, end));
c0105aeb:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105af2:	76 11                	jbe    c0105b05 <unmap_range+0x5c>
c0105af4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105af7:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105afa:	73 09                	jae    c0105b05 <unmap_range+0x5c>
c0105afc:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105b03:	76 24                	jbe    c0105b29 <unmap_range+0x80>
c0105b05:	c7 44 24 0c b1 e8 10 	movl   $0xc010e8b1,0xc(%esp)
c0105b0c:	c0 
c0105b0d:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0105b14:	c0 
c0105b15:	c7 44 24 04 d7 01 00 	movl   $0x1d7,0x4(%esp)
c0105b1c:	00 
c0105b1d:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0105b24:	e8 93 b2 ff ff       	call   c0100dbc <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105b29:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105b30:	00 
c0105b31:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b34:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b38:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b3b:	89 04 24             	mov    %eax,(%esp)
c0105b3e:	e8 60 fd ff ff       	call   c01058a3 <get_pte>
c0105b43:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105b46:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105b4a:	75 18                	jne    c0105b64 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105b4c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b4f:	05 00 00 40 00       	add    $0x400000,%eax
c0105b54:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105b57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b5a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105b5f:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105b62:	eb 29                	jmp    c0105b8d <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105b64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b67:	8b 00                	mov    (%eax),%eax
c0105b69:	85 c0                	test   %eax,%eax
c0105b6b:	74 19                	je     c0105b86 <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105b6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105b70:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105b74:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b77:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105b7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b7e:	89 04 24             	mov    %eax,(%esp)
c0105b81:	e8 bd fe ff ff       	call   c0105a43 <page_remove_pte>
        }
        start += PGSIZE;
c0105b86:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105b8d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105b91:	74 08                	je     c0105b9b <unmap_range+0xf2>
c0105b93:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b96:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105b99:	72 8e                	jb     c0105b29 <unmap_range+0x80>
}
c0105b9b:	c9                   	leave  
c0105b9c:	c3                   	ret    

c0105b9d <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105b9d:	55                   	push   %ebp
c0105b9e:	89 e5                	mov    %esp,%ebp
c0105ba0:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105ba3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ba6:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105bab:	85 c0                	test   %eax,%eax
c0105bad:	75 0c                	jne    c0105bbb <exit_range+0x1e>
c0105baf:	8b 45 10             	mov    0x10(%ebp),%eax
c0105bb2:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105bb7:	85 c0                	test   %eax,%eax
c0105bb9:	74 24                	je     c0105bdf <exit_range+0x42>
c0105bbb:	c7 44 24 0c 88 e8 10 	movl   $0xc010e888,0xc(%esp)
c0105bc2:	c0 
c0105bc3:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0105bca:	c0 
c0105bcb:	c7 44 24 04 e8 01 00 	movl   $0x1e8,0x4(%esp)
c0105bd2:	00 
c0105bd3:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0105bda:	e8 dd b1 ff ff       	call   c0100dbc <__panic>
    assert(USER_ACCESS(start, end));
c0105bdf:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105be6:	76 11                	jbe    c0105bf9 <exit_range+0x5c>
c0105be8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105beb:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105bee:	73 09                	jae    c0105bf9 <exit_range+0x5c>
c0105bf0:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105bf7:	76 24                	jbe    c0105c1d <exit_range+0x80>
c0105bf9:	c7 44 24 0c b1 e8 10 	movl   $0xc010e8b1,0xc(%esp)
c0105c00:	c0 
c0105c01:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0105c08:	c0 
c0105c09:	c7 44 24 04 e9 01 00 	movl   $0x1e9,0x4(%esp)
c0105c10:	00 
c0105c11:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0105c18:	e8 9f b1 ff ff       	call   c0100dbc <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105c1d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c20:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105c23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c26:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105c2b:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105c2e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c31:	c1 e8 16             	shr    $0x16,%eax
c0105c34:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105c37:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c3a:	c1 e0 02             	shl    $0x2,%eax
c0105c3d:	03 45 08             	add    0x8(%ebp),%eax
c0105c40:	8b 00                	mov    (%eax),%eax
c0105c42:	83 e0 01             	and    $0x1,%eax
c0105c45:	84 c0                	test   %al,%al
c0105c47:	74 32                	je     c0105c7b <exit_range+0xde>
            free_page(pde2page(pgdir[pde_idx]));
c0105c49:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c4c:	c1 e0 02             	shl    $0x2,%eax
c0105c4f:	03 45 08             	add    0x8(%ebp),%eax
c0105c52:	8b 00                	mov    (%eax),%eax
c0105c54:	89 04 24             	mov    %eax,(%esp)
c0105c57:	e8 bf f2 ff ff       	call   c0104f1b <pde2page>
c0105c5c:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105c63:	00 
c0105c64:	89 04 24             	mov    %eax,(%esp)
c0105c67:	e8 3c f5 ff ff       	call   c01051a8 <free_pages>
            pgdir[pde_idx] = 0;
c0105c6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c6f:	c1 e0 02             	shl    $0x2,%eax
c0105c72:	03 45 08             	add    0x8(%ebp),%eax
c0105c75:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105c7b:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105c82:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105c86:	74 08                	je     c0105c90 <exit_range+0xf3>
c0105c88:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105c8b:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105c8e:	72 9e                	jb     c0105c2e <exit_range+0x91>
}
c0105c90:	c9                   	leave  
c0105c91:	c3                   	ret    

c0105c92 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105c92:	55                   	push   %ebp
c0105c93:	89 e5                	mov    %esp,%ebp
c0105c95:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105c98:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c9b:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105ca0:	85 c0                	test   %eax,%eax
c0105ca2:	75 0c                	jne    c0105cb0 <copy_range+0x1e>
c0105ca4:	8b 45 14             	mov    0x14(%ebp),%eax
c0105ca7:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105cac:	85 c0                	test   %eax,%eax
c0105cae:	74 24                	je     c0105cd4 <copy_range+0x42>
c0105cb0:	c7 44 24 0c 88 e8 10 	movl   $0xc010e888,0xc(%esp)
c0105cb7:	c0 
c0105cb8:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0105cbf:	c0 
c0105cc0:	c7 44 24 04 fe 01 00 	movl   $0x1fe,0x4(%esp)
c0105cc7:	00 
c0105cc8:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0105ccf:	e8 e8 b0 ff ff       	call   c0100dbc <__panic>
    assert(USER_ACCESS(start, end));
c0105cd4:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105cdb:	76 11                	jbe    c0105cee <copy_range+0x5c>
c0105cdd:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ce0:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105ce3:	73 09                	jae    c0105cee <copy_range+0x5c>
c0105ce5:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105cec:	76 24                	jbe    c0105d12 <copy_range+0x80>
c0105cee:	c7 44 24 0c b1 e8 10 	movl   $0xc010e8b1,0xc(%esp)
c0105cf5:	c0 
c0105cf6:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0105cfd:	c0 
c0105cfe:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
c0105d05:	00 
c0105d06:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0105d0d:	e8 aa b0 ff ff       	call   c0100dbc <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0105d12:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105d19:	00 
c0105d1a:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d1d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d21:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d24:	89 04 24             	mov    %eax,(%esp)
c0105d27:	e8 77 fb ff ff       	call   c01058a3 <get_pte>
c0105d2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105d2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105d33:	75 1b                	jne    c0105d50 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105d35:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d38:	05 00 00 40 00       	add    $0x400000,%eax
c0105d3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105d40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105d43:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105d48:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0105d4b:	e9 4c 01 00 00       	jmp    c0105e9c <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0105d50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d53:	8b 00                	mov    (%eax),%eax
c0105d55:	83 e0 01             	and    $0x1,%eax
c0105d58:	84 c0                	test   %al,%al
c0105d5a:	0f 84 35 01 00 00    	je     c0105e95 <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0105d60:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105d67:	00 
c0105d68:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d6b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d6f:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d72:	89 04 24             	mov    %eax,(%esp)
c0105d75:	e8 29 fb ff ff       	call   c01058a3 <get_pte>
c0105d7a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105d7d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105d81:	75 0a                	jne    c0105d8d <copy_range+0xfb>
                return -E_NO_MEM;
c0105d83:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105d88:	e9 26 01 00 00       	jmp    c0105eb3 <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0105d8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d90:	8b 00                	mov    (%eax),%eax
c0105d92:	83 e0 07             	and    $0x7,%eax
c0105d95:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0105d98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d9b:	8b 00                	mov    (%eax),%eax
c0105d9d:	89 04 24             	mov    %eax,(%esp)
c0105da0:	e8 38 f1 ff ff       	call   c0104edd <pte2page>
c0105da5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0105da8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105daf:	e8 89 f3 ff ff       	call   c010513d <alloc_pages>
c0105db4:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0105db7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105dbb:	75 24                	jne    c0105de1 <copy_range+0x14f>
c0105dbd:	c7 44 24 0c c9 e8 10 	movl   $0xc010e8c9,0xc(%esp)
c0105dc4:	c0 
c0105dc5:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0105dcc:	c0 
c0105dcd:	c7 44 24 04 12 02 00 	movl   $0x212,0x4(%esp)
c0105dd4:	00 
c0105dd5:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0105ddc:	e8 db af ff ff       	call   c0100dbc <__panic>
        assert(npage!=NULL);
c0105de1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0105de5:	75 24                	jne    c0105e0b <copy_range+0x179>
c0105de7:	c7 44 24 0c d4 e8 10 	movl   $0xc010e8d4,0xc(%esp)
c0105dee:	c0 
c0105def:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0105df6:	c0 
c0105df7:	c7 44 24 04 13 02 00 	movl   $0x213,0x4(%esp)
c0105dfe:	00 
c0105dff:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0105e06:	e8 b1 af ff ff       	call   c0100dbc <__panic>
        int ret=0;
c0105e0b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
            void * src_kvaddr = page2kva(page);
c0105e12:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105e15:	89 04 24             	mov    %eax,(%esp)
c0105e18:	e8 6c f0 ff ff       	call   c0104e89 <page2kva>
c0105e1d:	89 45 d8             	mov    %eax,-0x28(%ebp)
            void * dst_kvaddr = page2kva(npage);
c0105e20:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105e23:	89 04 24             	mov    %eax,(%esp)
c0105e26:	e8 5e f0 ff ff       	call   c0104e89 <page2kva>
c0105e2b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
c0105e2e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105e35:	00 
c0105e36:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0105e39:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e3d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105e40:	89 04 24             	mov    %eax,(%esp)
c0105e43:	e8 6a 7a 00 00       	call   c010d8b2 <memcpy>
        ret = page_insert(to, npage, start, perm);
c0105e48:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105e4b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105e4f:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e52:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e56:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105e59:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e60:	89 04 24             	mov    %eax,(%esp)
c0105e63:	e8 91 00 00 00       	call   c0105ef9 <page_insert>
c0105e68:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(ret == 0);
c0105e6b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0105e6f:	74 24                	je     c0105e95 <copy_range+0x203>
c0105e71:	c7 44 24 0c e0 e8 10 	movl   $0xc010e8e0,0xc(%esp)
c0105e78:	c0 
c0105e79:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0105e80:	c0 
c0105e81:	c7 44 24 04 27 02 00 	movl   $0x227,0x4(%esp)
c0105e88:	00 
c0105e89:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0105e90:	e8 27 af ff ff       	call   c0100dbc <__panic>
        }
        start += PGSIZE;
c0105e95:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0105e9c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105ea0:	74 0c                	je     c0105eae <copy_range+0x21c>
c0105ea2:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ea5:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105ea8:	0f 82 64 fe ff ff    	jb     c0105d12 <copy_range+0x80>
    return 0;
c0105eae:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105eb3:	c9                   	leave  
c0105eb4:	c3                   	ret    

c0105eb5 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c0105eb5:	55                   	push   %ebp
c0105eb6:	89 e5                	mov    %esp,%ebp
c0105eb8:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105ebb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105ec2:	00 
c0105ec3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ec6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105eca:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ecd:	89 04 24             	mov    %eax,(%esp)
c0105ed0:	e8 ce f9 ff ff       	call   c01058a3 <get_pte>
c0105ed5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c0105ed8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105edc:	74 19                	je     c0105ef7 <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c0105ede:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ee1:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105ee5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ee8:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105eec:	8b 45 08             	mov    0x8(%ebp),%eax
c0105eef:	89 04 24             	mov    %eax,(%esp)
c0105ef2:	e8 4c fb ff ff       	call   c0105a43 <page_remove_pte>
    }
}
c0105ef7:	c9                   	leave  
c0105ef8:	c3                   	ret    

c0105ef9 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0105ef9:	55                   	push   %ebp
c0105efa:	89 e5                	mov    %esp,%ebp
c0105efc:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0105eff:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0105f06:	00 
c0105f07:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f0a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f11:	89 04 24             	mov    %eax,(%esp)
c0105f14:	e8 8a f9 ff ff       	call   c01058a3 <get_pte>
c0105f19:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0105f1c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105f20:	75 0a                	jne    c0105f2c <page_insert+0x33>
        return -E_NO_MEM;
c0105f22:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105f27:	e9 84 00 00 00       	jmp    c0105fb0 <page_insert+0xb7>
    }
    page_ref_inc(page);
c0105f2c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f2f:	89 04 24             	mov    %eax,(%esp)
c0105f32:	e8 13 f0 ff ff       	call   c0104f4a <page_ref_inc>
    if (*ptep & PTE_P) {
c0105f37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f3a:	8b 00                	mov    (%eax),%eax
c0105f3c:	83 e0 01             	and    $0x1,%eax
c0105f3f:	84 c0                	test   %al,%al
c0105f41:	74 3e                	je     c0105f81 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0105f43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f46:	8b 00                	mov    (%eax),%eax
c0105f48:	89 04 24             	mov    %eax,(%esp)
c0105f4b:	e8 8d ef ff ff       	call   c0104edd <pte2page>
c0105f50:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0105f53:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f56:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105f59:	75 0d                	jne    c0105f68 <page_insert+0x6f>
            page_ref_dec(page);
c0105f5b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f5e:	89 04 24             	mov    %eax,(%esp)
c0105f61:	e8 fb ef ff ff       	call   c0104f61 <page_ref_dec>
c0105f66:	eb 19                	jmp    c0105f81 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c0105f68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f6b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105f6f:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f72:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105f76:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f79:	89 04 24             	mov    %eax,(%esp)
c0105f7c:	e8 c2 fa ff ff       	call   c0105a43 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0105f81:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f84:	89 04 24             	mov    %eax,(%esp)
c0105f87:	e8 a2 ee ff ff       	call   c0104e2e <page2pa>
c0105f8c:	0b 45 14             	or     0x14(%ebp),%eax
c0105f8f:	89 c2                	mov    %eax,%edx
c0105f91:	83 ca 01             	or     $0x1,%edx
c0105f94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f97:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c0105f99:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f9c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105fa0:	8b 45 08             	mov    0x8(%ebp),%eax
c0105fa3:	89 04 24             	mov    %eax,(%esp)
c0105fa6:	e8 07 00 00 00       	call   c0105fb2 <tlb_invalidate>
    return 0;
c0105fab:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105fb0:	c9                   	leave  
c0105fb1:	c3                   	ret    

c0105fb2 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c0105fb2:	55                   	push   %ebp
c0105fb3:	89 e5                	mov    %esp,%ebp
c0105fb5:	53                   	push   %ebx
c0105fb6:	83 ec 24             	sub    $0x24,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c0105fb9:	0f 20 db             	mov    %cr3,%ebx
c0105fbc:	89 5d f0             	mov    %ebx,-0x10(%ebp)
    return cr3;
c0105fbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c0105fc2:	89 c2                	mov    %eax,%edx
c0105fc4:	8b 45 08             	mov    0x8(%ebp),%eax
c0105fc7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105fca:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105fd1:	77 23                	ja     c0105ff6 <tlb_invalidate+0x44>
c0105fd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105fd6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105fda:	c7 44 24 08 04 e8 10 	movl   $0xc010e804,0x8(%esp)
c0105fe1:	c0 
c0105fe2:	c7 44 24 04 58 02 00 	movl   $0x258,0x4(%esp)
c0105fe9:	00 
c0105fea:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0105ff1:	e8 c6 ad ff ff       	call   c0100dbc <__panic>
c0105ff6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ff9:	05 00 00 00 40       	add    $0x40000000,%eax
c0105ffe:	39 c2                	cmp    %eax,%edx
c0106000:	75 0c                	jne    c010600e <tlb_invalidate+0x5c>
        invlpg((void *)la);
c0106002:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106005:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c0106008:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010600b:	0f 01 38             	invlpg (%eax)
    }
}
c010600e:	83 c4 24             	add    $0x24,%esp
c0106011:	5b                   	pop    %ebx
c0106012:	5d                   	pop    %ebp
c0106013:	c3                   	ret    

c0106014 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0106014:	55                   	push   %ebp
c0106015:	89 e5                	mov    %esp,%ebp
c0106017:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c010601a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106021:	e8 17 f1 ff ff       	call   c010513d <alloc_pages>
c0106026:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0106029:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010602d:	0f 84 b0 00 00 00    	je     c01060e3 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0106033:	8b 45 10             	mov    0x10(%ebp),%eax
c0106036:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010603a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010603d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106041:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106044:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106048:	8b 45 08             	mov    0x8(%ebp),%eax
c010604b:	89 04 24             	mov    %eax,(%esp)
c010604e:	e8 a6 fe ff ff       	call   c0105ef9 <page_insert>
c0106053:	85 c0                	test   %eax,%eax
c0106055:	74 1a                	je     c0106071 <pgdir_alloc_page+0x5d>
            free_page(page);
c0106057:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010605e:	00 
c010605f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106062:	89 04 24             	mov    %eax,(%esp)
c0106065:	e8 3e f1 ff ff       	call   c01051a8 <free_pages>
            return NULL;
c010606a:	b8 00 00 00 00       	mov    $0x0,%eax
c010606f:	eb 75                	jmp    c01060e6 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c0106071:	a1 0c 33 1c c0       	mov    0xc01c330c,%eax
c0106076:	85 c0                	test   %eax,%eax
c0106078:	74 69                	je     c01060e3 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c010607a:	a1 ac 54 1c c0       	mov    0xc01c54ac,%eax
c010607f:	85 c0                	test   %eax,%eax
c0106081:	74 60                	je     c01060e3 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0106083:	a1 ac 54 1c c0       	mov    0xc01c54ac,%eax
c0106088:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010608f:	00 
c0106090:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106093:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106097:	8b 55 0c             	mov    0xc(%ebp),%edx
c010609a:	89 54 24 04          	mov    %edx,0x4(%esp)
c010609e:	89 04 24             	mov    %eax,(%esp)
c01060a1:	e8 51 0e 00 00       	call   c0106ef7 <swap_map_swappable>
                page->pra_vaddr=la;
c01060a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060a9:	8b 55 0c             	mov    0xc(%ebp),%edx
c01060ac:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c01060af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01060b2:	89 04 24             	mov    %eax,(%esp)
c01060b5:	e8 79 ee ff ff       	call   c0104f33 <page_ref>
c01060ba:	83 f8 01             	cmp    $0x1,%eax
c01060bd:	74 24                	je     c01060e3 <pgdir_alloc_page+0xcf>
c01060bf:	c7 44 24 0c e9 e8 10 	movl   $0xc010e8e9,0xc(%esp)
c01060c6:	c0 
c01060c7:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c01060ce:	c0 
c01060cf:	c7 44 24 04 6c 02 00 	movl   $0x26c,0x4(%esp)
c01060d6:	00 
c01060d7:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c01060de:	e8 d9 ac ff ff       	call   c0100dbc <__panic>
            }
        }

    }

    return page;
c01060e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01060e6:	c9                   	leave  
c01060e7:	c3                   	ret    

c01060e8 <check_alloc_page>:

static void
check_alloc_page(void) {
c01060e8:	55                   	push   %ebp
c01060e9:	89 e5                	mov    %esp,%ebp
c01060eb:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c01060ee:	a1 c8 53 1c c0       	mov    0xc01c53c8,%eax
c01060f3:	8b 40 18             	mov    0x18(%eax),%eax
c01060f6:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c01060f8:	c7 04 24 00 e9 10 c0 	movl   $0xc010e900,(%esp)
c01060ff:	e8 5f a2 ff ff       	call   c0100363 <cprintf>
}
c0106104:	c9                   	leave  
c0106105:	c3                   	ret    

c0106106 <check_pgdir>:

static void
check_pgdir(void) {
c0106106:	55                   	push   %ebp
c0106107:	89 e5                	mov    %esp,%ebp
c0106109:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c010610c:	a1 80 32 1c c0       	mov    0xc01c3280,%eax
c0106111:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0106116:	76 24                	jbe    c010613c <check_pgdir+0x36>
c0106118:	c7 44 24 0c 1f e9 10 	movl   $0xc010e91f,0xc(%esp)
c010611f:	c0 
c0106120:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0106127:	c0 
c0106128:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
c010612f:	00 
c0106130:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106137:	e8 80 ac ff ff       	call   c0100dbc <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c010613c:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c0106141:	85 c0                	test   %eax,%eax
c0106143:	74 0e                	je     c0106153 <check_pgdir+0x4d>
c0106145:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c010614a:	25 ff 0f 00 00       	and    $0xfff,%eax
c010614f:	85 c0                	test   %eax,%eax
c0106151:	74 24                	je     c0106177 <check_pgdir+0x71>
c0106153:	c7 44 24 0c 3c e9 10 	movl   $0xc010e93c,0xc(%esp)
c010615a:	c0 
c010615b:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0106162:	c0 
c0106163:	c7 44 24 04 85 02 00 	movl   $0x285,0x4(%esp)
c010616a:	00 
c010616b:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106172:	e8 45 ac ff ff       	call   c0100dbc <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0106177:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c010617c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106183:	00 
c0106184:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010618b:	00 
c010618c:	89 04 24             	mov    %eax,(%esp)
c010618f:	e8 56 f8 ff ff       	call   c01059ea <get_page>
c0106194:	85 c0                	test   %eax,%eax
c0106196:	74 24                	je     c01061bc <check_pgdir+0xb6>
c0106198:	c7 44 24 0c 74 e9 10 	movl   $0xc010e974,0xc(%esp)
c010619f:	c0 
c01061a0:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c01061a7:	c0 
c01061a8:	c7 44 24 04 86 02 00 	movl   $0x286,0x4(%esp)
c01061af:	00 
c01061b0:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c01061b7:	e8 00 ac ff ff       	call   c0100dbc <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c01061bc:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01061c3:	e8 75 ef ff ff       	call   c010513d <alloc_pages>
c01061c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c01061cb:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c01061d0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01061d7:	00 
c01061d8:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01061df:	00 
c01061e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01061e3:	89 54 24 04          	mov    %edx,0x4(%esp)
c01061e7:	89 04 24             	mov    %eax,(%esp)
c01061ea:	e8 0a fd ff ff       	call   c0105ef9 <page_insert>
c01061ef:	85 c0                	test   %eax,%eax
c01061f1:	74 24                	je     c0106217 <check_pgdir+0x111>
c01061f3:	c7 44 24 0c 9c e9 10 	movl   $0xc010e99c,0xc(%esp)
c01061fa:	c0 
c01061fb:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0106202:	c0 
c0106203:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c010620a:	00 
c010620b:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106212:	e8 a5 ab ff ff       	call   c0100dbc <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0106217:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c010621c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106223:	00 
c0106224:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010622b:	00 
c010622c:	89 04 24             	mov    %eax,(%esp)
c010622f:	e8 6f f6 ff ff       	call   c01058a3 <get_pte>
c0106234:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106237:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010623b:	75 24                	jne    c0106261 <check_pgdir+0x15b>
c010623d:	c7 44 24 0c c8 e9 10 	movl   $0xc010e9c8,0xc(%esp)
c0106244:	c0 
c0106245:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c010624c:	c0 
c010624d:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c0106254:	00 
c0106255:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c010625c:	e8 5b ab ff ff       	call   c0100dbc <__panic>
    assert(pte2page(*ptep) == p1);
c0106261:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106264:	8b 00                	mov    (%eax),%eax
c0106266:	89 04 24             	mov    %eax,(%esp)
c0106269:	e8 6f ec ff ff       	call   c0104edd <pte2page>
c010626e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106271:	74 24                	je     c0106297 <check_pgdir+0x191>
c0106273:	c7 44 24 0c f5 e9 10 	movl   $0xc010e9f5,0xc(%esp)
c010627a:	c0 
c010627b:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0106282:	c0 
c0106283:	c7 44 24 04 8e 02 00 	movl   $0x28e,0x4(%esp)
c010628a:	00 
c010628b:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106292:	e8 25 ab ff ff       	call   c0100dbc <__panic>
    assert(page_ref(p1) == 1);
c0106297:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010629a:	89 04 24             	mov    %eax,(%esp)
c010629d:	e8 91 ec ff ff       	call   c0104f33 <page_ref>
c01062a2:	83 f8 01             	cmp    $0x1,%eax
c01062a5:	74 24                	je     c01062cb <check_pgdir+0x1c5>
c01062a7:	c7 44 24 0c 0b ea 10 	movl   $0xc010ea0b,0xc(%esp)
c01062ae:	c0 
c01062af:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c01062b6:	c0 
c01062b7:	c7 44 24 04 8f 02 00 	movl   $0x28f,0x4(%esp)
c01062be:	00 
c01062bf:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c01062c6:	e8 f1 aa ff ff       	call   c0100dbc <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c01062cb:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c01062d0:	8b 00                	mov    (%eax),%eax
c01062d2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01062d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01062da:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062dd:	c1 e8 0c             	shr    $0xc,%eax
c01062e0:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01062e3:	a1 80 32 1c c0       	mov    0xc01c3280,%eax
c01062e8:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01062eb:	72 23                	jb     c0106310 <check_pgdir+0x20a>
c01062ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062f0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01062f4:	c7 44 24 08 60 e7 10 	movl   $0xc010e760,0x8(%esp)
c01062fb:	c0 
c01062fc:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
c0106303:	00 
c0106304:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c010630b:	e8 ac aa ff ff       	call   c0100dbc <__panic>
c0106310:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106313:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106318:	83 c0 04             	add    $0x4,%eax
c010631b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c010631e:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c0106323:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010632a:	00 
c010632b:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106332:	00 
c0106333:	89 04 24             	mov    %eax,(%esp)
c0106336:	e8 68 f5 ff ff       	call   c01058a3 <get_pte>
c010633b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010633e:	74 24                	je     c0106364 <check_pgdir+0x25e>
c0106340:	c7 44 24 0c 20 ea 10 	movl   $0xc010ea20,0xc(%esp)
c0106347:	c0 
c0106348:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c010634f:	c0 
c0106350:	c7 44 24 04 92 02 00 	movl   $0x292,0x4(%esp)
c0106357:	00 
c0106358:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c010635f:	e8 58 aa ff ff       	call   c0100dbc <__panic>

    p2 = alloc_page();
c0106364:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010636b:	e8 cd ed ff ff       	call   c010513d <alloc_pages>
c0106370:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0106373:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c0106378:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c010637f:	00 
c0106380:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106387:	00 
c0106388:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010638b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010638f:	89 04 24             	mov    %eax,(%esp)
c0106392:	e8 62 fb ff ff       	call   c0105ef9 <page_insert>
c0106397:	85 c0                	test   %eax,%eax
c0106399:	74 24                	je     c01063bf <check_pgdir+0x2b9>
c010639b:	c7 44 24 0c 48 ea 10 	movl   $0xc010ea48,0xc(%esp)
c01063a2:	c0 
c01063a3:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c01063aa:	c0 
c01063ab:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c01063b2:	00 
c01063b3:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c01063ba:	e8 fd a9 ff ff       	call   c0100dbc <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01063bf:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c01063c4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01063cb:	00 
c01063cc:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01063d3:	00 
c01063d4:	89 04 24             	mov    %eax,(%esp)
c01063d7:	e8 c7 f4 ff ff       	call   c01058a3 <get_pte>
c01063dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01063df:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01063e3:	75 24                	jne    c0106409 <check_pgdir+0x303>
c01063e5:	c7 44 24 0c 80 ea 10 	movl   $0xc010ea80,0xc(%esp)
c01063ec:	c0 
c01063ed:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c01063f4:	c0 
c01063f5:	c7 44 24 04 96 02 00 	movl   $0x296,0x4(%esp)
c01063fc:	00 
c01063fd:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106404:	e8 b3 a9 ff ff       	call   c0100dbc <__panic>
    assert(*ptep & PTE_U);
c0106409:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010640c:	8b 00                	mov    (%eax),%eax
c010640e:	83 e0 04             	and    $0x4,%eax
c0106411:	85 c0                	test   %eax,%eax
c0106413:	75 24                	jne    c0106439 <check_pgdir+0x333>
c0106415:	c7 44 24 0c b0 ea 10 	movl   $0xc010eab0,0xc(%esp)
c010641c:	c0 
c010641d:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0106424:	c0 
c0106425:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
c010642c:	00 
c010642d:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106434:	e8 83 a9 ff ff       	call   c0100dbc <__panic>
    assert(*ptep & PTE_W);
c0106439:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010643c:	8b 00                	mov    (%eax),%eax
c010643e:	83 e0 02             	and    $0x2,%eax
c0106441:	85 c0                	test   %eax,%eax
c0106443:	75 24                	jne    c0106469 <check_pgdir+0x363>
c0106445:	c7 44 24 0c be ea 10 	movl   $0xc010eabe,0xc(%esp)
c010644c:	c0 
c010644d:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0106454:	c0 
c0106455:	c7 44 24 04 98 02 00 	movl   $0x298,0x4(%esp)
c010645c:	00 
c010645d:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106464:	e8 53 a9 ff ff       	call   c0100dbc <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0106469:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c010646e:	8b 00                	mov    (%eax),%eax
c0106470:	83 e0 04             	and    $0x4,%eax
c0106473:	85 c0                	test   %eax,%eax
c0106475:	75 24                	jne    c010649b <check_pgdir+0x395>
c0106477:	c7 44 24 0c cc ea 10 	movl   $0xc010eacc,0xc(%esp)
c010647e:	c0 
c010647f:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0106486:	c0 
c0106487:	c7 44 24 04 99 02 00 	movl   $0x299,0x4(%esp)
c010648e:	00 
c010648f:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106496:	e8 21 a9 ff ff       	call   c0100dbc <__panic>
    assert(page_ref(p2) == 1);
c010649b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010649e:	89 04 24             	mov    %eax,(%esp)
c01064a1:	e8 8d ea ff ff       	call   c0104f33 <page_ref>
c01064a6:	83 f8 01             	cmp    $0x1,%eax
c01064a9:	74 24                	je     c01064cf <check_pgdir+0x3c9>
c01064ab:	c7 44 24 0c e2 ea 10 	movl   $0xc010eae2,0xc(%esp)
c01064b2:	c0 
c01064b3:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c01064ba:	c0 
c01064bb:	c7 44 24 04 9a 02 00 	movl   $0x29a,0x4(%esp)
c01064c2:	00 
c01064c3:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c01064ca:	e8 ed a8 ff ff       	call   c0100dbc <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c01064cf:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c01064d4:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01064db:	00 
c01064dc:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01064e3:	00 
c01064e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01064e7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01064eb:	89 04 24             	mov    %eax,(%esp)
c01064ee:	e8 06 fa ff ff       	call   c0105ef9 <page_insert>
c01064f3:	85 c0                	test   %eax,%eax
c01064f5:	74 24                	je     c010651b <check_pgdir+0x415>
c01064f7:	c7 44 24 0c f4 ea 10 	movl   $0xc010eaf4,0xc(%esp)
c01064fe:	c0 
c01064ff:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0106506:	c0 
c0106507:	c7 44 24 04 9c 02 00 	movl   $0x29c,0x4(%esp)
c010650e:	00 
c010650f:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106516:	e8 a1 a8 ff ff       	call   c0100dbc <__panic>
    assert(page_ref(p1) == 2);
c010651b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010651e:	89 04 24             	mov    %eax,(%esp)
c0106521:	e8 0d ea ff ff       	call   c0104f33 <page_ref>
c0106526:	83 f8 02             	cmp    $0x2,%eax
c0106529:	74 24                	je     c010654f <check_pgdir+0x449>
c010652b:	c7 44 24 0c 20 eb 10 	movl   $0xc010eb20,0xc(%esp)
c0106532:	c0 
c0106533:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c010653a:	c0 
c010653b:	c7 44 24 04 9d 02 00 	movl   $0x29d,0x4(%esp)
c0106542:	00 
c0106543:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c010654a:	e8 6d a8 ff ff       	call   c0100dbc <__panic>
    assert(page_ref(p2) == 0);
c010654f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106552:	89 04 24             	mov    %eax,(%esp)
c0106555:	e8 d9 e9 ff ff       	call   c0104f33 <page_ref>
c010655a:	85 c0                	test   %eax,%eax
c010655c:	74 24                	je     c0106582 <check_pgdir+0x47c>
c010655e:	c7 44 24 0c 32 eb 10 	movl   $0xc010eb32,0xc(%esp)
c0106565:	c0 
c0106566:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c010656d:	c0 
c010656e:	c7 44 24 04 9e 02 00 	movl   $0x29e,0x4(%esp)
c0106575:	00 
c0106576:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c010657d:	e8 3a a8 ff ff       	call   c0100dbc <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0106582:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c0106587:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010658e:	00 
c010658f:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106596:	00 
c0106597:	89 04 24             	mov    %eax,(%esp)
c010659a:	e8 04 f3 ff ff       	call   c01058a3 <get_pte>
c010659f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01065a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01065a6:	75 24                	jne    c01065cc <check_pgdir+0x4c6>
c01065a8:	c7 44 24 0c 80 ea 10 	movl   $0xc010ea80,0xc(%esp)
c01065af:	c0 
c01065b0:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c01065b7:	c0 
c01065b8:	c7 44 24 04 9f 02 00 	movl   $0x29f,0x4(%esp)
c01065bf:	00 
c01065c0:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c01065c7:	e8 f0 a7 ff ff       	call   c0100dbc <__panic>
    assert(pte2page(*ptep) == p1);
c01065cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01065cf:	8b 00                	mov    (%eax),%eax
c01065d1:	89 04 24             	mov    %eax,(%esp)
c01065d4:	e8 04 e9 ff ff       	call   c0104edd <pte2page>
c01065d9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01065dc:	74 24                	je     c0106602 <check_pgdir+0x4fc>
c01065de:	c7 44 24 0c f5 e9 10 	movl   $0xc010e9f5,0xc(%esp)
c01065e5:	c0 
c01065e6:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c01065ed:	c0 
c01065ee:	c7 44 24 04 a0 02 00 	movl   $0x2a0,0x4(%esp)
c01065f5:	00 
c01065f6:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c01065fd:	e8 ba a7 ff ff       	call   c0100dbc <__panic>
    assert((*ptep & PTE_U) == 0);
c0106602:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106605:	8b 00                	mov    (%eax),%eax
c0106607:	83 e0 04             	and    $0x4,%eax
c010660a:	85 c0                	test   %eax,%eax
c010660c:	74 24                	je     c0106632 <check_pgdir+0x52c>
c010660e:	c7 44 24 0c 44 eb 10 	movl   $0xc010eb44,0xc(%esp)
c0106615:	c0 
c0106616:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c010661d:	c0 
c010661e:	c7 44 24 04 a1 02 00 	movl   $0x2a1,0x4(%esp)
c0106625:	00 
c0106626:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c010662d:	e8 8a a7 ff ff       	call   c0100dbc <__panic>

    page_remove(boot_pgdir, 0x0);
c0106632:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c0106637:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010663e:	00 
c010663f:	89 04 24             	mov    %eax,(%esp)
c0106642:	e8 6e f8 ff ff       	call   c0105eb5 <page_remove>
    assert(page_ref(p1) == 1);
c0106647:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010664a:	89 04 24             	mov    %eax,(%esp)
c010664d:	e8 e1 e8 ff ff       	call   c0104f33 <page_ref>
c0106652:	83 f8 01             	cmp    $0x1,%eax
c0106655:	74 24                	je     c010667b <check_pgdir+0x575>
c0106657:	c7 44 24 0c 0b ea 10 	movl   $0xc010ea0b,0xc(%esp)
c010665e:	c0 
c010665f:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0106666:	c0 
c0106667:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c010666e:	00 
c010666f:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106676:	e8 41 a7 ff ff       	call   c0100dbc <__panic>
    assert(page_ref(p2) == 0);
c010667b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010667e:	89 04 24             	mov    %eax,(%esp)
c0106681:	e8 ad e8 ff ff       	call   c0104f33 <page_ref>
c0106686:	85 c0                	test   %eax,%eax
c0106688:	74 24                	je     c01066ae <check_pgdir+0x5a8>
c010668a:	c7 44 24 0c 32 eb 10 	movl   $0xc010eb32,0xc(%esp)
c0106691:	c0 
c0106692:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0106699:	c0 
c010669a:	c7 44 24 04 a5 02 00 	movl   $0x2a5,0x4(%esp)
c01066a1:	00 
c01066a2:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c01066a9:	e8 0e a7 ff ff       	call   c0100dbc <__panic>

    page_remove(boot_pgdir, PGSIZE);
c01066ae:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c01066b3:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01066ba:	00 
c01066bb:	89 04 24             	mov    %eax,(%esp)
c01066be:	e8 f2 f7 ff ff       	call   c0105eb5 <page_remove>
    assert(page_ref(p1) == 0);
c01066c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01066c6:	89 04 24             	mov    %eax,(%esp)
c01066c9:	e8 65 e8 ff ff       	call   c0104f33 <page_ref>
c01066ce:	85 c0                	test   %eax,%eax
c01066d0:	74 24                	je     c01066f6 <check_pgdir+0x5f0>
c01066d2:	c7 44 24 0c 59 eb 10 	movl   $0xc010eb59,0xc(%esp)
c01066d9:	c0 
c01066da:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c01066e1:	c0 
c01066e2:	c7 44 24 04 a8 02 00 	movl   $0x2a8,0x4(%esp)
c01066e9:	00 
c01066ea:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c01066f1:	e8 c6 a6 ff ff       	call   c0100dbc <__panic>
    assert(page_ref(p2) == 0);
c01066f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01066f9:	89 04 24             	mov    %eax,(%esp)
c01066fc:	e8 32 e8 ff ff       	call   c0104f33 <page_ref>
c0106701:	85 c0                	test   %eax,%eax
c0106703:	74 24                	je     c0106729 <check_pgdir+0x623>
c0106705:	c7 44 24 0c 32 eb 10 	movl   $0xc010eb32,0xc(%esp)
c010670c:	c0 
c010670d:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0106714:	c0 
c0106715:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
c010671c:	00 
c010671d:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106724:	e8 93 a6 ff ff       	call   c0100dbc <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0106729:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c010672e:	8b 00                	mov    (%eax),%eax
c0106730:	89 04 24             	mov    %eax,(%esp)
c0106733:	e8 e3 e7 ff ff       	call   c0104f1b <pde2page>
c0106738:	89 04 24             	mov    %eax,(%esp)
c010673b:	e8 f3 e7 ff ff       	call   c0104f33 <page_ref>
c0106740:	83 f8 01             	cmp    $0x1,%eax
c0106743:	74 24                	je     c0106769 <check_pgdir+0x663>
c0106745:	c7 44 24 0c 6c eb 10 	movl   $0xc010eb6c,0xc(%esp)
c010674c:	c0 
c010674d:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0106754:	c0 
c0106755:	c7 44 24 04 ab 02 00 	movl   $0x2ab,0x4(%esp)
c010675c:	00 
c010675d:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106764:	e8 53 a6 ff ff       	call   c0100dbc <__panic>
    free_page(pde2page(boot_pgdir[0]));
c0106769:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c010676e:	8b 00                	mov    (%eax),%eax
c0106770:	89 04 24             	mov    %eax,(%esp)
c0106773:	e8 a3 e7 ff ff       	call   c0104f1b <pde2page>
c0106778:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010677f:	00 
c0106780:	89 04 24             	mov    %eax,(%esp)
c0106783:	e8 20 ea ff ff       	call   c01051a8 <free_pages>
    boot_pgdir[0] = 0;
c0106788:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c010678d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0106793:	c7 04 24 93 eb 10 c0 	movl   $0xc010eb93,(%esp)
c010679a:	e8 c4 9b ff ff       	call   c0100363 <cprintf>
}
c010679f:	c9                   	leave  
c01067a0:	c3                   	ret    

c01067a1 <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c01067a1:	55                   	push   %ebp
c01067a2:	89 e5                	mov    %esp,%ebp
c01067a4:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c01067a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01067ae:	e9 cb 00 00 00       	jmp    c010687e <check_boot_pgdir+0xdd>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c01067b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01067b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01067b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067bc:	c1 e8 0c             	shr    $0xc,%eax
c01067bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01067c2:	a1 80 32 1c c0       	mov    0xc01c3280,%eax
c01067c7:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01067ca:	72 23                	jb     c01067ef <check_boot_pgdir+0x4e>
c01067cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01067d3:	c7 44 24 08 60 e7 10 	movl   $0xc010e760,0x8(%esp)
c01067da:	c0 
c01067db:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c01067e2:	00 
c01067e3:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c01067ea:	e8 cd a5 ff ff       	call   c0100dbc <__panic>
c01067ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01067f2:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01067f7:	89 c2                	mov    %eax,%edx
c01067f9:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c01067fe:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106805:	00 
c0106806:	89 54 24 04          	mov    %edx,0x4(%esp)
c010680a:	89 04 24             	mov    %eax,(%esp)
c010680d:	e8 91 f0 ff ff       	call   c01058a3 <get_pte>
c0106812:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106815:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106819:	75 24                	jne    c010683f <check_boot_pgdir+0x9e>
c010681b:	c7 44 24 0c b0 eb 10 	movl   $0xc010ebb0,0xc(%esp)
c0106822:	c0 
c0106823:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c010682a:	c0 
c010682b:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c0106832:	00 
c0106833:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c010683a:	e8 7d a5 ff ff       	call   c0100dbc <__panic>
        assert(PTE_ADDR(*ptep) == i);
c010683f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106842:	8b 00                	mov    (%eax),%eax
c0106844:	89 c2                	mov    %eax,%edx
c0106846:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
c010684c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010684f:	39 c2                	cmp    %eax,%edx
c0106851:	74 24                	je     c0106877 <check_boot_pgdir+0xd6>
c0106853:	c7 44 24 0c ed eb 10 	movl   $0xc010ebed,0xc(%esp)
c010685a:	c0 
c010685b:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0106862:	c0 
c0106863:	c7 44 24 04 b8 02 00 	movl   $0x2b8,0x4(%esp)
c010686a:	00 
c010686b:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106872:	e8 45 a5 ff ff       	call   c0100dbc <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106877:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c010687e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106881:	a1 80 32 1c c0       	mov    0xc01c3280,%eax
c0106886:	39 c2                	cmp    %eax,%edx
c0106888:	0f 82 25 ff ff ff    	jb     c01067b3 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c010688e:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c0106893:	05 ac 0f 00 00       	add    $0xfac,%eax
c0106898:	8b 00                	mov    (%eax),%eax
c010689a:	89 c2                	mov    %eax,%edx
c010689c:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
c01068a2:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c01068a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01068aa:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c01068b1:	77 23                	ja     c01068d6 <check_boot_pgdir+0x135>
c01068b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01068b6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01068ba:	c7 44 24 08 04 e8 10 	movl   $0xc010e804,0x8(%esp)
c01068c1:	c0 
c01068c2:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c01068c9:	00 
c01068ca:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c01068d1:	e8 e6 a4 ff ff       	call   c0100dbc <__panic>
c01068d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01068d9:	05 00 00 00 40       	add    $0x40000000,%eax
c01068de:	39 c2                	cmp    %eax,%edx
c01068e0:	74 24                	je     c0106906 <check_boot_pgdir+0x165>
c01068e2:	c7 44 24 0c 04 ec 10 	movl   $0xc010ec04,0xc(%esp)
c01068e9:	c0 
c01068ea:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c01068f1:	c0 
c01068f2:	c7 44 24 04 bb 02 00 	movl   $0x2bb,0x4(%esp)
c01068f9:	00 
c01068fa:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106901:	e8 b6 a4 ff ff       	call   c0100dbc <__panic>

    assert(boot_pgdir[0] == 0);
c0106906:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c010690b:	8b 00                	mov    (%eax),%eax
c010690d:	85 c0                	test   %eax,%eax
c010690f:	74 24                	je     c0106935 <check_boot_pgdir+0x194>
c0106911:	c7 44 24 0c 38 ec 10 	movl   $0xc010ec38,0xc(%esp)
c0106918:	c0 
c0106919:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0106920:	c0 
c0106921:	c7 44 24 04 bd 02 00 	movl   $0x2bd,0x4(%esp)
c0106928:	00 
c0106929:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106930:	e8 87 a4 ff ff       	call   c0100dbc <__panic>

    struct Page *p;
    p = alloc_page();
c0106935:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010693c:	e8 fc e7 ff ff       	call   c010513d <alloc_pages>
c0106941:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0106944:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c0106949:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106950:	00 
c0106951:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0106958:	00 
c0106959:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010695c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106960:	89 04 24             	mov    %eax,(%esp)
c0106963:	e8 91 f5 ff ff       	call   c0105ef9 <page_insert>
c0106968:	85 c0                	test   %eax,%eax
c010696a:	74 24                	je     c0106990 <check_boot_pgdir+0x1ef>
c010696c:	c7 44 24 0c 4c ec 10 	movl   $0xc010ec4c,0xc(%esp)
c0106973:	c0 
c0106974:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c010697b:	c0 
c010697c:	c7 44 24 04 c1 02 00 	movl   $0x2c1,0x4(%esp)
c0106983:	00 
c0106984:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c010698b:	e8 2c a4 ff ff       	call   c0100dbc <__panic>
    assert(page_ref(p) == 1);
c0106990:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106993:	89 04 24             	mov    %eax,(%esp)
c0106996:	e8 98 e5 ff ff       	call   c0104f33 <page_ref>
c010699b:	83 f8 01             	cmp    $0x1,%eax
c010699e:	74 24                	je     c01069c4 <check_boot_pgdir+0x223>
c01069a0:	c7 44 24 0c 7a ec 10 	movl   $0xc010ec7a,0xc(%esp)
c01069a7:	c0 
c01069a8:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c01069af:	c0 
c01069b0:	c7 44 24 04 c2 02 00 	movl   $0x2c2,0x4(%esp)
c01069b7:	00 
c01069b8:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c01069bf:	e8 f8 a3 ff ff       	call   c0100dbc <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c01069c4:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c01069c9:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c01069d0:	00 
c01069d1:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c01069d8:	00 
c01069d9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01069dc:	89 54 24 04          	mov    %edx,0x4(%esp)
c01069e0:	89 04 24             	mov    %eax,(%esp)
c01069e3:	e8 11 f5 ff ff       	call   c0105ef9 <page_insert>
c01069e8:	85 c0                	test   %eax,%eax
c01069ea:	74 24                	je     c0106a10 <check_boot_pgdir+0x26f>
c01069ec:	c7 44 24 0c 8c ec 10 	movl   $0xc010ec8c,0xc(%esp)
c01069f3:	c0 
c01069f4:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c01069fb:	c0 
c01069fc:	c7 44 24 04 c3 02 00 	movl   $0x2c3,0x4(%esp)
c0106a03:	00 
c0106a04:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106a0b:	e8 ac a3 ff ff       	call   c0100dbc <__panic>
    assert(page_ref(p) == 2);
c0106a10:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a13:	89 04 24             	mov    %eax,(%esp)
c0106a16:	e8 18 e5 ff ff       	call   c0104f33 <page_ref>
c0106a1b:	83 f8 02             	cmp    $0x2,%eax
c0106a1e:	74 24                	je     c0106a44 <check_boot_pgdir+0x2a3>
c0106a20:	c7 44 24 0c c3 ec 10 	movl   $0xc010ecc3,0xc(%esp)
c0106a27:	c0 
c0106a28:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0106a2f:	c0 
c0106a30:	c7 44 24 04 c4 02 00 	movl   $0x2c4,0x4(%esp)
c0106a37:	00 
c0106a38:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106a3f:	e8 78 a3 ff ff       	call   c0100dbc <__panic>

    const char *str = "ucore: Hello world!!";
c0106a44:	c7 45 dc d4 ec 10 c0 	movl   $0xc010ecd4,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0106a4b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106a4e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106a52:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106a59:	e8 78 6a 00 00       	call   c010d4d6 <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0106a5e:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106a65:	00 
c0106a66:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106a6d:	e8 e1 6a 00 00       	call   c010d553 <strcmp>
c0106a72:	85 c0                	test   %eax,%eax
c0106a74:	74 24                	je     c0106a9a <check_boot_pgdir+0x2f9>
c0106a76:	c7 44 24 0c ec ec 10 	movl   $0xc010ecec,0xc(%esp)
c0106a7d:	c0 
c0106a7e:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0106a85:	c0 
c0106a86:	c7 44 24 04 c8 02 00 	movl   $0x2c8,0x4(%esp)
c0106a8d:	00 
c0106a8e:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106a95:	e8 22 a3 ff ff       	call   c0100dbc <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0106a9a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106a9d:	89 04 24             	mov    %eax,(%esp)
c0106aa0:	e8 e4 e3 ff ff       	call   c0104e89 <page2kva>
c0106aa5:	05 00 01 00 00       	add    $0x100,%eax
c0106aaa:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106aad:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106ab4:	e8 bf 69 00 00       	call   c010d478 <strlen>
c0106ab9:	85 c0                	test   %eax,%eax
c0106abb:	74 24                	je     c0106ae1 <check_boot_pgdir+0x340>
c0106abd:	c7 44 24 0c 24 ed 10 	movl   $0xc010ed24,0xc(%esp)
c0106ac4:	c0 
c0106ac5:	c7 44 24 08 4d e8 10 	movl   $0xc010e84d,0x8(%esp)
c0106acc:	c0 
c0106acd:	c7 44 24 04 cb 02 00 	movl   $0x2cb,0x4(%esp)
c0106ad4:	00 
c0106ad5:	c7 04 24 28 e8 10 c0 	movl   $0xc010e828,(%esp)
c0106adc:	e8 db a2 ff ff       	call   c0100dbc <__panic>

    free_page(p);
c0106ae1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106ae8:	00 
c0106ae9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106aec:	89 04 24             	mov    %eax,(%esp)
c0106aef:	e8 b4 e6 ff ff       	call   c01051a8 <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c0106af4:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c0106af9:	8b 00                	mov    (%eax),%eax
c0106afb:	89 04 24             	mov    %eax,(%esp)
c0106afe:	e8 18 e4 ff ff       	call   c0104f1b <pde2page>
c0106b03:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106b0a:	00 
c0106b0b:	89 04 24             	mov    %eax,(%esp)
c0106b0e:	e8 95 e6 ff ff       	call   c01051a8 <free_pages>
    boot_pgdir[0] = 0;
c0106b13:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c0106b18:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0106b1e:	c7 04 24 48 ed 10 c0 	movl   $0xc010ed48,(%esp)
c0106b25:	e8 39 98 ff ff       	call   c0100363 <cprintf>
}
c0106b2a:	c9                   	leave  
c0106b2b:	c3                   	ret    

c0106b2c <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106b2c:	55                   	push   %ebp
c0106b2d:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106b2f:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b32:	83 e0 04             	and    $0x4,%eax
c0106b35:	85 c0                	test   %eax,%eax
c0106b37:	74 07                	je     c0106b40 <perm2str+0x14>
c0106b39:	b8 75 00 00 00       	mov    $0x75,%eax
c0106b3e:	eb 05                	jmp    c0106b45 <perm2str+0x19>
c0106b40:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106b45:	a2 08 33 1c c0       	mov    %al,0xc01c3308
    str[1] = 'r';
c0106b4a:	c6 05 09 33 1c c0 72 	movb   $0x72,0xc01c3309
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106b51:	8b 45 08             	mov    0x8(%ebp),%eax
c0106b54:	83 e0 02             	and    $0x2,%eax
c0106b57:	85 c0                	test   %eax,%eax
c0106b59:	74 07                	je     c0106b62 <perm2str+0x36>
c0106b5b:	b8 77 00 00 00       	mov    $0x77,%eax
c0106b60:	eb 05                	jmp    c0106b67 <perm2str+0x3b>
c0106b62:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106b67:	a2 0a 33 1c c0       	mov    %al,0xc01c330a
    str[3] = '\0';
c0106b6c:	c6 05 0b 33 1c c0 00 	movb   $0x0,0xc01c330b
    return str;
c0106b73:	b8 08 33 1c c0       	mov    $0xc01c3308,%eax
}
c0106b78:	5d                   	pop    %ebp
c0106b79:	c3                   	ret    

c0106b7a <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106b7a:	55                   	push   %ebp
c0106b7b:	89 e5                	mov    %esp,%ebp
c0106b7d:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106b80:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b83:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b86:	72 0e                	jb     c0106b96 <get_pgtable_items+0x1c>
        return 0;
c0106b88:	b8 00 00 00 00       	mov    $0x0,%eax
c0106b8d:	e9 86 00 00 00       	jmp    c0106c18 <get_pgtable_items+0x9e>
    }
    while (start < right && !(table[start] & PTE_P)) {
        start ++;
c0106b92:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106b96:	8b 45 10             	mov    0x10(%ebp),%eax
c0106b99:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106b9c:	73 12                	jae    c0106bb0 <get_pgtable_items+0x36>
c0106b9e:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ba1:	c1 e0 02             	shl    $0x2,%eax
c0106ba4:	03 45 14             	add    0x14(%ebp),%eax
c0106ba7:	8b 00                	mov    (%eax),%eax
c0106ba9:	83 e0 01             	and    $0x1,%eax
c0106bac:	85 c0                	test   %eax,%eax
c0106bae:	74 e2                	je     c0106b92 <get_pgtable_items+0x18>
        start ++;
    }
    if (start < right) {
c0106bb0:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bb3:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106bb6:	73 5b                	jae    c0106c13 <get_pgtable_items+0x99>
        if (left_store != NULL) {
c0106bb8:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106bbc:	74 08                	je     c0106bc6 <get_pgtable_items+0x4c>
            *left_store = start;
c0106bbe:	8b 45 18             	mov    0x18(%ebp),%eax
c0106bc1:	8b 55 10             	mov    0x10(%ebp),%edx
c0106bc4:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106bc6:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bc9:	c1 e0 02             	shl    $0x2,%eax
c0106bcc:	03 45 14             	add    0x14(%ebp),%eax
c0106bcf:	8b 00                	mov    (%eax),%eax
c0106bd1:	83 e0 07             	and    $0x7,%eax
c0106bd4:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0106bd7:	83 45 10 01          	addl   $0x1,0x10(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106bdb:	eb 04                	jmp    c0106be1 <get_pgtable_items+0x67>
            start ++;
c0106bdd:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106be1:	8b 45 10             	mov    0x10(%ebp),%eax
c0106be4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106be7:	73 17                	jae    c0106c00 <get_pgtable_items+0x86>
c0106be9:	8b 45 10             	mov    0x10(%ebp),%eax
c0106bec:	c1 e0 02             	shl    $0x2,%eax
c0106bef:	03 45 14             	add    0x14(%ebp),%eax
c0106bf2:	8b 00                	mov    (%eax),%eax
c0106bf4:	89 c2                	mov    %eax,%edx
c0106bf6:	83 e2 07             	and    $0x7,%edx
c0106bf9:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106bfc:	39 c2                	cmp    %eax,%edx
c0106bfe:	74 dd                	je     c0106bdd <get_pgtable_items+0x63>
            start ++;
        }
        if (right_store != NULL) {
c0106c00:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106c04:	74 08                	je     c0106c0e <get_pgtable_items+0x94>
            *right_store = start;
c0106c06:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106c09:	8b 55 10             	mov    0x10(%ebp),%edx
c0106c0c:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106c0e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106c11:	eb 05                	jmp    c0106c18 <get_pgtable_items+0x9e>
    }
    return 0;
c0106c13:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106c18:	c9                   	leave  
c0106c19:	c3                   	ret    

c0106c1a <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106c1a:	55                   	push   %ebp
c0106c1b:	89 e5                	mov    %esp,%ebp
c0106c1d:	57                   	push   %edi
c0106c1e:	56                   	push   %esi
c0106c1f:	53                   	push   %ebx
c0106c20:	83 ec 5c             	sub    $0x5c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106c23:	c7 04 24 68 ed 10 c0 	movl   $0xc010ed68,(%esp)
c0106c2a:	e8 34 97 ff ff       	call   c0100363 <cprintf>
    size_t left, right = 0, perm;
c0106c2f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106c36:	e9 0b 01 00 00       	jmp    c0106d46 <print_pgdir+0x12c>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106c3b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106c3e:	89 04 24             	mov    %eax,(%esp)
c0106c41:	e8 e6 fe ff ff       	call   c0106b2c <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106c46:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106c49:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c4c:	89 cb                	mov    %ecx,%ebx
c0106c4e:	29 d3                	sub    %edx,%ebx
c0106c50:	89 da                	mov    %ebx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106c52:	89 d6                	mov    %edx,%esi
c0106c54:	c1 e6 16             	shl    $0x16,%esi
c0106c57:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106c5a:	89 d3                	mov    %edx,%ebx
c0106c5c:	c1 e3 16             	shl    $0x16,%ebx
c0106c5f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c62:	89 d1                	mov    %edx,%ecx
c0106c64:	c1 e1 16             	shl    $0x16,%ecx
c0106c67:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106c6a:	89 7d c4             	mov    %edi,-0x3c(%ebp)
c0106c6d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c70:	8b 7d c4             	mov    -0x3c(%ebp),%edi
c0106c73:	29 d7                	sub    %edx,%edi
c0106c75:	89 fa                	mov    %edi,%edx
c0106c77:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106c7b:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106c7f:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106c83:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106c87:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106c8b:	c7 04 24 99 ed 10 c0 	movl   $0xc010ed99,(%esp)
c0106c92:	e8 cc 96 ff ff       	call   c0100363 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106c97:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106c9a:	c1 e0 0a             	shl    $0xa,%eax
c0106c9d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106ca0:	eb 5c                	jmp    c0106cfe <print_pgdir+0xe4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106ca2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106ca5:	89 04 24             	mov    %eax,(%esp)
c0106ca8:	e8 7f fe ff ff       	call   c0106b2c <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106cad:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106cb0:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106cb3:	89 cb                	mov    %ecx,%ebx
c0106cb5:	29 d3                	sub    %edx,%ebx
c0106cb7:	89 da                	mov    %ebx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106cb9:	89 d6                	mov    %edx,%esi
c0106cbb:	c1 e6 0c             	shl    $0xc,%esi
c0106cbe:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106cc1:	89 d3                	mov    %edx,%ebx
c0106cc3:	c1 e3 0c             	shl    $0xc,%ebx
c0106cc6:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106cc9:	89 d1                	mov    %edx,%ecx
c0106ccb:	c1 e1 0c             	shl    $0xc,%ecx
c0106cce:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106cd1:	89 7d c4             	mov    %edi,-0x3c(%ebp)
c0106cd4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106cd7:	8b 7d c4             	mov    -0x3c(%ebp),%edi
c0106cda:	29 d7                	sub    %edx,%edi
c0106cdc:	89 fa                	mov    %edi,%edx
c0106cde:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106ce2:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106ce6:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106cea:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106cee:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106cf2:	c7 04 24 b8 ed 10 c0 	movl   $0xc010edb8,(%esp)
c0106cf9:	e8 65 96 ff ff       	call   c0100363 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106cfe:	8b 15 a8 e7 10 c0    	mov    0xc010e7a8,%edx
c0106d04:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106d07:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106d0a:	89 ce                	mov    %ecx,%esi
c0106d0c:	c1 e6 0a             	shl    $0xa,%esi
c0106d0f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106d12:	89 cb                	mov    %ecx,%ebx
c0106d14:	c1 e3 0a             	shl    $0xa,%ebx
c0106d17:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c0106d1a:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106d1e:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0106d21:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106d25:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106d29:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106d2d:	89 74 24 04          	mov    %esi,0x4(%esp)
c0106d31:	89 1c 24             	mov    %ebx,(%esp)
c0106d34:	e8 41 fe ff ff       	call   c0106b7a <get_pgtable_items>
c0106d39:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106d3c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106d40:	0f 85 5c ff ff ff    	jne    c0106ca2 <print_pgdir+0x88>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106d46:	8b 15 ac e7 10 c0    	mov    0xc010e7ac,%edx
c0106d4c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106d4f:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0106d52:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0106d56:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0106d59:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0106d5d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0106d61:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106d65:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c0106d6c:	00 
c0106d6d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0106d74:	e8 01 fe ff ff       	call   c0106b7a <get_pgtable_items>
c0106d79:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106d7c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0106d80:	0f 85 b5 fe ff ff    	jne    c0106c3b <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0106d86:	c7 04 24 dc ed 10 c0 	movl   $0xc010eddc,(%esp)
c0106d8d:	e8 d1 95 ff ff       	call   c0100363 <cprintf>
}
c0106d92:	83 c4 5c             	add    $0x5c,%esp
c0106d95:	5b                   	pop    %ebx
c0106d96:	5e                   	pop    %esi
c0106d97:	5f                   	pop    %edi
c0106d98:	5d                   	pop    %ebp
c0106d99:	c3                   	ret    
	...

c0106d9c <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0106d9c:	55                   	push   %ebp
c0106d9d:	89 e5                	mov    %esp,%ebp
c0106d9f:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0106da2:	8b 45 08             	mov    0x8(%ebp),%eax
c0106da5:	89 c2                	mov    %eax,%edx
c0106da7:	c1 ea 0c             	shr    $0xc,%edx
c0106daa:	a1 80 32 1c c0       	mov    0xc01c3280,%eax
c0106daf:	39 c2                	cmp    %eax,%edx
c0106db1:	72 1c                	jb     c0106dcf <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0106db3:	c7 44 24 08 10 ee 10 	movl   $0xc010ee10,0x8(%esp)
c0106dba:	c0 
c0106dbb:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0106dc2:	00 
c0106dc3:	c7 04 24 2f ee 10 c0 	movl   $0xc010ee2f,(%esp)
c0106dca:	e8 ed 9f ff ff       	call   c0100dbc <__panic>
    }
    return &pages[PPN(pa)];
c0106dcf:	a1 d0 53 1c c0       	mov    0xc01c53d0,%eax
c0106dd4:	8b 55 08             	mov    0x8(%ebp),%edx
c0106dd7:	c1 ea 0c             	shr    $0xc,%edx
c0106dda:	c1 e2 05             	shl    $0x5,%edx
c0106ddd:	01 d0                	add    %edx,%eax
}
c0106ddf:	c9                   	leave  
c0106de0:	c3                   	ret    

c0106de1 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0106de1:	55                   	push   %ebp
c0106de2:	89 e5                	mov    %esp,%ebp
c0106de4:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c0106de7:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dea:	83 e0 01             	and    $0x1,%eax
c0106ded:	85 c0                	test   %eax,%eax
c0106def:	75 1c                	jne    c0106e0d <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c0106df1:	c7 44 24 08 40 ee 10 	movl   $0xc010ee40,0x8(%esp)
c0106df8:	c0 
c0106df9:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c0106e00:	00 
c0106e01:	c7 04 24 2f ee 10 c0 	movl   $0xc010ee2f,(%esp)
c0106e08:	e8 af 9f ff ff       	call   c0100dbc <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0106e0d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e10:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e15:	89 04 24             	mov    %eax,(%esp)
c0106e18:	e8 7f ff ff ff       	call   c0106d9c <pa2page>
}
c0106e1d:	c9                   	leave  
c0106e1e:	c3                   	ret    

c0106e1f <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0106e1f:	55                   	push   %ebp
c0106e20:	89 e5                	mov    %esp,%ebp
c0106e22:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0106e25:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e28:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106e2d:	89 04 24             	mov    %eax,(%esp)
c0106e30:	e8 67 ff ff ff       	call   c0106d9c <pa2page>
}
c0106e35:	c9                   	leave  
c0106e36:	c3                   	ret    

c0106e37 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0106e37:	55                   	push   %ebp
c0106e38:	89 e5                	mov    %esp,%ebp
c0106e3a:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c0106e3d:	e8 02 34 00 00       	call   c010a244 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0106e42:	a1 7c 54 1c c0       	mov    0xc01c547c,%eax
c0106e47:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0106e4c:	76 0c                	jbe    c0106e5a <swap_init+0x23>
c0106e4e:	a1 7c 54 1c c0       	mov    0xc01c547c,%eax
c0106e53:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0106e58:	76 25                	jbe    c0106e7f <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0106e5a:	a1 7c 54 1c c0       	mov    0xc01c547c,%eax
c0106e5f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106e63:	c7 44 24 08 61 ee 10 	movl   $0xc010ee61,0x8(%esp)
c0106e6a:	c0 
c0106e6b:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0106e72:	00 
c0106e73:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c0106e7a:	e8 3d 9f ff ff       	call   c0100dbc <__panic>
     }
     

     sm = &swap_manager_fifo;
c0106e7f:	c7 05 14 33 1c c0 60 	movl   $0xc0131a60,0xc01c3314
c0106e86:	1a 13 c0 
     int r = sm->init();
c0106e89:	a1 14 33 1c c0       	mov    0xc01c3314,%eax
c0106e8e:	8b 40 04             	mov    0x4(%eax),%eax
c0106e91:	ff d0                	call   *%eax
c0106e93:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0106e96:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106e9a:	75 26                	jne    c0106ec2 <swap_init+0x8b>
     {
          swap_init_ok = 1;
c0106e9c:	c7 05 0c 33 1c c0 01 	movl   $0x1,0xc01c330c
c0106ea3:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0106ea6:	a1 14 33 1c c0       	mov    0xc01c3314,%eax
c0106eab:	8b 00                	mov    (%eax),%eax
c0106ead:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106eb1:	c7 04 24 8b ee 10 c0 	movl   $0xc010ee8b,(%esp)
c0106eb8:	e8 a6 94 ff ff       	call   c0100363 <cprintf>
          check_swap();
c0106ebd:	e8 a4 04 00 00       	call   c0107366 <check_swap>
     }

     return r;
c0106ec2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0106ec5:	c9                   	leave  
c0106ec6:	c3                   	ret    

c0106ec7 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0106ec7:	55                   	push   %ebp
c0106ec8:	89 e5                	mov    %esp,%ebp
c0106eca:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c0106ecd:	a1 14 33 1c c0       	mov    0xc01c3314,%eax
c0106ed2:	8b 50 08             	mov    0x8(%eax),%edx
c0106ed5:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ed8:	89 04 24             	mov    %eax,(%esp)
c0106edb:	ff d2                	call   *%edx
}
c0106edd:	c9                   	leave  
c0106ede:	c3                   	ret    

c0106edf <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0106edf:	55                   	push   %ebp
c0106ee0:	89 e5                	mov    %esp,%ebp
c0106ee2:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c0106ee5:	a1 14 33 1c c0       	mov    0xc01c3314,%eax
c0106eea:	8b 50 0c             	mov    0xc(%eax),%edx
c0106eed:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ef0:	89 04 24             	mov    %eax,(%esp)
c0106ef3:	ff d2                	call   *%edx
}
c0106ef5:	c9                   	leave  
c0106ef6:	c3                   	ret    

c0106ef7 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0106ef7:	55                   	push   %ebp
c0106ef8:	89 e5                	mov    %esp,%ebp
c0106efa:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0106efd:	a1 14 33 1c c0       	mov    0xc01c3314,%eax
c0106f02:	8b 50 10             	mov    0x10(%eax),%edx
c0106f05:	8b 45 14             	mov    0x14(%ebp),%eax
c0106f08:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106f0c:	8b 45 10             	mov    0x10(%ebp),%eax
c0106f0f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106f13:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f16:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f1a:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f1d:	89 04 24             	mov    %eax,(%esp)
c0106f20:	ff d2                	call   *%edx
}
c0106f22:	c9                   	leave  
c0106f23:	c3                   	ret    

c0106f24 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0106f24:	55                   	push   %ebp
c0106f25:	89 e5                	mov    %esp,%ebp
c0106f27:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0106f2a:	a1 14 33 1c c0       	mov    0xc01c3314,%eax
c0106f2f:	8b 50 14             	mov    0x14(%eax),%edx
c0106f32:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106f35:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f39:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f3c:	89 04 24             	mov    %eax,(%esp)
c0106f3f:	ff d2                	call   *%edx
}
c0106f41:	c9                   	leave  
c0106f42:	c3                   	ret    

c0106f43 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0106f43:	55                   	push   %ebp
c0106f44:	89 e5                	mov    %esp,%ebp
c0106f46:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0106f49:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106f50:	e9 5a 01 00 00       	jmp    c01070af <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0106f55:	a1 14 33 1c c0       	mov    0xc01c3314,%eax
c0106f5a:	8b 50 18             	mov    0x18(%eax),%edx
c0106f5d:	8b 45 10             	mov    0x10(%ebp),%eax
c0106f60:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106f64:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0106f67:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f6b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f6e:	89 04 24             	mov    %eax,(%esp)
c0106f71:	ff d2                	call   *%edx
c0106f73:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0106f76:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106f7a:	74 18                	je     c0106f94 <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0106f7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f7f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106f83:	c7 04 24 a0 ee 10 c0 	movl   $0xc010eea0,(%esp)
c0106f8a:	e8 d4 93 ff ff       	call   c0100363 <cprintf>
                  break;
c0106f8f:	e9 27 01 00 00       	jmp    c01070bb <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0106f94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f97:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106f9a:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0106f9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fa0:	8b 40 0c             	mov    0xc(%eax),%eax
c0106fa3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106faa:	00 
c0106fab:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106fae:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106fb2:	89 04 24             	mov    %eax,(%esp)
c0106fb5:	e8 e9 e8 ff ff       	call   c01058a3 <get_pte>
c0106fba:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0106fbd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106fc0:	8b 00                	mov    (%eax),%eax
c0106fc2:	83 e0 01             	and    $0x1,%eax
c0106fc5:	85 c0                	test   %eax,%eax
c0106fc7:	75 24                	jne    c0106fed <swap_out+0xaa>
c0106fc9:	c7 44 24 0c cd ee 10 	movl   $0xc010eecd,0xc(%esp)
c0106fd0:	c0 
c0106fd1:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c0106fd8:	c0 
c0106fd9:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c0106fe0:	00 
c0106fe1:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c0106fe8:	e8 cf 9d ff ff       	call   c0100dbc <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0106fed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106ff0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106ff3:	8b 52 1c             	mov    0x1c(%edx),%edx
c0106ff6:	c1 ea 0c             	shr    $0xc,%edx
c0106ff9:	83 c2 01             	add    $0x1,%edx
c0106ffc:	c1 e2 08             	shl    $0x8,%edx
c0106fff:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107003:	89 14 24             	mov    %edx,(%esp)
c0107006:	e8 f3 32 00 00       	call   c010a2fe <swapfs_write>
c010700b:	85 c0                	test   %eax,%eax
c010700d:	74 34                	je     c0107043 <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c010700f:	c7 04 24 f7 ee 10 c0 	movl   $0xc010eef7,(%esp)
c0107016:	e8 48 93 ff ff       	call   c0100363 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c010701b:	a1 14 33 1c c0       	mov    0xc01c3314,%eax
c0107020:	8b 50 10             	mov    0x10(%eax),%edx
c0107023:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107026:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010702d:	00 
c010702e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107032:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107035:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107039:	8b 45 08             	mov    0x8(%ebp),%eax
c010703c:	89 04 24             	mov    %eax,(%esp)
c010703f:	ff d2                	call   *%edx
                    continue;
c0107041:	eb 68                	jmp    c01070ab <swap_out+0x168>
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0107043:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107046:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107049:	c1 e8 0c             	shr    $0xc,%eax
c010704c:	83 c0 01             	add    $0x1,%eax
c010704f:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107053:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107056:	89 44 24 08          	mov    %eax,0x8(%esp)
c010705a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010705d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107061:	c7 04 24 10 ef 10 c0 	movl   $0xc010ef10,(%esp)
c0107068:	e8 f6 92 ff ff       	call   c0100363 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c010706d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107070:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107073:	c1 e8 0c             	shr    $0xc,%eax
c0107076:	83 c0 01             	add    $0x1,%eax
c0107079:	89 c2                	mov    %eax,%edx
c010707b:	c1 e2 08             	shl    $0x8,%edx
c010707e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107081:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0107083:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107086:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010708d:	00 
c010708e:	89 04 24             	mov    %eax,(%esp)
c0107091:	e8 12 e1 ff ff       	call   c01051a8 <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c0107096:	8b 45 08             	mov    0x8(%ebp),%eax
c0107099:	8b 40 0c             	mov    0xc(%eax),%eax
c010709c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010709f:	89 54 24 04          	mov    %edx,0x4(%esp)
c01070a3:	89 04 24             	mov    %eax,(%esp)
c01070a6:	e8 07 ef ff ff       	call   c0105fb2 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c01070ab:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01070af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01070b2:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01070b5:	0f 85 9a fe ff ff    	jne    c0106f55 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c01070bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01070be:	c9                   	leave  
c01070bf:	c3                   	ret    

c01070c0 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c01070c0:	55                   	push   %ebp
c01070c1:	89 e5                	mov    %esp,%ebp
c01070c3:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c01070c6:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01070cd:	e8 6b e0 ff ff       	call   c010513d <alloc_pages>
c01070d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c01070d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01070d9:	75 24                	jne    c01070ff <swap_in+0x3f>
c01070db:	c7 44 24 0c 50 ef 10 	movl   $0xc010ef50,0xc(%esp)
c01070e2:	c0 
c01070e3:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c01070ea:	c0 
c01070eb:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c01070f2:	00 
c01070f3:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c01070fa:	e8 bd 9c ff ff       	call   c0100dbc <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c01070ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0107102:	8b 40 0c             	mov    0xc(%eax),%eax
c0107105:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010710c:	00 
c010710d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107110:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107114:	89 04 24             	mov    %eax,(%esp)
c0107117:	e8 87 e7 ff ff       	call   c01058a3 <get_pte>
c010711c:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c010711f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107122:	8b 00                	mov    (%eax),%eax
c0107124:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107127:	89 54 24 04          	mov    %edx,0x4(%esp)
c010712b:	89 04 24             	mov    %eax,(%esp)
c010712e:	e8 59 31 00 00       	call   c010a28c <swapfs_read>
c0107133:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107136:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010713a:	74 2a                	je     c0107166 <swap_in+0xa6>
     {
        assert(r!=0);
c010713c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107140:	75 24                	jne    c0107166 <swap_in+0xa6>
c0107142:	c7 44 24 0c 5d ef 10 	movl   $0xc010ef5d,0xc(%esp)
c0107149:	c0 
c010714a:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c0107151:	c0 
c0107152:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c0107159:	00 
c010715a:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c0107161:	e8 56 9c ff ff       	call   c0100dbc <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0107166:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107169:	8b 00                	mov    (%eax),%eax
c010716b:	89 c2                	mov    %eax,%edx
c010716d:	c1 ea 08             	shr    $0x8,%edx
c0107170:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107173:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107177:	89 54 24 04          	mov    %edx,0x4(%esp)
c010717b:	c7 04 24 64 ef 10 c0 	movl   $0xc010ef64,(%esp)
c0107182:	e8 dc 91 ff ff       	call   c0100363 <cprintf>
     *ptr_result=result;
c0107187:	8b 45 10             	mov    0x10(%ebp),%eax
c010718a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010718d:	89 10                	mov    %edx,(%eax)
     return 0;
c010718f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107194:	c9                   	leave  
c0107195:	c3                   	ret    

c0107196 <check_content_set>:



static inline void
check_content_set(void)
{
c0107196:	55                   	push   %ebp
c0107197:	89 e5                	mov    %esp,%ebp
c0107199:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c010719c:	b8 00 10 00 00       	mov    $0x1000,%eax
c01071a1:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01071a4:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c01071a9:	83 f8 01             	cmp    $0x1,%eax
c01071ac:	74 24                	je     c01071d2 <check_content_set+0x3c>
c01071ae:	c7 44 24 0c a2 ef 10 	movl   $0xc010efa2,0xc(%esp)
c01071b5:	c0 
c01071b6:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c01071bd:	c0 
c01071be:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c01071c5:	00 
c01071c6:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c01071cd:	e8 ea 9b ff ff       	call   c0100dbc <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c01071d2:	b8 10 10 00 00       	mov    $0x1010,%eax
c01071d7:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01071da:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c01071df:	83 f8 01             	cmp    $0x1,%eax
c01071e2:	74 24                	je     c0107208 <check_content_set+0x72>
c01071e4:	c7 44 24 0c a2 ef 10 	movl   $0xc010efa2,0xc(%esp)
c01071eb:	c0 
c01071ec:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c01071f3:	c0 
c01071f4:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c01071fb:	00 
c01071fc:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c0107203:	e8 b4 9b ff ff       	call   c0100dbc <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c0107208:	b8 00 20 00 00       	mov    $0x2000,%eax
c010720d:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107210:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c0107215:	83 f8 02             	cmp    $0x2,%eax
c0107218:	74 24                	je     c010723e <check_content_set+0xa8>
c010721a:	c7 44 24 0c b1 ef 10 	movl   $0xc010efb1,0xc(%esp)
c0107221:	c0 
c0107222:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c0107229:	c0 
c010722a:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c0107231:	00 
c0107232:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c0107239:	e8 7e 9b ff ff       	call   c0100dbc <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c010723e:	b8 10 20 00 00       	mov    $0x2010,%eax
c0107243:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107246:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c010724b:	83 f8 02             	cmp    $0x2,%eax
c010724e:	74 24                	je     c0107274 <check_content_set+0xde>
c0107250:	c7 44 24 0c b1 ef 10 	movl   $0xc010efb1,0xc(%esp)
c0107257:	c0 
c0107258:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c010725f:	c0 
c0107260:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0107267:	00 
c0107268:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c010726f:	e8 48 9b ff ff       	call   c0100dbc <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0107274:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107279:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010727c:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c0107281:	83 f8 03             	cmp    $0x3,%eax
c0107284:	74 24                	je     c01072aa <check_content_set+0x114>
c0107286:	c7 44 24 0c c0 ef 10 	movl   $0xc010efc0,0xc(%esp)
c010728d:	c0 
c010728e:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c0107295:	c0 
c0107296:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010729d:	00 
c010729e:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c01072a5:	e8 12 9b ff ff       	call   c0100dbc <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c01072aa:	b8 10 30 00 00       	mov    $0x3010,%eax
c01072af:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01072b2:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c01072b7:	83 f8 03             	cmp    $0x3,%eax
c01072ba:	74 24                	je     c01072e0 <check_content_set+0x14a>
c01072bc:	c7 44 24 0c c0 ef 10 	movl   $0xc010efc0,0xc(%esp)
c01072c3:	c0 
c01072c4:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c01072cb:	c0 
c01072cc:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c01072d3:	00 
c01072d4:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c01072db:	e8 dc 9a ff ff       	call   c0100dbc <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c01072e0:	b8 00 40 00 00       	mov    $0x4000,%eax
c01072e5:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01072e8:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c01072ed:	83 f8 04             	cmp    $0x4,%eax
c01072f0:	74 24                	je     c0107316 <check_content_set+0x180>
c01072f2:	c7 44 24 0c cf ef 10 	movl   $0xc010efcf,0xc(%esp)
c01072f9:	c0 
c01072fa:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c0107301:	c0 
c0107302:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c0107309:	00 
c010730a:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c0107311:	e8 a6 9a ff ff       	call   c0100dbc <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0107316:	b8 10 40 00 00       	mov    $0x4010,%eax
c010731b:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c010731e:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c0107323:	83 f8 04             	cmp    $0x4,%eax
c0107326:	74 24                	je     c010734c <check_content_set+0x1b6>
c0107328:	c7 44 24 0c cf ef 10 	movl   $0xc010efcf,0xc(%esp)
c010732f:	c0 
c0107330:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c0107337:	c0 
c0107338:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010733f:	00 
c0107340:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c0107347:	e8 70 9a ff ff       	call   c0100dbc <__panic>
}
c010734c:	c9                   	leave  
c010734d:	c3                   	ret    

c010734e <check_content_access>:

static inline int
check_content_access(void)
{
c010734e:	55                   	push   %ebp
c010734f:	89 e5                	mov    %esp,%ebp
c0107351:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c0107354:	a1 14 33 1c c0       	mov    0xc01c3314,%eax
c0107359:	8b 40 1c             	mov    0x1c(%eax),%eax
c010735c:	ff d0                	call   *%eax
c010735e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c0107361:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107364:	c9                   	leave  
c0107365:	c3                   	ret    

c0107366 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0107366:	55                   	push   %ebp
c0107367:	89 e5                	mov    %esp,%ebp
c0107369:	53                   	push   %ebx
c010736a:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c010736d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107374:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c010737b:	c7 45 e8 bc 53 1c c0 	movl   $0xc01c53bc,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107382:	eb 6b                	jmp    c01073ef <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c0107384:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107387:	83 e8 0c             	sub    $0xc,%eax
c010738a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c010738d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107390:	83 c0 04             	add    $0x4,%eax
c0107393:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c010739a:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010739d:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01073a0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01073a3:	0f a3 10             	bt     %edx,(%eax)
c01073a6:	19 db                	sbb    %ebx,%ebx
c01073a8:	89 5d bc             	mov    %ebx,-0x44(%ebp)
    return oldbit != 0;
c01073ab:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01073af:	0f 95 c0             	setne  %al
c01073b2:	0f b6 c0             	movzbl %al,%eax
c01073b5:	85 c0                	test   %eax,%eax
c01073b7:	75 24                	jne    c01073dd <check_swap+0x77>
c01073b9:	c7 44 24 0c de ef 10 	movl   $0xc010efde,0xc(%esp)
c01073c0:	c0 
c01073c1:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c01073c8:	c0 
c01073c9:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c01073d0:	00 
c01073d1:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c01073d8:	e8 df 99 ff ff       	call   c0100dbc <__panic>
        count ++, total += p->property;
c01073dd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01073e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01073e4:	8b 50 08             	mov    0x8(%eax),%edx
c01073e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01073ea:	01 d0                	add    %edx,%eax
c01073ec:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01073ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01073f2:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01073f5:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01073f8:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01073fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01073fe:	81 7d e8 bc 53 1c c0 	cmpl   $0xc01c53bc,-0x18(%ebp)
c0107405:	0f 85 79 ff ff ff    	jne    c0107384 <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c010740b:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c010740e:	e8 c7 dd ff ff       	call   c01051da <nr_free_pages>
c0107413:	39 c3                	cmp    %eax,%ebx
c0107415:	74 24                	je     c010743b <check_swap+0xd5>
c0107417:	c7 44 24 0c ee ef 10 	movl   $0xc010efee,0xc(%esp)
c010741e:	c0 
c010741f:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c0107426:	c0 
c0107427:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c010742e:	00 
c010742f:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c0107436:	e8 81 99 ff ff       	call   c0100dbc <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c010743b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010743e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107442:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107445:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107449:	c7 04 24 08 f0 10 c0 	movl   $0xc010f008,(%esp)
c0107450:	e8 0e 8f ff ff       	call   c0100363 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0107455:	e8 64 0b 00 00       	call   c0107fbe <mm_create>
c010745a:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c010745d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107461:	75 24                	jne    c0107487 <check_swap+0x121>
c0107463:	c7 44 24 0c 2e f0 10 	movl   $0xc010f02e,0xc(%esp)
c010746a:	c0 
c010746b:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c0107472:	c0 
c0107473:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c010747a:	00 
c010747b:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c0107482:	e8 35 99 ff ff       	call   c0100dbc <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0107487:	a1 ac 54 1c c0       	mov    0xc01c54ac,%eax
c010748c:	85 c0                	test   %eax,%eax
c010748e:	74 24                	je     c01074b4 <check_swap+0x14e>
c0107490:	c7 44 24 0c 39 f0 10 	movl   $0xc010f039,0xc(%esp)
c0107497:	c0 
c0107498:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c010749f:	c0 
c01074a0:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c01074a7:	00 
c01074a8:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c01074af:	e8 08 99 ff ff       	call   c0100dbc <__panic>

     check_mm_struct = mm;
c01074b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01074b7:	a3 ac 54 1c c0       	mov    %eax,0xc01c54ac

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c01074bc:	8b 15 84 32 1c c0    	mov    0xc01c3284,%edx
c01074c2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01074c5:	89 50 0c             	mov    %edx,0xc(%eax)
c01074c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01074cb:	8b 40 0c             	mov    0xc(%eax),%eax
c01074ce:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c01074d1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01074d4:	8b 00                	mov    (%eax),%eax
c01074d6:	85 c0                	test   %eax,%eax
c01074d8:	74 24                	je     c01074fe <check_swap+0x198>
c01074da:	c7 44 24 0c 51 f0 10 	movl   $0xc010f051,0xc(%esp)
c01074e1:	c0 
c01074e2:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c01074e9:	c0 
c01074ea:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c01074f1:	00 
c01074f2:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c01074f9:	e8 be 98 ff ff       	call   c0100dbc <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c01074fe:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c0107505:	00 
c0107506:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c010750d:	00 
c010750e:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0107515:	e8 49 0b 00 00       	call   c0108063 <vma_create>
c010751a:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c010751d:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0107521:	75 24                	jne    c0107547 <check_swap+0x1e1>
c0107523:	c7 44 24 0c 5f f0 10 	movl   $0xc010f05f,0xc(%esp)
c010752a:	c0 
c010752b:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c0107532:	c0 
c0107533:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c010753a:	00 
c010753b:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c0107542:	e8 75 98 ff ff       	call   c0100dbc <__panic>

     insert_vma_struct(mm, vma);
c0107547:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010754a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010754e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107551:	89 04 24             	mov    %eax,(%esp)
c0107554:	e8 9a 0c 00 00       	call   c01081f3 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0107559:	c7 04 24 6c f0 10 c0 	movl   $0xc010f06c,(%esp)
c0107560:	e8 fe 8d ff ff       	call   c0100363 <cprintf>
     pte_t *temp_ptep=NULL;
c0107565:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c010756c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010756f:	8b 40 0c             	mov    0xc(%eax),%eax
c0107572:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0107579:	00 
c010757a:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0107581:	00 
c0107582:	89 04 24             	mov    %eax,(%esp)
c0107585:	e8 19 e3 ff ff       	call   c01058a3 <get_pte>
c010758a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c010758d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c0107591:	75 24                	jne    c01075b7 <check_swap+0x251>
c0107593:	c7 44 24 0c a0 f0 10 	movl   $0xc010f0a0,0xc(%esp)
c010759a:	c0 
c010759b:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c01075a2:	c0 
c01075a3:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01075aa:	00 
c01075ab:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c01075b2:	e8 05 98 ff ff       	call   c0100dbc <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c01075b7:	c7 04 24 b4 f0 10 c0 	movl   $0xc010f0b4,(%esp)
c01075be:	e8 a0 8d ff ff       	call   c0100363 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01075c3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01075ca:	e9 a3 00 00 00       	jmp    c0107672 <check_swap+0x30c>
          check_rp[i] = alloc_page();
c01075cf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01075d6:	e8 62 db ff ff       	call   c010513d <alloc_pages>
c01075db:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01075de:	89 04 95 e0 53 1c c0 	mov    %eax,-0x3fe3ac20(,%edx,4)
          assert(check_rp[i] != NULL );
c01075e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01075e8:	8b 04 85 e0 53 1c c0 	mov    -0x3fe3ac20(,%eax,4),%eax
c01075ef:	85 c0                	test   %eax,%eax
c01075f1:	75 24                	jne    c0107617 <check_swap+0x2b1>
c01075f3:	c7 44 24 0c d8 f0 10 	movl   $0xc010f0d8,0xc(%esp)
c01075fa:	c0 
c01075fb:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c0107602:	c0 
c0107603:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c010760a:	00 
c010760b:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c0107612:	e8 a5 97 ff ff       	call   c0100dbc <__panic>
          assert(!PageProperty(check_rp[i]));
c0107617:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010761a:	8b 04 85 e0 53 1c c0 	mov    -0x3fe3ac20(,%eax,4),%eax
c0107621:	83 c0 04             	add    $0x4,%eax
c0107624:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c010762b:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010762e:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0107631:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0107634:	0f a3 10             	bt     %edx,(%eax)
c0107637:	19 db                	sbb    %ebx,%ebx
c0107639:	89 5d ac             	mov    %ebx,-0x54(%ebp)
    return oldbit != 0;
c010763c:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c0107640:	0f 95 c0             	setne  %al
c0107643:	0f b6 c0             	movzbl %al,%eax
c0107646:	85 c0                	test   %eax,%eax
c0107648:	74 24                	je     c010766e <check_swap+0x308>
c010764a:	c7 44 24 0c ec f0 10 	movl   $0xc010f0ec,0xc(%esp)
c0107651:	c0 
c0107652:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c0107659:	c0 
c010765a:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c0107661:	00 
c0107662:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c0107669:	e8 4e 97 ff ff       	call   c0100dbc <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010766e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107672:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107676:	0f 8e 53 ff ff ff    	jle    c01075cf <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c010767c:	a1 bc 53 1c c0       	mov    0xc01c53bc,%eax
c0107681:	8b 15 c0 53 1c c0    	mov    0xc01c53c0,%edx
c0107687:	89 45 98             	mov    %eax,-0x68(%ebp)
c010768a:	89 55 9c             	mov    %edx,-0x64(%ebp)
c010768d:	c7 45 a8 bc 53 1c c0 	movl   $0xc01c53bc,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107694:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107697:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010769a:	89 50 04             	mov    %edx,0x4(%eax)
c010769d:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01076a0:	8b 50 04             	mov    0x4(%eax),%edx
c01076a3:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01076a6:	89 10                	mov    %edx,(%eax)
c01076a8:	c7 45 a4 bc 53 1c c0 	movl   $0xc01c53bc,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01076af:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01076b2:	8b 40 04             	mov    0x4(%eax),%eax
c01076b5:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c01076b8:	0f 94 c0             	sete   %al
c01076bb:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c01076be:	85 c0                	test   %eax,%eax
c01076c0:	75 24                	jne    c01076e6 <check_swap+0x380>
c01076c2:	c7 44 24 0c 07 f1 10 	movl   $0xc010f107,0xc(%esp)
c01076c9:	c0 
c01076ca:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c01076d1:	c0 
c01076d2:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c01076d9:	00 
c01076da:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c01076e1:	e8 d6 96 ff ff       	call   c0100dbc <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c01076e6:	a1 c4 53 1c c0       	mov    0xc01c53c4,%eax
c01076eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c01076ee:	c7 05 c4 53 1c c0 00 	movl   $0x0,0xc01c53c4
c01076f5:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01076f8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01076ff:	eb 1e                	jmp    c010771f <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c0107701:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107704:	8b 04 85 e0 53 1c c0 	mov    -0x3fe3ac20(,%eax,4),%eax
c010770b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107712:	00 
c0107713:	89 04 24             	mov    %eax,(%esp)
c0107716:	e8 8d da ff ff       	call   c01051a8 <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010771b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010771f:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107723:	7e dc                	jle    c0107701 <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0107725:	a1 c4 53 1c c0       	mov    0xc01c53c4,%eax
c010772a:	83 f8 04             	cmp    $0x4,%eax
c010772d:	74 24                	je     c0107753 <check_swap+0x3ed>
c010772f:	c7 44 24 0c 20 f1 10 	movl   $0xc010f120,0xc(%esp)
c0107736:	c0 
c0107737:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c010773e:	c0 
c010773f:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0107746:	00 
c0107747:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c010774e:	e8 69 96 ff ff       	call   c0100dbc <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0107753:	c7 04 24 44 f1 10 c0 	movl   $0xc010f144,(%esp)
c010775a:	e8 04 8c ff ff       	call   c0100363 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c010775f:	c7 05 18 33 1c c0 00 	movl   $0x0,0xc01c3318
c0107766:	00 00 00 
     
     check_content_set();
c0107769:	e8 28 fa ff ff       	call   c0107196 <check_content_set>
     assert( nr_free == 0);         
c010776e:	a1 c4 53 1c c0       	mov    0xc01c53c4,%eax
c0107773:	85 c0                	test   %eax,%eax
c0107775:	74 24                	je     c010779b <check_swap+0x435>
c0107777:	c7 44 24 0c 6b f1 10 	movl   $0xc010f16b,0xc(%esp)
c010777e:	c0 
c010777f:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c0107786:	c0 
c0107787:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c010778e:	00 
c010778f:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c0107796:	e8 21 96 ff ff       	call   c0100dbc <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c010779b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01077a2:	eb 26                	jmp    c01077ca <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c01077a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077a7:	c7 04 85 00 54 1c c0 	movl   $0xffffffff,-0x3fe3ac00(,%eax,4)
c01077ae:	ff ff ff ff 
c01077b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077b5:	8b 14 85 00 54 1c c0 	mov    -0x3fe3ac00(,%eax,4),%edx
c01077bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077bf:	89 14 85 40 54 1c c0 	mov    %edx,-0x3fe3abc0(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c01077c6:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01077ca:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c01077ce:	7e d4                	jle    c01077a4 <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01077d0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01077d7:	e9 eb 00 00 00       	jmp    c01078c7 <check_swap+0x561>
         check_ptep[i]=0;
c01077dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077df:	c7 04 85 94 54 1c c0 	movl   $0x0,-0x3fe3ab6c(,%eax,4)
c01077e6:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c01077ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01077ed:	83 c0 01             	add    $0x1,%eax
c01077f0:	c1 e0 0c             	shl    $0xc,%eax
c01077f3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01077fa:	00 
c01077fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01077ff:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107802:	89 04 24             	mov    %eax,(%esp)
c0107805:	e8 99 e0 ff ff       	call   c01058a3 <get_pte>
c010780a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010780d:	89 04 95 94 54 1c c0 	mov    %eax,-0x3fe3ab6c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0107814:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107817:	8b 04 85 94 54 1c c0 	mov    -0x3fe3ab6c(,%eax,4),%eax
c010781e:	85 c0                	test   %eax,%eax
c0107820:	75 24                	jne    c0107846 <check_swap+0x4e0>
c0107822:	c7 44 24 0c 78 f1 10 	movl   $0xc010f178,0xc(%esp)
c0107829:	c0 
c010782a:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c0107831:	c0 
c0107832:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0107839:	00 
c010783a:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c0107841:	e8 76 95 ff ff       	call   c0100dbc <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0107846:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107849:	8b 04 85 94 54 1c c0 	mov    -0x3fe3ab6c(,%eax,4),%eax
c0107850:	8b 00                	mov    (%eax),%eax
c0107852:	89 04 24             	mov    %eax,(%esp)
c0107855:	e8 87 f5 ff ff       	call   c0106de1 <pte2page>
c010785a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010785d:	8b 14 95 e0 53 1c c0 	mov    -0x3fe3ac20(,%edx,4),%edx
c0107864:	39 d0                	cmp    %edx,%eax
c0107866:	74 24                	je     c010788c <check_swap+0x526>
c0107868:	c7 44 24 0c 90 f1 10 	movl   $0xc010f190,0xc(%esp)
c010786f:	c0 
c0107870:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c0107877:	c0 
c0107878:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c010787f:	00 
c0107880:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c0107887:	e8 30 95 ff ff       	call   c0100dbc <__panic>
         assert((*check_ptep[i] & PTE_P));          
c010788c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010788f:	8b 04 85 94 54 1c c0 	mov    -0x3fe3ab6c(,%eax,4),%eax
c0107896:	8b 00                	mov    (%eax),%eax
c0107898:	83 e0 01             	and    $0x1,%eax
c010789b:	85 c0                	test   %eax,%eax
c010789d:	75 24                	jne    c01078c3 <check_swap+0x55d>
c010789f:	c7 44 24 0c b8 f1 10 	movl   $0xc010f1b8,0xc(%esp)
c01078a6:	c0 
c01078a7:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c01078ae:	c0 
c01078af:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c01078b6:	00 
c01078b7:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c01078be:	e8 f9 94 ff ff       	call   c0100dbc <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01078c3:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01078c7:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01078cb:	0f 8e 0b ff ff ff    	jle    c01077dc <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c01078d1:	c7 04 24 d4 f1 10 c0 	movl   $0xc010f1d4,(%esp)
c01078d8:	e8 86 8a ff ff       	call   c0100363 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c01078dd:	e8 6c fa ff ff       	call   c010734e <check_content_access>
c01078e2:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c01078e5:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01078e9:	74 24                	je     c010790f <check_swap+0x5a9>
c01078eb:	c7 44 24 0c fa f1 10 	movl   $0xc010f1fa,0xc(%esp)
c01078f2:	c0 
c01078f3:	c7 44 24 08 e2 ee 10 	movl   $0xc010eee2,0x8(%esp)
c01078fa:	c0 
c01078fb:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0107902:	00 
c0107903:	c7 04 24 7c ee 10 c0 	movl   $0xc010ee7c,(%esp)
c010790a:	e8 ad 94 ff ff       	call   c0100dbc <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010790f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107916:	eb 1e                	jmp    c0107936 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c0107918:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010791b:	8b 04 85 e0 53 1c c0 	mov    -0x3fe3ac20(,%eax,4),%eax
c0107922:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107929:	00 
c010792a:	89 04 24             	mov    %eax,(%esp)
c010792d:	e8 76 d8 ff ff       	call   c01051a8 <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107932:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107936:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010793a:	7e dc                	jle    c0107918 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c010793c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010793f:	8b 00                	mov    (%eax),%eax
c0107941:	89 04 24             	mov    %eax,(%esp)
c0107944:	e8 d6 f4 ff ff       	call   c0106e1f <pde2page>
c0107949:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107950:	00 
c0107951:	89 04 24             	mov    %eax,(%esp)
c0107954:	e8 4f d8 ff ff       	call   c01051a8 <free_pages>
     pgdir[0] = 0;
c0107959:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010795c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0107962:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107965:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c010796c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010796f:	89 04 24             	mov    %eax,(%esp)
c0107972:	e8 ad 09 00 00       	call   c0108324 <mm_destroy>
     check_mm_struct = NULL;
c0107977:	c7 05 ac 54 1c c0 00 	movl   $0x0,0xc01c54ac
c010797e:	00 00 00 
     
     nr_free = nr_free_store;
c0107981:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107984:	a3 c4 53 1c c0       	mov    %eax,0xc01c53c4
     free_list = free_list_store;
c0107989:	8b 45 98             	mov    -0x68(%ebp),%eax
c010798c:	8b 55 9c             	mov    -0x64(%ebp),%edx
c010798f:	a3 bc 53 1c c0       	mov    %eax,0xc01c53bc
c0107994:	89 15 c0 53 1c c0    	mov    %edx,0xc01c53c0

     
     le = &free_list;
c010799a:	c7 45 e8 bc 53 1c c0 	movl   $0xc01c53bc,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01079a1:	eb 1f                	jmp    c01079c2 <check_swap+0x65c>
         struct Page *p = le2page(le, page_link);
c01079a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01079a6:	83 e8 0c             	sub    $0xc,%eax
c01079a9:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c01079ac:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01079b0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01079b3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01079b6:	8b 40 08             	mov    0x8(%eax),%eax
c01079b9:	89 d1                	mov    %edx,%ecx
c01079bb:	29 c1                	sub    %eax,%ecx
c01079bd:	89 c8                	mov    %ecx,%eax
c01079bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01079c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01079c5:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01079c8:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01079cb:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01079ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01079d1:	81 7d e8 bc 53 1c c0 	cmpl   $0xc01c53bc,-0x18(%ebp)
c01079d8:	75 c9                	jne    c01079a3 <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c01079da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01079dd:	89 44 24 08          	mov    %eax,0x8(%esp)
c01079e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01079e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01079e8:	c7 04 24 01 f2 10 c0 	movl   $0xc010f201,(%esp)
c01079ef:	e8 6f 89 ff ff       	call   c0100363 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c01079f4:	c7 04 24 1b f2 10 c0 	movl   $0xc010f21b,(%esp)
c01079fb:	e8 63 89 ff ff       	call   c0100363 <cprintf>
}
c0107a00:	83 c4 74             	add    $0x74,%esp
c0107a03:	5b                   	pop    %ebx
c0107a04:	5d                   	pop    %ebp
c0107a05:	c3                   	ret    
	...

c0107a08 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0107a08:	55                   	push   %ebp
c0107a09:	89 e5                	mov    %esp,%ebp
c0107a0b:	83 ec 10             	sub    $0x10,%esp
c0107a0e:	c7 45 fc a4 54 1c c0 	movl   $0xc01c54a4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107a15:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107a18:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107a1b:	89 50 04             	mov    %edx,0x4(%eax)
c0107a1e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107a21:	8b 50 04             	mov    0x4(%eax),%edx
c0107a24:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107a27:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0107a29:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a2c:	c7 40 14 a4 54 1c c0 	movl   $0xc01c54a4,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0107a33:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107a38:	c9                   	leave  
c0107a39:	c3                   	ret    

c0107a3a <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107a3a:	55                   	push   %ebp
c0107a3b:	89 e5                	mov    %esp,%ebp
c0107a3d:	83 ec 38             	sub    $0x38,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107a40:	8b 45 08             	mov    0x8(%ebp),%eax
c0107a43:	8b 40 14             	mov    0x14(%eax),%eax
c0107a46:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0107a49:	8b 45 10             	mov    0x10(%ebp),%eax
c0107a4c:	83 c0 14             	add    $0x14,%eax
c0107a4f:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0107a52:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107a56:	74 06                	je     c0107a5e <_fifo_map_swappable+0x24>
c0107a58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107a5c:	75 24                	jne    c0107a82 <_fifo_map_swappable+0x48>
c0107a5e:	c7 44 24 0c 34 f2 10 	movl   $0xc010f234,0xc(%esp)
c0107a65:	c0 
c0107a66:	c7 44 24 08 52 f2 10 	movl   $0xc010f252,0x8(%esp)
c0107a6d:	c0 
c0107a6e:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0107a75:	00 
c0107a76:	c7 04 24 67 f2 10 c0 	movl   $0xc010f267,(%esp)
c0107a7d:	e8 3a 93 ff ff       	call   c0100dbc <__panic>
c0107a82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107a85:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107a88:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107a8b:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0107a8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107a91:	8b 00                	mov    (%eax),%eax
c0107a93:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107a96:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107a99:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107a9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107a9f:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107aa2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107aa5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107aa8:	89 10                	mov    %edx,(%eax)
c0107aaa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107aad:	8b 10                	mov    (%eax),%edx
c0107aaf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107ab2:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107ab5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107ab8:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107abb:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107abe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107ac1:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107ac4:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: 2011010312*/
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
	list_add_before(head, entry);
	return 0;
c0107ac6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107acb:	c9                   	leave  
c0107acc:	c3                   	ret    

c0107acd <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0107acd:	55                   	push   %ebp
c0107ace:	89 e5                	mov    %esp,%ebp
c0107ad0:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107ad3:	8b 45 08             	mov    0x8(%ebp),%eax
c0107ad6:	8b 40 14             	mov    0x14(%eax),%eax
c0107ad9:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0107adc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107ae0:	75 24                	jne    c0107b06 <_fifo_swap_out_victim+0x39>
c0107ae2:	c7 44 24 0c 7b f2 10 	movl   $0xc010f27b,0xc(%esp)
c0107ae9:	c0 
c0107aea:	c7 44 24 08 52 f2 10 	movl   $0xc010f252,0x8(%esp)
c0107af1:	c0 
c0107af2:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107af9:	00 
c0107afa:	c7 04 24 67 f2 10 c0 	movl   $0xc010f267,(%esp)
c0107b01:	e8 b6 92 ff ff       	call   c0100dbc <__panic>
     assert(in_tick==0);
c0107b06:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107b0a:	74 24                	je     c0107b30 <_fifo_swap_out_victim+0x63>
c0107b0c:	c7 44 24 0c 88 f2 10 	movl   $0xc010f288,0xc(%esp)
c0107b13:	c0 
c0107b14:	c7 44 24 08 52 f2 10 	movl   $0xc010f252,0x8(%esp)
c0107b1b:	c0 
c0107b1c:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0107b23:	00 
c0107b24:	c7 04 24 67 f2 10 c0 	movl   $0xc010f267,(%esp)
c0107b2b:	e8 8c 92 ff ff       	call   c0100dbc <__panic>
c0107b30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b33:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107b36:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107b39:	8b 40 04             	mov    0x4(%eax),%eax
     /* Select the victim */
     /*LAB3 EXERCISE 2: 2011010312*/
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     list_entry_t *le = list_next(head);
c0107b3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(head!=le);
c0107b3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107b42:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107b45:	75 24                	jne    c0107b6b <_fifo_swap_out_victim+0x9e>
c0107b47:	c7 44 24 0c 93 f2 10 	movl   $0xc010f293,0xc(%esp)
c0107b4e:	c0 
c0107b4f:	c7 44 24 08 52 f2 10 	movl   $0xc010f252,0x8(%esp)
c0107b56:	c0 
c0107b57:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c0107b5e:	00 
c0107b5f:	c7 04 24 67 f2 10 c0 	movl   $0xc010f267,(%esp)
c0107b66:	e8 51 92 ff ff       	call   c0100dbc <__panic>
     struct Page *p = le2page(le, pra_page_link);
c0107b6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b6e:	83 e8 14             	sub    $0x14,%eax
c0107b71:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107b74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107b77:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107b7a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107b7d:	8b 40 04             	mov    0x4(%eax),%eax
c0107b80:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107b83:	8b 12                	mov    (%edx),%edx
c0107b85:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0107b88:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107b8b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107b8e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107b91:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107b94:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107b97:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107b9a:	89 10                	mov    %edx,(%eax)
     list_del(le);
     assert(p !=NULL);
c0107b9c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107ba0:	75 24                	jne    c0107bc6 <_fifo_swap_out_victim+0xf9>
c0107ba2:	c7 44 24 0c 9c f2 10 	movl   $0xc010f29c,0xc(%esp)
c0107ba9:	c0 
c0107baa:	c7 44 24 08 52 f2 10 	movl   $0xc010f252,0x8(%esp)
c0107bb1:	c0 
c0107bb2:	c7 44 24 04 4b 00 00 	movl   $0x4b,0x4(%esp)
c0107bb9:	00 
c0107bba:	c7 04 24 67 f2 10 c0 	movl   $0xc010f267,(%esp)
c0107bc1:	e8 f6 91 ff ff       	call   c0100dbc <__panic>
     *ptr_page = p;
c0107bc6:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107bc9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107bcc:	89 10                	mov    %edx,(%eax)
     return 0;
c0107bce:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107bd3:	c9                   	leave  
c0107bd4:	c3                   	ret    

c0107bd5 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107bd5:	55                   	push   %ebp
c0107bd6:	89 e5                	mov    %esp,%ebp
c0107bd8:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107bdb:	c7 04 24 a8 f2 10 c0 	movl   $0xc010f2a8,(%esp)
c0107be2:	e8 7c 87 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107be7:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107bec:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107bef:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c0107bf4:	83 f8 04             	cmp    $0x4,%eax
c0107bf7:	74 24                	je     c0107c1d <_fifo_check_swap+0x48>
c0107bf9:	c7 44 24 0c ce f2 10 	movl   $0xc010f2ce,0xc(%esp)
c0107c00:	c0 
c0107c01:	c7 44 24 08 52 f2 10 	movl   $0xc010f252,0x8(%esp)
c0107c08:	c0 
c0107c09:	c7 44 24 04 54 00 00 	movl   $0x54,0x4(%esp)
c0107c10:	00 
c0107c11:	c7 04 24 67 f2 10 c0 	movl   $0xc010f267,(%esp)
c0107c18:	e8 9f 91 ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107c1d:	c7 04 24 e0 f2 10 c0 	movl   $0xc010f2e0,(%esp)
c0107c24:	e8 3a 87 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107c29:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107c2e:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107c31:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c0107c36:	83 f8 04             	cmp    $0x4,%eax
c0107c39:	74 24                	je     c0107c5f <_fifo_check_swap+0x8a>
c0107c3b:	c7 44 24 0c ce f2 10 	movl   $0xc010f2ce,0xc(%esp)
c0107c42:	c0 
c0107c43:	c7 44 24 08 52 f2 10 	movl   $0xc010f252,0x8(%esp)
c0107c4a:	c0 
c0107c4b:	c7 44 24 04 57 00 00 	movl   $0x57,0x4(%esp)
c0107c52:	00 
c0107c53:	c7 04 24 67 f2 10 c0 	movl   $0xc010f267,(%esp)
c0107c5a:	e8 5d 91 ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107c5f:	c7 04 24 08 f3 10 c0 	movl   $0xc010f308,(%esp)
c0107c66:	e8 f8 86 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107c6b:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107c70:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107c73:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c0107c78:	83 f8 04             	cmp    $0x4,%eax
c0107c7b:	74 24                	je     c0107ca1 <_fifo_check_swap+0xcc>
c0107c7d:	c7 44 24 0c ce f2 10 	movl   $0xc010f2ce,0xc(%esp)
c0107c84:	c0 
c0107c85:	c7 44 24 08 52 f2 10 	movl   $0xc010f252,0x8(%esp)
c0107c8c:	c0 
c0107c8d:	c7 44 24 04 5a 00 00 	movl   $0x5a,0x4(%esp)
c0107c94:	00 
c0107c95:	c7 04 24 67 f2 10 c0 	movl   $0xc010f267,(%esp)
c0107c9c:	e8 1b 91 ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107ca1:	c7 04 24 30 f3 10 c0 	movl   $0xc010f330,(%esp)
c0107ca8:	e8 b6 86 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107cad:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107cb2:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107cb5:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c0107cba:	83 f8 04             	cmp    $0x4,%eax
c0107cbd:	74 24                	je     c0107ce3 <_fifo_check_swap+0x10e>
c0107cbf:	c7 44 24 0c ce f2 10 	movl   $0xc010f2ce,0xc(%esp)
c0107cc6:	c0 
c0107cc7:	c7 44 24 08 52 f2 10 	movl   $0xc010f252,0x8(%esp)
c0107cce:	c0 
c0107ccf:	c7 44 24 04 5d 00 00 	movl   $0x5d,0x4(%esp)
c0107cd6:	00 
c0107cd7:	c7 04 24 67 f2 10 c0 	movl   $0xc010f267,(%esp)
c0107cde:	e8 d9 90 ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107ce3:	c7 04 24 58 f3 10 c0 	movl   $0xc010f358,(%esp)
c0107cea:	e8 74 86 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107cef:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107cf4:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107cf7:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c0107cfc:	83 f8 05             	cmp    $0x5,%eax
c0107cff:	74 24                	je     c0107d25 <_fifo_check_swap+0x150>
c0107d01:	c7 44 24 0c 7e f3 10 	movl   $0xc010f37e,0xc(%esp)
c0107d08:	c0 
c0107d09:	c7 44 24 08 52 f2 10 	movl   $0xc010f252,0x8(%esp)
c0107d10:	c0 
c0107d11:	c7 44 24 04 60 00 00 	movl   $0x60,0x4(%esp)
c0107d18:	00 
c0107d19:	c7 04 24 67 f2 10 c0 	movl   $0xc010f267,(%esp)
c0107d20:	e8 97 90 ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107d25:	c7 04 24 30 f3 10 c0 	movl   $0xc010f330,(%esp)
c0107d2c:	e8 32 86 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107d31:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107d36:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0107d39:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c0107d3e:	83 f8 05             	cmp    $0x5,%eax
c0107d41:	74 24                	je     c0107d67 <_fifo_check_swap+0x192>
c0107d43:	c7 44 24 0c 7e f3 10 	movl   $0xc010f37e,0xc(%esp)
c0107d4a:	c0 
c0107d4b:	c7 44 24 08 52 f2 10 	movl   $0xc010f252,0x8(%esp)
c0107d52:	c0 
c0107d53:	c7 44 24 04 63 00 00 	movl   $0x63,0x4(%esp)
c0107d5a:	00 
c0107d5b:	c7 04 24 67 f2 10 c0 	movl   $0xc010f267,(%esp)
c0107d62:	e8 55 90 ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107d67:	c7 04 24 e0 f2 10 c0 	movl   $0xc010f2e0,(%esp)
c0107d6e:	e8 f0 85 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107d73:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107d78:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c0107d7b:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c0107d80:	83 f8 06             	cmp    $0x6,%eax
c0107d83:	74 24                	je     c0107da9 <_fifo_check_swap+0x1d4>
c0107d85:	c7 44 24 0c 8d f3 10 	movl   $0xc010f38d,0xc(%esp)
c0107d8c:	c0 
c0107d8d:	c7 44 24 08 52 f2 10 	movl   $0xc010f252,0x8(%esp)
c0107d94:	c0 
c0107d95:	c7 44 24 04 66 00 00 	movl   $0x66,0x4(%esp)
c0107d9c:	00 
c0107d9d:	c7 04 24 67 f2 10 c0 	movl   $0xc010f267,(%esp)
c0107da4:	e8 13 90 ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107da9:	c7 04 24 30 f3 10 c0 	movl   $0xc010f330,(%esp)
c0107db0:	e8 ae 85 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107db5:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107dba:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107dbd:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c0107dc2:	83 f8 07             	cmp    $0x7,%eax
c0107dc5:	74 24                	je     c0107deb <_fifo_check_swap+0x216>
c0107dc7:	c7 44 24 0c 9c f3 10 	movl   $0xc010f39c,0xc(%esp)
c0107dce:	c0 
c0107dcf:	c7 44 24 08 52 f2 10 	movl   $0xc010f252,0x8(%esp)
c0107dd6:	c0 
c0107dd7:	c7 44 24 04 69 00 00 	movl   $0x69,0x4(%esp)
c0107dde:	00 
c0107ddf:	c7 04 24 67 f2 10 c0 	movl   $0xc010f267,(%esp)
c0107de6:	e8 d1 8f ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107deb:	c7 04 24 a8 f2 10 c0 	movl   $0xc010f2a8,(%esp)
c0107df2:	e8 6c 85 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107df7:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107dfc:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107dff:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c0107e04:	83 f8 08             	cmp    $0x8,%eax
c0107e07:	74 24                	je     c0107e2d <_fifo_check_swap+0x258>
c0107e09:	c7 44 24 0c ab f3 10 	movl   $0xc010f3ab,0xc(%esp)
c0107e10:	c0 
c0107e11:	c7 44 24 08 52 f2 10 	movl   $0xc010f252,0x8(%esp)
c0107e18:	c0 
c0107e19:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c0107e20:	00 
c0107e21:	c7 04 24 67 f2 10 c0 	movl   $0xc010f267,(%esp)
c0107e28:	e8 8f 8f ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107e2d:	c7 04 24 08 f3 10 c0 	movl   $0xc010f308,(%esp)
c0107e34:	e8 2a 85 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107e39:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107e3e:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107e41:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c0107e46:	83 f8 09             	cmp    $0x9,%eax
c0107e49:	74 24                	je     c0107e6f <_fifo_check_swap+0x29a>
c0107e4b:	c7 44 24 0c ba f3 10 	movl   $0xc010f3ba,0xc(%esp)
c0107e52:	c0 
c0107e53:	c7 44 24 08 52 f2 10 	movl   $0xc010f252,0x8(%esp)
c0107e5a:	c0 
c0107e5b:	c7 44 24 04 6f 00 00 	movl   $0x6f,0x4(%esp)
c0107e62:	00 
c0107e63:	c7 04 24 67 f2 10 c0 	movl   $0xc010f267,(%esp)
c0107e6a:	e8 4d 8f ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107e6f:	c7 04 24 58 f3 10 c0 	movl   $0xc010f358,(%esp)
c0107e76:	e8 e8 84 ff ff       	call   c0100363 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107e7b:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107e80:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0107e83:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c0107e88:	83 f8 0a             	cmp    $0xa,%eax
c0107e8b:	74 24                	je     c0107eb1 <_fifo_check_swap+0x2dc>
c0107e8d:	c7 44 24 0c c9 f3 10 	movl   $0xc010f3c9,0xc(%esp)
c0107e94:	c0 
c0107e95:	c7 44 24 08 52 f2 10 	movl   $0xc010f252,0x8(%esp)
c0107e9c:	c0 
c0107e9d:	c7 44 24 04 72 00 00 	movl   $0x72,0x4(%esp)
c0107ea4:	00 
c0107ea5:	c7 04 24 67 f2 10 c0 	movl   $0xc010f267,(%esp)
c0107eac:	e8 0b 8f ff ff       	call   c0100dbc <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107eb1:	c7 04 24 e0 f2 10 c0 	movl   $0xc010f2e0,(%esp)
c0107eb8:	e8 a6 84 ff ff       	call   c0100363 <cprintf>
    assert(*(unsigned char *)0x1000 == 0x0a);
c0107ebd:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107ec2:	0f b6 00             	movzbl (%eax),%eax
c0107ec5:	3c 0a                	cmp    $0xa,%al
c0107ec7:	74 24                	je     c0107eed <_fifo_check_swap+0x318>
c0107ec9:	c7 44 24 0c dc f3 10 	movl   $0xc010f3dc,0xc(%esp)
c0107ed0:	c0 
c0107ed1:	c7 44 24 08 52 f2 10 	movl   $0xc010f252,0x8(%esp)
c0107ed8:	c0 
c0107ed9:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0107ee0:	00 
c0107ee1:	c7 04 24 67 f2 10 c0 	movl   $0xc010f267,(%esp)
c0107ee8:	e8 cf 8e ff ff       	call   c0100dbc <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c0107eed:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107ef2:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c0107ef5:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c0107efa:	83 f8 0b             	cmp    $0xb,%eax
c0107efd:	74 24                	je     c0107f23 <_fifo_check_swap+0x34e>
c0107eff:	c7 44 24 0c fd f3 10 	movl   $0xc010f3fd,0xc(%esp)
c0107f06:	c0 
c0107f07:	c7 44 24 08 52 f2 10 	movl   $0xc010f252,0x8(%esp)
c0107f0e:	c0 
c0107f0f:	c7 44 24 04 76 00 00 	movl   $0x76,0x4(%esp)
c0107f16:	00 
c0107f17:	c7 04 24 67 f2 10 c0 	movl   $0xc010f267,(%esp)
c0107f1e:	e8 99 8e ff ff       	call   c0100dbc <__panic>
    return 0;
c0107f23:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107f28:	c9                   	leave  
c0107f29:	c3                   	ret    

c0107f2a <_fifo_init>:


static int
_fifo_init(void)
{
c0107f2a:	55                   	push   %ebp
c0107f2b:	89 e5                	mov    %esp,%ebp
    return 0;
c0107f2d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107f32:	5d                   	pop    %ebp
c0107f33:	c3                   	ret    

c0107f34 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107f34:	55                   	push   %ebp
c0107f35:	89 e5                	mov    %esp,%ebp
    return 0;
c0107f37:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107f3c:	5d                   	pop    %ebp
c0107f3d:	c3                   	ret    

c0107f3e <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c0107f3e:	55                   	push   %ebp
c0107f3f:	89 e5                	mov    %esp,%ebp
c0107f41:	b8 00 00 00 00       	mov    $0x0,%eax
c0107f46:	5d                   	pop    %ebp
c0107f47:	c3                   	ret    

c0107f48 <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c0107f48:	55                   	push   %ebp
c0107f49:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0107f4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f4e:	8b 40 18             	mov    0x18(%eax),%eax
}
c0107f51:	5d                   	pop    %ebp
c0107f52:	c3                   	ret    

c0107f53 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0107f53:	55                   	push   %ebp
c0107f54:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0107f56:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f59:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107f5c:	89 50 18             	mov    %edx,0x18(%eax)
}
c0107f5f:	5d                   	pop    %ebp
c0107f60:	c3                   	ret    

c0107f61 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0107f61:	55                   	push   %ebp
c0107f62:	89 e5                	mov    %esp,%ebp
c0107f64:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107f67:	8b 45 08             	mov    0x8(%ebp),%eax
c0107f6a:	89 c2                	mov    %eax,%edx
c0107f6c:	c1 ea 0c             	shr    $0xc,%edx
c0107f6f:	a1 80 32 1c c0       	mov    0xc01c3280,%eax
c0107f74:	39 c2                	cmp    %eax,%edx
c0107f76:	72 1c                	jb     c0107f94 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0107f78:	c7 44 24 08 20 f4 10 	movl   $0xc010f420,0x8(%esp)
c0107f7f:	c0 
c0107f80:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0107f87:	00 
c0107f88:	c7 04 24 3f f4 10 c0 	movl   $0xc010f43f,(%esp)
c0107f8f:	e8 28 8e ff ff       	call   c0100dbc <__panic>
    }
    return &pages[PPN(pa)];
c0107f94:	a1 d0 53 1c c0       	mov    0xc01c53d0,%eax
c0107f99:	8b 55 08             	mov    0x8(%ebp),%edx
c0107f9c:	c1 ea 0c             	shr    $0xc,%edx
c0107f9f:	c1 e2 05             	shl    $0x5,%edx
c0107fa2:	01 d0                	add    %edx,%eax
}
c0107fa4:	c9                   	leave  
c0107fa5:	c3                   	ret    

c0107fa6 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0107fa6:	55                   	push   %ebp
c0107fa7:	89 e5                	mov    %esp,%ebp
c0107fa9:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0107fac:	8b 45 08             	mov    0x8(%ebp),%eax
c0107faf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107fb4:	89 04 24             	mov    %eax,(%esp)
c0107fb7:	e8 a5 ff ff ff       	call   c0107f61 <pa2page>
}
c0107fbc:	c9                   	leave  
c0107fbd:	c3                   	ret    

c0107fbe <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0107fbe:	55                   	push   %ebp
c0107fbf:	89 e5                	mov    %esp,%ebp
c0107fc1:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0107fc4:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c0107fcb:	e8 e7 cc ff ff       	call   c0104cb7 <kmalloc>
c0107fd0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0107fd3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107fd7:	0f 84 81 00 00 00    	je     c010805e <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c0107fdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107fe0:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107fe3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107fe6:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107fe9:	89 50 04             	mov    %edx,0x4(%eax)
c0107fec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107fef:	8b 50 04             	mov    0x4(%eax),%edx
c0107ff2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107ff5:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0107ff7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107ffa:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0108001:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108004:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c010800b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010800e:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0108015:	a1 0c 33 1c c0       	mov    0xc01c330c,%eax
c010801a:	85 c0                	test   %eax,%eax
c010801c:	74 0d                	je     c010802b <mm_create+0x6d>
c010801e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108021:	89 04 24             	mov    %eax,(%esp)
c0108024:	e8 9e ee ff ff       	call   c0106ec7 <swap_init_mm>
c0108029:	eb 0a                	jmp    c0108035 <mm_create+0x77>
        else mm->sm_priv = NULL;
c010802b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010802e:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0108035:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010803c:	00 
c010803d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108040:	89 04 24             	mov    %eax,(%esp)
c0108043:	e8 0b ff ff ff       	call   c0107f53 <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c0108048:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010804b:	83 c0 1c             	add    $0x1c,%eax
c010804e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108055:	00 
c0108056:	89 04 24             	mov    %eax,(%esp)
c0108059:	e8 a8 1a 00 00       	call   c0109b06 <sem_init>
    }    
    return mm;
c010805e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108061:	c9                   	leave  
c0108062:	c3                   	ret    

c0108063 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0108063:	55                   	push   %ebp
c0108064:	89 e5                	mov    %esp,%ebp
c0108066:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0108069:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c0108070:	e8 42 cc ff ff       	call   c0104cb7 <kmalloc>
c0108075:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0108078:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010807c:	74 1b                	je     c0108099 <vma_create+0x36>
        vma->vm_start = vm_start;
c010807e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108081:	8b 55 08             	mov    0x8(%ebp),%edx
c0108084:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0108087:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010808a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010808d:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0108090:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108093:	8b 55 10             	mov    0x10(%ebp),%edx
c0108096:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0108099:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010809c:	c9                   	leave  
c010809d:	c3                   	ret    

c010809e <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c010809e:	55                   	push   %ebp
c010809f:	89 e5                	mov    %esp,%ebp
c01080a1:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c01080a4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c01080ab:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01080af:	0f 84 95 00 00 00    	je     c010814a <find_vma+0xac>
        vma = mm->mmap_cache;
c01080b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01080b8:	8b 40 08             	mov    0x8(%eax),%eax
c01080bb:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c01080be:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01080c2:	74 16                	je     c01080da <find_vma+0x3c>
c01080c4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01080c7:	8b 40 04             	mov    0x4(%eax),%eax
c01080ca:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01080cd:	77 0b                	ja     c01080da <find_vma+0x3c>
c01080cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01080d2:	8b 40 08             	mov    0x8(%eax),%eax
c01080d5:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01080d8:	77 61                	ja     c010813b <find_vma+0x9d>
                bool found = 0;
c01080da:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c01080e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01080e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01080e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01080ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c01080ed:	eb 28                	jmp    c0108117 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c01080ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01080f2:	83 e8 10             	sub    $0x10,%eax
c01080f5:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c01080f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01080fb:	8b 40 04             	mov    0x4(%eax),%eax
c01080fe:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108101:	77 14                	ja     c0108117 <find_vma+0x79>
c0108103:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108106:	8b 40 08             	mov    0x8(%eax),%eax
c0108109:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010810c:	76 09                	jbe    c0108117 <find_vma+0x79>
                        found = 1;
c010810e:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0108115:	eb 17                	jmp    c010812e <find_vma+0x90>
c0108117:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010811a:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010811d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108120:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0108123:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108126:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108129:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010812c:	75 c1                	jne    c01080ef <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c010812e:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0108132:	75 07                	jne    c010813b <find_vma+0x9d>
                    vma = NULL;
c0108134:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c010813b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010813f:	74 09                	je     c010814a <find_vma+0xac>
            mm->mmap_cache = vma;
c0108141:	8b 45 08             	mov    0x8(%ebp),%eax
c0108144:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0108147:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c010814a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010814d:	c9                   	leave  
c010814e:	c3                   	ret    

c010814f <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c010814f:	55                   	push   %ebp
c0108150:	89 e5                	mov    %esp,%ebp
c0108152:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0108155:	8b 45 08             	mov    0x8(%ebp),%eax
c0108158:	8b 50 04             	mov    0x4(%eax),%edx
c010815b:	8b 45 08             	mov    0x8(%ebp),%eax
c010815e:	8b 40 08             	mov    0x8(%eax),%eax
c0108161:	39 c2                	cmp    %eax,%edx
c0108163:	72 24                	jb     c0108189 <check_vma_overlap+0x3a>
c0108165:	c7 44 24 0c 4d f4 10 	movl   $0xc010f44d,0xc(%esp)
c010816c:	c0 
c010816d:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108174:	c0 
c0108175:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010817c:	00 
c010817d:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108184:	e8 33 8c ff ff       	call   c0100dbc <__panic>
    assert(prev->vm_end <= next->vm_start);
c0108189:	8b 45 08             	mov    0x8(%ebp),%eax
c010818c:	8b 50 08             	mov    0x8(%eax),%edx
c010818f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108192:	8b 40 04             	mov    0x4(%eax),%eax
c0108195:	39 c2                	cmp    %eax,%edx
c0108197:	76 24                	jbe    c01081bd <check_vma_overlap+0x6e>
c0108199:	c7 44 24 0c 90 f4 10 	movl   $0xc010f490,0xc(%esp)
c01081a0:	c0 
c01081a1:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c01081a8:	c0 
c01081a9:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c01081b0:	00 
c01081b1:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c01081b8:	e8 ff 8b ff ff       	call   c0100dbc <__panic>
    assert(next->vm_start < next->vm_end);
c01081bd:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081c0:	8b 50 04             	mov    0x4(%eax),%edx
c01081c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081c6:	8b 40 08             	mov    0x8(%eax),%eax
c01081c9:	39 c2                	cmp    %eax,%edx
c01081cb:	72 24                	jb     c01081f1 <check_vma_overlap+0xa2>
c01081cd:	c7 44 24 0c af f4 10 	movl   $0xc010f4af,0xc(%esp)
c01081d4:	c0 
c01081d5:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c01081dc:	c0 
c01081dd:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c01081e4:	00 
c01081e5:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c01081ec:	e8 cb 8b ff ff       	call   c0100dbc <__panic>
}
c01081f1:	c9                   	leave  
c01081f2:	c3                   	ret    

c01081f3 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c01081f3:	55                   	push   %ebp
c01081f4:	89 e5                	mov    %esp,%ebp
c01081f6:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c01081f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01081fc:	8b 50 04             	mov    0x4(%eax),%edx
c01081ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108202:	8b 40 08             	mov    0x8(%eax),%eax
c0108205:	39 c2                	cmp    %eax,%edx
c0108207:	72 24                	jb     c010822d <insert_vma_struct+0x3a>
c0108209:	c7 44 24 0c cd f4 10 	movl   $0xc010f4cd,0xc(%esp)
c0108210:	c0 
c0108211:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108218:	c0 
c0108219:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0108220:	00 
c0108221:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108228:	e8 8f 8b ff ff       	call   c0100dbc <__panic>
    list_entry_t *list = &(mm->mmap_list);
c010822d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108230:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0108233:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108236:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0108239:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010823c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c010823f:	eb 1f                	jmp    c0108260 <insert_vma_struct+0x6d>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0108241:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108244:	83 e8 10             	sub    $0x10,%eax
c0108247:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c010824a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010824d:	8b 50 04             	mov    0x4(%eax),%edx
c0108250:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108253:	8b 40 04             	mov    0x4(%eax),%eax
c0108256:	39 c2                	cmp    %eax,%edx
c0108258:	77 1f                	ja     c0108279 <insert_vma_struct+0x86>
                break;
            }
            le_prev = le;
c010825a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010825d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108260:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108263:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0108266:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108269:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c010826c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010826f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108272:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108275:	75 ca                	jne    c0108241 <insert_vma_struct+0x4e>
c0108277:	eb 01                	jmp    c010827a <insert_vma_struct+0x87>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
            if (mmap_prev->vm_start > vma->vm_start) {
                break;
c0108279:	90                   	nop
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c010827a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010827d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108280:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108283:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0108286:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0108289:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010828c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010828f:	74 15                	je     c01082a6 <insert_vma_struct+0xb3>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c0108291:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108294:	8d 50 f0             	lea    -0x10(%eax),%edx
c0108297:	8b 45 0c             	mov    0xc(%ebp),%eax
c010829a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010829e:	89 14 24             	mov    %edx,(%esp)
c01082a1:	e8 a9 fe ff ff       	call   c010814f <check_vma_overlap>
    }
    if (le_next != list) {
c01082a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01082a9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01082ac:	74 15                	je     c01082c3 <insert_vma_struct+0xd0>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c01082ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01082b1:	83 e8 10             	sub    $0x10,%eax
c01082b4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01082b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082bb:	89 04 24             	mov    %eax,(%esp)
c01082be:	e8 8c fe ff ff       	call   c010814f <check_vma_overlap>
    }

    vma->vm_mm = mm;
c01082c3:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082c6:	8b 55 08             	mov    0x8(%ebp),%edx
c01082c9:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c01082cb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01082ce:	8d 50 10             	lea    0x10(%eax),%edx
c01082d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082d4:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01082d7:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01082da:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01082dd:	8b 40 04             	mov    0x4(%eax),%eax
c01082e0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01082e3:	89 55 d0             	mov    %edx,-0x30(%ebp)
c01082e6:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01082e9:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01082ec:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01082ef:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01082f2:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01082f5:	89 10                	mov    %edx,(%eax)
c01082f7:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01082fa:	8b 10                	mov    (%eax),%edx
c01082fc:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01082ff:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0108302:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108305:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0108308:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010830b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010830e:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0108311:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c0108313:	8b 45 08             	mov    0x8(%ebp),%eax
c0108316:	8b 40 10             	mov    0x10(%eax),%eax
c0108319:	8d 50 01             	lea    0x1(%eax),%edx
c010831c:	8b 45 08             	mov    0x8(%ebp),%eax
c010831f:	89 50 10             	mov    %edx,0x10(%eax)
}
c0108322:	c9                   	leave  
c0108323:	c3                   	ret    

c0108324 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c0108324:	55                   	push   %ebp
c0108325:	89 e5                	mov    %esp,%ebp
c0108327:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c010832a:	8b 45 08             	mov    0x8(%ebp),%eax
c010832d:	89 04 24             	mov    %eax,(%esp)
c0108330:	e8 13 fc ff ff       	call   c0107f48 <mm_count>
c0108335:	85 c0                	test   %eax,%eax
c0108337:	74 24                	je     c010835d <mm_destroy+0x39>
c0108339:	c7 44 24 0c e9 f4 10 	movl   $0xc010f4e9,0xc(%esp)
c0108340:	c0 
c0108341:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108348:	c0 
c0108349:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c0108350:	00 
c0108351:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108358:	e8 5f 8a ff ff       	call   c0100dbc <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c010835d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108360:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0108363:	eb 36                	jmp    c010839b <mm_destroy+0x77>
c0108365:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108368:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010836b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010836e:	8b 40 04             	mov    0x4(%eax),%eax
c0108371:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108374:	8b 12                	mov    (%edx),%edx
c0108376:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0108379:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010837c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010837f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108382:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0108385:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108388:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010838b:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c010838d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108390:	83 e8 10             	sub    $0x10,%eax
c0108393:	89 04 24             	mov    %eax,(%esp)
c0108396:	e8 37 c9 ff ff       	call   c0104cd2 <kfree>
c010839b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010839e:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01083a1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01083a4:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c01083a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01083aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01083ad:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01083b0:	75 b3                	jne    c0108365 <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c01083b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01083b5:	89 04 24             	mov    %eax,(%esp)
c01083b8:	e8 15 c9 ff ff       	call   c0104cd2 <kfree>
    mm=NULL;
c01083bd:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c01083c4:	c9                   	leave  
c01083c5:	c3                   	ret    

c01083c6 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c01083c6:	55                   	push   %ebp
c01083c7:	89 e5                	mov    %esp,%ebp
c01083c9:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c01083cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01083cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01083d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01083d5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01083da:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01083dd:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c01083e4:	8b 45 10             	mov    0x10(%ebp),%eax
c01083e7:	8b 55 0c             	mov    0xc(%ebp),%edx
c01083ea:	01 d0                	add    %edx,%eax
c01083ec:	03 45 e8             	add    -0x18(%ebp),%eax
c01083ef:	83 e8 01             	sub    $0x1,%eax
c01083f2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01083f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01083f8:	ba 00 00 00 00       	mov    $0x0,%edx
c01083fd:	f7 75 e8             	divl   -0x18(%ebp)
c0108400:	89 d0                	mov    %edx,%eax
c0108402:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108405:	89 d1                	mov    %edx,%ecx
c0108407:	29 c1                	sub    %eax,%ecx
c0108409:	89 c8                	mov    %ecx,%eax
c010840b:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c010840e:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0108415:	76 11                	jbe    c0108428 <mm_map+0x62>
c0108417:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010841a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010841d:	73 09                	jae    c0108428 <mm_map+0x62>
c010841f:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0108426:	76 0a                	jbe    c0108432 <mm_map+0x6c>
        return -E_INVAL;
c0108428:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010842d:	e9 b0 00 00 00       	jmp    c01084e2 <mm_map+0x11c>
    }

    assert(mm != NULL);
c0108432:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108436:	75 24                	jne    c010845c <mm_map+0x96>
c0108438:	c7 44 24 0c fb f4 10 	movl   $0xc010f4fb,0xc(%esp)
c010843f:	c0 
c0108440:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108447:	c0 
c0108448:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c010844f:	00 
c0108450:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108457:	e8 60 89 ff ff       	call   c0100dbc <__panic>

    int ret = -E_INVAL;
c010845c:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0108463:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108466:	89 44 24 04          	mov    %eax,0x4(%esp)
c010846a:	8b 45 08             	mov    0x8(%ebp),%eax
c010846d:	89 04 24             	mov    %eax,(%esp)
c0108470:	e8 29 fc ff ff       	call   c010809e <find_vma>
c0108475:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108478:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010847c:	74 0b                	je     c0108489 <mm_map+0xc3>
c010847e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108481:	8b 40 04             	mov    0x4(%eax),%eax
c0108484:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108487:	72 52                	jb     c01084db <mm_map+0x115>
        goto out;
    }
    ret = -E_NO_MEM;
c0108489:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0108490:	8b 45 14             	mov    0x14(%ebp),%eax
c0108493:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108497:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010849a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010849e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01084a1:	89 04 24             	mov    %eax,(%esp)
c01084a4:	e8 ba fb ff ff       	call   c0108063 <vma_create>
c01084a9:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01084ac:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01084b0:	74 2c                	je     c01084de <mm_map+0x118>
        goto out;
    }
    insert_vma_struct(mm, vma);
c01084b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01084b5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01084b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01084bc:	89 04 24             	mov    %eax,(%esp)
c01084bf:	e8 2f fd ff ff       	call   c01081f3 <insert_vma_struct>
    if (vma_store != NULL) {
c01084c4:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01084c8:	74 08                	je     c01084d2 <mm_map+0x10c>
        *vma_store = vma;
c01084ca:	8b 45 18             	mov    0x18(%ebp),%eax
c01084cd:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01084d0:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c01084d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01084d9:	eb 04                	jmp    c01084df <mm_map+0x119>

    int ret = -E_INVAL;

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
        goto out;
c01084db:	90                   	nop
c01084dc:	eb 01                	jmp    c01084df <mm_map+0x119>
    }
    ret = -E_NO_MEM;

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
        goto out;
c01084de:	90                   	nop
        *vma_store = vma;
    }
    ret = 0;

out:
    return ret;
c01084df:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01084e2:	c9                   	leave  
c01084e3:	c3                   	ret    

c01084e4 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c01084e4:	55                   	push   %ebp
c01084e5:	89 e5                	mov    %esp,%ebp
c01084e7:	56                   	push   %esi
c01084e8:	53                   	push   %ebx
c01084e9:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c01084ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01084f0:	74 06                	je     c01084f8 <dup_mmap+0x14>
c01084f2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01084f6:	75 24                	jne    c010851c <dup_mmap+0x38>
c01084f8:	c7 44 24 0c 06 f5 10 	movl   $0xc010f506,0xc(%esp)
c01084ff:	c0 
c0108500:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108507:	c0 
c0108508:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c010850f:	00 
c0108510:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108517:	e8 a0 88 ff ff       	call   c0100dbc <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c010851c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010851f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108522:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108525:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c0108528:	e9 92 00 00 00       	jmp    c01085bf <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c010852d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108530:	83 e8 10             	sub    $0x10,%eax
c0108533:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0108536:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108539:	8b 48 0c             	mov    0xc(%eax),%ecx
c010853c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010853f:	8b 50 08             	mov    0x8(%eax),%edx
c0108542:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108545:	8b 40 04             	mov    0x4(%eax),%eax
c0108548:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010854c:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108550:	89 04 24             	mov    %eax,(%esp)
c0108553:	e8 0b fb ff ff       	call   c0108063 <vma_create>
c0108558:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c010855b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010855f:	75 07                	jne    c0108568 <dup_mmap+0x84>
            return -E_NO_MEM;
c0108561:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108566:	eb 76                	jmp    c01085de <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c0108568:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010856b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010856f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108572:	89 04 24             	mov    %eax,(%esp)
c0108575:	e8 79 fc ff ff       	call   c01081f3 <insert_vma_struct>

        bool share = 0;
c010857a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c0108581:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108584:	8b 58 08             	mov    0x8(%eax),%ebx
c0108587:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010858a:	8b 48 04             	mov    0x4(%eax),%ecx
c010858d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108590:	8b 50 0c             	mov    0xc(%eax),%edx
c0108593:	8b 45 08             	mov    0x8(%ebp),%eax
c0108596:	8b 40 0c             	mov    0xc(%eax),%eax
c0108599:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c010859c:	89 74 24 10          	mov    %esi,0x10(%esp)
c01085a0:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01085a4:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01085a8:	89 54 24 04          	mov    %edx,0x4(%esp)
c01085ac:	89 04 24             	mov    %eax,(%esp)
c01085af:	e8 de d6 ff ff       	call   c0105c92 <copy_range>
c01085b4:	85 c0                	test   %eax,%eax
c01085b6:	74 07                	je     c01085bf <dup_mmap+0xdb>
            return -E_NO_MEM;
c01085b8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01085bd:	eb 1f                	jmp    c01085de <dup_mmap+0xfa>
c01085bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c01085c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01085c8:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c01085ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01085cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085d0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01085d3:	0f 85 54 ff ff ff    	jne    c010852d <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c01085d9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01085de:	83 c4 40             	add    $0x40,%esp
c01085e1:	5b                   	pop    %ebx
c01085e2:	5e                   	pop    %esi
c01085e3:	5d                   	pop    %ebp
c01085e4:	c3                   	ret    

c01085e5 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c01085e5:	55                   	push   %ebp
c01085e6:	89 e5                	mov    %esp,%ebp
c01085e8:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c01085eb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01085ef:	74 0f                	je     c0108600 <exit_mmap+0x1b>
c01085f1:	8b 45 08             	mov    0x8(%ebp),%eax
c01085f4:	89 04 24             	mov    %eax,(%esp)
c01085f7:	e8 4c f9 ff ff       	call   c0107f48 <mm_count>
c01085fc:	85 c0                	test   %eax,%eax
c01085fe:	74 24                	je     c0108624 <exit_mmap+0x3f>
c0108600:	c7 44 24 0c 24 f5 10 	movl   $0xc010f524,0xc(%esp)
c0108607:	c0 
c0108608:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c010860f:	c0 
c0108610:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0108617:	00 
c0108618:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c010861f:	e8 98 87 ff ff       	call   c0100dbc <__panic>
    pde_t *pgdir = mm->pgdir;
c0108624:	8b 45 08             	mov    0x8(%ebp),%eax
c0108627:	8b 40 0c             	mov    0xc(%eax),%eax
c010862a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c010862d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108630:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0108633:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108636:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0108639:	eb 28                	jmp    c0108663 <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c010863b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010863e:	83 e8 10             	sub    $0x10,%eax
c0108641:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0108644:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108647:	8b 50 08             	mov    0x8(%eax),%edx
c010864a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010864d:	8b 40 04             	mov    0x4(%eax),%eax
c0108650:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108654:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108658:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010865b:	89 04 24             	mov    %eax,(%esp)
c010865e:	e8 46 d4 ff ff       	call   c0105aa9 <unmap_range>
c0108663:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108666:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108669:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010866c:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c010866f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108672:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108675:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108678:	75 c1                	jne    c010863b <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c010867a:	eb 28                	jmp    c01086a4 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c010867c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010867f:	83 e8 10             	sub    $0x10,%eax
c0108682:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0108685:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108688:	8b 50 08             	mov    0x8(%eax),%edx
c010868b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010868e:	8b 40 04             	mov    0x4(%eax),%eax
c0108691:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108695:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108699:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010869c:	89 04 24             	mov    %eax,(%esp)
c010869f:	e8 f9 d4 ff ff       	call   c0105b9d <exit_range>
c01086a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086a7:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01086aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01086ad:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c01086b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01086b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01086b6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01086b9:	75 c1                	jne    c010867c <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c01086bb:	c9                   	leave  
c01086bc:	c3                   	ret    

c01086bd <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c01086bd:	55                   	push   %ebp
c01086be:	89 e5                	mov    %esp,%ebp
c01086c0:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c01086c3:	8b 45 10             	mov    0x10(%ebp),%eax
c01086c6:	8b 55 18             	mov    0x18(%ebp),%edx
c01086c9:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01086cd:	8b 55 14             	mov    0x14(%ebp),%edx
c01086d0:	89 54 24 08          	mov    %edx,0x8(%esp)
c01086d4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01086db:	89 04 24             	mov    %eax,(%esp)
c01086de:	e8 c0 09 00 00       	call   c01090a3 <user_mem_check>
c01086e3:	85 c0                	test   %eax,%eax
c01086e5:	75 07                	jne    c01086ee <copy_from_user+0x31>
        return 0;
c01086e7:	b8 00 00 00 00       	mov    $0x0,%eax
c01086ec:	eb 1e                	jmp    c010870c <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c01086ee:	8b 45 14             	mov    0x14(%ebp),%eax
c01086f1:	89 44 24 08          	mov    %eax,0x8(%esp)
c01086f5:	8b 45 10             	mov    0x10(%ebp),%eax
c01086f8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01086fc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01086ff:	89 04 24             	mov    %eax,(%esp)
c0108702:	e8 ab 51 00 00       	call   c010d8b2 <memcpy>
    return 1;
c0108707:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010870c:	c9                   	leave  
c010870d:	c3                   	ret    

c010870e <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c010870e:	55                   	push   %ebp
c010870f:	89 e5                	mov    %esp,%ebp
c0108711:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0108714:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108717:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010871e:	00 
c010871f:	8b 55 14             	mov    0x14(%ebp),%edx
c0108722:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108726:	89 44 24 04          	mov    %eax,0x4(%esp)
c010872a:	8b 45 08             	mov    0x8(%ebp),%eax
c010872d:	89 04 24             	mov    %eax,(%esp)
c0108730:	e8 6e 09 00 00       	call   c01090a3 <user_mem_check>
c0108735:	85 c0                	test   %eax,%eax
c0108737:	75 07                	jne    c0108740 <copy_to_user+0x32>
        return 0;
c0108739:	b8 00 00 00 00       	mov    $0x0,%eax
c010873e:	eb 1e                	jmp    c010875e <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c0108740:	8b 45 14             	mov    0x14(%ebp),%eax
c0108743:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108747:	8b 45 10             	mov    0x10(%ebp),%eax
c010874a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010874e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108751:	89 04 24             	mov    %eax,(%esp)
c0108754:	e8 59 51 00 00       	call   c010d8b2 <memcpy>
    return 1;
c0108759:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010875e:	c9                   	leave  
c010875f:	c3                   	ret    

c0108760 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0108760:	55                   	push   %ebp
c0108761:	89 e5                	mov    %esp,%ebp
c0108763:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0108766:	e8 02 00 00 00       	call   c010876d <check_vmm>
}
c010876b:	c9                   	leave  
c010876c:	c3                   	ret    

c010876d <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c010876d:	55                   	push   %ebp
c010876e:	89 e5                	mov    %esp,%ebp
c0108770:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108773:	e8 62 ca ff ff       	call   c01051da <nr_free_pages>
c0108778:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c010877b:	e8 13 00 00 00       	call   c0108793 <check_vma_struct>
    check_pgfault();
c0108780:	e8 a7 04 00 00       	call   c0108c2c <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0108785:	c7 04 24 44 f5 10 c0 	movl   $0xc010f544,(%esp)
c010878c:	e8 d2 7b ff ff       	call   c0100363 <cprintf>
}
c0108791:	c9                   	leave  
c0108792:	c3                   	ret    

c0108793 <check_vma_struct>:

static void
check_vma_struct(void) {
c0108793:	55                   	push   %ebp
c0108794:	89 e5                	mov    %esp,%ebp
c0108796:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108799:	e8 3c ca ff ff       	call   c01051da <nr_free_pages>
c010879e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c01087a1:	e8 18 f8 ff ff       	call   c0107fbe <mm_create>
c01087a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c01087a9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01087ad:	75 24                	jne    c01087d3 <check_vma_struct+0x40>
c01087af:	c7 44 24 0c fb f4 10 	movl   $0xc010f4fb,0xc(%esp)
c01087b6:	c0 
c01087b7:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c01087be:	c0 
c01087bf:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c01087c6:	00 
c01087c7:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c01087ce:	e8 e9 85 ff ff       	call   c0100dbc <__panic>

    int step1 = 10, step2 = step1 * 10;
c01087d3:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c01087da:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01087dd:	89 d0                	mov    %edx,%eax
c01087df:	c1 e0 02             	shl    $0x2,%eax
c01087e2:	01 d0                	add    %edx,%eax
c01087e4:	01 c0                	add    %eax,%eax
c01087e6:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c01087e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01087ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01087ef:	eb 70                	jmp    c0108861 <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c01087f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01087f4:	89 d0                	mov    %edx,%eax
c01087f6:	c1 e0 02             	shl    $0x2,%eax
c01087f9:	01 d0                	add    %edx,%eax
c01087fb:	83 c0 02             	add    $0x2,%eax
c01087fe:	89 c1                	mov    %eax,%ecx
c0108800:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108803:	89 d0                	mov    %edx,%eax
c0108805:	c1 e0 02             	shl    $0x2,%eax
c0108808:	01 d0                	add    %edx,%eax
c010880a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108811:	00 
c0108812:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108816:	89 04 24             	mov    %eax,(%esp)
c0108819:	e8 45 f8 ff ff       	call   c0108063 <vma_create>
c010881e:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0108821:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108825:	75 24                	jne    c010884b <check_vma_struct+0xb8>
c0108827:	c7 44 24 0c 5c f5 10 	movl   $0xc010f55c,0xc(%esp)
c010882e:	c0 
c010882f:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108836:	c0 
c0108837:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c010883e:	00 
c010883f:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108846:	e8 71 85 ff ff       	call   c0100dbc <__panic>
        insert_vma_struct(mm, vma);
c010884b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010884e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108852:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108855:	89 04 24             	mov    %eax,(%esp)
c0108858:	e8 96 f9 ff ff       	call   c01081f3 <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c010885d:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108861:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108865:	7f 8a                	jg     c01087f1 <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108867:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010886a:	83 c0 01             	add    $0x1,%eax
c010886d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108870:	eb 70                	jmp    c01088e2 <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108872:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108875:	89 d0                	mov    %edx,%eax
c0108877:	c1 e0 02             	shl    $0x2,%eax
c010887a:	01 d0                	add    %edx,%eax
c010887c:	83 c0 02             	add    $0x2,%eax
c010887f:	89 c1                	mov    %eax,%ecx
c0108881:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108884:	89 d0                	mov    %edx,%eax
c0108886:	c1 e0 02             	shl    $0x2,%eax
c0108889:	01 d0                	add    %edx,%eax
c010888b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108892:	00 
c0108893:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108897:	89 04 24             	mov    %eax,(%esp)
c010889a:	e8 c4 f7 ff ff       	call   c0108063 <vma_create>
c010889f:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c01088a2:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c01088a6:	75 24                	jne    c01088cc <check_vma_struct+0x139>
c01088a8:	c7 44 24 0c 5c f5 10 	movl   $0xc010f55c,0xc(%esp)
c01088af:	c0 
c01088b0:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c01088b7:	c0 
c01088b8:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c01088bf:	00 
c01088c0:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c01088c7:	e8 f0 84 ff ff       	call   c0100dbc <__panic>
        insert_vma_struct(mm, vma);
c01088cc:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01088cf:	89 44 24 04          	mov    %eax,0x4(%esp)
c01088d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088d6:	89 04 24             	mov    %eax,(%esp)
c01088d9:	e8 15 f9 ff ff       	call   c01081f3 <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c01088de:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01088e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01088e5:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01088e8:	7e 88                	jle    c0108872 <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c01088ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01088ed:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01088f0:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01088f3:	8b 40 04             	mov    0x4(%eax),%eax
c01088f6:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c01088f9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0108900:	e9 97 00 00 00       	jmp    c010899c <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c0108905:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108908:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010890b:	75 24                	jne    c0108931 <check_vma_struct+0x19e>
c010890d:	c7 44 24 0c 68 f5 10 	movl   $0xc010f568,0xc(%esp)
c0108914:	c0 
c0108915:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c010891c:	c0 
c010891d:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c0108924:	00 
c0108925:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c010892c:	e8 8b 84 ff ff       	call   c0100dbc <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0108931:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108934:	83 e8 10             	sub    $0x10,%eax
c0108937:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c010893a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010893d:	8b 48 04             	mov    0x4(%eax),%ecx
c0108940:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108943:	89 d0                	mov    %edx,%eax
c0108945:	c1 e0 02             	shl    $0x2,%eax
c0108948:	01 d0                	add    %edx,%eax
c010894a:	39 c1                	cmp    %eax,%ecx
c010894c:	75 17                	jne    c0108965 <check_vma_struct+0x1d2>
c010894e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108951:	8b 48 08             	mov    0x8(%eax),%ecx
c0108954:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108957:	89 d0                	mov    %edx,%eax
c0108959:	c1 e0 02             	shl    $0x2,%eax
c010895c:	01 d0                	add    %edx,%eax
c010895e:	83 c0 02             	add    $0x2,%eax
c0108961:	39 c1                	cmp    %eax,%ecx
c0108963:	74 24                	je     c0108989 <check_vma_struct+0x1f6>
c0108965:	c7 44 24 0c 80 f5 10 	movl   $0xc010f580,0xc(%esp)
c010896c:	c0 
c010896d:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108974:	c0 
c0108975:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c010897c:	00 
c010897d:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108984:	e8 33 84 ff ff       	call   c0100dbc <__panic>
c0108989:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010898c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010898f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0108992:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0108995:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0108998:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010899c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010899f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01089a2:	0f 8e 5d ff ff ff    	jle    c0108905 <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c01089a8:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c01089af:	e9 cd 01 00 00       	jmp    c0108b81 <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c01089b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089b7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089be:	89 04 24             	mov    %eax,(%esp)
c01089c1:	e8 d8 f6 ff ff       	call   c010809e <find_vma>
c01089c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c01089c9:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c01089cd:	75 24                	jne    c01089f3 <check_vma_struct+0x260>
c01089cf:	c7 44 24 0c b5 f5 10 	movl   $0xc010f5b5,0xc(%esp)
c01089d6:	c0 
c01089d7:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c01089de:	c0 
c01089df:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c01089e6:	00 
c01089e7:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c01089ee:	e8 c9 83 ff ff       	call   c0100dbc <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c01089f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089f6:	83 c0 01             	add    $0x1,%eax
c01089f9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a00:	89 04 24             	mov    %eax,(%esp)
c0108a03:	e8 96 f6 ff ff       	call   c010809e <find_vma>
c0108a08:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c0108a0b:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0108a0f:	75 24                	jne    c0108a35 <check_vma_struct+0x2a2>
c0108a11:	c7 44 24 0c c2 f5 10 	movl   $0xc010f5c2,0xc(%esp)
c0108a18:	c0 
c0108a19:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108a20:	c0 
c0108a21:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c0108a28:	00 
c0108a29:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108a30:	e8 87 83 ff ff       	call   c0100dbc <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0108a35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a38:	83 c0 02             	add    $0x2,%eax
c0108a3b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a42:	89 04 24             	mov    %eax,(%esp)
c0108a45:	e8 54 f6 ff ff       	call   c010809e <find_vma>
c0108a4a:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c0108a4d:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0108a51:	74 24                	je     c0108a77 <check_vma_struct+0x2e4>
c0108a53:	c7 44 24 0c cf f5 10 	movl   $0xc010f5cf,0xc(%esp)
c0108a5a:	c0 
c0108a5b:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108a62:	c0 
c0108a63:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c0108a6a:	00 
c0108a6b:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108a72:	e8 45 83 ff ff       	call   c0100dbc <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0108a77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a7a:	83 c0 03             	add    $0x3,%eax
c0108a7d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a81:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108a84:	89 04 24             	mov    %eax,(%esp)
c0108a87:	e8 12 f6 ff ff       	call   c010809e <find_vma>
c0108a8c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c0108a8f:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0108a93:	74 24                	je     c0108ab9 <check_vma_struct+0x326>
c0108a95:	c7 44 24 0c dc f5 10 	movl   $0xc010f5dc,0xc(%esp)
c0108a9c:	c0 
c0108a9d:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108aa4:	c0 
c0108aa5:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0108aac:	00 
c0108aad:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108ab4:	e8 03 83 ff ff       	call   c0100dbc <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0108ab9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108abc:	83 c0 04             	add    $0x4,%eax
c0108abf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ac3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ac6:	89 04 24             	mov    %eax,(%esp)
c0108ac9:	e8 d0 f5 ff ff       	call   c010809e <find_vma>
c0108ace:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c0108ad1:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0108ad5:	74 24                	je     c0108afb <check_vma_struct+0x368>
c0108ad7:	c7 44 24 0c e9 f5 10 	movl   $0xc010f5e9,0xc(%esp)
c0108ade:	c0 
c0108adf:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108ae6:	c0 
c0108ae7:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0108aee:	00 
c0108aef:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108af6:	e8 c1 82 ff ff       	call   c0100dbc <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0108afb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108afe:	8b 50 04             	mov    0x4(%eax),%edx
c0108b01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b04:	39 c2                	cmp    %eax,%edx
c0108b06:	75 10                	jne    c0108b18 <check_vma_struct+0x385>
c0108b08:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108b0b:	8b 50 08             	mov    0x8(%eax),%edx
c0108b0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b11:	83 c0 02             	add    $0x2,%eax
c0108b14:	39 c2                	cmp    %eax,%edx
c0108b16:	74 24                	je     c0108b3c <check_vma_struct+0x3a9>
c0108b18:	c7 44 24 0c f8 f5 10 	movl   $0xc010f5f8,0xc(%esp)
c0108b1f:	c0 
c0108b20:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108b27:	c0 
c0108b28:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0108b2f:	00 
c0108b30:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108b37:	e8 80 82 ff ff       	call   c0100dbc <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0108b3c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108b3f:	8b 50 04             	mov    0x4(%eax),%edx
c0108b42:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b45:	39 c2                	cmp    %eax,%edx
c0108b47:	75 10                	jne    c0108b59 <check_vma_struct+0x3c6>
c0108b49:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108b4c:	8b 50 08             	mov    0x8(%eax),%edx
c0108b4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108b52:	83 c0 02             	add    $0x2,%eax
c0108b55:	39 c2                	cmp    %eax,%edx
c0108b57:	74 24                	je     c0108b7d <check_vma_struct+0x3ea>
c0108b59:	c7 44 24 0c 28 f6 10 	movl   $0xc010f628,0xc(%esp)
c0108b60:	c0 
c0108b61:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108b68:	c0 
c0108b69:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c0108b70:	00 
c0108b71:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108b78:	e8 3f 82 ff ff       	call   c0100dbc <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108b7d:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0108b81:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108b84:	89 d0                	mov    %edx,%eax
c0108b86:	c1 e0 02             	shl    $0x2,%eax
c0108b89:	01 d0                	add    %edx,%eax
c0108b8b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108b8e:	0f 8d 20 fe ff ff    	jge    c01089b4 <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108b94:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0108b9b:	eb 70                	jmp    c0108c0d <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0108b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ba0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ba4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ba7:	89 04 24             	mov    %eax,(%esp)
c0108baa:	e8 ef f4 ff ff       	call   c010809e <find_vma>
c0108baf:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0108bb2:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108bb6:	74 27                	je     c0108bdf <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0108bb8:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108bbb:	8b 50 08             	mov    0x8(%eax),%edx
c0108bbe:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108bc1:	8b 40 04             	mov    0x4(%eax),%eax
c0108bc4:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108bc8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108bcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108bcf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108bd3:	c7 04 24 58 f6 10 c0 	movl   $0xc010f658,(%esp)
c0108bda:	e8 84 77 ff ff       	call   c0100363 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0108bdf:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108be3:	74 24                	je     c0108c09 <check_vma_struct+0x476>
c0108be5:	c7 44 24 0c 7d f6 10 	movl   $0xc010f67d,0xc(%esp)
c0108bec:	c0 
c0108bed:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108bf4:	c0 
c0108bf5:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c0108bfc:	00 
c0108bfd:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108c04:	e8 b3 81 ff ff       	call   c0100dbc <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108c09:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108c0d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108c11:	79 8a                	jns    c0108b9d <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0108c13:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c16:	89 04 24             	mov    %eax,(%esp)
c0108c19:	e8 06 f7 ff ff       	call   c0108324 <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c0108c1e:	c7 04 24 94 f6 10 c0 	movl   $0xc010f694,(%esp)
c0108c25:	e8 39 77 ff ff       	call   c0100363 <cprintf>
}
c0108c2a:	c9                   	leave  
c0108c2b:	c3                   	ret    

c0108c2c <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0108c2c:	55                   	push   %ebp
c0108c2d:	89 e5                	mov    %esp,%ebp
c0108c2f:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108c32:	e8 a3 c5 ff ff       	call   c01051da <nr_free_pages>
c0108c37:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108c3a:	e8 7f f3 ff ff       	call   c0107fbe <mm_create>
c0108c3f:	a3 ac 54 1c c0       	mov    %eax,0xc01c54ac
    assert(check_mm_struct != NULL);
c0108c44:	a1 ac 54 1c c0       	mov    0xc01c54ac,%eax
c0108c49:	85 c0                	test   %eax,%eax
c0108c4b:	75 24                	jne    c0108c71 <check_pgfault+0x45>
c0108c4d:	c7 44 24 0c b3 f6 10 	movl   $0xc010f6b3,0xc(%esp)
c0108c54:	c0 
c0108c55:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108c5c:	c0 
c0108c5d:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c0108c64:	00 
c0108c65:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108c6c:	e8 4b 81 ff ff       	call   c0100dbc <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108c71:	a1 ac 54 1c c0       	mov    0xc01c54ac,%eax
c0108c76:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108c79:	8b 15 84 32 1c c0    	mov    0xc01c3284,%edx
c0108c7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c82:	89 50 0c             	mov    %edx,0xc(%eax)
c0108c85:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c88:	8b 40 0c             	mov    0xc(%eax),%eax
c0108c8b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108c8e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108c91:	8b 00                	mov    (%eax),%eax
c0108c93:	85 c0                	test   %eax,%eax
c0108c95:	74 24                	je     c0108cbb <check_pgfault+0x8f>
c0108c97:	c7 44 24 0c cb f6 10 	movl   $0xc010f6cb,0xc(%esp)
c0108c9e:	c0 
c0108c9f:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108ca6:	c0 
c0108ca7:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108cae:	00 
c0108caf:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108cb6:	e8 01 81 ff ff       	call   c0100dbc <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108cbb:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108cc2:	00 
c0108cc3:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108cca:	00 
c0108ccb:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108cd2:	e8 8c f3 ff ff       	call   c0108063 <vma_create>
c0108cd7:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108cda:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108cde:	75 24                	jne    c0108d04 <check_pgfault+0xd8>
c0108ce0:	c7 44 24 0c 5c f5 10 	movl   $0xc010f55c,0xc(%esp)
c0108ce7:	c0 
c0108ce8:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108cef:	c0 
c0108cf0:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c0108cf7:	00 
c0108cf8:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108cff:	e8 b8 80 ff ff       	call   c0100dbc <__panic>

    insert_vma_struct(mm, vma);
c0108d04:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108d07:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d0e:	89 04 24             	mov    %eax,(%esp)
c0108d11:	e8 dd f4 ff ff       	call   c01081f3 <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108d16:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108d1d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108d20:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d24:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d27:	89 04 24             	mov    %eax,(%esp)
c0108d2a:	e8 6f f3 ff ff       	call   c010809e <find_vma>
c0108d2f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108d32:	74 24                	je     c0108d58 <check_pgfault+0x12c>
c0108d34:	c7 44 24 0c d9 f6 10 	movl   $0xc010f6d9,0xc(%esp)
c0108d3b:	c0 
c0108d3c:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108d43:	c0 
c0108d44:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c0108d4b:	00 
c0108d4c:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108d53:	e8 64 80 ff ff       	call   c0100dbc <__panic>

    int i, sum = 0;
c0108d58:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0108d5f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108d66:	eb 15                	jmp    c0108d7d <check_pgfault+0x151>
        *(char *)(addr + i) = i;
c0108d68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d6b:	03 45 dc             	add    -0x24(%ebp),%eax
c0108d6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108d71:	88 10                	mov    %dl,(%eax)
        sum += i;
c0108d73:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d76:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0108d79:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108d7d:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108d81:	7e e5                	jle    c0108d68 <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108d83:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108d8a:	eb 13                	jmp    c0108d9f <check_pgfault+0x173>
        sum -= *(char *)(addr + i);
c0108d8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d8f:	03 45 dc             	add    -0x24(%ebp),%eax
c0108d92:	0f b6 00             	movzbl (%eax),%eax
c0108d95:	0f be c0             	movsbl %al,%eax
c0108d98:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0108d9b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108d9f:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0108da3:	7e e7                	jle    c0108d8c <check_pgfault+0x160>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0108da5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108da9:	74 24                	je     c0108dcf <check_pgfault+0x1a3>
c0108dab:	c7 44 24 0c f3 f6 10 	movl   $0xc010f6f3,0xc(%esp)
c0108db2:	c0 
c0108db3:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108dba:	c0 
c0108dbb:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c0108dc2:	00 
c0108dc3:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108dca:	e8 ed 7f ff ff       	call   c0100dbc <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c0108dcf:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108dd2:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0108dd5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108dd8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108ddd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108de1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108de4:	89 04 24             	mov    %eax,(%esp)
c0108de7:	e8 c9 d0 ff ff       	call   c0105eb5 <page_remove>
    free_page(pde2page(pgdir[0]));
c0108dec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108def:	8b 00                	mov    (%eax),%eax
c0108df1:	89 04 24             	mov    %eax,(%esp)
c0108df4:	e8 ad f1 ff ff       	call   c0107fa6 <pde2page>
c0108df9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108e00:	00 
c0108e01:	89 04 24             	mov    %eax,(%esp)
c0108e04:	e8 9f c3 ff ff       	call   c01051a8 <free_pages>
    pgdir[0] = 0;
c0108e09:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108e0c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0108e12:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108e15:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0108e1c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108e1f:	89 04 24             	mov    %eax,(%esp)
c0108e22:	e8 fd f4 ff ff       	call   c0108324 <mm_destroy>
    check_mm_struct = NULL;
c0108e27:	c7 05 ac 54 1c c0 00 	movl   $0x0,0xc01c54ac
c0108e2e:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0108e31:	e8 a4 c3 ff ff       	call   c01051da <nr_free_pages>
c0108e36:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108e39:	74 24                	je     c0108e5f <check_pgfault+0x233>
c0108e3b:	c7 44 24 0c fc f6 10 	movl   $0xc010f6fc,0xc(%esp)
c0108e42:	c0 
c0108e43:	c7 44 24 08 6b f4 10 	movl   $0xc010f46b,0x8(%esp)
c0108e4a:	c0 
c0108e4b:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0108e52:	00 
c0108e53:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108e5a:	e8 5d 7f ff ff       	call   c0100dbc <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0108e5f:	c7 04 24 23 f7 10 c0 	movl   $0xc010f723,(%esp)
c0108e66:	e8 f8 74 ff ff       	call   c0100363 <cprintf>
}
c0108e6b:	c9                   	leave  
c0108e6c:	c3                   	ret    

c0108e6d <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0108e6d:	55                   	push   %ebp
c0108e6e:	89 e5                	mov    %esp,%ebp
c0108e70:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0108e73:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0108e7a:	8b 45 10             	mov    0x10(%ebp),%eax
c0108e7d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e81:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e84:	89 04 24             	mov    %eax,(%esp)
c0108e87:	e8 12 f2 ff ff       	call   c010809e <find_vma>
c0108e8c:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c0108e8f:	a1 18 33 1c c0       	mov    0xc01c3318,%eax
c0108e94:	83 c0 01             	add    $0x1,%eax
c0108e97:	a3 18 33 1c c0       	mov    %eax,0xc01c3318
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0108e9c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108ea0:	74 0b                	je     c0108ead <do_pgfault+0x40>
c0108ea2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108ea5:	8b 40 04             	mov    0x4(%eax),%eax
c0108ea8:	3b 45 10             	cmp    0x10(%ebp),%eax
c0108eab:	76 18                	jbe    c0108ec5 <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0108ead:	8b 45 10             	mov    0x10(%ebp),%eax
c0108eb0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108eb4:	c7 04 24 40 f7 10 c0 	movl   $0xc010f740,(%esp)
c0108ebb:	e8 a3 74 ff ff       	call   c0100363 <cprintf>
        goto failed;
c0108ec0:	e9 d9 01 00 00       	jmp    c010909e <do_pgfault+0x231>
    }
    //check the error_code
    switch (error_code & 3) {
c0108ec5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108ec8:	83 e0 03             	and    $0x3,%eax
c0108ecb:	85 c0                	test   %eax,%eax
c0108ecd:	74 34                	je     c0108f03 <do_pgfault+0x96>
c0108ecf:	83 f8 01             	cmp    $0x1,%eax
c0108ed2:	74 1e                	je     c0108ef2 <do_pgfault+0x85>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0108ed4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108ed7:	8b 40 0c             	mov    0xc(%eax),%eax
c0108eda:	83 e0 02             	and    $0x2,%eax
c0108edd:	85 c0                	test   %eax,%eax
c0108edf:	75 40                	jne    c0108f21 <do_pgfault+0xb4>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0108ee1:	c7 04 24 70 f7 10 c0 	movl   $0xc010f770,(%esp)
c0108ee8:	e8 76 74 ff ff       	call   c0100363 <cprintf>
            goto failed;
c0108eed:	e9 ac 01 00 00       	jmp    c010909e <do_pgfault+0x231>
        }
        break;
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0108ef2:	c7 04 24 d0 f7 10 c0 	movl   $0xc010f7d0,(%esp)
c0108ef9:	e8 65 74 ff ff       	call   c0100363 <cprintf>
        goto failed;
c0108efe:	e9 9b 01 00 00       	jmp    c010909e <do_pgfault+0x231>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0108f03:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f06:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f09:	83 e0 05             	and    $0x5,%eax
c0108f0c:	85 c0                	test   %eax,%eax
c0108f0e:	75 12                	jne    c0108f22 <do_pgfault+0xb5>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0108f10:	c7 04 24 08 f8 10 c0 	movl   $0xc010f808,(%esp)
c0108f17:	e8 47 74 ff ff       	call   c0100363 <cprintf>
            goto failed;
c0108f1c:	e9 7d 01 00 00       	jmp    c010909e <do_pgfault+0x231>
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
            goto failed;
        }
        break;
c0108f21:	90                   	nop
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0108f22:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0108f29:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108f2c:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f2f:	83 e0 02             	and    $0x2,%eax
c0108f32:	85 c0                	test   %eax,%eax
c0108f34:	74 04                	je     c0108f3a <do_pgfault+0xcd>
        perm |= PTE_W;
c0108f36:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0108f3a:	8b 45 10             	mov    0x10(%ebp),%eax
c0108f3d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0108f40:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108f43:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108f48:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0108f4b:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0108f52:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
            goto failed;
        }
   }
#endif
    ptep = get_pte(mm->pgdir, addr, 1);
c0108f59:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f5c:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f5f:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0108f66:	00 
c0108f67:	8b 55 10             	mov    0x10(%ebp),%edx
c0108f6a:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108f6e:	89 04 24             	mov    %eax,(%esp)
c0108f71:	e8 2d c9 ff ff       	call   c01058a3 <get_pte>
c0108f76:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (ptep == NULL) {
c0108f79:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0108f7d:	75 11                	jne    c0108f90 <do_pgfault+0x123>
        cprintf("get_pte in do_pgfault failed\n");
c0108f7f:	c7 04 24 6b f8 10 c0 	movl   $0xc010f86b,(%esp)
c0108f86:	e8 d8 73 ff ff       	call   c0100363 <cprintf>
        goto failed;
c0108f8b:	e9 0e 01 00 00       	jmp    c010909e <do_pgfault+0x231>
    }

    if (*ptep == 0) {
c0108f90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f93:	8b 00                	mov    (%eax),%eax
c0108f95:	85 c0                	test   %eax,%eax
c0108f97:	75 3a                	jne    c0108fd3 <do_pgfault+0x166>
        struct Page* page = pgdir_alloc_page(mm->pgdir, addr, perm);
c0108f99:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f9c:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f9f:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108fa2:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108fa6:	8b 55 10             	mov    0x10(%ebp),%edx
c0108fa9:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108fad:	89 04 24             	mov    %eax,(%esp)
c0108fb0:	e8 5f d0 ff ff       	call   c0106014 <pgdir_alloc_page>
c0108fb5:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (page == NULL) {
c0108fb8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108fbc:	0f 85 d5 00 00 00    	jne    c0109097 <do_pgfault+0x22a>
            cprintf("pgdir_alloc_page in do_pgfault failed\n");
c0108fc2:	c7 04 24 8c f8 10 c0 	movl   $0xc010f88c,(%esp)
c0108fc9:	e8 95 73 ff ff       	call   c0100363 <cprintf>
            goto failed;
c0108fce:	e9 cb 00 00 00       	jmp    c010909e <do_pgfault+0x231>
        }
    }

    else {
        if(swap_init_ok) {
c0108fd3:	a1 0c 33 1c c0       	mov    0xc01c330c,%eax
c0108fd8:	85 c0                	test   %eax,%eax
c0108fda:	0f 84 a0 00 00 00    	je     c0109080 <do_pgfault+0x213>
            struct Page *page = NULL;
c0108fe0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
            ret = swap_in(mm, addr, &page);
c0108fe7:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0108fea:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108fee:	8b 45 10             	mov    0x10(%ebp),%eax
c0108ff1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ff5:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ff8:	89 04 24             	mov    %eax,(%esp)
c0108ffb:	e8 c0 e0 ff ff       	call   c01070c0 <swap_in>
c0109000:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (ret != 0) {
c0109003:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109007:	74 11                	je     c010901a <do_pgfault+0x1ad>
                cprintf("swap_in in do_pgfault failed\n");
c0109009:	c7 04 24 b3 f8 10 c0 	movl   $0xc010f8b3,(%esp)
c0109010:	e8 4e 73 ff ff       	call   c0100363 <cprintf>
                goto failed;
c0109015:	e9 84 00 00 00       	jmp    c010909e <do_pgfault+0x231>
            }
            ret = page_insert(mm->pgdir, page, addr, perm);
c010901a:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010901d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109020:	8b 40 0c             	mov    0xc(%eax),%eax
c0109023:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0109026:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010902a:	8b 4d 10             	mov    0x10(%ebp),%ecx
c010902d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0109031:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109035:	89 04 24             	mov    %eax,(%esp)
c0109038:	e8 bc ce ff ff       	call   c0105ef9 <page_insert>
c010903d:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (ret != 0) {
c0109040:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109044:	74 0e                	je     c0109054 <do_pgfault+0x1e7>
                cprintf("page_insert in do_pgfault failed\n");
c0109046:	c7 04 24 d4 f8 10 c0 	movl   $0xc010f8d4,(%esp)
c010904d:	e8 11 73 ff ff       	call   c0100363 <cprintf>
                goto failed;
c0109052:	eb 4a                	jmp    c010909e <do_pgfault+0x231>
            }
            swap_map_swappable(mm, addr, page, 1);
c0109054:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109057:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010905e:	00 
c010905f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109063:	8b 45 10             	mov    0x10(%ebp),%eax
c0109066:	89 44 24 04          	mov    %eax,0x4(%esp)
c010906a:	8b 45 08             	mov    0x8(%ebp),%eax
c010906d:	89 04 24             	mov    %eax,(%esp)
c0109070:	e8 82 de ff ff       	call   c0106ef7 <swap_map_swappable>
            page->pra_vaddr = addr;
c0109075:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109078:	8b 55 10             	mov    0x10(%ebp),%edx
c010907b:	89 50 1c             	mov    %edx,0x1c(%eax)
c010907e:	eb 17                	jmp    c0109097 <do_pgfault+0x22a>
        }
        else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0109080:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109083:	8b 00                	mov    (%eax),%eax
c0109085:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109089:	c7 04 24 f8 f8 10 c0 	movl   $0xc010f8f8,(%esp)
c0109090:	e8 ce 72 ff ff       	call   c0100363 <cprintf>
            goto failed;
c0109095:	eb 07                	jmp    c010909e <do_pgfault+0x231>
        }
   }
   ret = 0;
c0109097:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c010909e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01090a1:	c9                   	leave  
c01090a2:	c3                   	ret    

c01090a3 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c01090a3:	55                   	push   %ebp
c01090a4:	89 e5                	mov    %esp,%ebp
c01090a6:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c01090a9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01090ad:	0f 84 e0 00 00 00    	je     c0109193 <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c01090b3:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c01090ba:	76 1c                	jbe    c01090d8 <user_mem_check+0x35>
c01090bc:	8b 45 10             	mov    0x10(%ebp),%eax
c01090bf:	8b 55 0c             	mov    0xc(%ebp),%edx
c01090c2:	01 d0                	add    %edx,%eax
c01090c4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01090c7:	76 0f                	jbe    c01090d8 <user_mem_check+0x35>
c01090c9:	8b 45 10             	mov    0x10(%ebp),%eax
c01090cc:	8b 55 0c             	mov    0xc(%ebp),%edx
c01090cf:	01 d0                	add    %edx,%eax
c01090d1:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c01090d6:	76 0a                	jbe    c01090e2 <user_mem_check+0x3f>
            return 0;
c01090d8:	b8 00 00 00 00       	mov    $0x0,%eax
c01090dd:	e9 e2 00 00 00       	jmp    c01091c4 <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c01090e2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01090e5:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01090e8:	8b 45 10             	mov    0x10(%ebp),%eax
c01090eb:	8b 55 0c             	mov    0xc(%ebp),%edx
c01090ee:	01 d0                	add    %edx,%eax
c01090f0:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c01090f3:	e9 88 00 00 00       	jmp    c0109180 <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c01090f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01090fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0109102:	89 04 24             	mov    %eax,(%esp)
c0109105:	e8 94 ef ff ff       	call   c010809e <find_vma>
c010910a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010910d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109111:	74 0b                	je     c010911e <user_mem_check+0x7b>
c0109113:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109116:	8b 40 04             	mov    0x4(%eax),%eax
c0109119:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010911c:	76 0a                	jbe    c0109128 <user_mem_check+0x85>
                return 0;
c010911e:	b8 00 00 00 00       	mov    $0x0,%eax
c0109123:	e9 9c 00 00 00       	jmp    c01091c4 <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0109128:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010912b:	8b 50 0c             	mov    0xc(%eax),%edx
c010912e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0109132:	74 07                	je     c010913b <user_mem_check+0x98>
c0109134:	b8 02 00 00 00       	mov    $0x2,%eax
c0109139:	eb 05                	jmp    c0109140 <user_mem_check+0x9d>
c010913b:	b8 01 00 00 00       	mov    $0x1,%eax
c0109140:	21 d0                	and    %edx,%eax
c0109142:	85 c0                	test   %eax,%eax
c0109144:	75 07                	jne    c010914d <user_mem_check+0xaa>
                return 0;
c0109146:	b8 00 00 00 00       	mov    $0x0,%eax
c010914b:	eb 77                	jmp    c01091c4 <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c010914d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0109151:	74 24                	je     c0109177 <user_mem_check+0xd4>
c0109153:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109156:	8b 40 0c             	mov    0xc(%eax),%eax
c0109159:	83 e0 08             	and    $0x8,%eax
c010915c:	85 c0                	test   %eax,%eax
c010915e:	74 17                	je     c0109177 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0109160:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109163:	8b 40 04             	mov    0x4(%eax),%eax
c0109166:	05 00 10 00 00       	add    $0x1000,%eax
c010916b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010916e:	76 07                	jbe    c0109177 <user_mem_check+0xd4>
                    return 0;
c0109170:	b8 00 00 00 00       	mov    $0x0,%eax
c0109175:	eb 4d                	jmp    c01091c4 <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c0109177:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010917a:	8b 40 08             	mov    0x8(%eax),%eax
c010917d:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0109180:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109183:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0109186:	0f 82 6c ff ff ff    	jb     c01090f8 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c010918c:	b8 01 00 00 00       	mov    $0x1,%eax
c0109191:	eb 31                	jmp    c01091c4 <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c0109193:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c010919a:	76 23                	jbe    c01091bf <user_mem_check+0x11c>
c010919c:	8b 45 10             	mov    0x10(%ebp),%eax
c010919f:	8b 55 0c             	mov    0xc(%ebp),%edx
c01091a2:	01 d0                	add    %edx,%eax
c01091a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01091a7:	76 16                	jbe    c01091bf <user_mem_check+0x11c>
c01091a9:	8b 45 10             	mov    0x10(%ebp),%eax
c01091ac:	8b 55 0c             	mov    0xc(%ebp),%edx
c01091af:	01 d0                	add    %edx,%eax
c01091b1:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c01091b6:	77 07                	ja     c01091bf <user_mem_check+0x11c>
c01091b8:	b8 01 00 00 00       	mov    $0x1,%eax
c01091bd:	eb 05                	jmp    c01091c4 <user_mem_check+0x121>
c01091bf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01091c4:	c9                   	leave  
c01091c5:	c3                   	ret    
	...

c01091c8 <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c01091c8:	55                   	push   %ebp
c01091c9:	89 e5                	mov    %esp,%ebp
c01091cb:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c01091ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01091d1:	8b 04 85 c0 54 1c c0 	mov    -0x3fe3ab40(,%eax,4),%eax
c01091d8:	83 f8 01             	cmp    $0x1,%eax
c01091db:	0f 85 85 00 00 00    	jne    c0109266 <phi_test_sema+0x9e>
c01091e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01091e4:	8d 48 04             	lea    0x4(%eax),%ecx
c01091e7:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01091ec:	89 c8                	mov    %ecx,%eax
c01091ee:	f7 ea                	imul   %edx
c01091f0:	d1 fa                	sar    %edx
c01091f2:	89 c8                	mov    %ecx,%eax
c01091f4:	c1 f8 1f             	sar    $0x1f,%eax
c01091f7:	29 c2                	sub    %eax,%edx
c01091f9:	89 d0                	mov    %edx,%eax
c01091fb:	c1 e0 02             	shl    $0x2,%eax
c01091fe:	01 d0                	add    %edx,%eax
c0109200:	89 ca                	mov    %ecx,%edx
c0109202:	29 c2                	sub    %eax,%edx
c0109204:	8b 04 95 c0 54 1c c0 	mov    -0x3fe3ab40(,%edx,4),%eax
c010920b:	83 f8 02             	cmp    $0x2,%eax
c010920e:	74 56                	je     c0109266 <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c0109210:	8b 45 08             	mov    0x8(%ebp),%eax
c0109213:	8d 48 01             	lea    0x1(%eax),%ecx
c0109216:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010921b:	89 c8                	mov    %ecx,%eax
c010921d:	f7 ea                	imul   %edx
c010921f:	d1 fa                	sar    %edx
c0109221:	89 c8                	mov    %ecx,%eax
c0109223:	c1 f8 1f             	sar    $0x1f,%eax
c0109226:	29 c2                	sub    %eax,%edx
c0109228:	89 d0                	mov    %edx,%eax
c010922a:	c1 e0 02             	shl    $0x2,%eax
c010922d:	01 d0                	add    %edx,%eax
c010922f:	89 ca                	mov    %ecx,%edx
c0109231:	29 c2                	sub    %eax,%edx
c0109233:	8b 04 95 c0 54 1c c0 	mov    -0x3fe3ab40(,%edx,4),%eax
c010923a:	83 f8 02             	cmp    $0x2,%eax
c010923d:	74 27                	je     c0109266 <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c010923f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109242:	c7 04 85 c0 54 1c c0 	movl   $0x2,-0x3fe3ab40(,%eax,4)
c0109249:	02 00 00 00 
        up(&s[i]);
c010924d:	8b 55 08             	mov    0x8(%ebp),%edx
c0109250:	89 d0                	mov    %edx,%eax
c0109252:	01 c0                	add    %eax,%eax
c0109254:	01 d0                	add    %edx,%eax
c0109256:	c1 e0 02             	shl    $0x2,%eax
c0109259:	05 60 55 1c c0       	add    $0xc01c5560,%eax
c010925e:	89 04 24             	mov    %eax,(%esp)
c0109261:	e8 13 0a 00 00       	call   c0109c79 <up>
    }
}
c0109266:	c9                   	leave  
c0109267:	c3                   	ret    

c0109268 <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0109268:	55                   	push   %ebp
c0109269:	89 e5                	mov    %esp,%ebp
c010926b:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c010926e:	c7 04 24 e8 54 1c c0 	movl   $0xc01c54e8,(%esp)
c0109275:	e8 1a 0a 00 00       	call   c0109c94 <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c010927a:	8b 45 08             	mov    0x8(%ebp),%eax
c010927d:	c7 04 85 c0 54 1c c0 	movl   $0x1,-0x3fe3ab40(,%eax,4)
c0109284:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c0109288:	8b 45 08             	mov    0x8(%ebp),%eax
c010928b:	89 04 24             	mov    %eax,(%esp)
c010928e:	e8 35 ff ff ff       	call   c01091c8 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0109293:	c7 04 24 e8 54 1c c0 	movl   $0xc01c54e8,(%esp)
c010929a:	e8 da 09 00 00       	call   c0109c79 <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c010929f:	8b 55 08             	mov    0x8(%ebp),%edx
c01092a2:	89 d0                	mov    %edx,%eax
c01092a4:	01 c0                	add    %eax,%eax
c01092a6:	01 d0                	add    %edx,%eax
c01092a8:	c1 e0 02             	shl    $0x2,%eax
c01092ab:	05 60 55 1c c0       	add    $0xc01c5560,%eax
c01092b0:	89 04 24             	mov    %eax,(%esp)
c01092b3:	e8 dc 09 00 00       	call   c0109c94 <down>
}
c01092b8:	c9                   	leave  
c01092b9:	c3                   	ret    

c01092ba <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c01092ba:	55                   	push   %ebp
c01092bb:	89 e5                	mov    %esp,%ebp
c01092bd:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c01092c0:	c7 04 24 e8 54 1c c0 	movl   $0xc01c54e8,(%esp)
c01092c7:	e8 c8 09 00 00       	call   c0109c94 <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c01092cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01092cf:	c7 04 85 c0 54 1c c0 	movl   $0x0,-0x3fe3ab40(,%eax,4)
c01092d6:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c01092da:	8b 45 08             	mov    0x8(%ebp),%eax
c01092dd:	8d 48 04             	lea    0x4(%eax),%ecx
c01092e0:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01092e5:	89 c8                	mov    %ecx,%eax
c01092e7:	f7 ea                	imul   %edx
c01092e9:	d1 fa                	sar    %edx
c01092eb:	89 c8                	mov    %ecx,%eax
c01092ed:	c1 f8 1f             	sar    $0x1f,%eax
c01092f0:	29 c2                	sub    %eax,%edx
c01092f2:	89 d0                	mov    %edx,%eax
c01092f4:	c1 e0 02             	shl    $0x2,%eax
c01092f7:	01 d0                	add    %edx,%eax
c01092f9:	89 ca                	mov    %ecx,%edx
c01092fb:	29 c2                	sub    %eax,%edx
c01092fd:	89 14 24             	mov    %edx,(%esp)
c0109300:	e8 c3 fe ff ff       	call   c01091c8 <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c0109305:	8b 45 08             	mov    0x8(%ebp),%eax
c0109308:	8d 48 01             	lea    0x1(%eax),%ecx
c010930b:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109310:	89 c8                	mov    %ecx,%eax
c0109312:	f7 ea                	imul   %edx
c0109314:	d1 fa                	sar    %edx
c0109316:	89 c8                	mov    %ecx,%eax
c0109318:	c1 f8 1f             	sar    $0x1f,%eax
c010931b:	29 c2                	sub    %eax,%edx
c010931d:	89 d0                	mov    %edx,%eax
c010931f:	c1 e0 02             	shl    $0x2,%eax
c0109322:	01 d0                	add    %edx,%eax
c0109324:	89 ca                	mov    %ecx,%edx
c0109326:	29 c2                	sub    %eax,%edx
c0109328:	89 14 24             	mov    %edx,(%esp)
c010932b:	e8 98 fe ff ff       	call   c01091c8 <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c0109330:	c7 04 24 e8 54 1c c0 	movl   $0xc01c54e8,(%esp)
c0109337:	e8 3d 09 00 00       	call   c0109c79 <up>
}
c010933c:	c9                   	leave  
c010933d:	c3                   	ret    

c010933e <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c010933e:	55                   	push   %ebp
c010933f:	89 e5                	mov    %esp,%ebp
c0109341:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c0109344:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c010934b:	8b 45 08             	mov    0x8(%ebp),%eax
c010934e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c0109351:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109354:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109358:	c7 04 24 20 f9 10 c0 	movl   $0xc010f920,(%esp)
c010935f:	e8 ff 6f ff ff       	call   c0100363 <cprintf>
    while(iter++<TIMES)
c0109364:	eb 62                	jmp    c01093c8 <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c0109366:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109369:	89 44 24 08          	mov    %eax,0x8(%esp)
c010936d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109370:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109374:	c7 04 24 40 f9 10 c0 	movl   $0xc010f940,(%esp)
c010937b:	e8 e3 6f ff ff       	call   c0100363 <cprintf>
        do_sleep(SLEEP_TIME);
c0109380:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109387:	e8 da 2c 00 00       	call   c010c066 <do_sleep>
        phi_take_forks_sema(i); 
c010938c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010938f:	89 04 24             	mov    %eax,(%esp)
c0109392:	e8 d1 fe ff ff       	call   c0109268 <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c0109397:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010939a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010939e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093a1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01093a5:	c7 04 24 70 f9 10 c0 	movl   $0xc010f970,(%esp)
c01093ac:	e8 b2 6f ff ff       	call   c0100363 <cprintf>
        do_sleep(SLEEP_TIME);
c01093b1:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01093b8:	e8 a9 2c 00 00       	call   c010c066 <do_sleep>
        phi_put_forks_sema(i); 
c01093bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093c0:	89 04 24             	mov    %eax,(%esp)
c01093c3:	e8 f2 fe ff ff       	call   c01092ba <phi_put_forks_sema>
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c01093c8:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
c01093cc:	0f 9e c0             	setle  %al
c01093cf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01093d3:	84 c0                	test   %al,%al
c01093d5:	75 8f                	jne    c0109366 <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c01093d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01093da:	89 44 24 04          	mov    %eax,0x4(%esp)
c01093de:	c7 04 24 9b f9 10 c0 	movl   $0xc010f99b,(%esp)
c01093e5:	e8 79 6f ff ff       	call   c0100363 <cprintf>
    return 0;    
c01093ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01093ef:	c9                   	leave  
c01093f0:	c3                   	ret    

c01093f1 <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c01093f1:	55                   	push   %ebp
c01093f2:	89 e5                	mov    %esp,%ebp
c01093f4:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c01093f7:	8b 45 08             	mov    0x8(%ebp),%eax
c01093fa:	8b 04 85 20 55 1c c0 	mov    -0x3fe3aae0(,%eax,4),%eax
c0109401:	83 f8 01             	cmp    $0x1,%eax
c0109404:	0f 85 b5 00 00 00    	jne    c01094bf <phi_test_condvar+0xce>
c010940a:	8b 45 08             	mov    0x8(%ebp),%eax
c010940d:	8d 48 04             	lea    0x4(%eax),%ecx
c0109410:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109415:	89 c8                	mov    %ecx,%eax
c0109417:	f7 ea                	imul   %edx
c0109419:	d1 fa                	sar    %edx
c010941b:	89 c8                	mov    %ecx,%eax
c010941d:	c1 f8 1f             	sar    $0x1f,%eax
c0109420:	29 c2                	sub    %eax,%edx
c0109422:	89 d0                	mov    %edx,%eax
c0109424:	c1 e0 02             	shl    $0x2,%eax
c0109427:	01 d0                	add    %edx,%eax
c0109429:	89 ca                	mov    %ecx,%edx
c010942b:	29 c2                	sub    %eax,%edx
c010942d:	8b 04 95 20 55 1c c0 	mov    -0x3fe3aae0(,%edx,4),%eax
c0109434:	83 f8 02             	cmp    $0x2,%eax
c0109437:	0f 84 82 00 00 00    	je     c01094bf <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c010943d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109440:	8d 48 01             	lea    0x1(%eax),%ecx
c0109443:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109448:	89 c8                	mov    %ecx,%eax
c010944a:	f7 ea                	imul   %edx
c010944c:	d1 fa                	sar    %edx
c010944e:	89 c8                	mov    %ecx,%eax
c0109450:	c1 f8 1f             	sar    $0x1f,%eax
c0109453:	29 c2                	sub    %eax,%edx
c0109455:	89 d0                	mov    %edx,%eax
c0109457:	c1 e0 02             	shl    $0x2,%eax
c010945a:	01 d0                	add    %edx,%eax
c010945c:	89 ca                	mov    %ecx,%edx
c010945e:	29 c2                	sub    %eax,%edx
c0109460:	8b 04 95 20 55 1c c0 	mov    -0x3fe3aae0(,%edx,4),%eax
c0109467:	83 f8 02             	cmp    $0x2,%eax
c010946a:	74 53                	je     c01094bf <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c010946c:	8b 45 08             	mov    0x8(%ebp),%eax
c010946f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109473:	c7 04 24 b8 f9 10 c0 	movl   $0xc010f9b8,(%esp)
c010947a:	e8 e4 6e ff ff       	call   c0100363 <cprintf>
        state_condvar[i] = EATING ;
c010947f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109482:	c7 04 85 20 55 1c c0 	movl   $0x2,-0x3fe3aae0(,%eax,4)
c0109489:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c010948d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109490:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109494:	c7 04 24 ec f9 10 c0 	movl   $0xc010f9ec,(%esp)
c010949b:	e8 c3 6e ff ff       	call   c0100363 <cprintf>
        cond_signal(&mtp->cv[i]) ;
c01094a0:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01094a5:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01094a8:	8b 55 08             	mov    0x8(%ebp),%edx
c01094ab:	89 d0                	mov    %edx,%eax
c01094ad:	c1 e0 02             	shl    $0x2,%eax
c01094b0:	01 d0                	add    %edx,%eax
c01094b2:	c1 e0 02             	shl    $0x2,%eax
c01094b5:	01 c8                	add    %ecx,%eax
c01094b7:	89 04 24             	mov    %eax,(%esp)
c01094ba:	e8 af 04 00 00       	call   c010996e <cond_signal>
    }
}
c01094bf:	c9                   	leave  
c01094c0:	c3                   	ret    

c01094c1 <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c01094c1:	55                   	push   %ebp
c01094c2:	89 e5                	mov    %esp,%ebp
c01094c4:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c01094c7:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01094cc:	89 04 24             	mov    %eax,(%esp)
c01094cf:	e8 c0 07 00 00       	call   c0109c94 <down>
//--------into routine in monitor--------------
    // LAB7 EXERCISE1: 2011010312
    // I am hungry
    state_condvar[i]=HUNGRY;
c01094d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01094d7:	c7 04 85 20 55 1c c0 	movl   $0x1,-0x3fe3aae0(,%eax,4)
c01094de:	01 00 00 00 
    // try to get fork
    cprintf("phi_take_forks_condvar: %d try to take forks\n",i);
c01094e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01094e5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01094e9:	c7 04 24 14 fa 10 c0 	movl   $0xc010fa14,(%esp)
c01094f0:	e8 6e 6e ff ff       	call   c0100363 <cprintf>
    phi_test_condvar(i);
c01094f5:	8b 45 08             	mov    0x8(%ebp),%eax
c01094f8:	89 04 24             	mov    %eax,(%esp)
c01094fb:	e8 f1 fe ff ff       	call   c01093f1 <phi_test_condvar>
    if (state_condvar[i] != EATING) {
c0109500:	8b 45 08             	mov    0x8(%ebp),%eax
c0109503:	8b 04 85 20 55 1c c0 	mov    -0x3fe3aae0(,%eax,4),%eax
c010950a:	83 f8 02             	cmp    $0x2,%eax
c010950d:	74 2b                	je     c010953a <phi_take_forks_condvar+0x79>
        cprintf("phi_take_forks_condvar: %d didn't get forks and will wait\n");
c010950f:	c7 04 24 44 fa 10 c0 	movl   $0xc010fa44,(%esp)
c0109516:	e8 48 6e ff ff       	call   c0100363 <cprintf>
        cond_wait(&mtp->cv[i]);
c010951b:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109520:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109523:	8b 55 08             	mov    0x8(%ebp),%edx
c0109526:	89 d0                	mov    %edx,%eax
c0109528:	c1 e0 02             	shl    $0x2,%eax
c010952b:	01 d0                	add    %edx,%eax
c010952d:	c1 e0 02             	shl    $0x2,%eax
c0109530:	01 c8                	add    %ecx,%eax
c0109532:	89 04 24             	mov    %eax,(%esp)
c0109535:	e8 d4 04 00 00       	call   c0109a0e <cond_wait>
    }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c010953a:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c010953f:	8b 40 18             	mov    0x18(%eax),%eax
c0109542:	85 c0                	test   %eax,%eax
c0109544:	7e 12                	jle    c0109558 <phi_take_forks_condvar+0x97>
         up(&(mtp->next));
c0109546:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c010954b:	83 c0 0c             	add    $0xc,%eax
c010954e:	89 04 24             	mov    %eax,(%esp)
c0109551:	e8 23 07 00 00       	call   c0109c79 <up>
c0109556:	eb 0d                	jmp    c0109565 <phi_take_forks_condvar+0xa4>
      else
         up(&(mtp->mutex));
c0109558:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c010955d:	89 04 24             	mov    %eax,(%esp)
c0109560:	e8 14 07 00 00       	call   c0109c79 <up>
}
c0109565:	c9                   	leave  
c0109566:	c3                   	ret    

c0109567 <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c0109567:	55                   	push   %ebp
c0109568:	89 e5                	mov    %esp,%ebp
c010956a:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c010956d:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109572:	89 04 24             	mov    %eax,(%esp)
c0109575:	e8 1a 07 00 00       	call   c0109c94 <down>

//--------into routine in monitor--------------
    // LAB7 EXERCISE1: 2011010312
    // I ate over
    cprintf("phi_put_forks_condvar: %d put forks back\n",i);
c010957a:	8b 45 08             	mov    0x8(%ebp),%eax
c010957d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109581:	c7 04 24 80 fa 10 c0 	movl   $0xc010fa80,(%esp)
c0109588:	e8 d6 6d ff ff       	call   c0100363 <cprintf>
    state_condvar[i]=THINKING;
c010958d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109590:	c7 04 85 20 55 1c c0 	movl   $0x0,-0x3fe3aae0(,%eax,4)
c0109597:	00 00 00 00 
    // test left and right neighbors
    phi_test_condvar(LEFT);
c010959b:	8b 45 08             	mov    0x8(%ebp),%eax
c010959e:	8d 48 04             	lea    0x4(%eax),%ecx
c01095a1:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01095a6:	89 c8                	mov    %ecx,%eax
c01095a8:	f7 ea                	imul   %edx
c01095aa:	d1 fa                	sar    %edx
c01095ac:	89 c8                	mov    %ecx,%eax
c01095ae:	c1 f8 1f             	sar    $0x1f,%eax
c01095b1:	29 c2                	sub    %eax,%edx
c01095b3:	89 d0                	mov    %edx,%eax
c01095b5:	c1 e0 02             	shl    $0x2,%eax
c01095b8:	01 d0                	add    %edx,%eax
c01095ba:	89 ca                	mov    %ecx,%edx
c01095bc:	29 c2                	sub    %eax,%edx
c01095be:	89 14 24             	mov    %edx,(%esp)
c01095c1:	e8 2b fe ff ff       	call   c01093f1 <phi_test_condvar>
    phi_test_condvar(RIGHT);
c01095c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01095c9:	8d 48 01             	lea    0x1(%eax),%ecx
c01095cc:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01095d1:	89 c8                	mov    %ecx,%eax
c01095d3:	f7 ea                	imul   %edx
c01095d5:	d1 fa                	sar    %edx
c01095d7:	89 c8                	mov    %ecx,%eax
c01095d9:	c1 f8 1f             	sar    $0x1f,%eax
c01095dc:	29 c2                	sub    %eax,%edx
c01095de:	89 d0                	mov    %edx,%eax
c01095e0:	c1 e0 02             	shl    $0x2,%eax
c01095e3:	01 d0                	add    %edx,%eax
c01095e5:	89 ca                	mov    %ecx,%edx
c01095e7:	29 c2                	sub    %eax,%edx
c01095e9:	89 14 24             	mov    %edx,(%esp)
c01095ec:	e8 00 fe ff ff       	call   c01093f1 <phi_test_condvar>
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c01095f1:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01095f6:	8b 40 18             	mov    0x18(%eax),%eax
c01095f9:	85 c0                	test   %eax,%eax
c01095fb:	7e 12                	jle    c010960f <phi_put_forks_condvar+0xa8>
        up(&(mtp->next));
c01095fd:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109602:	83 c0 0c             	add    $0xc,%eax
c0109605:	89 04 24             	mov    %eax,(%esp)
c0109608:	e8 6c 06 00 00       	call   c0109c79 <up>
c010960d:	eb 0d                	jmp    c010961c <phi_put_forks_condvar+0xb5>
     else
        up(&(mtp->mutex));
c010960f:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109614:	89 04 24             	mov    %eax,(%esp)
c0109617:	e8 5d 06 00 00       	call   c0109c79 <up>
}
c010961c:	c9                   	leave  
c010961d:	c3                   	ret    

c010961e <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c010961e:	55                   	push   %ebp
c010961f:	89 e5                	mov    %esp,%ebp
c0109621:	83 ec 28             	sub    $0x28,%esp
  
    int i, iter=0;
c0109624:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c010962b:	8b 45 08             	mov    0x8(%ebp),%eax
c010962e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c0109631:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109634:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109638:	c7 04 24 ac fa 10 c0 	movl   $0xc010faac,(%esp)
c010963f:	e8 1f 6d ff ff       	call   c0100363 <cprintf>
    while(iter++<TIMES)
c0109644:	eb 62                	jmp    c01096a8 <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c0109646:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109649:	89 44 24 08          	mov    %eax,0x8(%esp)
c010964d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109650:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109654:	c7 04 24 cc fa 10 c0 	movl   $0xc010facc,(%esp)
c010965b:	e8 03 6d ff ff       	call   c0100363 <cprintf>
        do_sleep(SLEEP_TIME);
c0109660:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109667:	e8 fa 29 00 00       	call   c010c066 <do_sleep>
        phi_take_forks_condvar(i); 
c010966c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010966f:	89 04 24             	mov    %eax,(%esp)
c0109672:	e8 4a fe ff ff       	call   c01094c1 <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c0109677:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010967a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010967e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109681:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109685:	c7 04 24 fc fa 10 c0 	movl   $0xc010fafc,(%esp)
c010968c:	e8 d2 6c ff ff       	call   c0100363 <cprintf>
        do_sleep(SLEEP_TIME);
c0109691:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109698:	e8 c9 29 00 00       	call   c010c066 <do_sleep>
        phi_put_forks_condvar(i); 
c010969d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096a0:	89 04 24             	mov    %eax,(%esp)
c01096a3:	e8 bf fe ff ff       	call   c0109567 <phi_put_forks_condvar>
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c01096a8:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
c01096ac:	0f 9e c0             	setle  %al
c01096af:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01096b3:	84 c0                	test   %al,%al
c01096b5:	75 8f                	jne    c0109646 <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c01096b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096ba:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096be:	c7 04 24 2c fb 10 c0 	movl   $0xc010fb2c,(%esp)
c01096c5:	e8 99 6c ff ff       	call   c0100363 <cprintf>
    return 0;    
c01096ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01096cf:	c9                   	leave  
c01096d0:	c3                   	ret    

c01096d1 <check_sync>:

void check_sync(void){
c01096d1:	55                   	push   %ebp
c01096d2:	89 e5                	mov    %esp,%ebp
c01096d4:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c01096d7:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01096de:	00 
c01096df:	c7 04 24 e8 54 1c c0 	movl   $0xc01c54e8,(%esp)
c01096e6:	e8 1b 04 00 00       	call   c0109b06 <sem_init>
    for(i=0;i<N;i++){
c01096eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01096f2:	e9 94 00 00 00       	jmp    c010978b <check_sync+0xba>
        sem_init(&s[i], 0);
c01096f7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01096fa:	89 d0                	mov    %edx,%eax
c01096fc:	01 c0                	add    %eax,%eax
c01096fe:	01 d0                	add    %edx,%eax
c0109700:	c1 e0 02             	shl    $0x2,%eax
c0109703:	05 60 55 1c c0       	add    $0xc01c5560,%eax
c0109708:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010970f:	00 
c0109710:	89 04 24             	mov    %eax,(%esp)
c0109713:	e8 ee 03 00 00       	call   c0109b06 <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c0109718:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010971b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109722:	00 
c0109723:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109727:	c7 04 24 3e 93 10 c0 	movl   $0xc010933e,(%esp)
c010972e:	e8 74 14 00 00       	call   c010aba7 <kernel_thread>
c0109733:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c0109736:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010973a:	7f 1c                	jg     c0109758 <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c010973c:	c7 44 24 08 4c fb 10 	movl   $0xc010fb4c,0x8(%esp)
c0109743:	c0 
c0109744:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c010974b:	00 
c010974c:	c7 04 24 7e fb 10 c0 	movl   $0xc010fb7e,(%esp)
c0109753:	e8 64 76 ff ff       	call   c0100dbc <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c0109758:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010975b:	89 04 24             	mov    %eax,(%esp)
c010975e:	e8 d0 13 00 00       	call   c010ab33 <find_proc>
c0109763:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109766:	89 04 95 34 55 1c c0 	mov    %eax,-0x3fe3aacc(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c010976d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109770:	8b 04 85 34 55 1c c0 	mov    -0x3fe3aacc(,%eax,4),%eax
c0109777:	c7 44 24 04 95 fb 10 	movl   $0xc010fb95,0x4(%esp)
c010977e:	c0 
c010977f:	89 04 24             	mov    %eax,(%esp)
c0109782:	e8 93 0f 00 00       	call   c010a71a <set_proc_name>

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c0109787:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010978b:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c010978f:	0f 8e 62 ff ff ff    	jle    c01096f7 <check_sync+0x26>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c0109795:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c010979c:	00 
c010979d:	c7 04 24 00 55 1c c0 	movl   $0xc01c5500,(%esp)
c01097a4:	e8 9b 00 00 00       	call   c0109844 <monitor_init>
    for(i=0;i<N;i++){
c01097a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01097b0:	e9 81 00 00 00       	jmp    c0109836 <check_sync+0x165>
        state_condvar[i]=THINKING;
c01097b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097b8:	c7 04 85 20 55 1c c0 	movl   $0x0,-0x3fe3aae0(,%eax,4)
c01097bf:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c01097c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01097c6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01097cd:	00 
c01097ce:	89 44 24 04          	mov    %eax,0x4(%esp)
c01097d2:	c7 04 24 1e 96 10 c0 	movl   $0xc010961e,(%esp)
c01097d9:	e8 c9 13 00 00       	call   c010aba7 <kernel_thread>
c01097de:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c01097e1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01097e5:	7f 1c                	jg     c0109803 <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c01097e7:	c7 44 24 08 ac fb 10 	movl   $0xc010fbac,0x8(%esp)
c01097ee:	c0 
c01097ef:	c7 44 24 04 ca 00 00 	movl   $0xca,0x4(%esp)
c01097f6:	00 
c01097f7:	c7 04 24 7e fb 10 c0 	movl   $0xc010fb7e,(%esp)
c01097fe:	e8 b9 75 ff ff       	call   c0100dbc <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c0109803:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109806:	89 04 24             	mov    %eax,(%esp)
c0109809:	e8 25 13 00 00       	call   c010ab33 <find_proc>
c010980e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109811:	89 04 95 d4 54 1c c0 	mov    %eax,-0x3fe3ab2c(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c0109818:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010981b:	8b 04 85 d4 54 1c c0 	mov    -0x3fe3ab2c(,%eax,4),%eax
c0109822:	c7 44 24 04 dc fb 10 	movl   $0xc010fbdc,0x4(%esp)
c0109829:	c0 
c010982a:	89 04 24             	mov    %eax,(%esp)
c010982d:	e8 e8 0e 00 00       	call   c010a71a <set_proc_name>
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c0109832:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109836:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c010983a:	0f 8e 75 ff ff ff    	jle    c01097b5 <check_sync+0xe4>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c0109840:	c9                   	leave  
c0109841:	c3                   	ret    
	...

c0109844 <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c0109844:	55                   	push   %ebp
c0109845:	89 e5                	mov    %esp,%ebp
c0109847:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c010984a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010984e:	75 24                	jne    c0109874 <monitor_init+0x30>
c0109850:	c7 44 24 0c f8 fb 10 	movl   $0xc010fbf8,0xc(%esp)
c0109857:	c0 
c0109858:	c7 44 24 08 01 fc 10 	movl   $0xc010fc01,0x8(%esp)
c010985f:	c0 
c0109860:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c0109867:	00 
c0109868:	c7 04 24 16 fc 10 c0 	movl   $0xc010fc16,(%esp)
c010986f:	e8 48 75 ff ff       	call   c0100dbc <__panic>
    mtp->next_count = 0;
c0109874:	8b 45 08             	mov    0x8(%ebp),%eax
c0109877:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c010987e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109881:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c0109888:	8b 45 08             	mov    0x8(%ebp),%eax
c010988b:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109892:	00 
c0109893:	89 04 24             	mov    %eax,(%esp)
c0109896:	e8 6b 02 00 00       	call   c0109b06 <sem_init>
    sem_init(&(mtp->next), 0);
c010989b:	8b 45 08             	mov    0x8(%ebp),%eax
c010989e:	83 c0 0c             	add    $0xc,%eax
c01098a1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01098a8:	00 
c01098a9:	89 04 24             	mov    %eax,(%esp)
c01098ac:	e8 55 02 00 00       	call   c0109b06 <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c01098b1:	8b 55 0c             	mov    0xc(%ebp),%edx
c01098b4:	89 d0                	mov    %edx,%eax
c01098b6:	c1 e0 02             	shl    $0x2,%eax
c01098b9:	01 d0                	add    %edx,%eax
c01098bb:	c1 e0 02             	shl    $0x2,%eax
c01098be:	89 04 24             	mov    %eax,(%esp)
c01098c1:	e8 f1 b3 ff ff       	call   c0104cb7 <kmalloc>
c01098c6:	8b 55 08             	mov    0x8(%ebp),%edx
c01098c9:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c01098cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01098cf:	8b 40 1c             	mov    0x1c(%eax),%eax
c01098d2:	85 c0                	test   %eax,%eax
c01098d4:	75 24                	jne    c01098fa <monitor_init+0xb6>
c01098d6:	c7 44 24 0c 2a fc 10 	movl   $0xc010fc2a,0xc(%esp)
c01098dd:	c0 
c01098de:	c7 44 24 08 01 fc 10 	movl   $0xc010fc01,0x8(%esp)
c01098e5:	c0 
c01098e6:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c01098ed:	00 
c01098ee:	c7 04 24 16 fc 10 c0 	movl   $0xc010fc16,(%esp)
c01098f5:	e8 c2 74 ff ff       	call   c0100dbc <__panic>
    for(i=0; i<num_cv; i++){
c01098fa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109901:	eb 61                	jmp    c0109964 <monitor_init+0x120>
        mtp->cv[i].count=0;
c0109903:	8b 45 08             	mov    0x8(%ebp),%eax
c0109906:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109909:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010990c:	89 d0                	mov    %edx,%eax
c010990e:	c1 e0 02             	shl    $0x2,%eax
c0109911:	01 d0                	add    %edx,%eax
c0109913:	c1 e0 02             	shl    $0x2,%eax
c0109916:	01 c8                	add    %ecx,%eax
c0109918:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c010991f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109922:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109925:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109928:	89 d0                	mov    %edx,%eax
c010992a:	c1 e0 02             	shl    $0x2,%eax
c010992d:	01 d0                	add    %edx,%eax
c010992f:	c1 e0 02             	shl    $0x2,%eax
c0109932:	01 c8                	add    %ecx,%eax
c0109934:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010993b:	00 
c010993c:	89 04 24             	mov    %eax,(%esp)
c010993f:	e8 c2 01 00 00       	call   c0109b06 <sem_init>
        mtp->cv[i].owner=mtp;
c0109944:	8b 45 08             	mov    0x8(%ebp),%eax
c0109947:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010994a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010994d:	89 d0                	mov    %edx,%eax
c010994f:	c1 e0 02             	shl    $0x2,%eax
c0109952:	01 d0                	add    %edx,%eax
c0109954:	c1 e0 02             	shl    $0x2,%eax
c0109957:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010995a:	8b 45 08             	mov    0x8(%ebp),%eax
c010995d:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c0109960:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109964:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109967:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010996a:	72 97                	jb     c0109903 <monitor_init+0xbf>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c010996c:	c9                   	leave  
c010996d:	c3                   	ret    

c010996e <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c010996e:	55                   	push   %ebp
c010996f:	89 e5                	mov    %esp,%ebp
c0109971:	83 ec 18             	sub    $0x18,%esp
   //LAB7 EXERCISE1: 2011010312
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c0109974:	8b 45 08             	mov    0x8(%ebp),%eax
c0109977:	8b 40 10             	mov    0x10(%eax),%eax
c010997a:	8b 50 18             	mov    0x18(%eax),%edx
c010997d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109980:	8b 40 0c             	mov    0xc(%eax),%eax
c0109983:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109987:	89 44 24 08          	mov    %eax,0x8(%esp)
c010998b:	8b 45 08             	mov    0x8(%ebp),%eax
c010998e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109992:	c7 04 24 38 fc 10 c0 	movl   $0xc010fc38,(%esp)
c0109999:	e8 c5 69 ff ff       	call   c0100363 <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
    if(cvp->count>0) {                  
c010999e:	8b 45 08             	mov    0x8(%ebp),%eax
c01099a1:	8b 40 0c             	mov    0xc(%eax),%eax
c01099a4:	85 c0                	test   %eax,%eax
c01099a6:	7e 3a                	jle    c01099e2 <cond_signal+0x74>
        up(&(cvp->sem));                
c01099a8:	8b 45 08             	mov    0x8(%ebp),%eax
c01099ab:	89 04 24             	mov    %eax,(%esp)
c01099ae:	e8 c6 02 00 00       	call   c0109c79 <up>
        ++(cvp->owner->next_count);
c01099b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01099b6:	8b 40 10             	mov    0x10(%eax),%eax
c01099b9:	8b 50 18             	mov    0x18(%eax),%edx
c01099bc:	83 c2 01             	add    $0x1,%edx
c01099bf:	89 50 18             	mov    %edx,0x18(%eax)
        down(&(cvp->owner->next));      
c01099c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01099c5:	8b 40 10             	mov    0x10(%eax),%eax
c01099c8:	83 c0 0c             	add    $0xc,%eax
c01099cb:	89 04 24             	mov    %eax,(%esp)
c01099ce:	e8 c1 02 00 00       	call   c0109c94 <down>
        --(cvp->owner->next_count);     
c01099d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01099d6:	8b 40 10             	mov    0x10(%eax),%eax
c01099d9:	8b 50 18             	mov    0x18(%eax),%edx
c01099dc:	83 ea 01             	sub    $0x1,%edx
c01099df:	89 50 18             	mov    %edx,0x18(%eax)
    }                                   
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c01099e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01099e5:	8b 40 10             	mov    0x10(%eax),%eax
c01099e8:	8b 50 18             	mov    0x18(%eax),%edx
c01099eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01099ee:	8b 40 0c             	mov    0xc(%eax),%eax
c01099f1:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01099f5:	89 44 24 08          	mov    %eax,0x8(%esp)
c01099f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01099fc:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a00:	c7 04 24 80 fc 10 c0 	movl   $0xc010fc80,(%esp)
c0109a07:	e8 57 69 ff ff       	call   c0100363 <cprintf>
}
c0109a0c:	c9                   	leave  
c0109a0d:	c3                   	ret    

c0109a0e <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109a0e:	55                   	push   %ebp
c0109a0f:	89 e5                	mov    %esp,%ebp
c0109a11:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: 2011010312
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109a14:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a17:	8b 40 10             	mov    0x10(%eax),%eax
c0109a1a:	8b 50 18             	mov    0x18(%eax),%edx
c0109a1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a20:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a23:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109a27:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109a2b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a2e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a32:	c7 04 24 c4 fc 10 c0 	movl   $0xc010fcc4,(%esp)
c0109a39:	e8 25 69 ff ff       	call   c0100363 <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
    if(cvp->owner->next_count > 0)
c0109a3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a41:	8b 40 10             	mov    0x10(%eax),%eax
c0109a44:	8b 40 18             	mov    0x18(%eax),%eax
c0109a47:	85 c0                	test   %eax,%eax
c0109a49:	7e 13                	jle    c0109a5e <cond_wait+0x50>
        up(&(cvp->owner->next));
c0109a4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a4e:	8b 40 10             	mov    0x10(%eax),%eax
c0109a51:	83 c0 0c             	add    $0xc,%eax
c0109a54:	89 04 24             	mov    %eax,(%esp)
c0109a57:	e8 1d 02 00 00       	call   c0109c79 <up>
c0109a5c:	eb 0e                	jmp    c0109a6c <cond_wait+0x5e>
    else
        up(&(cvp->owner->mutex));   
c0109a5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a61:	8b 40 10             	mov    0x10(%eax),%eax
c0109a64:	89 04 24             	mov    %eax,(%esp)
c0109a67:	e8 0d 02 00 00       	call   c0109c79 <up>
    ++(cvp->count);
c0109a6c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a6f:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a72:	8d 50 01             	lea    0x1(%eax),%edx
c0109a75:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a78:	89 50 0c             	mov    %edx,0xc(%eax)
    down(&(cvp->sem));              
c0109a7b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a7e:	89 04 24             	mov    %eax,(%esp)
c0109a81:	e8 0e 02 00 00       	call   c0109c94 <down>
    --(cvp->count);                 
c0109a86:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a89:	8b 40 0c             	mov    0xc(%eax),%eax
c0109a8c:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109a8f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a92:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109a95:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a98:	8b 40 10             	mov    0x10(%eax),%eax
c0109a9b:	8b 50 18             	mov    0x18(%eax),%edx
c0109a9e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109aa1:	8b 40 0c             	mov    0xc(%eax),%eax
c0109aa4:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109aa8:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109aac:	8b 45 08             	mov    0x8(%ebp),%eax
c0109aaf:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ab3:	c7 04 24 08 fd 10 c0 	movl   $0xc010fd08,(%esp)
c0109aba:	e8 a4 68 ff ff       	call   c0100363 <cprintf>
}
c0109abf:	c9                   	leave  
c0109ac0:	c3                   	ret    
c0109ac1:	00 00                	add    %al,(%eax)
	...

c0109ac4 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0109ac4:	55                   	push   %ebp
c0109ac5:	89 e5                	mov    %esp,%ebp
c0109ac7:	53                   	push   %ebx
c0109ac8:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109acb:	9c                   	pushf  
c0109acc:	5b                   	pop    %ebx
c0109acd:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c0109ad0:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109ad3:	25 00 02 00 00       	and    $0x200,%eax
c0109ad8:	85 c0                	test   %eax,%eax
c0109ada:	74 0c                	je     c0109ae8 <__intr_save+0x24>
        intr_disable();
c0109adc:	e8 09 86 ff ff       	call   c01020ea <intr_disable>
        return 1;
c0109ae1:	b8 01 00 00 00       	mov    $0x1,%eax
c0109ae6:	eb 05                	jmp    c0109aed <__intr_save+0x29>
    }
    return 0;
c0109ae8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109aed:	83 c4 14             	add    $0x14,%esp
c0109af0:	5b                   	pop    %ebx
c0109af1:	5d                   	pop    %ebp
c0109af2:	c3                   	ret    

c0109af3 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109af3:	55                   	push   %ebp
c0109af4:	89 e5                	mov    %esp,%ebp
c0109af6:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109af9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109afd:	74 05                	je     c0109b04 <__intr_restore+0x11>
        intr_enable();
c0109aff:	e8 e0 85 ff ff       	call   c01020e4 <intr_enable>
    }
}
c0109b04:	c9                   	leave  
c0109b05:	c3                   	ret    

c0109b06 <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109b06:	55                   	push   %ebp
c0109b07:	89 e5                	mov    %esp,%ebp
c0109b09:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c0109b0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b0f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109b12:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109b14:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b17:	83 c0 04             	add    $0x4,%eax
c0109b1a:	89 04 24             	mov    %eax,(%esp)
c0109b1d:	e8 35 02 00 00       	call   c0109d57 <wait_queue_init>
}
c0109b22:	c9                   	leave  
c0109b23:	c3                   	ret    

c0109b24 <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109b24:	55                   	push   %ebp
c0109b25:	89 e5                	mov    %esp,%ebp
c0109b27:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109b2a:	e8 95 ff ff ff       	call   c0109ac4 <__intr_save>
c0109b2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109b32:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b35:	83 c0 04             	add    $0x4,%eax
c0109b38:	89 04 24             	mov    %eax,(%esp)
c0109b3b:	e8 6b 04 00 00       	call   c0109fab <wait_queue_first>
c0109b40:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109b43:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109b47:	75 0f                	jne    c0109b58 <__up+0x34>
            sem->value ++;
c0109b49:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b4c:	8b 00                	mov    (%eax),%eax
c0109b4e:	8d 50 01             	lea    0x1(%eax),%edx
c0109b51:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b54:	89 10                	mov    %edx,(%eax)
c0109b56:	eb 58                	jmp    c0109bb0 <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c0109b58:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109b5b:	8b 00                	mov    (%eax),%eax
c0109b5d:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0109b63:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109b66:	74 24                	je     c0109b8c <__up+0x68>
c0109b68:	c7 44 24 0c 4c fd 10 	movl   $0xc010fd4c,0xc(%esp)
c0109b6f:	c0 
c0109b70:	c7 44 24 08 71 fd 10 	movl   $0xc010fd71,0x8(%esp)
c0109b77:	c0 
c0109b78:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109b7f:	00 
c0109b80:	c7 04 24 86 fd 10 c0 	movl   $0xc010fd86,(%esp)
c0109b87:	e8 30 72 ff ff       	call   c0100dbc <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c0109b8c:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b8f:	8d 50 04             	lea    0x4(%eax),%edx
c0109b92:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109b99:	00 
c0109b9a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109b9d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109ba1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ba4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109ba8:	89 14 24             	mov    %edx,(%esp)
c0109bab:	e8 97 04 00 00       	call   c010a047 <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c0109bb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bb3:	89 04 24             	mov    %eax,(%esp)
c0109bb6:	e8 38 ff ff ff       	call   c0109af3 <__intr_restore>
}
c0109bbb:	c9                   	leave  
c0109bbc:	c3                   	ret    

c0109bbd <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109bbd:	55                   	push   %ebp
c0109bbe:	89 e5                	mov    %esp,%ebp
c0109bc0:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109bc3:	e8 fc fe ff ff       	call   c0109ac4 <__intr_save>
c0109bc8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109bcb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bce:	8b 00                	mov    (%eax),%eax
c0109bd0:	85 c0                	test   %eax,%eax
c0109bd2:	7e 22                	jle    c0109bf6 <__down+0x39>
        sem->value --;
c0109bd4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bd7:	8b 00                	mov    (%eax),%eax
c0109bd9:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109bdc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bdf:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0109be1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109be4:	89 04 24             	mov    %eax,(%esp)
c0109be7:	e8 07 ff ff ff       	call   c0109af3 <__intr_restore>
        return 0;
c0109bec:	b8 00 00 00 00       	mov    $0x0,%eax
c0109bf1:	e9 81 00 00 00       	jmp    c0109c77 <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c0109bf6:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109bf9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0109bfc:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bff:	8d 50 04             	lea    0x4(%eax),%edx
c0109c02:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c05:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c09:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c0c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c10:	89 14 24             	mov    %edx,(%esp)
c0109c13:	e8 36 05 00 00       	call   c010a14e <wait_current_set>
    local_intr_restore(intr_flag);
c0109c18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c1b:	89 04 24             	mov    %eax,(%esp)
c0109c1e:	e8 d0 fe ff ff       	call   c0109af3 <__intr_restore>

    schedule();
c0109c23:	e8 47 2a 00 00       	call   c010c66f <schedule>

    local_intr_save(intr_flag);
c0109c28:	e8 97 fe ff ff       	call   c0109ac4 <__intr_save>
c0109c2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0109c30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c33:	89 04 24             	mov    %eax,(%esp)
c0109c36:	e8 e4 03 00 00       	call   c010a01f <wait_in_queue>
c0109c3b:	85 c0                	test   %eax,%eax
c0109c3d:	74 15                	je     c0109c54 <__down+0x97>
c0109c3f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c42:	8d 50 04             	lea    0x4(%eax),%edx
c0109c45:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c48:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c4c:	89 14 24             	mov    %edx,(%esp)
c0109c4f:	e8 c6 01 00 00       	call   c0109e1a <wait_queue_del>
    local_intr_restore(intr_flag);
c0109c54:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109c57:	89 04 24             	mov    %eax,(%esp)
c0109c5a:	e8 94 fe ff ff       	call   c0109af3 <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c0109c5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c62:	8b 40 04             	mov    0x4(%eax),%eax
c0109c65:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109c68:	74 08                	je     c0109c72 <__down+0xb5>
        return wait->wakeup_flags;
c0109c6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109c6d:	8b 40 04             	mov    0x4(%eax),%eax
c0109c70:	eb 05                	jmp    c0109c77 <__down+0xba>
    }
    return 0;
c0109c72:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109c77:	c9                   	leave  
c0109c78:	c3                   	ret    

c0109c79 <up>:

void
up(semaphore_t *sem) {
c0109c79:	55                   	push   %ebp
c0109c7a:	89 e5                	mov    %esp,%ebp
c0109c7c:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c0109c7f:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109c86:	00 
c0109c87:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c8a:	89 04 24             	mov    %eax,(%esp)
c0109c8d:	e8 92 fe ff ff       	call   c0109b24 <__up>
}
c0109c92:	c9                   	leave  
c0109c93:	c3                   	ret    

c0109c94 <down>:

void
down(semaphore_t *sem) {
c0109c94:	55                   	push   %ebp
c0109c95:	89 e5                	mov    %esp,%ebp
c0109c97:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0109c9a:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109ca1:	00 
c0109ca2:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ca5:	89 04 24             	mov    %eax,(%esp)
c0109ca8:	e8 10 ff ff ff       	call   c0109bbd <__down>
c0109cad:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0109cb0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109cb4:	74 24                	je     c0109cda <down+0x46>
c0109cb6:	c7 44 24 0c 96 fd 10 	movl   $0xc010fd96,0xc(%esp)
c0109cbd:	c0 
c0109cbe:	c7 44 24 08 71 fd 10 	movl   $0xc010fd71,0x8(%esp)
c0109cc5:	c0 
c0109cc6:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c0109ccd:	00 
c0109cce:	c7 04 24 86 fd 10 c0 	movl   $0xc010fd86,(%esp)
c0109cd5:	e8 e2 70 ff ff       	call   c0100dbc <__panic>
}
c0109cda:	c9                   	leave  
c0109cdb:	c3                   	ret    

c0109cdc <try_down>:

bool
try_down(semaphore_t *sem) {
c0109cdc:	55                   	push   %ebp
c0109cdd:	89 e5                	mov    %esp,%ebp
c0109cdf:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c0109ce2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109ce9:	e8 d6 fd ff ff       	call   c0109ac4 <__intr_save>
c0109cee:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0109cf1:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cf4:	8b 00                	mov    (%eax),%eax
c0109cf6:	85 c0                	test   %eax,%eax
c0109cf8:	7e 14                	jle    c0109d0e <try_down+0x32>
        sem->value --, ret = 1;
c0109cfa:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cfd:	8b 00                	mov    (%eax),%eax
c0109cff:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109d02:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d05:	89 10                	mov    %edx,(%eax)
c0109d07:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109d0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d11:	89 04 24             	mov    %eax,(%esp)
c0109d14:	e8 da fd ff ff       	call   c0109af3 <__intr_restore>
    return ret;
c0109d19:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109d1c:	c9                   	leave  
c0109d1d:	c3                   	ret    
	...

c0109d20 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109d20:	55                   	push   %ebp
c0109d21:	89 e5                	mov    %esp,%ebp
c0109d23:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0109d26:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d29:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109d2c:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109d2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d31:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0109d38:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d3b:	83 c0 0c             	add    $0xc,%eax
c0109d3e:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109d41:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d44:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109d47:	89 50 04             	mov    %edx,0x4(%eax)
c0109d4a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d4d:	8b 50 04             	mov    0x4(%eax),%edx
c0109d50:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d53:	89 10                	mov    %edx,(%eax)
}
c0109d55:	c9                   	leave  
c0109d56:	c3                   	ret    

c0109d57 <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0109d57:	55                   	push   %ebp
c0109d58:	89 e5                	mov    %esp,%ebp
c0109d5a:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0109d5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d60:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109d63:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d66:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109d69:	89 50 04             	mov    %edx,0x4(%eax)
c0109d6c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d6f:	8b 50 04             	mov    0x4(%eax),%edx
c0109d72:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109d75:	89 10                	mov    %edx,(%eax)
}
c0109d77:	c9                   	leave  
c0109d78:	c3                   	ret    

c0109d79 <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0109d79:	55                   	push   %ebp
c0109d7a:	89 e5                	mov    %esp,%ebp
c0109d7c:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109d7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d82:	83 c0 0c             	add    $0xc,%eax
c0109d85:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109d88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d8b:	8b 40 04             	mov    0x4(%eax),%eax
c0109d8e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109d91:	0f 94 c0             	sete   %al
c0109d94:	0f b6 c0             	movzbl %al,%eax
c0109d97:	85 c0                	test   %eax,%eax
c0109d99:	74 09                	je     c0109da4 <wait_queue_add+0x2b>
c0109d9b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d9e:	8b 00                	mov    (%eax),%eax
c0109da0:	85 c0                	test   %eax,%eax
c0109da2:	75 24                	jne    c0109dc8 <wait_queue_add+0x4f>
c0109da4:	c7 44 24 0c a4 fd 10 	movl   $0xc010fda4,0xc(%esp)
c0109dab:	c0 
c0109dac:	c7 44 24 08 d9 fd 10 	movl   $0xc010fdd9,0x8(%esp)
c0109db3:	c0 
c0109db4:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c0109dbb:	00 
c0109dbc:	c7 04 24 ee fd 10 c0 	movl   $0xc010fdee,(%esp)
c0109dc3:	e8 f4 6f ff ff       	call   c0100dbc <__panic>
    wait->wait_queue = queue;
c0109dc8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109dcb:	8b 55 08             	mov    0x8(%ebp),%edx
c0109dce:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0109dd1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109dd4:	8d 50 0c             	lea    0xc(%eax),%edx
c0109dd7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109dda:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109ddd:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0109de0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109de3:	8b 00                	mov    (%eax),%eax
c0109de5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109de8:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109deb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109dee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109df1:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0109df4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109df7:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109dfa:	89 10                	mov    %edx,(%eax)
c0109dfc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109dff:	8b 10                	mov    (%eax),%edx
c0109e01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e04:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0109e07:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e0a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109e0d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0109e10:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e13:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109e16:	89 10                	mov    %edx,(%eax)
}
c0109e18:	c9                   	leave  
c0109e19:	c3                   	ret    

c0109e1a <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0109e1a:	55                   	push   %ebp
c0109e1b:	89 e5                	mov    %esp,%ebp
c0109e1d:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109e20:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e23:	83 c0 0c             	add    $0xc,%eax
c0109e26:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e2c:	8b 40 04             	mov    0x4(%eax),%eax
c0109e2f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109e32:	0f 94 c0             	sete   %al
c0109e35:	0f b6 c0             	movzbl %al,%eax
c0109e38:	85 c0                	test   %eax,%eax
c0109e3a:	75 0b                	jne    c0109e47 <wait_queue_del+0x2d>
c0109e3c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e3f:	8b 40 08             	mov    0x8(%eax),%eax
c0109e42:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109e45:	74 24                	je     c0109e6b <wait_queue_del+0x51>
c0109e47:	c7 44 24 0c 00 fe 10 	movl   $0xc010fe00,0xc(%esp)
c0109e4e:	c0 
c0109e4f:	c7 44 24 08 d9 fd 10 	movl   $0xc010fdd9,0x8(%esp)
c0109e56:	c0 
c0109e57:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c0109e5e:	00 
c0109e5f:	c7 04 24 ee fd 10 c0 	movl   $0xc010fdee,(%esp)
c0109e66:	e8 51 6f ff ff       	call   c0100dbc <__panic>
    list_del_init(&(wait->wait_link));
c0109e6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e6e:	83 c0 0c             	add    $0xc,%eax
c0109e71:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109e74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e77:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0109e7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109e7d:	8b 40 04             	mov    0x4(%eax),%eax
c0109e80:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0109e83:	8b 12                	mov    (%edx),%edx
c0109e85:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0109e88:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0109e8b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109e8e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0109e91:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0109e94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e97:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109e9a:	89 10                	mov    %edx,(%eax)
c0109e9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e9f:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109ea2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109ea5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0109ea8:	89 50 04             	mov    %edx,0x4(%eax)
c0109eab:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109eae:	8b 50 04             	mov    0x4(%eax),%edx
c0109eb1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109eb4:	89 10                	mov    %edx,(%eax)
}
c0109eb6:	c9                   	leave  
c0109eb7:	c3                   	ret    

c0109eb8 <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c0109eb8:	55                   	push   %ebp
c0109eb9:	89 e5                	mov    %esp,%ebp
c0109ebb:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109ebe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ec1:	83 c0 0c             	add    $0xc,%eax
c0109ec4:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109ec7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109eca:	8b 40 04             	mov    0x4(%eax),%eax
c0109ecd:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109ed0:	0f 94 c0             	sete   %al
c0109ed3:	0f b6 c0             	movzbl %al,%eax
c0109ed6:	85 c0                	test   %eax,%eax
c0109ed8:	75 0b                	jne    c0109ee5 <wait_queue_next+0x2d>
c0109eda:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109edd:	8b 40 08             	mov    0x8(%eax),%eax
c0109ee0:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109ee3:	74 24                	je     c0109f09 <wait_queue_next+0x51>
c0109ee5:	c7 44 24 0c 00 fe 10 	movl   $0xc010fe00,0xc(%esp)
c0109eec:	c0 
c0109eed:	c7 44 24 08 d9 fd 10 	movl   $0xc010fdd9,0x8(%esp)
c0109ef4:	c0 
c0109ef5:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c0109efc:	00 
c0109efd:	c7 04 24 ee fd 10 c0 	movl   $0xc010fdee,(%esp)
c0109f04:	e8 b3 6e ff ff       	call   c0100dbc <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c0109f09:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f0c:	83 c0 0c             	add    $0xc,%eax
c0109f0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109f12:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f15:	8b 40 04             	mov    0x4(%eax),%eax
c0109f18:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109f1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f1e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109f21:	74 08                	je     c0109f2b <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c0109f23:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f26:	83 e8 0c             	sub    $0xc,%eax
c0109f29:	eb 05                	jmp    c0109f30 <wait_queue_next+0x78>
    }
    return NULL;
c0109f2b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109f30:	c9                   	leave  
c0109f31:	c3                   	ret    

c0109f32 <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c0109f32:	55                   	push   %ebp
c0109f33:	89 e5                	mov    %esp,%ebp
c0109f35:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0109f38:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f3b:	83 c0 0c             	add    $0xc,%eax
c0109f3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109f41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f44:	8b 40 04             	mov    0x4(%eax),%eax
c0109f47:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0109f4a:	0f 94 c0             	sete   %al
c0109f4d:	0f b6 c0             	movzbl %al,%eax
c0109f50:	85 c0                	test   %eax,%eax
c0109f52:	75 0b                	jne    c0109f5f <wait_queue_prev+0x2d>
c0109f54:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f57:	8b 40 08             	mov    0x8(%eax),%eax
c0109f5a:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109f5d:	74 24                	je     c0109f83 <wait_queue_prev+0x51>
c0109f5f:	c7 44 24 0c 00 fe 10 	movl   $0xc010fe00,0xc(%esp)
c0109f66:	c0 
c0109f67:	c7 44 24 08 d9 fd 10 	movl   $0xc010fdd9,0x8(%esp)
c0109f6e:	c0 
c0109f6f:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c0109f76:	00 
c0109f77:	c7 04 24 ee fd 10 c0 	movl   $0xc010fdee,(%esp)
c0109f7e:	e8 39 6e ff ff       	call   c0100dbc <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c0109f83:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109f86:	83 c0 0c             	add    $0xc,%eax
c0109f89:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109f8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f8f:	8b 00                	mov    (%eax),%eax
c0109f91:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c0109f94:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f97:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0109f9a:	74 08                	je     c0109fa4 <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c0109f9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f9f:	83 e8 0c             	sub    $0xc,%eax
c0109fa2:	eb 05                	jmp    c0109fa9 <wait_queue_prev+0x77>
    }
    return NULL;
c0109fa4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109fa9:	c9                   	leave  
c0109faa:	c3                   	ret    

c0109fab <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c0109fab:	55                   	push   %ebp
c0109fac:	89 e5                	mov    %esp,%ebp
c0109fae:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c0109fb1:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fb4:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0109fb7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109fba:	8b 40 04             	mov    0x4(%eax),%eax
c0109fbd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109fc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fc3:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109fc6:	74 08                	je     c0109fd0 <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c0109fc8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109fcb:	83 e8 0c             	sub    $0xc,%eax
c0109fce:	eb 05                	jmp    c0109fd5 <wait_queue_first+0x2a>
    }
    return NULL;
c0109fd0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109fd5:	c9                   	leave  
c0109fd6:	c3                   	ret    

c0109fd7 <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c0109fd7:	55                   	push   %ebp
c0109fd8:	89 e5                	mov    %esp,%ebp
c0109fda:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c0109fdd:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fe0:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0109fe3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109fe6:	8b 00                	mov    (%eax),%eax
c0109fe8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0109feb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fee:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0109ff1:	74 08                	je     c0109ffb <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c0109ff3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109ff6:	83 e8 0c             	sub    $0xc,%eax
c0109ff9:	eb 05                	jmp    c010a000 <wait_queue_last+0x29>
    }
    return NULL;
c0109ffb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a000:	c9                   	leave  
c010a001:	c3                   	ret    

c010a002 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c010a002:	55                   	push   %ebp
c010a003:	89 e5                	mov    %esp,%ebp
c010a005:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c010a008:	8b 45 08             	mov    0x8(%ebp),%eax
c010a00b:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a00e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a011:	8b 40 04             	mov    0x4(%eax),%eax
c010a014:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a017:	0f 94 c0             	sete   %al
c010a01a:	0f b6 c0             	movzbl %al,%eax
}
c010a01d:	c9                   	leave  
c010a01e:	c3                   	ret    

c010a01f <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c010a01f:	55                   	push   %ebp
c010a020:	89 e5                	mov    %esp,%ebp
c010a022:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c010a025:	8b 45 08             	mov    0x8(%ebp),%eax
c010a028:	83 c0 0c             	add    $0xc,%eax
c010a02b:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a02e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a031:	8b 40 04             	mov    0x4(%eax),%eax
c010a034:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a037:	0f 94 c0             	sete   %al
c010a03a:	0f b6 c0             	movzbl %al,%eax
c010a03d:	85 c0                	test   %eax,%eax
c010a03f:	0f 94 c0             	sete   %al
c010a042:	0f b6 c0             	movzbl %al,%eax
}
c010a045:	c9                   	leave  
c010a046:	c3                   	ret    

c010a047 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c010a047:	55                   	push   %ebp
c010a048:	89 e5                	mov    %esp,%ebp
c010a04a:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c010a04d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010a051:	74 12                	je     c010a065 <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c010a053:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a056:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a05a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a05d:	89 04 24             	mov    %eax,(%esp)
c010a060:	e8 b5 fd ff ff       	call   c0109e1a <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c010a065:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a068:	8b 55 10             	mov    0x10(%ebp),%edx
c010a06b:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c010a06e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a071:	8b 00                	mov    (%eax),%eax
c010a073:	89 04 24             	mov    %eax,(%esp)
c010a076:	e8 58 25 00 00       	call   c010c5d3 <wakeup_proc>
}
c010a07b:	c9                   	leave  
c010a07c:	c3                   	ret    

c010a07d <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a07d:	55                   	push   %ebp
c010a07e:	89 e5                	mov    %esp,%ebp
c010a080:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a083:	8b 45 08             	mov    0x8(%ebp),%eax
c010a086:	89 04 24             	mov    %eax,(%esp)
c010a089:	e8 1d ff ff ff       	call   c0109fab <wait_queue_first>
c010a08e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a091:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a095:	74 20                	je     c010a0b7 <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c010a097:	8b 45 10             	mov    0x10(%ebp),%eax
c010a09a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a09e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0a1:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a0a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a0ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0af:	89 04 24             	mov    %eax,(%esp)
c010a0b2:	e8 90 ff ff ff       	call   c010a047 <wakeup_wait>
    }
}
c010a0b7:	c9                   	leave  
c010a0b8:	c3                   	ret    

c010a0b9 <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a0b9:	55                   	push   %ebp
c010a0ba:	89 e5                	mov    %esp,%ebp
c010a0bc:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a0bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0c2:	89 04 24             	mov    %eax,(%esp)
c010a0c5:	e8 e1 fe ff ff       	call   c0109fab <wait_queue_first>
c010a0ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a0cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a0d1:	74 79                	je     c010a14c <wakeup_queue+0x93>
        if (del) {
c010a0d3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a0d7:	74 37                	je     c010a110 <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c010a0d9:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a0e0:	00 
c010a0e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0e4:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a0e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0eb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a0ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0f2:	89 04 24             	mov    %eax,(%esp)
c010a0f5:	e8 4d ff ff ff       	call   c010a047 <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c010a0fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010a0fd:	89 04 24             	mov    %eax,(%esp)
c010a100:	e8 a6 fe ff ff       	call   c0109fab <wait_queue_first>
c010a105:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a108:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a10c:	75 cb                	jne    c010a0d9 <wakeup_queue+0x20>
c010a10e:	eb 3c                	jmp    c010a14c <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c010a110:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010a117:	00 
c010a118:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a11b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a11f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a122:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a126:	8b 45 08             	mov    0x8(%ebp),%eax
c010a129:	89 04 24             	mov    %eax,(%esp)
c010a12c:	e8 16 ff ff ff       	call   c010a047 <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c010a131:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a134:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a138:	8b 45 08             	mov    0x8(%ebp),%eax
c010a13b:	89 04 24             	mov    %eax,(%esp)
c010a13e:	e8 75 fd ff ff       	call   c0109eb8 <wait_queue_next>
c010a143:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a146:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a14a:	75 c4                	jne    c010a110 <wakeup_queue+0x57>
        }
    }
}
c010a14c:	c9                   	leave  
c010a14d:	c3                   	ret    

c010a14e <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c010a14e:	55                   	push   %ebp
c010a14f:	89 e5                	mov    %esp,%ebp
c010a151:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c010a154:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010a159:	85 c0                	test   %eax,%eax
c010a15b:	75 24                	jne    c010a181 <wait_current_set+0x33>
c010a15d:	c7 44 24 0c 3d fe 10 	movl   $0xc010fe3d,0xc(%esp)
c010a164:	c0 
c010a165:	c7 44 24 08 d9 fd 10 	movl   $0xc010fdd9,0x8(%esp)
c010a16c:	c0 
c010a16d:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010a174:	00 
c010a175:	c7 04 24 ee fd 10 c0 	movl   $0xc010fdee,(%esp)
c010a17c:	e8 3b 6c ff ff       	call   c0100dbc <__panic>
    wait_init(wait, current);
c010a181:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010a186:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a18a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a18d:	89 04 24             	mov    %eax,(%esp)
c010a190:	e8 8b fb ff ff       	call   c0109d20 <wait_init>
    current->state = PROC_SLEEPING;
c010a195:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010a19a:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c010a1a0:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010a1a5:	8b 55 10             	mov    0x10(%ebp),%edx
c010a1a8:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c010a1ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a1b1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a1b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1b8:	89 04 24             	mov    %eax,(%esp)
c010a1bb:	e8 b9 fb ff ff       	call   c0109d79 <wait_queue_add>
}
c010a1c0:	c9                   	leave  
c010a1c1:	c3                   	ret    
	...

c010a1c4 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010a1c4:	55                   	push   %ebp
c010a1c5:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a1c7:	8b 55 08             	mov    0x8(%ebp),%edx
c010a1ca:	a1 d0 53 1c c0       	mov    0xc01c53d0,%eax
c010a1cf:	89 d1                	mov    %edx,%ecx
c010a1d1:	29 c1                	sub    %eax,%ecx
c010a1d3:	89 c8                	mov    %ecx,%eax
c010a1d5:	c1 f8 05             	sar    $0x5,%eax
}
c010a1d8:	5d                   	pop    %ebp
c010a1d9:	c3                   	ret    

c010a1da <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010a1da:	55                   	push   %ebp
c010a1db:	89 e5                	mov    %esp,%ebp
c010a1dd:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a1e0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1e3:	89 04 24             	mov    %eax,(%esp)
c010a1e6:	e8 d9 ff ff ff       	call   c010a1c4 <page2ppn>
c010a1eb:	c1 e0 0c             	shl    $0xc,%eax
}
c010a1ee:	c9                   	leave  
c010a1ef:	c3                   	ret    

c010a1f0 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010a1f0:	55                   	push   %ebp
c010a1f1:	89 e5                	mov    %esp,%ebp
c010a1f3:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a1f6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1f9:	89 04 24             	mov    %eax,(%esp)
c010a1fc:	e8 d9 ff ff ff       	call   c010a1da <page2pa>
c010a201:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a204:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a207:	c1 e8 0c             	shr    $0xc,%eax
c010a20a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a20d:	a1 80 32 1c c0       	mov    0xc01c3280,%eax
c010a212:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a215:	72 23                	jb     c010a23a <page2kva+0x4a>
c010a217:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a21a:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a21e:	c7 44 24 08 50 fe 10 	movl   $0xc010fe50,0x8(%esp)
c010a225:	c0 
c010a226:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010a22d:	00 
c010a22e:	c7 04 24 73 fe 10 c0 	movl   $0xc010fe73,(%esp)
c010a235:	e8 82 6b ff ff       	call   c0100dbc <__panic>
c010a23a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a23d:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a242:	c9                   	leave  
c010a243:	c3                   	ret    

c010a244 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010a244:	55                   	push   %ebp
c010a245:	89 e5                	mov    %esp,%ebp
c010a247:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010a24a:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a251:	e8 81 79 ff ff       	call   c0101bd7 <ide_device_valid>
c010a256:	85 c0                	test   %eax,%eax
c010a258:	75 1c                	jne    c010a276 <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010a25a:	c7 44 24 08 81 fe 10 	movl   $0xc010fe81,0x8(%esp)
c010a261:	c0 
c010a262:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010a269:	00 
c010a26a:	c7 04 24 9b fe 10 c0 	movl   $0xc010fe9b,(%esp)
c010a271:	e8 46 6b ff ff       	call   c0100dbc <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010a276:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a27d:	e8 94 79 ff ff       	call   c0101c16 <ide_device_size>
c010a282:	c1 e8 03             	shr    $0x3,%eax
c010a285:	a3 7c 54 1c c0       	mov    %eax,0xc01c547c
}
c010a28a:	c9                   	leave  
c010a28b:	c3                   	ret    

c010a28c <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010a28c:	55                   	push   %ebp
c010a28d:	89 e5                	mov    %esp,%ebp
c010a28f:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a292:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a295:	89 04 24             	mov    %eax,(%esp)
c010a298:	e8 53 ff ff ff       	call   c010a1f0 <page2kva>
c010a29d:	8b 55 08             	mov    0x8(%ebp),%edx
c010a2a0:	c1 ea 08             	shr    $0x8,%edx
c010a2a3:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a2a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a2aa:	74 0b                	je     c010a2b7 <swapfs_read+0x2b>
c010a2ac:	8b 15 7c 54 1c c0    	mov    0xc01c547c,%edx
c010a2b2:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a2b5:	72 23                	jb     c010a2da <swapfs_read+0x4e>
c010a2b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2ba:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a2be:	c7 44 24 08 ac fe 10 	movl   $0xc010feac,0x8(%esp)
c010a2c5:	c0 
c010a2c6:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010a2cd:	00 
c010a2ce:	c7 04 24 9b fe 10 c0 	movl   $0xc010fe9b,(%esp)
c010a2d5:	e8 e2 6a ff ff       	call   c0100dbc <__panic>
c010a2da:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a2dd:	c1 e2 03             	shl    $0x3,%edx
c010a2e0:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a2e7:	00 
c010a2e8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a2ec:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a2f0:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a2f7:	e8 59 79 ff ff       	call   c0101c55 <ide_read_secs>
}
c010a2fc:	c9                   	leave  
c010a2fd:	c3                   	ret    

c010a2fe <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010a2fe:	55                   	push   %ebp
c010a2ff:	89 e5                	mov    %esp,%ebp
c010a301:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a304:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a307:	89 04 24             	mov    %eax,(%esp)
c010a30a:	e8 e1 fe ff ff       	call   c010a1f0 <page2kva>
c010a30f:	8b 55 08             	mov    0x8(%ebp),%edx
c010a312:	c1 ea 08             	shr    $0x8,%edx
c010a315:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a318:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a31c:	74 0b                	je     c010a329 <swapfs_write+0x2b>
c010a31e:	8b 15 7c 54 1c c0    	mov    0xc01c547c,%edx
c010a324:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a327:	72 23                	jb     c010a34c <swapfs_write+0x4e>
c010a329:	8b 45 08             	mov    0x8(%ebp),%eax
c010a32c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a330:	c7 44 24 08 ac fe 10 	movl   $0xc010feac,0x8(%esp)
c010a337:	c0 
c010a338:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010a33f:	00 
c010a340:	c7 04 24 9b fe 10 c0 	movl   $0xc010fe9b,(%esp)
c010a347:	e8 70 6a ff ff       	call   c0100dbc <__panic>
c010a34c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a34f:	c1 e2 03             	shl    $0x3,%edx
c010a352:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a359:	00 
c010a35a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a35e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a362:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a369:	e8 30 7b ff ff       	call   c0101e9e <ide_write_secs>
}
c010a36e:	c9                   	leave  
c010a36f:	c3                   	ret    

c010a370 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010a370:	52                   	push   %edx
    call *%ebx              # call fn
c010a371:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010a373:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010a374:	e8 f9 0c 00 00       	call   c010b072 <do_exit>
c010a379:	00 00                	add    %al,(%eax)
	...

c010a37c <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010a37c:	55                   	push   %ebp
c010a37d:	89 e5                	mov    %esp,%ebp
c010a37f:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010a382:	8b 55 10             	mov    0x10(%ebp),%edx
c010a385:	8b 45 08             	mov    0x8(%ebp),%eax
c010a388:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010a38a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a38d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a390:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010a393:	8b 45 08             	mov    0x8(%ebp),%eax
c010a396:	83 c0 08             	add    $0x8,%eax
c010a399:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010a39c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a39f:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a3a2:	89 50 04             	mov    %edx,0x4(%eax)
c010a3a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a3a8:	8b 50 04             	mov    0x4(%eax),%edx
c010a3ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a3ae:	89 10                	mov    %edx,(%eax)
    return timer;
c010a3b0:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010a3b3:	c9                   	leave  
c010a3b4:	c3                   	ret    

c010a3b5 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010a3b5:	55                   	push   %ebp
c010a3b6:	89 e5                	mov    %esp,%ebp
c010a3b8:	53                   	push   %ebx
c010a3b9:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010a3bc:	9c                   	pushf  
c010a3bd:	5b                   	pop    %ebx
c010a3be:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c010a3c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010a3c4:	25 00 02 00 00       	and    $0x200,%eax
c010a3c9:	85 c0                	test   %eax,%eax
c010a3cb:	74 0c                	je     c010a3d9 <__intr_save+0x24>
        intr_disable();
c010a3cd:	e8 18 7d ff ff       	call   c01020ea <intr_disable>
        return 1;
c010a3d2:	b8 01 00 00 00       	mov    $0x1,%eax
c010a3d7:	eb 05                	jmp    c010a3de <__intr_save+0x29>
    }
    return 0;
c010a3d9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a3de:	83 c4 14             	add    $0x14,%esp
c010a3e1:	5b                   	pop    %ebx
c010a3e2:	5d                   	pop    %ebp
c010a3e3:	c3                   	ret    

c010a3e4 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010a3e4:	55                   	push   %ebp
c010a3e5:	89 e5                	mov    %esp,%ebp
c010a3e7:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010a3ea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a3ee:	74 05                	je     c010a3f5 <__intr_restore+0x11>
        intr_enable();
c010a3f0:	e8 ef 7c ff ff       	call   c01020e4 <intr_enable>
    }
}
c010a3f5:	c9                   	leave  
c010a3f6:	c3                   	ret    

c010a3f7 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010a3f7:	55                   	push   %ebp
c010a3f8:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a3fa:	8b 55 08             	mov    0x8(%ebp),%edx
c010a3fd:	a1 d0 53 1c c0       	mov    0xc01c53d0,%eax
c010a402:	89 d1                	mov    %edx,%ecx
c010a404:	29 c1                	sub    %eax,%ecx
c010a406:	89 c8                	mov    %ecx,%eax
c010a408:	c1 f8 05             	sar    $0x5,%eax
}
c010a40b:	5d                   	pop    %ebp
c010a40c:	c3                   	ret    

c010a40d <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010a40d:	55                   	push   %ebp
c010a40e:	89 e5                	mov    %esp,%ebp
c010a410:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a413:	8b 45 08             	mov    0x8(%ebp),%eax
c010a416:	89 04 24             	mov    %eax,(%esp)
c010a419:	e8 d9 ff ff ff       	call   c010a3f7 <page2ppn>
c010a41e:	c1 e0 0c             	shl    $0xc,%eax
}
c010a421:	c9                   	leave  
c010a422:	c3                   	ret    

c010a423 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010a423:	55                   	push   %ebp
c010a424:	89 e5                	mov    %esp,%ebp
c010a426:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010a429:	8b 45 08             	mov    0x8(%ebp),%eax
c010a42c:	89 c2                	mov    %eax,%edx
c010a42e:	c1 ea 0c             	shr    $0xc,%edx
c010a431:	a1 80 32 1c c0       	mov    0xc01c3280,%eax
c010a436:	39 c2                	cmp    %eax,%edx
c010a438:	72 1c                	jb     c010a456 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010a43a:	c7 44 24 08 cc fe 10 	movl   $0xc010fecc,0x8(%esp)
c010a441:	c0 
c010a442:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010a449:	00 
c010a44a:	c7 04 24 eb fe 10 c0 	movl   $0xc010feeb,(%esp)
c010a451:	e8 66 69 ff ff       	call   c0100dbc <__panic>
    }
    return &pages[PPN(pa)];
c010a456:	a1 d0 53 1c c0       	mov    0xc01c53d0,%eax
c010a45b:	8b 55 08             	mov    0x8(%ebp),%edx
c010a45e:	c1 ea 0c             	shr    $0xc,%edx
c010a461:	c1 e2 05             	shl    $0x5,%edx
c010a464:	01 d0                	add    %edx,%eax
}
c010a466:	c9                   	leave  
c010a467:	c3                   	ret    

c010a468 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010a468:	55                   	push   %ebp
c010a469:	89 e5                	mov    %esp,%ebp
c010a46b:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a46e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a471:	89 04 24             	mov    %eax,(%esp)
c010a474:	e8 94 ff ff ff       	call   c010a40d <page2pa>
c010a479:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a47c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a47f:	c1 e8 0c             	shr    $0xc,%eax
c010a482:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a485:	a1 80 32 1c c0       	mov    0xc01c3280,%eax
c010a48a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a48d:	72 23                	jb     c010a4b2 <page2kva+0x4a>
c010a48f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a492:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a496:	c7 44 24 08 fc fe 10 	movl   $0xc010fefc,0x8(%esp)
c010a49d:	c0 
c010a49e:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010a4a5:	00 
c010a4a6:	c7 04 24 eb fe 10 c0 	movl   $0xc010feeb,(%esp)
c010a4ad:	e8 0a 69 ff ff       	call   c0100dbc <__panic>
c010a4b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4b5:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a4ba:	c9                   	leave  
c010a4bb:	c3                   	ret    

c010a4bc <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010a4bc:	55                   	push   %ebp
c010a4bd:	89 e5                	mov    %esp,%ebp
c010a4bf:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010a4c2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a4c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a4c8:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010a4cf:	77 23                	ja     c010a4f4 <kva2page+0x38>
c010a4d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4d4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a4d8:	c7 44 24 08 20 ff 10 	movl   $0xc010ff20,0x8(%esp)
c010a4df:	c0 
c010a4e0:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010a4e7:	00 
c010a4e8:	c7 04 24 eb fe 10 c0 	movl   $0xc010feeb,(%esp)
c010a4ef:	e8 c8 68 ff ff       	call   c0100dbc <__panic>
c010a4f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a4f7:	05 00 00 00 40       	add    $0x40000000,%eax
c010a4fc:	89 04 24             	mov    %eax,(%esp)
c010a4ff:	e8 1f ff ff ff       	call   c010a423 <pa2page>
}
c010a504:	c9                   	leave  
c010a505:	c3                   	ret    

c010a506 <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c010a506:	55                   	push   %ebp
c010a507:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010a509:	8b 45 08             	mov    0x8(%ebp),%eax
c010a50c:	8b 40 18             	mov    0x18(%eax),%eax
c010a50f:	8d 50 01             	lea    0x1(%eax),%edx
c010a512:	8b 45 08             	mov    0x8(%ebp),%eax
c010a515:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a518:	8b 45 08             	mov    0x8(%ebp),%eax
c010a51b:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a51e:	5d                   	pop    %ebp
c010a51f:	c3                   	ret    

c010a520 <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010a520:	55                   	push   %ebp
c010a521:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010a523:	8b 45 08             	mov    0x8(%ebp),%eax
c010a526:	8b 40 18             	mov    0x18(%eax),%eax
c010a529:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a52c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a52f:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a532:	8b 45 08             	mov    0x8(%ebp),%eax
c010a535:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a538:	5d                   	pop    %ebp
c010a539:	c3                   	ret    

c010a53a <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010a53a:	55                   	push   %ebp
c010a53b:	89 e5                	mov    %esp,%ebp
c010a53d:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a540:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a544:	74 25                	je     c010a56b <lock_mm+0x31>
        down(&(mm->mm_sem));
c010a546:	8b 45 08             	mov    0x8(%ebp),%eax
c010a549:	83 c0 1c             	add    $0x1c,%eax
c010a54c:	89 04 24             	mov    %eax,(%esp)
c010a54f:	e8 40 f7 ff ff       	call   c0109c94 <down>
        if (current != NULL) {
c010a554:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010a559:	85 c0                	test   %eax,%eax
c010a55b:	74 0e                	je     c010a56b <lock_mm+0x31>
            mm->locked_by = current->pid;
c010a55d:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010a562:	8b 50 04             	mov    0x4(%eax),%edx
c010a565:	8b 45 08             	mov    0x8(%ebp),%eax
c010a568:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010a56b:	c9                   	leave  
c010a56c:	c3                   	ret    

c010a56d <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010a56d:	55                   	push   %ebp
c010a56e:	89 e5                	mov    %esp,%ebp
c010a570:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a573:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a577:	74 18                	je     c010a591 <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010a579:	8b 45 08             	mov    0x8(%ebp),%eax
c010a57c:	83 c0 1c             	add    $0x1c,%eax
c010a57f:	89 04 24             	mov    %eax,(%esp)
c010a582:	e8 f2 f6 ff ff       	call   c0109c79 <up>
        mm->locked_by = 0;
c010a587:	8b 45 08             	mov    0x8(%ebp),%eax
c010a58a:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010a591:	c9                   	leave  
c010a592:	c3                   	ret    

c010a593 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010a593:	55                   	push   %ebp
c010a594:	89 e5                	mov    %esp,%ebp
c010a596:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010a599:	c7 04 24 c4 00 00 00 	movl   $0xc4,(%esp)
c010a5a0:	e8 12 a7 ff ff       	call   c0104cb7 <kmalloc>
c010a5a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010a5a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a5ac:	0f 84 63 01 00 00    	je     c010a715 <alloc_proc+0x182>
     *       struct trapframe *tf;                       // Trap frame for current interrupt
     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
     *       uint32_t flags;                             // Process flag
     *       char name[PROC_NAME_LEN + 1];               // Process name
     */
        proc->state = PROC_UNINIT;
c010a5b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5b5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        proc->pid = -1;
c010a5bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5be:	c7 40 04 ff ff ff ff 	movl   $0xffffffff,0x4(%eax)
        proc->runs = 0;
c010a5c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5c8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        proc->kstack = 0;
c010a5cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5d2:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        proc->need_resched = 0;
c010a5d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5dc:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        proc->parent = NULL;
c010a5e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5e6:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        proc->mm = NULL;
c010a5ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5f0:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        memset(&(proc->context), 0, sizeof(struct context));
c010a5f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a5fa:	83 c0 1c             	add    $0x1c,%eax
c010a5fd:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010a604:	00 
c010a605:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a60c:	00 
c010a60d:	89 04 24             	mov    %eax,(%esp)
c010a610:	e8 9e 31 00 00       	call   c010d7b3 <memset>
        proc->tf = NULL;
c010a615:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a618:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
        proc->cr3 = boot_cr3;
c010a61f:	8b 15 cc 53 1c c0    	mov    0xc01c53cc,%edx
c010a625:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a628:	89 50 40             	mov    %edx,0x40(%eax)
        proc->flags = 0;
c010a62b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a62e:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
        memset(proc->name, 0, PROC_NAME_LEN);
c010a635:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a638:	83 c0 48             	add    $0x48,%eax
c010a63b:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a642:	00 
c010a643:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a64a:	00 
c010a64b:	89 04 24             	mov    %eax,(%esp)
c010a64e:	e8 60 31 00 00       	call   c010d7b3 <memset>
    /*
     * below fields(add in LAB5) in proc_struct need to be initialized	
     *       uint32_t wait_state;                        // waiting state
     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
	 */
        proc->wait_state = 0;
c010a653:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a656:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010a65d:	00 00 00 
        proc->cptr = proc->yptr = proc->optr = NULL;
c010a660:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a663:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
c010a66a:	00 00 00 
c010a66d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a670:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
c010a676:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a679:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
c010a67f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a682:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010a688:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a68b:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
     *     int time_slice;                             // time slice for occupying the CPU
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
        proc->rq = NULL;
c010a691:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a694:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010a69b:	00 00 00 
        list_init(&(proc->run_link));
c010a69e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6a1:	05 a4 00 00 00       	add    $0xa4,%eax
c010a6a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a6a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a6ac:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a6af:	89 50 04             	mov    %edx,0x4(%eax)
c010a6b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a6b5:	8b 50 04             	mov    0x4(%eax),%edx
c010a6b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a6bb:	89 10                	mov    %edx,(%eax)
        proc->time_slice = 0;
c010a6bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6c0:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c010a6c7:	00 00 00 
        proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
c010a6ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6cd:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
c010a6d4:	00 00 00 
c010a6d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6da:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
c010a6e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6e3:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
c010a6e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6ec:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
c010a6f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6f5:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
        proc->lab6_stride = 0;
c010a6fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6fe:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c010a705:	00 00 00 
        proc->lab6_priority = 0;
c010a708:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a70b:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
c010a712:	00 00 00 
    }
    return proc;
c010a715:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a718:	c9                   	leave  
c010a719:	c3                   	ret    

c010a71a <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010a71a:	55                   	push   %ebp
c010a71b:	89 e5                	mov    %esp,%ebp
c010a71d:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010a720:	8b 45 08             	mov    0x8(%ebp),%eax
c010a723:	83 c0 48             	add    $0x48,%eax
c010a726:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a72d:	00 
c010a72e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a735:	00 
c010a736:	89 04 24             	mov    %eax,(%esp)
c010a739:	e8 75 30 00 00       	call   c010d7b3 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010a73e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a741:	8d 50 48             	lea    0x48(%eax),%edx
c010a744:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a74b:	00 
c010a74c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a74f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a753:	89 14 24             	mov    %edx,(%esp)
c010a756:	e8 57 31 00 00       	call   c010d8b2 <memcpy>
}
c010a75b:	c9                   	leave  
c010a75c:	c3                   	ret    

c010a75d <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010a75d:	55                   	push   %ebp
c010a75e:	89 e5                	mov    %esp,%ebp
c010a760:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010a763:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a76a:	00 
c010a76b:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a772:	00 
c010a773:	c7 04 24 60 53 1c c0 	movl   $0xc01c5360,(%esp)
c010a77a:	e8 34 30 00 00       	call   c010d7b3 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010a77f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a782:	83 c0 48             	add    $0x48,%eax
c010a785:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a78c:	00 
c010a78d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a791:	c7 04 24 60 53 1c c0 	movl   $0xc01c5360,(%esp)
c010a798:	e8 15 31 00 00       	call   c010d8b2 <memcpy>
}
c010a79d:	c9                   	leave  
c010a79e:	c3                   	ret    

c010a79f <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010a79f:	55                   	push   %ebp
c010a7a0:	89 e5                	mov    %esp,%ebp
c010a7a2:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010a7a5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7a8:	83 c0 7c             	add    $0x7c,%eax
c010a7ab:	c7 45 fc 9c 55 1c c0 	movl   $0xc01c559c,-0x4(%ebp)
c010a7b2:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010a7b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a7b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a7bb:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a7be:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010a7c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a7c4:	8b 40 04             	mov    0x4(%eax),%eax
c010a7c7:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a7ca:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010a7cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a7d0:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010a7d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010a7d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a7d9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a7dc:	89 10                	mov    %edx,(%eax)
c010a7de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a7e1:	8b 10                	mov    (%eax),%edx
c010a7e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a7e6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a7e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7ec:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a7ef:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a7f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a7f5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a7f8:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010a7fa:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7fd:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010a804:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010a807:	8b 45 08             	mov    0x8(%ebp),%eax
c010a80a:	8b 40 14             	mov    0x14(%eax),%eax
c010a80d:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010a813:	8b 45 08             	mov    0x8(%ebp),%eax
c010a816:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010a81c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a81f:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a825:	85 c0                	test   %eax,%eax
c010a827:	74 12                	je     c010a83b <set_links+0x9c>
        proc->optr->yptr = proc;
c010a829:	8b 45 08             	mov    0x8(%ebp),%eax
c010a82c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a832:	8b 55 08             	mov    0x8(%ebp),%edx
c010a835:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010a83b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a83e:	8b 40 14             	mov    0x14(%eax),%eax
c010a841:	8b 55 08             	mov    0x8(%ebp),%edx
c010a844:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010a84a:	a1 40 53 1c c0       	mov    0xc01c5340,%eax
c010a84f:	83 c0 01             	add    $0x1,%eax
c010a852:	a3 40 53 1c c0       	mov    %eax,0xc01c5340
}
c010a857:	c9                   	leave  
c010a858:	c3                   	ret    

c010a859 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010a859:	55                   	push   %ebp
c010a85a:	89 e5                	mov    %esp,%ebp
c010a85c:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010a85f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a862:	83 c0 7c             	add    $0x7c,%eax
c010a865:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010a868:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a86b:	8b 40 04             	mov    0x4(%eax),%eax
c010a86e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a871:	8b 12                	mov    (%edx),%edx
c010a873:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010a876:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010a879:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a87c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a87f:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a882:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a885:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010a888:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010a88a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a88d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a893:	85 c0                	test   %eax,%eax
c010a895:	74 18                	je     c010a8af <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010a897:	8b 45 08             	mov    0x8(%ebp),%eax
c010a89a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010a8a0:	8b 55 08             	mov    0x8(%ebp),%edx
c010a8a3:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010a8a9:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010a8af:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8b2:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010a8b8:	85 c0                	test   %eax,%eax
c010a8ba:	74 1a                	je     c010a8d6 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010a8bc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8bf:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010a8c5:	8b 55 08             	mov    0x8(%ebp),%edx
c010a8c8:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010a8ce:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010a8d4:	eb 15                	jmp    c010a8eb <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010a8d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8d9:	8b 40 14             	mov    0x14(%eax),%eax
c010a8dc:	8b 55 08             	mov    0x8(%ebp),%edx
c010a8df:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010a8e5:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010a8eb:	a1 40 53 1c c0       	mov    0xc01c5340,%eax
c010a8f0:	83 e8 01             	sub    $0x1,%eax
c010a8f3:	a3 40 53 1c c0       	mov    %eax,0xc01c5340
}
c010a8f8:	c9                   	leave  
c010a8f9:	c3                   	ret    

c010a8fa <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010a8fa:	55                   	push   %ebp
c010a8fb:	89 e5                	mov    %esp,%ebp
c010a8fd:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010a900:	c7 45 f8 9c 55 1c c0 	movl   $0xc01c559c,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010a907:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a90c:	83 c0 01             	add    $0x1,%eax
c010a90f:	a3 84 1a 13 c0       	mov    %eax,0xc0131a84
c010a914:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a919:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010a91e:	7e 0c                	jle    c010a92c <get_pid+0x32>
        last_pid = 1;
c010a920:	c7 05 84 1a 13 c0 01 	movl   $0x1,0xc0131a84
c010a927:	00 00 00 
        goto inside;
c010a92a:	eb 13                	jmp    c010a93f <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010a92c:	8b 15 84 1a 13 c0    	mov    0xc0131a84,%edx
c010a932:	a1 88 1a 13 c0       	mov    0xc0131a88,%eax
c010a937:	39 c2                	cmp    %eax,%edx
c010a939:	0f 8c ac 00 00 00    	jl     c010a9eb <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010a93f:	c7 05 88 1a 13 c0 00 	movl   $0x2000,0xc0131a88
c010a946:	20 00 00 
    repeat:
        le = list;
c010a949:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a94c:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010a94f:	eb 7f                	jmp    c010a9d0 <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010a951:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a954:	83 e8 7c             	sub    $0x7c,%eax
c010a957:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010a95a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a95d:	8b 50 04             	mov    0x4(%eax),%edx
c010a960:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a965:	39 c2                	cmp    %eax,%edx
c010a967:	75 3e                	jne    c010a9a7 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010a969:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a96e:	83 c0 01             	add    $0x1,%eax
c010a971:	a3 84 1a 13 c0       	mov    %eax,0xc0131a84
c010a976:	8b 15 84 1a 13 c0    	mov    0xc0131a84,%edx
c010a97c:	a1 88 1a 13 c0       	mov    0xc0131a88,%eax
c010a981:	39 c2                	cmp    %eax,%edx
c010a983:	7c 4b                	jl     c010a9d0 <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010a985:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a98a:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010a98f:	7e 0a                	jle    c010a99b <get_pid+0xa1>
                        last_pid = 1;
c010a991:	c7 05 84 1a 13 c0 01 	movl   $0x1,0xc0131a84
c010a998:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010a99b:	c7 05 88 1a 13 c0 00 	movl   $0x2000,0xc0131a88
c010a9a2:	20 00 00 
                    goto repeat;
c010a9a5:	eb a2                	jmp    c010a949 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010a9a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9aa:	8b 50 04             	mov    0x4(%eax),%edx
c010a9ad:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010a9b2:	39 c2                	cmp    %eax,%edx
c010a9b4:	7e 1a                	jle    c010a9d0 <get_pid+0xd6>
c010a9b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9b9:	8b 50 04             	mov    0x4(%eax),%edx
c010a9bc:	a1 88 1a 13 c0       	mov    0xc0131a88,%eax
c010a9c1:	39 c2                	cmp    %eax,%edx
c010a9c3:	7d 0b                	jge    c010a9d0 <get_pid+0xd6>
                next_safe = proc->pid;
c010a9c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9c8:	8b 40 04             	mov    0x4(%eax),%eax
c010a9cb:	a3 88 1a 13 c0       	mov    %eax,0xc0131a88
c010a9d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a9d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a9d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9d9:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010a9dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a9df:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a9e2:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010a9e5:	0f 85 66 ff ff ff    	jne    c010a951 <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010a9eb:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
}
c010a9f0:	c9                   	leave  
c010a9f1:	c3                   	ret    

c010a9f2 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010a9f2:	55                   	push   %ebp
c010a9f3:	89 e5                	mov    %esp,%ebp
c010a9f5:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010a9f8:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010a9fd:	39 45 08             	cmp    %eax,0x8(%ebp)
c010aa00:	74 63                	je     c010aa65 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010aa02:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010aa07:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aa0a:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa0d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010aa10:	e8 a0 f9 ff ff       	call   c010a3b5 <__intr_save>
c010aa15:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010aa18:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa1b:	a3 28 33 1c c0       	mov    %eax,0xc01c3328
            load_esp0(next->kstack + KSTACKSIZE);
c010aa20:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa23:	8b 40 0c             	mov    0xc(%eax),%eax
c010aa26:	05 00 20 00 00       	add    $0x2000,%eax
c010aa2b:	89 04 24             	mov    %eax,(%esp)
c010aa2e:	e8 bc a5 ff ff       	call   c0104fef <load_esp0>
            lcr3(next->cr3);
c010aa33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa36:	8b 40 40             	mov    0x40(%eax),%eax
c010aa39:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010aa3c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa3f:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010aa42:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa45:	8d 50 1c             	lea    0x1c(%eax),%edx
c010aa48:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa4b:	83 c0 1c             	add    $0x1c,%eax
c010aa4e:	89 54 24 04          	mov    %edx,0x4(%esp)
c010aa52:	89 04 24             	mov    %eax,(%esp)
c010aa55:	e8 8e 16 00 00       	call   c010c0e8 <switch_to>
        }
        local_intr_restore(intr_flag);
c010aa5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa5d:	89 04 24             	mov    %eax,(%esp)
c010aa60:	e8 7f f9 ff ff       	call   c010a3e4 <__intr_restore>
    }
}
c010aa65:	c9                   	leave  
c010aa66:	c3                   	ret    

c010aa67 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010aa67:	55                   	push   %ebp
c010aa68:	89 e5                	mov    %esp,%ebp
c010aa6a:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010aa6d:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010aa72:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aa75:	89 04 24             	mov    %eax,(%esp)
c010aa78:	e8 a5 80 ff ff       	call   c0102b22 <forkrets>
}
c010aa7d:	c9                   	leave  
c010aa7e:	c3                   	ret    

c010aa7f <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010aa7f:	55                   	push   %ebp
c010aa80:	89 e5                	mov    %esp,%ebp
c010aa82:	53                   	push   %ebx
c010aa83:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010aa86:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa89:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010aa8f:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa92:	8b 40 04             	mov    0x4(%eax),%eax
c010aa95:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010aa9c:	00 
c010aa9d:	89 04 24             	mov    %eax,(%esp)
c010aaa0:	e8 db 21 00 00       	call   c010cc80 <hash32>
c010aaa5:	c1 e0 03             	shl    $0x3,%eax
c010aaa8:	05 40 33 1c c0       	add    $0xc01c3340,%eax
c010aaad:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aab0:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010aab3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aab6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010aab9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aabc:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010aabf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aac2:	8b 40 04             	mov    0x4(%eax),%eax
c010aac5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aac8:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010aacb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010aace:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010aad1:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010aad4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010aad7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aada:	89 10                	mov    %edx,(%eax)
c010aadc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010aadf:	8b 10                	mov    (%eax),%edx
c010aae1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010aae4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010aae7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aaea:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010aaed:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010aaf0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aaf3:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010aaf6:	89 10                	mov    %edx,(%eax)
}
c010aaf8:	83 c4 34             	add    $0x34,%esp
c010aafb:	5b                   	pop    %ebx
c010aafc:	5d                   	pop    %ebp
c010aafd:	c3                   	ret    

c010aafe <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010aafe:	55                   	push   %ebp
c010aaff:	89 e5                	mov    %esp,%ebp
c010ab01:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010ab04:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab07:	05 84 00 00 00       	add    $0x84,%eax
c010ab0c:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010ab0f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ab12:	8b 40 04             	mov    0x4(%eax),%eax
c010ab15:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010ab18:	8b 12                	mov    (%edx),%edx
c010ab1a:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010ab1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010ab20:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ab23:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ab26:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010ab29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab2c:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010ab2f:	89 10                	mov    %edx,(%eax)
}
c010ab31:	c9                   	leave  
c010ab32:	c3                   	ret    

c010ab33 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010ab33:	55                   	push   %ebp
c010ab34:	89 e5                	mov    %esp,%ebp
c010ab36:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010ab39:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ab3d:	7e 61                	jle    c010aba0 <find_proc+0x6d>
c010ab3f:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010ab46:	7f 58                	jg     c010aba0 <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010ab48:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab4b:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010ab52:	00 
c010ab53:	89 04 24             	mov    %eax,(%esp)
c010ab56:	e8 25 21 00 00       	call   c010cc80 <hash32>
c010ab5b:	c1 e0 03             	shl    $0x3,%eax
c010ab5e:	05 40 33 1c c0       	add    $0xc01c3340,%eax
c010ab63:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ab66:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ab69:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010ab6c:	eb 1b                	jmp    c010ab89 <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010ab6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab71:	2d 84 00 00 00       	sub    $0x84,%eax
c010ab76:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010ab79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab7c:	8b 40 04             	mov    0x4(%eax),%eax
c010ab7f:	3b 45 08             	cmp    0x8(%ebp),%eax
c010ab82:	75 05                	jne    c010ab89 <find_proc+0x56>
                return proc;
c010ab84:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ab87:	eb 1c                	jmp    c010aba5 <find_proc+0x72>
c010ab89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab8c:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ab8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ab92:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010ab95:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ab98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ab9b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010ab9e:	75 ce                	jne    c010ab6e <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010aba0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010aba5:	c9                   	leave  
c010aba6:	c3                   	ret    

c010aba7 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010aba7:	55                   	push   %ebp
c010aba8:	89 e5                	mov    %esp,%ebp
c010abaa:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010abad:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010abb4:	00 
c010abb5:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010abbc:	00 
c010abbd:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010abc0:	89 04 24             	mov    %eax,(%esp)
c010abc3:	e8 eb 2b 00 00       	call   c010d7b3 <memset>
    tf.tf_cs = KERNEL_CS;
c010abc8:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010abce:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010abd4:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010abd8:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010abdc:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010abe0:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010abe4:	8b 45 08             	mov    0x8(%ebp),%eax
c010abe7:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010abea:	8b 45 0c             	mov    0xc(%ebp),%eax
c010abed:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010abf0:	b8 70 a3 10 c0       	mov    $0xc010a370,%eax
c010abf5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010abf8:	8b 45 10             	mov    0x10(%ebp),%eax
c010abfb:	89 c2                	mov    %eax,%edx
c010abfd:	80 ce 01             	or     $0x1,%dh
c010ac00:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010ac03:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ac07:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ac0e:	00 
c010ac0f:	89 14 24             	mov    %edx,(%esp)
c010ac12:	e8 27 03 00 00       	call   c010af3e <do_fork>
}
c010ac17:	c9                   	leave  
c010ac18:	c3                   	ret    

c010ac19 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010ac19:	55                   	push   %ebp
c010ac1a:	89 e5                	mov    %esp,%ebp
c010ac1c:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010ac1f:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010ac26:	e8 12 a5 ff ff       	call   c010513d <alloc_pages>
c010ac2b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010ac2e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac32:	74 1a                	je     c010ac4e <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010ac34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac37:	89 04 24             	mov    %eax,(%esp)
c010ac3a:	e8 29 f8 ff ff       	call   c010a468 <page2kva>
c010ac3f:	89 c2                	mov    %eax,%edx
c010ac41:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac44:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010ac47:	b8 00 00 00 00       	mov    $0x0,%eax
c010ac4c:	eb 05                	jmp    c010ac53 <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010ac4e:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010ac53:	c9                   	leave  
c010ac54:	c3                   	ret    

c010ac55 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010ac55:	55                   	push   %ebp
c010ac56:	89 e5                	mov    %esp,%ebp
c010ac58:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010ac5b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac5e:	8b 40 0c             	mov    0xc(%eax),%eax
c010ac61:	89 04 24             	mov    %eax,(%esp)
c010ac64:	e8 53 f8 ff ff       	call   c010a4bc <kva2page>
c010ac69:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010ac70:	00 
c010ac71:	89 04 24             	mov    %eax,(%esp)
c010ac74:	e8 2f a5 ff ff       	call   c01051a8 <free_pages>
}
c010ac79:	c9                   	leave  
c010ac7a:	c3                   	ret    

c010ac7b <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010ac7b:	55                   	push   %ebp
c010ac7c:	89 e5                	mov    %esp,%ebp
c010ac7e:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010ac81:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010ac88:	e8 b0 a4 ff ff       	call   c010513d <alloc_pages>
c010ac8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ac94:	75 0a                	jne    c010aca0 <setup_pgdir+0x25>
        return -E_NO_MEM;
c010ac96:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010ac9b:	e9 80 00 00 00       	jmp    c010ad20 <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010aca0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aca3:	89 04 24             	mov    %eax,(%esp)
c010aca6:	e8 bd f7 ff ff       	call   c010a468 <page2kva>
c010acab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010acae:	a1 84 32 1c c0       	mov    0xc01c3284,%eax
c010acb3:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010acba:	00 
c010acbb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010acbf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010acc2:	89 04 24             	mov    %eax,(%esp)
c010acc5:	e8 e8 2b 00 00       	call   c010d8b2 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010acca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010accd:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010acd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010acd6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010acd9:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010ace0:	77 23                	ja     c010ad05 <setup_pgdir+0x8a>
c010ace2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ace5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ace9:	c7 44 24 08 20 ff 10 	movl   $0xc010ff20,0x8(%esp)
c010acf0:	c0 
c010acf1:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c010acf8:	00 
c010acf9:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010ad00:	e8 b7 60 ff ff       	call   c0100dbc <__panic>
c010ad05:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad08:	05 00 00 00 40       	add    $0x40000000,%eax
c010ad0d:	83 c8 03             	or     $0x3,%eax
c010ad10:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010ad12:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad15:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ad18:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010ad1b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ad20:	c9                   	leave  
c010ad21:	c3                   	ret    

c010ad22 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010ad22:	55                   	push   %ebp
c010ad23:	89 e5                	mov    %esp,%ebp
c010ad25:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010ad28:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad2b:	8b 40 0c             	mov    0xc(%eax),%eax
c010ad2e:	89 04 24             	mov    %eax,(%esp)
c010ad31:	e8 86 f7 ff ff       	call   c010a4bc <kva2page>
c010ad36:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010ad3d:	00 
c010ad3e:	89 04 24             	mov    %eax,(%esp)
c010ad41:	e8 62 a4 ff ff       	call   c01051a8 <free_pages>
}
c010ad46:	c9                   	leave  
c010ad47:	c3                   	ret    

c010ad48 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010ad48:	55                   	push   %ebp
c010ad49:	89 e5                	mov    %esp,%ebp
c010ad4b:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010ad4e:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010ad53:	8b 40 18             	mov    0x18(%eax),%eax
c010ad56:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010ad59:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ad5d:	75 0a                	jne    c010ad69 <copy_mm+0x21>
        return 0;
c010ad5f:	b8 00 00 00 00       	mov    $0x0,%eax
c010ad64:	e9 fb 00 00 00       	jmp    c010ae64 <copy_mm+0x11c>
    }
    if (clone_flags & CLONE_VM) {
c010ad69:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad6c:	25 00 01 00 00       	and    $0x100,%eax
c010ad71:	85 c0                	test   %eax,%eax
c010ad73:	74 08                	je     c010ad7d <copy_mm+0x35>
        mm = oldmm;
c010ad75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad78:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010ad7b:	eb 5d                	jmp    c010adda <copy_mm+0x92>
    }

    int ret = -E_NO_MEM;
c010ad7d:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010ad84:	e8 35 d2 ff ff       	call   c0107fbe <mm_create>
c010ad89:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ad8c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ad90:	0f 84 ca 00 00 00    	je     c010ae60 <copy_mm+0x118>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c010ad96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad99:	89 04 24             	mov    %eax,(%esp)
c010ad9c:	e8 da fe ff ff       	call   c010ac7b <setup_pgdir>
c010ada1:	85 c0                	test   %eax,%eax
c010ada3:	0f 85 a9 00 00 00    	jne    c010ae52 <copy_mm+0x10a>
        goto bad_pgdir_cleanup_mm;
    }

    lock_mm(oldmm);
c010ada9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adac:	89 04 24             	mov    %eax,(%esp)
c010adaf:	e8 86 f7 ff ff       	call   c010a53a <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010adb4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adb7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010adbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010adbe:	89 04 24             	mov    %eax,(%esp)
c010adc1:	e8 1e d7 ff ff       	call   c01084e4 <dup_mmap>
c010adc6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010adc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adcc:	89 04 24             	mov    %eax,(%esp)
c010adcf:	e8 99 f7 ff ff       	call   c010a56d <unlock_mm>

    if (ret != 0) {
c010add4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010add8:	75 5f                	jne    c010ae39 <copy_mm+0xf1>
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010adda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010addd:	89 04 24             	mov    %eax,(%esp)
c010ade0:	e8 21 f7 ff ff       	call   c010a506 <mm_count_inc>
    proc->mm = mm;
c010ade5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ade8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010adeb:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010adee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010adf1:	8b 40 0c             	mov    0xc(%eax),%eax
c010adf4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010adf7:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010adfe:	77 23                	ja     c010ae23 <copy_mm+0xdb>
c010ae00:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae03:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ae07:	c7 44 24 08 20 ff 10 	movl   $0xc010ff20,0x8(%esp)
c010ae0e:	c0 
c010ae0f:	c7 44 24 04 6d 01 00 	movl   $0x16d,0x4(%esp)
c010ae16:	00 
c010ae17:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010ae1e:	e8 99 5f ff ff       	call   c0100dbc <__panic>
c010ae23:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ae26:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010ae2c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ae2f:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010ae32:	b8 00 00 00 00       	mov    $0x0,%eax
c010ae37:	eb 2b                	jmp    c010ae64 <copy_mm+0x11c>
        ret = dup_mmap(mm, oldmm);
    }
    unlock_mm(oldmm);

    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
c010ae39:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010ae3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae3d:	89 04 24             	mov    %eax,(%esp)
c010ae40:	e8 a0 d7 ff ff       	call   c01085e5 <exit_mmap>
    put_pgdir(mm);
c010ae45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae48:	89 04 24             	mov    %eax,(%esp)
c010ae4b:	e8 d2 fe ff ff       	call   c010ad22 <put_pgdir>
c010ae50:	eb 01                	jmp    c010ae53 <copy_mm+0x10b>
    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010ae52:	90                   	nop
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010ae53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae56:	89 04 24             	mov    %eax,(%esp)
c010ae59:	e8 c6 d4 ff ff       	call   c0108324 <mm_destroy>
c010ae5e:	eb 01                	jmp    c010ae61 <copy_mm+0x119>
        goto good_mm;
    }

    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010ae60:	90                   	nop
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    return ret;
c010ae61:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010ae64:	c9                   	leave  
c010ae65:	c3                   	ret    

c010ae66 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010ae66:	55                   	push   %ebp
c010ae67:	89 e5                	mov    %esp,%ebp
c010ae69:	57                   	push   %edi
c010ae6a:	56                   	push   %esi
c010ae6b:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010ae6c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae6f:	8b 40 0c             	mov    0xc(%eax),%eax
c010ae72:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010ae77:	89 c2                	mov    %eax,%edx
c010ae79:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae7c:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010ae7f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae82:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ae85:	8b 55 10             	mov    0x10(%ebp),%edx
c010ae88:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010ae8d:	89 c1                	mov    %eax,%ecx
c010ae8f:	83 e1 01             	and    $0x1,%ecx
c010ae92:	85 c9                	test   %ecx,%ecx
c010ae94:	74 0e                	je     c010aea4 <copy_thread+0x3e>
c010ae96:	0f b6 0a             	movzbl (%edx),%ecx
c010ae99:	88 08                	mov    %cl,(%eax)
c010ae9b:	83 c0 01             	add    $0x1,%eax
c010ae9e:	83 c2 01             	add    $0x1,%edx
c010aea1:	83 eb 01             	sub    $0x1,%ebx
c010aea4:	89 c1                	mov    %eax,%ecx
c010aea6:	83 e1 02             	and    $0x2,%ecx
c010aea9:	85 c9                	test   %ecx,%ecx
c010aeab:	74 0f                	je     c010aebc <copy_thread+0x56>
c010aead:	0f b7 0a             	movzwl (%edx),%ecx
c010aeb0:	66 89 08             	mov    %cx,(%eax)
c010aeb3:	83 c0 02             	add    $0x2,%eax
c010aeb6:	83 c2 02             	add    $0x2,%edx
c010aeb9:	83 eb 02             	sub    $0x2,%ebx
c010aebc:	89 d9                	mov    %ebx,%ecx
c010aebe:	c1 e9 02             	shr    $0x2,%ecx
c010aec1:	89 c7                	mov    %eax,%edi
c010aec3:	89 d6                	mov    %edx,%esi
c010aec5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010aec7:	89 f2                	mov    %esi,%edx
c010aec9:	89 f8                	mov    %edi,%eax
c010aecb:	b9 00 00 00 00       	mov    $0x0,%ecx
c010aed0:	89 de                	mov    %ebx,%esi
c010aed2:	83 e6 02             	and    $0x2,%esi
c010aed5:	85 f6                	test   %esi,%esi
c010aed7:	74 0b                	je     c010aee4 <copy_thread+0x7e>
c010aed9:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010aedd:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010aee1:	83 c1 02             	add    $0x2,%ecx
c010aee4:	83 e3 01             	and    $0x1,%ebx
c010aee7:	85 db                	test   %ebx,%ebx
c010aee9:	74 07                	je     c010aef2 <copy_thread+0x8c>
c010aeeb:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010aeef:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010aef2:	8b 45 08             	mov    0x8(%ebp),%eax
c010aef5:	8b 40 3c             	mov    0x3c(%eax),%eax
c010aef8:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010aeff:	8b 45 08             	mov    0x8(%ebp),%eax
c010af02:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af05:	8b 55 0c             	mov    0xc(%ebp),%edx
c010af08:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010af0b:	8b 45 08             	mov    0x8(%ebp),%eax
c010af0e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af11:	8b 55 08             	mov    0x8(%ebp),%edx
c010af14:	8b 52 3c             	mov    0x3c(%edx),%edx
c010af17:	8b 52 40             	mov    0x40(%edx),%edx
c010af1a:	80 ce 02             	or     $0x2,%dh
c010af1d:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010af20:	ba 67 aa 10 c0       	mov    $0xc010aa67,%edx
c010af25:	8b 45 08             	mov    0x8(%ebp),%eax
c010af28:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010af2b:	8b 45 08             	mov    0x8(%ebp),%eax
c010af2e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010af31:	89 c2                	mov    %eax,%edx
c010af33:	8b 45 08             	mov    0x8(%ebp),%eax
c010af36:	89 50 20             	mov    %edx,0x20(%eax)
}
c010af39:	5b                   	pop    %ebx
c010af3a:	5e                   	pop    %esi
c010af3b:	5f                   	pop    %edi
c010af3c:	5d                   	pop    %ebp
c010af3d:	c3                   	ret    

c010af3e <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010af3e:	55                   	push   %ebp
c010af3f:	89 e5                	mov    %esp,%ebp
c010af41:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010af44:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010af4b:	a1 40 53 1c c0       	mov    0xc01c5340,%eax
c010af50:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010af55:	0f 8f f2 00 00 00    	jg     c010b04d <do_fork+0x10f>
        goto fork_out;
    }
    ret = -E_NO_MEM;
c010af5b:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    *    set_links:  set the relation links of process.  ALSO SEE: remove_links:  lean the relation links of process 
    *    -------------------
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    proc = alloc_proc();
c010af62:	e8 2c f6 ff ff       	call   c010a593 <alloc_proc>
c010af67:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (proc == NULL)
c010af6a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010af6e:	0f 84 dc 00 00 00    	je     c010b050 <do_fork+0x112>
        goto fork_out;

    int ret2;
    ret2 = setup_kstack(proc);
c010af74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af77:	89 04 24             	mov    %eax,(%esp)
c010af7a:	e8 9a fc ff ff       	call   c010ac19 <setup_kstack>
c010af7f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ret2 != 0)
c010af82:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010af86:	0f 85 d8 00 00 00    	jne    c010b064 <do_fork+0x126>
        goto bad_fork_cleanup_proc;

    ret2 = copy_mm(clone_flags, proc);
c010af8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af8f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af93:	8b 45 08             	mov    0x8(%ebp),%eax
c010af96:	89 04 24             	mov    %eax,(%esp)
c010af99:	e8 aa fd ff ff       	call   c010ad48 <copy_mm>
c010af9e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (ret2 != 0)
c010afa1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010afa5:	0f 85 ab 00 00 00    	jne    c010b056 <do_fork+0x118>
        goto bad_fork_cleanup_kstack;

    copy_thread(proc, stack, tf);
c010afab:	8b 45 10             	mov    0x10(%ebp),%eax
c010afae:	89 44 24 08          	mov    %eax,0x8(%esp)
c010afb2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010afb5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010afb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010afbc:	89 04 24             	mov    %eax,(%esp)
c010afbf:	e8 a2 fe ff ff       	call   c010ae66 <copy_thread>

    bool intr_flag;
    local_intr_save(intr_flag);
c010afc4:	e8 ec f3 ff ff       	call   c010a3b5 <__intr_save>
c010afc9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        proc->pid = get_pid();
c010afcc:	e8 29 f9 ff ff       	call   c010a8fa <get_pid>
c010afd1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010afd4:	89 42 04             	mov    %eax,0x4(%edx)
        proc->parent = current;
c010afd7:	8b 15 28 33 1c c0    	mov    0xc01c3328,%edx
c010afdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010afe0:	89 50 14             	mov    %edx,0x14(%eax)
        assert(current->wait_state == 0);
c010afe3:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010afe8:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010afee:	85 c0                	test   %eax,%eax
c010aff0:	74 24                	je     c010b016 <do_fork+0xd8>
c010aff2:	c7 44 24 0c 58 ff 10 	movl   $0xc010ff58,0xc(%esp)
c010aff9:	c0 
c010affa:	c7 44 24 08 71 ff 10 	movl   $0xc010ff71,0x8(%esp)
c010b001:	c0 
c010b002:	c7 44 24 04 c8 01 00 	movl   $0x1c8,0x4(%esp)
c010b009:	00 
c010b00a:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010b011:	e8 a6 5d ff ff       	call   c0100dbc <__panic>

        set_links(proc);
c010b016:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b019:	89 04 24             	mov    %eax,(%esp)
c010b01c:	e8 7e f7 ff ff       	call   c010a79f <set_links>
        hash_proc(proc);
c010b021:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b024:	89 04 24             	mov    %eax,(%esp)
c010b027:	e8 53 fa ff ff       	call   c010aa7f <hash_proc>
    }
    local_intr_restore(intr_flag);
c010b02c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b02f:	89 04 24             	mov    %eax,(%esp)
c010b032:	e8 ad f3 ff ff       	call   c010a3e4 <__intr_restore>

    wakeup_proc(proc);
c010b037:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b03a:	89 04 24             	mov    %eax,(%esp)
c010b03d:	e8 91 15 00 00       	call   c010c5d3 <wakeup_proc>

    ret = proc->pid;
c010b042:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b045:	8b 40 04             	mov    0x4(%eax),%eax
c010b048:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b04b:	eb 04                	jmp    c010b051 <do_fork+0x113>
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
    int ret = -E_NO_FREE_PROC;
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
        goto fork_out;
c010b04d:	90                   	nop
c010b04e:	eb 01                	jmp    c010b051 <do_fork+0x113>
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
    proc = alloc_proc();
    if (proc == NULL)
        goto fork_out;
c010b050:	90                   	nop

    wakeup_proc(proc);

    ret = proc->pid;
fork_out:
    return ret;
c010b051:	8b 45 f4             	mov    -0xc(%ebp),%eax
bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
    goto fork_out;
}
c010b054:	c9                   	leave  
c010b055:	c3                   	ret    
    if (ret2 != 0)
        goto bad_fork_cleanup_proc;

    ret2 = copy_mm(clone_flags, proc);
    if (ret2 != 0)
        goto bad_fork_cleanup_kstack;
c010b056:	90                   	nop
    ret = proc->pid;
fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c010b057:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b05a:	89 04 24             	mov    %eax,(%esp)
c010b05d:	e8 f3 fb ff ff       	call   c010ac55 <put_kstack>
c010b062:	eb 01                	jmp    c010b065 <do_fork+0x127>
        goto fork_out;

    int ret2;
    ret2 = setup_kstack(proc);
    if (ret2 != 0)
        goto bad_fork_cleanup_proc;
c010b064:	90                   	nop
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c010b065:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b068:	89 04 24             	mov    %eax,(%esp)
c010b06b:	e8 62 9c ff ff       	call   c0104cd2 <kfree>
    goto fork_out;
c010b070:	eb df                	jmp    c010b051 <do_fork+0x113>

c010b072 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010b072:	55                   	push   %ebp
c010b073:	89 e5                	mov    %esp,%ebp
c010b075:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010b078:	8b 15 28 33 1c c0    	mov    0xc01c3328,%edx
c010b07e:	a1 20 33 1c c0       	mov    0xc01c3320,%eax
c010b083:	39 c2                	cmp    %eax,%edx
c010b085:	75 1c                	jne    c010b0a3 <do_exit+0x31>
        panic("idleproc exit.\n");
c010b087:	c7 44 24 08 86 ff 10 	movl   $0xc010ff86,0x8(%esp)
c010b08e:	c0 
c010b08f:	c7 44 24 04 e3 01 00 	movl   $0x1e3,0x4(%esp)
c010b096:	00 
c010b097:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010b09e:	e8 19 5d ff ff       	call   c0100dbc <__panic>
    }
    if (current == initproc) {
c010b0a3:	8b 15 28 33 1c c0    	mov    0xc01c3328,%edx
c010b0a9:	a1 24 33 1c c0       	mov    0xc01c3324,%eax
c010b0ae:	39 c2                	cmp    %eax,%edx
c010b0b0:	75 1c                	jne    c010b0ce <do_exit+0x5c>
        panic("initproc exit.\n");
c010b0b2:	c7 44 24 08 96 ff 10 	movl   $0xc010ff96,0x8(%esp)
c010b0b9:	c0 
c010b0ba:	c7 44 24 04 e6 01 00 	movl   $0x1e6,0x4(%esp)
c010b0c1:	00 
c010b0c2:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010b0c9:	e8 ee 5c ff ff       	call   c0100dbc <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010b0ce:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010b0d3:	8b 40 18             	mov    0x18(%eax),%eax
c010b0d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010b0d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b0dd:	74 4a                	je     c010b129 <do_exit+0xb7>
        lcr3(boot_cr3);
c010b0df:	a1 cc 53 1c c0       	mov    0xc01c53cc,%eax
c010b0e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b0e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b0ea:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010b0ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0f0:	89 04 24             	mov    %eax,(%esp)
c010b0f3:	e8 28 f4 ff ff       	call   c010a520 <mm_count_dec>
c010b0f8:	85 c0                	test   %eax,%eax
c010b0fa:	75 21                	jne    c010b11d <do_exit+0xab>
            exit_mmap(mm);
c010b0fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0ff:	89 04 24             	mov    %eax,(%esp)
c010b102:	e8 de d4 ff ff       	call   c01085e5 <exit_mmap>
            put_pgdir(mm);
c010b107:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b10a:	89 04 24             	mov    %eax,(%esp)
c010b10d:	e8 10 fc ff ff       	call   c010ad22 <put_pgdir>
            mm_destroy(mm);
c010b112:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b115:	89 04 24             	mov    %eax,(%esp)
c010b118:	e8 07 d2 ff ff       	call   c0108324 <mm_destroy>
        }
        current->mm = NULL;
c010b11d:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010b122:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010b129:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010b12e:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010b134:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010b139:	8b 55 08             	mov    0x8(%ebp),%edx
c010b13c:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010b142:	e8 6e f2 ff ff       	call   c010a3b5 <__intr_save>
c010b147:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010b14a:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010b14f:	8b 40 14             	mov    0x14(%eax),%eax
c010b152:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010b155:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b158:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b15e:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b163:	0f 85 b9 00 00 00    	jne    c010b222 <do_exit+0x1b0>
            wakeup_proc(proc);
c010b169:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b16c:	89 04 24             	mov    %eax,(%esp)
c010b16f:	e8 5f 14 00 00       	call   c010c5d3 <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010b174:	e9 a9 00 00 00       	jmp    c010b222 <do_exit+0x1b0>
            proc = current->cptr;
c010b179:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010b17e:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b184:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010b187:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010b18c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b18f:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010b195:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010b19b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b19e:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010b1a5:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010b1a8:	a1 24 33 1c c0       	mov    0xc01c3324,%eax
c010b1ad:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010b1b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1b6:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010b1bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1bf:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b1c5:	85 c0                	test   %eax,%eax
c010b1c7:	74 14                	je     c010b1dd <do_exit+0x16b>
                initproc->cptr->yptr = proc;
c010b1c9:	a1 24 33 1c c0       	mov    0xc01c3324,%eax
c010b1ce:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b1d4:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b1d7:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010b1dd:	8b 15 24 33 1c c0    	mov    0xc01c3324,%edx
c010b1e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1e6:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010b1e9:	a1 24 33 1c c0       	mov    0xc01c3324,%eax
c010b1ee:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b1f1:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010b1f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1fa:	8b 00                	mov    (%eax),%eax
c010b1fc:	83 f8 03             	cmp    $0x3,%eax
c010b1ff:	75 22                	jne    c010b223 <do_exit+0x1b1>
                if (initproc->wait_state == WT_CHILD) {
c010b201:	a1 24 33 1c c0       	mov    0xc01c3324,%eax
c010b206:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b20c:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b211:	75 10                	jne    c010b223 <do_exit+0x1b1>
                    wakeup_proc(initproc);
c010b213:	a1 24 33 1c c0       	mov    0xc01c3324,%eax
c010b218:	89 04 24             	mov    %eax,(%esp)
c010b21b:	e8 b3 13 00 00       	call   c010c5d3 <wakeup_proc>
c010b220:	eb 01                	jmp    c010b223 <do_exit+0x1b1>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010b222:	90                   	nop
c010b223:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010b228:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b22e:	85 c0                	test   %eax,%eax
c010b230:	0f 85 43 ff ff ff    	jne    c010b179 <do_exit+0x107>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010b236:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b239:	89 04 24             	mov    %eax,(%esp)
c010b23c:	e8 a3 f1 ff ff       	call   c010a3e4 <__intr_restore>
    
    schedule();
c010b241:	e8 29 14 00 00       	call   c010c66f <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010b246:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010b24b:	8b 40 04             	mov    0x4(%eax),%eax
c010b24e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b252:	c7 44 24 08 a8 ff 10 	movl   $0xc010ffa8,0x8(%esp)
c010b259:	c0 
c010b25a:	c7 44 24 04 12 02 00 	movl   $0x212,0x4(%esp)
c010b261:	00 
c010b262:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010b269:	e8 4e 5b ff ff       	call   c0100dbc <__panic>

c010b26e <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010b26e:	55                   	push   %ebp
c010b26f:	89 e5                	mov    %esp,%ebp
c010b271:	83 ec 78             	sub    $0x78,%esp
    if (current->mm != NULL) {
c010b274:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010b279:	8b 40 18             	mov    0x18(%eax),%eax
c010b27c:	85 c0                	test   %eax,%eax
c010b27e:	74 1c                	je     c010b29c <load_icode+0x2e>
        panic("load_icode: current->mm must be empty.\n");
c010b280:	c7 44 24 08 c8 ff 10 	movl   $0xc010ffc8,0x8(%esp)
c010b287:	c0 
c010b288:	c7 44 24 04 1c 02 00 	movl   $0x21c,0x4(%esp)
c010b28f:	00 
c010b290:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010b297:	e8 20 5b ff ff       	call   c0100dbc <__panic>
    }

    int ret = -E_NO_MEM;
c010b29c:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010b2a3:	e8 16 cd ff ff       	call   c0107fbe <mm_create>
c010b2a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b2ab:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010b2af:	0f 84 26 06 00 00    	je     c010b8db <load_icode+0x66d>
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010b2b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b2b8:	89 04 24             	mov    %eax,(%esp)
c010b2bb:	e8 bb f9 ff ff       	call   c010ac7b <setup_pgdir>
c010b2c0:	85 c0                	test   %eax,%eax
c010b2c2:	0f 85 05 06 00 00    	jne    c010b8cd <load_icode+0x65f>
        goto bad_pgdir_cleanup_mm;
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010b2c8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b2cb:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010b2ce:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b2d1:	8b 40 1c             	mov    0x1c(%eax),%eax
c010b2d4:	03 45 08             	add    0x8(%ebp),%eax
c010b2d7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010b2da:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b2dd:	8b 00                	mov    (%eax),%eax
c010b2df:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010b2e4:	74 0c                	je     c010b2f2 <load_icode+0x84>
        ret = -E_INVAL_ELF;
c010b2e6:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010b2ed:	e9 ce 05 00 00       	jmp    c010b8c0 <load_icode+0x652>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010b2f2:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b2f5:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010b2f9:	0f b7 c0             	movzwl %ax,%eax
c010b2fc:	c1 e0 05             	shl    $0x5,%eax
c010b2ff:	03 45 ec             	add    -0x14(%ebp),%eax
c010b302:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010b305:	e9 1d 03 00 00       	jmp    c010b627 <load_icode+0x3b9>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010b30a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b30d:	8b 00                	mov    (%eax),%eax
c010b30f:	83 f8 01             	cmp    $0x1,%eax
c010b312:	0f 85 04 03 00 00    	jne    c010b61c <load_icode+0x3ae>
            continue ;
        }
        if (ph->p_filesz > ph->p_memsz) {
c010b318:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b31b:	8b 50 10             	mov    0x10(%eax),%edx
c010b31e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b321:	8b 40 14             	mov    0x14(%eax),%eax
c010b324:	39 c2                	cmp    %eax,%edx
c010b326:	76 0c                	jbe    c010b334 <load_icode+0xc6>
            ret = -E_INVAL_ELF;
c010b328:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010b32f:	e9 81 05 00 00       	jmp    c010b8b5 <load_icode+0x647>
        }
        if (ph->p_filesz == 0) {
c010b334:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b337:	8b 40 10             	mov    0x10(%eax),%eax
c010b33a:	85 c0                	test   %eax,%eax
c010b33c:	0f 84 dd 02 00 00    	je     c010b61f <load_icode+0x3b1>
            continue ;
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010b342:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010b349:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010b350:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b353:	8b 40 18             	mov    0x18(%eax),%eax
c010b356:	83 e0 01             	and    $0x1,%eax
c010b359:	84 c0                	test   %al,%al
c010b35b:	74 04                	je     c010b361 <load_icode+0xf3>
c010b35d:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010b361:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b364:	8b 40 18             	mov    0x18(%eax),%eax
c010b367:	83 e0 02             	and    $0x2,%eax
c010b36a:	85 c0                	test   %eax,%eax
c010b36c:	74 04                	je     c010b372 <load_icode+0x104>
c010b36e:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010b372:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b375:	8b 40 18             	mov    0x18(%eax),%eax
c010b378:	83 e0 04             	and    $0x4,%eax
c010b37b:	85 c0                	test   %eax,%eax
c010b37d:	74 04                	je     c010b383 <load_icode+0x115>
c010b37f:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010b383:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b386:	83 e0 02             	and    $0x2,%eax
c010b389:	85 c0                	test   %eax,%eax
c010b38b:	74 04                	je     c010b391 <load_icode+0x123>
c010b38d:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010b391:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b394:	8b 50 14             	mov    0x14(%eax),%edx
c010b397:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b39a:	8b 40 08             	mov    0x8(%eax),%eax
c010b39d:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b3a4:	00 
c010b3a5:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010b3a8:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010b3ac:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b3b0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b3b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b3b7:	89 04 24             	mov    %eax,(%esp)
c010b3ba:	e8 07 d0 ff ff       	call   c01083c6 <mm_map>
c010b3bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b3c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b3c6:	0f 85 df 04 00 00    	jne    c010b8ab <load_icode+0x63d>
            goto bad_cleanup_mmap;
        }
        unsigned char *from = binary + ph->p_offset;
c010b3cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3cf:	8b 40 04             	mov    0x4(%eax),%eax
c010b3d2:	03 45 08             	add    0x8(%ebp),%eax
c010b3d5:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010b3d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3db:	8b 40 08             	mov    0x8(%eax),%eax
c010b3de:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010b3e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b3e4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010b3e7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010b3ea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010b3ef:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010b3f2:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010b3f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3fc:	8b 50 08             	mov    0x8(%eax),%edx
c010b3ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b402:	8b 40 10             	mov    0x10(%eax),%eax
c010b405:	01 d0                	add    %edx,%eax
c010b407:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010b40a:	e9 91 00 00 00       	jmp    c010b4a0 <load_icode+0x232>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b40f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b412:	8b 40 0c             	mov    0xc(%eax),%eax
c010b415:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b418:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b41c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b41f:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b423:	89 04 24             	mov    %eax,(%esp)
c010b426:	e8 e9 ab ff ff       	call   c0106014 <pgdir_alloc_page>
c010b42b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b42e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b432:	0f 84 76 04 00 00    	je     c010b8ae <load_icode+0x640>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b438:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b43b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b43e:	89 d1                	mov    %edx,%ecx
c010b440:	29 c1                	sub    %eax,%ecx
c010b442:	89 c8                	mov    %ecx,%eax
c010b444:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b447:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b44c:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b44f:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b452:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b459:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b45c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b45f:	73 0f                	jae    c010b470 <load_icode+0x202>
                size -= la - end;
c010b461:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b464:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b467:	89 d1                	mov    %edx,%ecx
c010b469:	29 c1                	sub    %eax,%ecx
c010b46b:	89 c8                	mov    %ecx,%eax
c010b46d:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010b470:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b473:	89 04 24             	mov    %eax,(%esp)
c010b476:	e8 ed ef ff ff       	call   c010a468 <page2kva>
c010b47b:	03 45 bc             	add    -0x44(%ebp),%eax
c010b47e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010b481:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b485:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010b488:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b48c:	89 04 24             	mov    %eax,(%esp)
c010b48f:	e8 1e 24 00 00       	call   c010d8b2 <memcpy>
            start += size, from += size;
c010b494:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b497:	01 45 d8             	add    %eax,-0x28(%ebp)
c010b49a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b49d:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010b4a0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b4a3:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b4a6:	0f 82 63 ff ff ff    	jb     c010b40f <load_icode+0x1a1>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010b4ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4af:	8b 50 08             	mov    0x8(%eax),%edx
c010b4b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b4b5:	8b 40 14             	mov    0x14(%eax),%eax
c010b4b8:	01 d0                	add    %edx,%eax
c010b4ba:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010b4bd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b4c0:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b4c3:	0f 83 45 01 00 00    	jae    c010b60e <load_icode+0x3a0>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010b4c9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b4cc:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b4cf:	0f 84 4d 01 00 00    	je     c010b622 <load_icode+0x3b4>
                continue ;
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010b4d5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b4d8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b4db:	89 d1                	mov    %edx,%ecx
c010b4dd:	29 c1                	sub    %eax,%ecx
c010b4df:	89 c8                	mov    %ecx,%eax
c010b4e1:	05 00 10 00 00       	add    $0x1000,%eax
c010b4e6:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b4e9:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b4ee:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b4f1:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010b4f4:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b4f7:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b4fa:	73 0f                	jae    c010b50b <load_icode+0x29d>
                size -= la - end;
c010b4fc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b4ff:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b502:	89 d1                	mov    %edx,%ecx
c010b504:	29 c1                	sub    %eax,%ecx
c010b506:	89 c8                	mov    %ecx,%eax
c010b508:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b50b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b50e:	89 04 24             	mov    %eax,(%esp)
c010b511:	e8 52 ef ff ff       	call   c010a468 <page2kva>
c010b516:	03 45 bc             	add    -0x44(%ebp),%eax
c010b519:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010b51c:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b520:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b527:	00 
c010b528:	89 04 24             	mov    %eax,(%esp)
c010b52b:	e8 83 22 00 00       	call   c010d7b3 <memset>
            start += size;
c010b530:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b533:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010b536:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b539:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b53c:	73 0c                	jae    c010b54a <load_icode+0x2dc>
c010b53e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b541:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b544:	0f 84 c4 00 00 00    	je     c010b60e <load_icode+0x3a0>
c010b54a:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b54d:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b550:	72 0c                	jb     c010b55e <load_icode+0x2f0>
c010b552:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b555:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b558:	0f 84 b0 00 00 00    	je     c010b60e <load_icode+0x3a0>
c010b55e:	c7 44 24 0c f0 ff 10 	movl   $0xc010fff0,0xc(%esp)
c010b565:	c0 
c010b566:	c7 44 24 08 71 ff 10 	movl   $0xc010ff71,0x8(%esp)
c010b56d:	c0 
c010b56e:	c7 44 24 04 6e 02 00 	movl   $0x26e,0x4(%esp)
c010b575:	00 
c010b576:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010b57d:	e8 3a 58 ff ff       	call   c0100dbc <__panic>
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b582:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b585:	8b 40 0c             	mov    0xc(%eax),%eax
c010b588:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b58b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b58f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b592:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b596:	89 04 24             	mov    %eax,(%esp)
c010b599:	e8 76 aa ff ff       	call   c0106014 <pgdir_alloc_page>
c010b59e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b5a1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b5a5:	0f 84 06 03 00 00    	je     c010b8b1 <load_icode+0x643>
                goto bad_cleanup_mmap;
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b5ab:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b5ae:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b5b1:	89 d1                	mov    %edx,%ecx
c010b5b3:	29 c1                	sub    %eax,%ecx
c010b5b5:	89 c8                	mov    %ecx,%eax
c010b5b7:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b5ba:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b5bf:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b5c2:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b5c5:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b5cc:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b5cf:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b5d2:	73 0f                	jae    c010b5e3 <load_icode+0x375>
                size -= la - end;
c010b5d4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b5d7:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b5da:	89 d1                	mov    %edx,%ecx
c010b5dc:	29 c1                	sub    %eax,%ecx
c010b5de:	89 c8                	mov    %ecx,%eax
c010b5e0:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b5e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b5e6:	89 04 24             	mov    %eax,(%esp)
c010b5e9:	e8 7a ee ff ff       	call   c010a468 <page2kva>
c010b5ee:	03 45 bc             	add    -0x44(%ebp),%eax
c010b5f1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010b5f4:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b5f8:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b5ff:	00 
c010b600:	89 04 24             	mov    %eax,(%esp)
c010b603:	e8 ab 21 00 00       	call   c010d7b3 <memset>
            start += size;
c010b608:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b60b:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010b60e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b611:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b614:	0f 82 68 ff ff ff    	jb     c010b582 <load_icode+0x314>
c010b61a:	eb 07                	jmp    c010b623 <load_icode+0x3b5>
    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
            continue ;
c010b61c:	90                   	nop
c010b61d:	eb 04                	jmp    c010b623 <load_icode+0x3b5>
        if (ph->p_filesz > ph->p_memsz) {
            ret = -E_INVAL_ELF;
            goto bad_cleanup_mmap;
        }
        if (ph->p_filesz == 0) {
            continue ;
c010b61f:	90                   	nop
c010b620:	eb 01                	jmp    c010b623 <load_icode+0x3b5>
      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
        if (start < la) {
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
                continue ;
c010b622:	90                   	nop
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010b623:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010b627:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b62a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010b62d:	0f 82 d7 fc ff ff    	jb     c010b30a <load_icode+0x9c>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010b633:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010b63a:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b641:	00 
c010b642:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b645:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b649:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010b650:	00 
c010b651:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010b658:	af 
c010b659:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b65c:	89 04 24             	mov    %eax,(%esp)
c010b65f:	e8 62 cd ff ff       	call   c01083c6 <mm_map>
c010b664:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b667:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b66b:	0f 85 43 02 00 00    	jne    c010b8b4 <load_icode+0x646>
        goto bad_cleanup_mmap;
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010b671:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b674:	8b 40 0c             	mov    0xc(%eax),%eax
c010b677:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b67e:	00 
c010b67f:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010b686:	af 
c010b687:	89 04 24             	mov    %eax,(%esp)
c010b68a:	e8 85 a9 ff ff       	call   c0106014 <pgdir_alloc_page>
c010b68f:	85 c0                	test   %eax,%eax
c010b691:	75 24                	jne    c010b6b7 <load_icode+0x449>
c010b693:	c7 44 24 0c 2c 00 11 	movl   $0xc011002c,0xc(%esp)
c010b69a:	c0 
c010b69b:	c7 44 24 08 71 ff 10 	movl   $0xc010ff71,0x8(%esp)
c010b6a2:	c0 
c010b6a3:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
c010b6aa:	00 
c010b6ab:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010b6b2:	e8 05 57 ff ff       	call   c0100dbc <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010b6b7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b6ba:	8b 40 0c             	mov    0xc(%eax),%eax
c010b6bd:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b6c4:	00 
c010b6c5:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010b6cc:	af 
c010b6cd:	89 04 24             	mov    %eax,(%esp)
c010b6d0:	e8 3f a9 ff ff       	call   c0106014 <pgdir_alloc_page>
c010b6d5:	85 c0                	test   %eax,%eax
c010b6d7:	75 24                	jne    c010b6fd <load_icode+0x48f>
c010b6d9:	c7 44 24 0c 70 00 11 	movl   $0xc0110070,0xc(%esp)
c010b6e0:	c0 
c010b6e1:	c7 44 24 08 71 ff 10 	movl   $0xc010ff71,0x8(%esp)
c010b6e8:	c0 
c010b6e9:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
c010b6f0:	00 
c010b6f1:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010b6f8:	e8 bf 56 ff ff       	call   c0100dbc <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010b6fd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b700:	8b 40 0c             	mov    0xc(%eax),%eax
c010b703:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b70a:	00 
c010b70b:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010b712:	af 
c010b713:	89 04 24             	mov    %eax,(%esp)
c010b716:	e8 f9 a8 ff ff       	call   c0106014 <pgdir_alloc_page>
c010b71b:	85 c0                	test   %eax,%eax
c010b71d:	75 24                	jne    c010b743 <load_icode+0x4d5>
c010b71f:	c7 44 24 0c b4 00 11 	movl   $0xc01100b4,0xc(%esp)
c010b726:	c0 
c010b727:	c7 44 24 08 71 ff 10 	movl   $0xc010ff71,0x8(%esp)
c010b72e:	c0 
c010b72f:	c7 44 24 04 83 02 00 	movl   $0x283,0x4(%esp)
c010b736:	00 
c010b737:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010b73e:	e8 79 56 ff ff       	call   c0100dbc <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010b743:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b746:	8b 40 0c             	mov    0xc(%eax),%eax
c010b749:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b750:	00 
c010b751:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010b758:	af 
c010b759:	89 04 24             	mov    %eax,(%esp)
c010b75c:	e8 b3 a8 ff ff       	call   c0106014 <pgdir_alloc_page>
c010b761:	85 c0                	test   %eax,%eax
c010b763:	75 24                	jne    c010b789 <load_icode+0x51b>
c010b765:	c7 44 24 0c f8 00 11 	movl   $0xc01100f8,0xc(%esp)
c010b76c:	c0 
c010b76d:	c7 44 24 08 71 ff 10 	movl   $0xc010ff71,0x8(%esp)
c010b774:	c0 
c010b775:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
c010b77c:	00 
c010b77d:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010b784:	e8 33 56 ff ff       	call   c0100dbc <__panic>
    
    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010b789:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b78c:	89 04 24             	mov    %eax,(%esp)
c010b78f:	e8 72 ed ff ff       	call   c010a506 <mm_count_inc>
    current->mm = mm;
c010b794:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010b799:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b79c:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010b79f:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010b7a4:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b7a7:	8b 52 0c             	mov    0xc(%edx),%edx
c010b7aa:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010b7ad:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010b7b4:	77 23                	ja     c010b7d9 <load_icode+0x56b>
c010b7b6:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010b7b9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b7bd:	c7 44 24 08 20 ff 10 	movl   $0xc010ff20,0x8(%esp)
c010b7c4:	c0 
c010b7c5:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c010b7cc:	00 
c010b7cd:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010b7d4:	e8 e3 55 ff ff       	call   c0100dbc <__panic>
c010b7d9:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010b7dc:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010b7e2:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010b7e5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b7e8:	8b 40 0c             	mov    0xc(%eax),%eax
c010b7eb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010b7ee:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010b7f5:	77 23                	ja     c010b81a <load_icode+0x5ac>
c010b7f7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b7fa:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b7fe:	c7 44 24 08 20 ff 10 	movl   $0xc010ff20,0x8(%esp)
c010b805:	c0 
c010b806:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c010b80d:	00 
c010b80e:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010b815:	e8 a2 55 ff ff       	call   c0100dbc <__panic>
c010b81a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010b81d:	05 00 00 00 40       	add    $0x40000000,%eax
c010b822:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010b825:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010b828:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010b82b:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010b830:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b833:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010b836:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010b83d:	00 
c010b83e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b845:	00 
c010b846:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b849:	89 04 24             	mov    %eax,(%esp)
c010b84c:	e8 62 1f 00 00       	call   c010d7b3 <memset>
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010b851:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b854:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010b85a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b85d:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010b863:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b866:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010b86a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b86d:	66 89 50 28          	mov    %dx,0x28(%eax)
c010b871:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b874:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010b878:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b87b:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = USTACKTOP;
c010b87f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b882:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010b889:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b88c:	8b 50 18             	mov    0x18(%eax),%edx
c010b88f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b892:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010b895:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010b898:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010b89f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010b8a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
}
c010b8a9:	c9                   	leave  
c010b8aa:	c3                   	ret    
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
        if (vm_flags & VM_WRITE) perm |= PTE_W;
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
            goto bad_cleanup_mmap;
c010b8ab:	90                   	nop
c010b8ac:	eb 07                	jmp    c010b8b5 <load_icode+0x647>
     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c010b8ae:	90                   	nop
c010b8af:	eb 04                	jmp    c010b8b5 <load_icode+0x647>
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
                goto bad_cleanup_mmap;
c010b8b1:	90                   	nop
c010b8b2:	eb 01                	jmp    c010b8b5 <load_icode+0x647>
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
        goto bad_cleanup_mmap;
c010b8b4:	90                   	nop
    tf->tf_eflags = FL_IF;
    ret = 0;
out:
    return ret;
bad_cleanup_mmap:
    exit_mmap(mm);
c010b8b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b8b8:	89 04 24             	mov    %eax,(%esp)
c010b8bb:	e8 25 cd ff ff       	call   c01085e5 <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010b8c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b8c3:	89 04 24             	mov    %eax,(%esp)
c010b8c6:	e8 57 f4 ff ff       	call   c010ad22 <put_pgdir>
c010b8cb:	eb 01                	jmp    c010b8ce <load_icode+0x660>
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010b8cd:	90                   	nop
bad_cleanup_mmap:
    exit_mmap(mm);
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010b8ce:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b8d1:	89 04 24             	mov    %eax,(%esp)
c010b8d4:	e8 4b ca ff ff       	call   c0108324 <mm_destroy>
bad_mm:
    goto out;
c010b8d9:	eb cb                	jmp    c010b8a6 <load_icode+0x638>

    int ret = -E_NO_MEM;
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010b8db:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010b8dc:	eb c8                	jmp    c010b8a6 <load_icode+0x638>

c010b8de <do_execve>:
}

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010b8de:	55                   	push   %ebp
c010b8df:	89 e5                	mov    %esp,%ebp
c010b8e1:	83 ec 58             	sub    $0x58,%esp
    struct mm_struct *mm = current->mm;
c010b8e4:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010b8e9:	8b 40 18             	mov    0x18(%eax),%eax
c010b8ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010b8ef:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8f2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010b8f9:	00 
c010b8fa:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b8fd:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b901:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b905:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b908:	89 04 24             	mov    %eax,(%esp)
c010b90b:	e8 93 d7 ff ff       	call   c01090a3 <user_mem_check>
c010b910:	85 c0                	test   %eax,%eax
c010b912:	75 0a                	jne    c010b91e <do_execve+0x40>
        return -E_INVAL;
c010b914:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b919:	e9 f6 00 00 00       	jmp    c010ba14 <do_execve+0x136>
    }
    if (len > PROC_NAME_LEN) {
c010b91e:	83 7d 0c 32          	cmpl   $0x32,0xc(%ebp)
c010b922:	76 07                	jbe    c010b92b <do_execve+0x4d>
        len = PROC_NAME_LEN;
c010b924:	c7 45 0c 32 00 00 00 	movl   $0x32,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010b92b:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010b932:	00 
c010b933:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b93a:	00 
c010b93b:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010b93e:	89 04 24             	mov    %eax,(%esp)
c010b941:	e8 6d 1e 00 00       	call   c010d7b3 <memset>
    memcpy(local_name, name, len);
c010b946:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b949:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b94d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b950:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b954:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010b957:	89 04 24             	mov    %eax,(%esp)
c010b95a:	e8 53 1f 00 00       	call   c010d8b2 <memcpy>

    if (mm != NULL) {
c010b95f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b963:	74 4a                	je     c010b9af <do_execve+0xd1>
        lcr3(boot_cr3);
c010b965:	a1 cc 53 1c c0       	mov    0xc01c53cc,%eax
c010b96a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b96d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b970:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010b973:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b976:	89 04 24             	mov    %eax,(%esp)
c010b979:	e8 a2 eb ff ff       	call   c010a520 <mm_count_dec>
c010b97e:	85 c0                	test   %eax,%eax
c010b980:	75 21                	jne    c010b9a3 <do_execve+0xc5>
            exit_mmap(mm);
c010b982:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b985:	89 04 24             	mov    %eax,(%esp)
c010b988:	e8 58 cc ff ff       	call   c01085e5 <exit_mmap>
            put_pgdir(mm);
c010b98d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b990:	89 04 24             	mov    %eax,(%esp)
c010b993:	e8 8a f3 ff ff       	call   c010ad22 <put_pgdir>
            mm_destroy(mm);
c010b998:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b99b:	89 04 24             	mov    %eax,(%esp)
c010b99e:	e8 81 c9 ff ff       	call   c0108324 <mm_destroy>
        }
        current->mm = NULL;
c010b9a3:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010b9a8:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010b9af:	8b 45 14             	mov    0x14(%ebp),%eax
c010b9b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b9b6:	8b 45 10             	mov    0x10(%ebp),%eax
c010b9b9:	89 04 24             	mov    %eax,(%esp)
c010b9bc:	e8 ad f8 ff ff       	call   c010b26e <load_icode>
c010b9c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b9c4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b9c8:	75 1b                	jne    c010b9e5 <do_execve+0x107>
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010b9ca:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010b9cf:	8d 55 b9             	lea    -0x47(%ebp),%edx
c010b9d2:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b9d6:	89 04 24             	mov    %eax,(%esp)
c010b9d9:	e8 3c ed ff ff       	call   c010a71a <set_proc_name>
    return 0;
c010b9de:	b8 00 00 00 00       	mov    $0x0,%eax
c010b9e3:	eb 2f                	jmp    c010ba14 <do_execve+0x136>
        }
        current->mm = NULL;
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
c010b9e5:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010b9e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b9e9:	89 04 24             	mov    %eax,(%esp)
c010b9ec:	e8 81 f6 ff ff       	call   c010b072 <do_exit>
    panic("already exit: %e.\n", ret);
c010b9f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b9f4:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b9f8:	c7 44 24 08 3b 01 11 	movl   $0xc011013b,0x8(%esp)
c010b9ff:	c0 
c010ba00:	c7 44 24 04 cc 02 00 	movl   $0x2cc,0x4(%esp)
c010ba07:	00 
c010ba08:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010ba0f:	e8 a8 53 ff ff       	call   c0100dbc <__panic>
}
c010ba14:	c9                   	leave  
c010ba15:	c3                   	ret    

c010ba16 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010ba16:	55                   	push   %ebp
c010ba17:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010ba19:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010ba1e:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010ba25:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ba2a:	5d                   	pop    %ebp
c010ba2b:	c3                   	ret    

c010ba2c <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010ba2c:	55                   	push   %ebp
c010ba2d:	89 e5                	mov    %esp,%ebp
c010ba2f:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010ba32:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010ba37:	8b 40 18             	mov    0x18(%eax),%eax
c010ba3a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010ba3d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ba41:	74 31                	je     c010ba74 <do_wait+0x48>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010ba43:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ba46:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010ba4d:	00 
c010ba4e:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010ba55:	00 
c010ba56:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ba5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ba5d:	89 04 24             	mov    %eax,(%esp)
c010ba60:	e8 3e d6 ff ff       	call   c01090a3 <user_mem_check>
c010ba65:	85 c0                	test   %eax,%eax
c010ba67:	75 0b                	jne    c010ba74 <do_wait+0x48>
            return -E_INVAL;
c010ba69:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ba6e:	e9 56 01 00 00       	jmp    c010bbc9 <do_wait+0x19d>
        current->wait_state = WT_CHILD;
        schedule();
        if (current->flags & PF_EXITING) {
            do_exit(-E_KILLED);
        }
        goto repeat;
c010ba73:	90                   	nop
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010ba74:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010ba7b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ba7f:	74 39                	je     c010baba <do_wait+0x8e>
        proc = find_proc(pid);
c010ba81:	8b 45 08             	mov    0x8(%ebp),%eax
c010ba84:	89 04 24             	mov    %eax,(%esp)
c010ba87:	e8 a7 f0 ff ff       	call   c010ab33 <find_proc>
c010ba8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010ba8f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ba93:	74 58                	je     c010baed <do_wait+0xc1>
c010ba95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba98:	8b 50 14             	mov    0x14(%eax),%edx
c010ba9b:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010baa0:	39 c2                	cmp    %eax,%edx
c010baa2:	75 49                	jne    c010baed <do_wait+0xc1>
            haskid = 1;
c010baa4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010baab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010baae:	8b 00                	mov    (%eax),%eax
c010bab0:	83 f8 03             	cmp    $0x3,%eax
c010bab3:	75 38                	jne    c010baed <do_wait+0xc1>
                goto found;
c010bab5:	e9 87 00 00 00       	jmp    c010bb41 <do_wait+0x115>
            }
        }
    }
    else {
        proc = current->cptr;
c010baba:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010babf:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010bac5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010bac8:	eb 1d                	jmp    c010bae7 <do_wait+0xbb>
            haskid = 1;
c010baca:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010bad1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bad4:	8b 00                	mov    (%eax),%eax
c010bad6:	83 f8 03             	cmp    $0x3,%eax
c010bad9:	74 65                	je     c010bb40 <do_wait+0x114>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010badb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bade:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bae4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bae7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010baeb:	75 dd                	jne    c010baca <do_wait+0x9e>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010baed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010baf1:	74 43                	je     c010bb36 <do_wait+0x10a>
        current->state = PROC_SLEEPING;
c010baf3:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010baf8:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010bafe:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010bb03:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010bb0a:	00 00 80 
        schedule();
c010bb0d:	e8 5d 0b 00 00       	call   c010c66f <schedule>
        if (current->flags & PF_EXITING) {
c010bb12:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010bb17:	8b 40 44             	mov    0x44(%eax),%eax
c010bb1a:	83 e0 01             	and    $0x1,%eax
c010bb1d:	84 c0                	test   %al,%al
c010bb1f:	0f 84 4e ff ff ff    	je     c010ba73 <do_wait+0x47>
            do_exit(-E_KILLED);
c010bb25:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010bb2c:	e8 41 f5 ff ff       	call   c010b072 <do_exit>
        }
        goto repeat;
c010bb31:	e9 3d ff ff ff       	jmp    c010ba73 <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010bb36:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010bb3b:	e9 89 00 00 00       	jmp    c010bbc9 <do_wait+0x19d>
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
            haskid = 1;
            if (proc->state == PROC_ZOMBIE) {
                goto found;
c010bb40:	90                   	nop
        goto repeat;
    }
    return -E_BAD_PROC;

found:
    if (proc == idleproc || proc == initproc) {
c010bb41:	a1 20 33 1c c0       	mov    0xc01c3320,%eax
c010bb46:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010bb49:	74 0a                	je     c010bb55 <do_wait+0x129>
c010bb4b:	a1 24 33 1c c0       	mov    0xc01c3324,%eax
c010bb50:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010bb53:	75 1c                	jne    c010bb71 <do_wait+0x145>
        panic("wait idleproc or initproc.\n");
c010bb55:	c7 44 24 08 4e 01 11 	movl   $0xc011014e,0x8(%esp)
c010bb5c:	c0 
c010bb5d:	c7 44 24 04 05 03 00 	movl   $0x305,0x4(%esp)
c010bb64:	00 
c010bb65:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010bb6c:	e8 4b 52 ff ff       	call   c0100dbc <__panic>
    }
    if (code_store != NULL) {
c010bb71:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bb75:	74 0e                	je     c010bb85 <do_wait+0x159>
        *code_store = proc->exit_code;
c010bb77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb7a:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010bb80:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb83:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010bb85:	e8 2b e8 ff ff       	call   c010a3b5 <__intr_save>
c010bb8a:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010bb8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb90:	89 04 24             	mov    %eax,(%esp)
c010bb93:	e8 66 ef ff ff       	call   c010aafe <unhash_proc>
        remove_links(proc);
c010bb98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb9b:	89 04 24             	mov    %eax,(%esp)
c010bb9e:	e8 b6 ec ff ff       	call   c010a859 <remove_links>
    }
    local_intr_restore(intr_flag);
c010bba3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bba6:	89 04 24             	mov    %eax,(%esp)
c010bba9:	e8 36 e8 ff ff       	call   c010a3e4 <__intr_restore>
    put_kstack(proc);
c010bbae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbb1:	89 04 24             	mov    %eax,(%esp)
c010bbb4:	e8 9c f0 ff ff       	call   c010ac55 <put_kstack>
    kfree(proc);
c010bbb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbbc:	89 04 24             	mov    %eax,(%esp)
c010bbbf:	e8 0e 91 ff ff       	call   c0104cd2 <kfree>
    return 0;
c010bbc4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bbc9:	c9                   	leave  
c010bbca:	c3                   	ret    

c010bbcb <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010bbcb:	55                   	push   %ebp
c010bbcc:	89 e5                	mov    %esp,%ebp
c010bbce:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010bbd1:	8b 45 08             	mov    0x8(%ebp),%eax
c010bbd4:	89 04 24             	mov    %eax,(%esp)
c010bbd7:	e8 57 ef ff ff       	call   c010ab33 <find_proc>
c010bbdc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bbdf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bbe3:	74 44                	je     c010bc29 <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010bbe5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbe8:	8b 40 44             	mov    0x44(%eax),%eax
c010bbeb:	83 e0 01             	and    $0x1,%eax
c010bbee:	85 c0                	test   %eax,%eax
c010bbf0:	75 30                	jne    c010bc22 <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010bbf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbf5:	8b 40 44             	mov    0x44(%eax),%eax
c010bbf8:	89 c2                	mov    %eax,%edx
c010bbfa:	83 ca 01             	or     $0x1,%edx
c010bbfd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc00:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010bc03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc06:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010bc0c:	85 c0                	test   %eax,%eax
c010bc0e:	79 0b                	jns    c010bc1b <do_kill+0x50>
                wakeup_proc(proc);
c010bc10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc13:	89 04 24             	mov    %eax,(%esp)
c010bc16:	e8 b8 09 00 00       	call   c010c5d3 <wakeup_proc>
            }
            return 0;
c010bc1b:	b8 00 00 00 00       	mov    $0x0,%eax
c010bc20:	eb 0c                	jmp    c010bc2e <do_kill+0x63>
        }
        return -E_KILLED;
c010bc22:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010bc27:	eb 05                	jmp    c010bc2e <do_kill+0x63>
    }
    return -E_INVAL;
c010bc29:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010bc2e:	c9                   	leave  
c010bc2f:	c3                   	ret    

c010bc30 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010bc30:	55                   	push   %ebp
c010bc31:	89 e5                	mov    %esp,%ebp
c010bc33:	57                   	push   %edi
c010bc34:	56                   	push   %esi
c010bc35:	53                   	push   %ebx
c010bc36:	83 ec 2c             	sub    $0x2c,%esp
    int ret, len = strlen(name);
c010bc39:	8b 45 08             	mov    0x8(%ebp),%eax
c010bc3c:	89 04 24             	mov    %eax,(%esp)
c010bc3f:	e8 34 18 00 00       	call   c010d478 <strlen>
c010bc44:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010bc47:	b8 04 00 00 00       	mov    $0x4,%eax
c010bc4c:	8b 55 08             	mov    0x8(%ebp),%edx
c010bc4f:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010bc52:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010bc55:	8b 7d 10             	mov    0x10(%ebp),%edi
c010bc58:	89 c6                	mov    %eax,%esi
c010bc5a:	89 f0                	mov    %esi,%eax
c010bc5c:	cd 80                	int    $0x80
c010bc5e:	89 c6                	mov    %eax,%esi
c010bc60:	89 75 e0             	mov    %esi,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010bc63:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010bc66:	83 c4 2c             	add    $0x2c,%esp
c010bc69:	5b                   	pop    %ebx
c010bc6a:	5e                   	pop    %esi
c010bc6b:	5f                   	pop    %edi
c010bc6c:	5d                   	pop    %ebp
c010bc6d:	c3                   	ret    

c010bc6e <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010bc6e:	55                   	push   %ebp
c010bc6f:	89 e5                	mov    %esp,%ebp
c010bc71:	83 ec 18             	sub    $0x18,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010bc74:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010bc79:	8b 40 04             	mov    0x4(%eax),%eax
c010bc7c:	c7 44 24 08 6a 01 11 	movl   $0xc011016a,0x8(%esp)
c010bc83:	c0 
c010bc84:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc88:	c7 04 24 74 01 11 c0 	movl   $0xc0110174,(%esp)
c010bc8f:	e8 cf 46 ff ff       	call   c0100363 <cprintf>
c010bc94:	b8 a4 79 00 00       	mov    $0x79a4,%eax
c010bc99:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bc9d:	c7 44 24 04 c8 b5 1a 	movl   $0xc01ab5c8,0x4(%esp)
c010bca4:	c0 
c010bca5:	c7 04 24 6a 01 11 c0 	movl   $0xc011016a,(%esp)
c010bcac:	e8 7f ff ff ff       	call   c010bc30 <kernel_execve>
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010bcb1:	c7 44 24 08 9b 01 11 	movl   $0xc011019b,0x8(%esp)
c010bcb8:	c0 
c010bcb9:	c7 44 24 04 4e 03 00 	movl   $0x34e,0x4(%esp)
c010bcc0:	00 
c010bcc1:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010bcc8:	e8 ef 50 ff ff       	call   c0100dbc <__panic>

c010bccd <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010bccd:	55                   	push   %ebp
c010bcce:	89 e5                	mov    %esp,%ebp
c010bcd0:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010bcd3:	e8 02 95 ff ff       	call   c01051da <nr_free_pages>
c010bcd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010bcdb:	e8 ba 8e ff ff       	call   c0104b9a <kallocated>
c010bce0:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010bce3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010bcea:	00 
c010bceb:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bcf2:	00 
c010bcf3:	c7 04 24 6e bc 10 c0 	movl   $0xc010bc6e,(%esp)
c010bcfa:	e8 a8 ee ff ff       	call   c010aba7 <kernel_thread>
c010bcff:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010bd02:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010bd06:	7f 1c                	jg     c010bd24 <init_main+0x57>
        panic("create user_main failed.\n");
c010bd08:	c7 44 24 08 b5 01 11 	movl   $0xc01101b5,0x8(%esp)
c010bd0f:	c0 
c010bd10:	c7 44 24 04 59 03 00 	movl   $0x359,0x4(%esp)
c010bd17:	00 
c010bd18:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010bd1f:	e8 98 50 ff ff       	call   c0100dbc <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010bd24:	e8 a8 d9 ff ff       	call   c01096d1 <check_sync>

    while (do_wait(0, NULL) == 0) {
c010bd29:	eb 05                	jmp    c010bd30 <init_main+0x63>
        schedule();
c010bd2b:	e8 3f 09 00 00       	call   c010c66f <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010bd30:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bd37:	00 
c010bd38:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010bd3f:	e8 e8 fc ff ff       	call   c010ba2c <do_wait>
c010bd44:	85 c0                	test   %eax,%eax
c010bd46:	74 e3                	je     c010bd2b <init_main+0x5e>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010bd48:	c7 04 24 d0 01 11 c0 	movl   $0xc01101d0,(%esp)
c010bd4f:	e8 0f 46 ff ff       	call   c0100363 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010bd54:	a1 24 33 1c c0       	mov    0xc01c3324,%eax
c010bd59:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010bd5f:	85 c0                	test   %eax,%eax
c010bd61:	75 1e                	jne    c010bd81 <init_main+0xb4>
c010bd63:	a1 24 33 1c c0       	mov    0xc01c3324,%eax
c010bd68:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010bd6e:	85 c0                	test   %eax,%eax
c010bd70:	75 0f                	jne    c010bd81 <init_main+0xb4>
c010bd72:	a1 24 33 1c c0       	mov    0xc01c3324,%eax
c010bd77:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bd7d:	85 c0                	test   %eax,%eax
c010bd7f:	74 24                	je     c010bda5 <init_main+0xd8>
c010bd81:	c7 44 24 0c f4 01 11 	movl   $0xc01101f4,0xc(%esp)
c010bd88:	c0 
c010bd89:	c7 44 24 08 71 ff 10 	movl   $0xc010ff71,0x8(%esp)
c010bd90:	c0 
c010bd91:	c7 44 24 04 63 03 00 	movl   $0x363,0x4(%esp)
c010bd98:	00 
c010bd99:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010bda0:	e8 17 50 ff ff       	call   c0100dbc <__panic>
    assert(nr_process == 2);
c010bda5:	a1 40 53 1c c0       	mov    0xc01c5340,%eax
c010bdaa:	83 f8 02             	cmp    $0x2,%eax
c010bdad:	74 24                	je     c010bdd3 <init_main+0x106>
c010bdaf:	c7 44 24 0c 3f 02 11 	movl   $0xc011023f,0xc(%esp)
c010bdb6:	c0 
c010bdb7:	c7 44 24 08 71 ff 10 	movl   $0xc010ff71,0x8(%esp)
c010bdbe:	c0 
c010bdbf:	c7 44 24 04 64 03 00 	movl   $0x364,0x4(%esp)
c010bdc6:	00 
c010bdc7:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010bdce:	e8 e9 4f ff ff       	call   c0100dbc <__panic>
c010bdd3:	c7 45 e8 9c 55 1c c0 	movl   $0xc01c559c,-0x18(%ebp)
c010bdda:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bddd:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010bde0:	8b 15 24 33 1c c0    	mov    0xc01c3324,%edx
c010bde6:	83 c2 7c             	add    $0x7c,%edx
c010bde9:	39 d0                	cmp    %edx,%eax
c010bdeb:	74 24                	je     c010be11 <init_main+0x144>
c010bded:	c7 44 24 0c 50 02 11 	movl   $0xc0110250,0xc(%esp)
c010bdf4:	c0 
c010bdf5:	c7 44 24 08 71 ff 10 	movl   $0xc010ff71,0x8(%esp)
c010bdfc:	c0 
c010bdfd:	c7 44 24 04 65 03 00 	movl   $0x365,0x4(%esp)
c010be04:	00 
c010be05:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010be0c:	e8 ab 4f ff ff       	call   c0100dbc <__panic>
c010be11:	c7 45 e4 9c 55 1c c0 	movl   $0xc01c559c,-0x1c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010be18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010be1b:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010be1d:	8b 15 24 33 1c c0    	mov    0xc01c3324,%edx
c010be23:	83 c2 7c             	add    $0x7c,%edx
c010be26:	39 d0                	cmp    %edx,%eax
c010be28:	74 24                	je     c010be4e <init_main+0x181>
c010be2a:	c7 44 24 0c 80 02 11 	movl   $0xc0110280,0xc(%esp)
c010be31:	c0 
c010be32:	c7 44 24 08 71 ff 10 	movl   $0xc010ff71,0x8(%esp)
c010be39:	c0 
c010be3a:	c7 44 24 04 66 03 00 	movl   $0x366,0x4(%esp)
c010be41:	00 
c010be42:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010be49:	e8 6e 4f ff ff       	call   c0100dbc <__panic>

    cprintf("init check memory pass.\n");
c010be4e:	c7 04 24 b0 02 11 c0 	movl   $0xc01102b0,(%esp)
c010be55:	e8 09 45 ff ff       	call   c0100363 <cprintf>
    return 0;
c010be5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010be5f:	c9                   	leave  
c010be60:	c3                   	ret    

c010be61 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010be61:	55                   	push   %ebp
c010be62:	89 e5                	mov    %esp,%ebp
c010be64:	83 ec 28             	sub    $0x28,%esp
c010be67:	c7 45 ec 9c 55 1c c0 	movl   $0xc01c559c,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010be6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010be71:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010be74:	89 50 04             	mov    %edx,0x4(%eax)
c010be77:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010be7a:	8b 50 04             	mov    0x4(%eax),%edx
c010be7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010be80:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010be82:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010be89:	eb 26                	jmp    c010beb1 <proc_init+0x50>
        list_init(hash_list + i);
c010be8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be8e:	c1 e0 03             	shl    $0x3,%eax
c010be91:	05 40 33 1c c0       	add    $0xc01c3340,%eax
c010be96:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010be99:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010be9c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010be9f:	89 50 04             	mov    %edx,0x4(%eax)
c010bea2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bea5:	8b 50 04             	mov    0x4(%eax),%edx
c010bea8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010beab:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010bead:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010beb1:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010beb8:	7e d1                	jle    c010be8b <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010beba:	e8 d4 e6 ff ff       	call   c010a593 <alloc_proc>
c010bebf:	a3 20 33 1c c0       	mov    %eax,0xc01c3320
c010bec4:	a1 20 33 1c c0       	mov    0xc01c3320,%eax
c010bec9:	85 c0                	test   %eax,%eax
c010becb:	75 1c                	jne    c010bee9 <proc_init+0x88>
        panic("cannot alloc idleproc.\n");
c010becd:	c7 44 24 08 c9 02 11 	movl   $0xc01102c9,0x8(%esp)
c010bed4:	c0 
c010bed5:	c7 44 24 04 78 03 00 	movl   $0x378,0x4(%esp)
c010bedc:	00 
c010bedd:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010bee4:	e8 d3 4e ff ff       	call   c0100dbc <__panic>
    }

    idleproc->pid = 0;
c010bee9:	a1 20 33 1c c0       	mov    0xc01c3320,%eax
c010beee:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010bef5:	a1 20 33 1c c0       	mov    0xc01c3320,%eax
c010befa:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010bf00:	a1 20 33 1c c0       	mov    0xc01c3320,%eax
c010bf05:	ba 00 f0 12 c0       	mov    $0xc012f000,%edx
c010bf0a:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010bf0d:	a1 20 33 1c c0       	mov    0xc01c3320,%eax
c010bf12:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010bf19:	a1 20 33 1c c0       	mov    0xc01c3320,%eax
c010bf1e:	c7 44 24 04 e1 02 11 	movl   $0xc01102e1,0x4(%esp)
c010bf25:	c0 
c010bf26:	89 04 24             	mov    %eax,(%esp)
c010bf29:	e8 ec e7 ff ff       	call   c010a71a <set_proc_name>
    nr_process ++;
c010bf2e:	a1 40 53 1c c0       	mov    0xc01c5340,%eax
c010bf33:	83 c0 01             	add    $0x1,%eax
c010bf36:	a3 40 53 1c c0       	mov    %eax,0xc01c5340

    current = idleproc;
c010bf3b:	a1 20 33 1c c0       	mov    0xc01c3320,%eax
c010bf40:	a3 28 33 1c c0       	mov    %eax,0xc01c3328

    int pid = kernel_thread(init_main, NULL, 0);
c010bf45:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010bf4c:	00 
c010bf4d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bf54:	00 
c010bf55:	c7 04 24 cd bc 10 c0 	movl   $0xc010bccd,(%esp)
c010bf5c:	e8 46 ec ff ff       	call   c010aba7 <kernel_thread>
c010bf61:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010bf64:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bf68:	7f 1c                	jg     c010bf86 <proc_init+0x125>
        panic("create init_main failed.\n");
c010bf6a:	c7 44 24 08 e6 02 11 	movl   $0xc01102e6,0x8(%esp)
c010bf71:	c0 
c010bf72:	c7 44 24 04 86 03 00 	movl   $0x386,0x4(%esp)
c010bf79:	00 
c010bf7a:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010bf81:	e8 36 4e ff ff       	call   c0100dbc <__panic>
    }

    initproc = find_proc(pid);
c010bf86:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bf89:	89 04 24             	mov    %eax,(%esp)
c010bf8c:	e8 a2 eb ff ff       	call   c010ab33 <find_proc>
c010bf91:	a3 24 33 1c c0       	mov    %eax,0xc01c3324
    set_proc_name(initproc, "init");
c010bf96:	a1 24 33 1c c0       	mov    0xc01c3324,%eax
c010bf9b:	c7 44 24 04 00 03 11 	movl   $0xc0110300,0x4(%esp)
c010bfa2:	c0 
c010bfa3:	89 04 24             	mov    %eax,(%esp)
c010bfa6:	e8 6f e7 ff ff       	call   c010a71a <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010bfab:	a1 20 33 1c c0       	mov    0xc01c3320,%eax
c010bfb0:	85 c0                	test   %eax,%eax
c010bfb2:	74 0c                	je     c010bfc0 <proc_init+0x15f>
c010bfb4:	a1 20 33 1c c0       	mov    0xc01c3320,%eax
c010bfb9:	8b 40 04             	mov    0x4(%eax),%eax
c010bfbc:	85 c0                	test   %eax,%eax
c010bfbe:	74 24                	je     c010bfe4 <proc_init+0x183>
c010bfc0:	c7 44 24 0c 08 03 11 	movl   $0xc0110308,0xc(%esp)
c010bfc7:	c0 
c010bfc8:	c7 44 24 08 71 ff 10 	movl   $0xc010ff71,0x8(%esp)
c010bfcf:	c0 
c010bfd0:	c7 44 24 04 8c 03 00 	movl   $0x38c,0x4(%esp)
c010bfd7:	00 
c010bfd8:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010bfdf:	e8 d8 4d ff ff       	call   c0100dbc <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010bfe4:	a1 24 33 1c c0       	mov    0xc01c3324,%eax
c010bfe9:	85 c0                	test   %eax,%eax
c010bfeb:	74 0d                	je     c010bffa <proc_init+0x199>
c010bfed:	a1 24 33 1c c0       	mov    0xc01c3324,%eax
c010bff2:	8b 40 04             	mov    0x4(%eax),%eax
c010bff5:	83 f8 01             	cmp    $0x1,%eax
c010bff8:	74 24                	je     c010c01e <proc_init+0x1bd>
c010bffa:	c7 44 24 0c 30 03 11 	movl   $0xc0110330,0xc(%esp)
c010c001:	c0 
c010c002:	c7 44 24 08 71 ff 10 	movl   $0xc010ff71,0x8(%esp)
c010c009:	c0 
c010c00a:	c7 44 24 04 8d 03 00 	movl   $0x38d,0x4(%esp)
c010c011:	00 
c010c012:	c7 04 24 44 ff 10 c0 	movl   $0xc010ff44,(%esp)
c010c019:	e8 9e 4d ff ff       	call   c0100dbc <__panic>
}
c010c01e:	c9                   	leave  
c010c01f:	c3                   	ret    

c010c020 <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010c020:	55                   	push   %ebp
c010c021:	89 e5                	mov    %esp,%ebp
c010c023:	83 ec 08             	sub    $0x8,%esp
c010c026:	eb 01                	jmp    c010c029 <cpu_idle+0x9>
    while (1) {
        if (current->need_resched) {
            schedule();
        }
    }
c010c028:	90                   	nop

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
    while (1) {
        if (current->need_resched) {
c010c029:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010c02e:	8b 40 10             	mov    0x10(%eax),%eax
c010c031:	85 c0                	test   %eax,%eax
c010c033:	74 f3                	je     c010c028 <cpu_idle+0x8>
            schedule();
c010c035:	e8 35 06 00 00       	call   c010c66f <schedule>
        }
    }
c010c03a:	eb ec                	jmp    c010c028 <cpu_idle+0x8>

c010c03c <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010c03c:	55                   	push   %ebp
c010c03d:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010c03f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c043:	75 11                	jne    c010c056 <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010c045:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010c04a:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010c051:	00 00 00 
c010c054:	eb 0e                	jmp    c010c064 <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010c056:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010c05b:	8b 55 08             	mov    0x8(%ebp),%edx
c010c05e:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010c064:	5d                   	pop    %ebp
c010c065:	c3                   	ret    

c010c066 <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010c066:	55                   	push   %ebp
c010c067:	89 e5                	mov    %esp,%ebp
c010c069:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010c06c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c070:	75 07                	jne    c010c079 <do_sleep+0x13>
        return 0;
c010c072:	b8 00 00 00 00       	mov    $0x0,%eax
c010c077:	eb 6b                	jmp    c010c0e4 <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010c079:	e8 37 e3 ff ff       	call   c010a3b5 <__intr_save>
c010c07e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010c081:	8b 55 08             	mov    0x8(%ebp),%edx
c010c084:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010c089:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c08d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c091:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010c094:	89 04 24             	mov    %eax,(%esp)
c010c097:	e8 e0 e2 ff ff       	call   c010a37c <timer_init>
c010c09c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010c09f:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010c0a4:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010c0aa:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010c0af:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010c0b6:	00 00 80 
    add_timer(timer);
c010c0b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c0bc:	89 04 24             	mov    %eax,(%esp)
c010c0bf:	e8 36 06 00 00       	call   c010c6fa <add_timer>
    local_intr_restore(intr_flag);
c010c0c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0c7:	89 04 24             	mov    %eax,(%esp)
c010c0ca:	e8 15 e3 ff ff       	call   c010a3e4 <__intr_restore>

    schedule();
c010c0cf:	e8 9b 05 00 00       	call   c010c66f <schedule>

    del_timer(timer);
c010c0d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c0d7:	89 04 24             	mov    %eax,(%esp)
c010c0da:	e8 59 07 00 00       	call   c010c838 <del_timer>
    return 0;
c010c0df:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c0e4:	c9                   	leave  
c010c0e5:	c3                   	ret    
	...

c010c0e8 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010c0e8:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010c0ec:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010c0ee:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010c0f1:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010c0f4:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010c0f7:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010c0fa:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010c0fd:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010c100:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010c103:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010c107:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010c10a:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010c10d:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010c110:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010c113:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010c116:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010c119:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010c11c:	ff 30                	pushl  (%eax)

    ret
c010c11e:	c3                   	ret    
	...

c010c120 <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010c120:	55                   	push   %ebp
c010c121:	89 e5                	mov    %esp,%ebp
c010c123:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010c126:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c12a:	75 08                	jne    c010c134 <skew_heap_merge+0x14>
c010c12c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c12f:	e9 bd 00 00 00       	jmp    c010c1f1 <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010c134:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c138:	75 08                	jne    c010c142 <skew_heap_merge+0x22>
c010c13a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c13d:	e9 af 00 00 00       	jmp    c010c1f1 <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010c142:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c145:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c149:	8b 45 08             	mov    0x8(%ebp),%eax
c010c14c:	89 04 24             	mov    %eax,(%esp)
c010c14f:	8b 45 10             	mov    0x10(%ebp),%eax
c010c152:	ff d0                	call   *%eax
c010c154:	83 f8 ff             	cmp    $0xffffffff,%eax
c010c157:	75 4d                	jne    c010c1a6 <skew_heap_merge+0x86>
     {
          r = a->left;
c010c159:	8b 45 08             	mov    0x8(%ebp),%eax
c010c15c:	8b 40 04             	mov    0x4(%eax),%eax
c010c15f:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010c162:	8b 45 08             	mov    0x8(%ebp),%eax
c010c165:	8b 40 08             	mov    0x8(%eax),%eax
c010c168:	8b 55 10             	mov    0x10(%ebp),%edx
c010c16b:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c16f:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c172:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c176:	89 04 24             	mov    %eax,(%esp)
c010c179:	e8 a2 ff ff ff       	call   c010c120 <skew_heap_merge>
c010c17e:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010c181:	8b 45 08             	mov    0x8(%ebp),%eax
c010c184:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c187:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010c18a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c18d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c190:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010c193:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c197:	74 08                	je     c010c1a1 <skew_heap_merge+0x81>
c010c199:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c19c:	8b 55 08             	mov    0x8(%ebp),%edx
c010c19f:	89 10                	mov    %edx,(%eax)

          return a;
c010c1a1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1a4:	eb 4b                	jmp    c010c1f1 <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010c1a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1a9:	8b 40 04             	mov    0x4(%eax),%eax
c010c1ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010c1af:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1b2:	8b 40 08             	mov    0x8(%eax),%eax
c010c1b5:	8b 55 10             	mov    0x10(%ebp),%edx
c010c1b8:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c1bc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c1c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1c3:	89 04 24             	mov    %eax,(%esp)
c010c1c6:	e8 55 ff ff ff       	call   c010c120 <skew_heap_merge>
c010c1cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010c1ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1d1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c1d4:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010c1d7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c1da:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c1dd:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010c1e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c1e4:	74 08                	je     c010c1ee <skew_heap_merge+0xce>
c010c1e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c1e9:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c1ec:	89 10                	mov    %edx,(%eax)

          return b;
c010c1ee:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010c1f1:	c9                   	leave  
c010c1f2:	c3                   	ret    

c010c1f3 <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010c1f3:	55                   	push   %ebp
c010c1f4:	89 e5                	mov    %esp,%ebp
c010c1f6:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010c1f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c1fc:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c201:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010c204:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c207:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c20c:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010c20f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c212:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010c218:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c21b:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010c221:	89 d1                	mov    %edx,%ecx
c010c223:	29 c1                	sub    %eax,%ecx
c010c225:	89 c8                	mov    %ecx,%eax
c010c227:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010c22a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c22e:	7e 07                	jle    c010c237 <proc_stride_comp_f+0x44>
c010c230:	b8 01 00 00 00       	mov    $0x1,%eax
c010c235:	eb 12                	jmp    c010c249 <proc_stride_comp_f+0x56>
     else if (c == 0) return 0;
c010c237:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c23b:	75 07                	jne    c010c244 <proc_stride_comp_f+0x51>
c010c23d:	b8 00 00 00 00       	mov    $0x0,%eax
c010c242:	eb 05                	jmp    c010c249 <proc_stride_comp_f+0x56>
     else return -1;
c010c244:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010c249:	c9                   	leave  
c010c24a:	c3                   	ret    

c010c24b <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010c24b:	55                   	push   %ebp
c010c24c:	89 e5                	mov    %esp,%ebp
c010c24e:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: 2011010312
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0       
      */
     list_init(&(rq->run_list));
c010c251:	8b 45 08             	mov    0x8(%ebp),%eax
c010c254:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010c257:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c25a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c25d:	89 50 04             	mov    %edx,0x4(%eax)
c010c260:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c263:	8b 50 04             	mov    0x4(%eax),%edx
c010c266:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c269:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL;
c010c26b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c26e:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0;
c010c275:	8b 45 08             	mov    0x8(%ebp),%eax
c010c278:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010c27f:	c9                   	leave  
c010c280:	c3                   	ret    

c010c281 <stride_enqueue>:
 * 
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010c281:	55                   	push   %ebp
c010c282:	89 e5                	mov    %esp,%ebp
c010c284:	83 ec 28             	sub    $0x28,%esp
      *         list_add_before: insert  a entry into the last of list   
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
     rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010c287:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c28a:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010c290:	8b 45 08             	mov    0x8(%ebp),%eax
c010c293:	8b 40 10             	mov    0x10(%eax),%eax
c010c296:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c299:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c29c:	c7 45 ec f3 c1 10 c0 	movl   $0xc010c1f3,-0x14(%ebp)
c010c2a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c2a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010c2a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c2ac:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010c2b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c2b5:	8b 10                	mov    (%eax),%edx
c010c2b7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c2ba:	89 50 08             	mov    %edx,0x8(%eax)
c010c2bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c2c0:	8b 50 08             	mov    0x8(%eax),%edx
c010c2c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c2c6:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010c2c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c2cc:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c2d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c2d3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c2d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2da:	89 04 24             	mov    %eax,(%esp)
c010c2dd:	e8 3e fe ff ff       	call   c010c120 <skew_heap_merge>
c010c2e2:	89 c2                	mov    %eax,%edx
c010c2e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2e7:	89 50 10             	mov    %edx,0x10(%eax)
     proc->time_slice = rq->max_time_slice;
c010c2ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010c2ed:	8b 50 0c             	mov    0xc(%eax),%edx
c010c2f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c2f3:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     proc->rq = rq;
c010c2f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c2fc:	8b 55 08             	mov    0x8(%ebp),%edx
c010c2ff:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
     ++(rq->proc_num);
c010c305:	8b 45 08             	mov    0x8(%ebp),%eax
c010c308:	8b 40 08             	mov    0x8(%eax),%eax
c010c30b:	8d 50 01             	lea    0x1(%eax),%edx
c010c30e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c311:	89 50 08             	mov    %edx,0x8(%eax)
}
c010c314:	c9                   	leave  
c010c315:	c3                   	ret    

c010c316 <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010c316:	55                   	push   %ebp
c010c317:	89 e5                	mov    %esp,%ebp
c010c319:	83 ec 38             	sub    $0x38,%esp
      * (1) remove the proc from rq correctly
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
     rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &proc->lab6_run_pool, proc_stride_comp_f);
c010c31c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c31f:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010c325:	8b 45 08             	mov    0x8(%ebp),%eax
c010c328:	8b 40 10             	mov    0x10(%eax),%eax
c010c32b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c32e:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c331:	c7 45 ec f3 c1 10 c0 	movl   $0xc010c1f3,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010c338:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c33b:	8b 00                	mov    (%eax),%eax
c010c33d:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010c340:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c343:	8b 50 08             	mov    0x8(%eax),%edx
c010c346:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c349:	8b 40 04             	mov    0x4(%eax),%eax
c010c34c:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010c34f:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010c353:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c357:	89 04 24             	mov    %eax,(%esp)
c010c35a:	e8 c1 fd ff ff       	call   c010c120 <skew_heap_merge>
c010c35f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010c362:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010c366:	74 08                	je     c010c370 <stride_dequeue+0x5a>
c010c368:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c36b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c36e:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010c370:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c374:	74 24                	je     c010c39a <stride_dequeue+0x84>
     {
          if (p->left == b)
c010c376:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c379:	8b 40 04             	mov    0x4(%eax),%eax
c010c37c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010c37f:	75 0b                	jne    c010c38c <stride_dequeue+0x76>
               p->left = rep;
c010c381:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c384:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c387:	89 50 04             	mov    %edx,0x4(%eax)
c010c38a:	eb 09                	jmp    c010c395 <stride_dequeue+0x7f>
          else p->right = rep;
c010c38c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c38f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c392:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010c395:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c398:	eb 03                	jmp    c010c39d <stride_dequeue+0x87>
     }
     else return rep;
c010c39a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c39d:	89 c2                	mov    %eax,%edx
c010c39f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3a2:	89 50 10             	mov    %edx,0x10(%eax)
     proc->rq = NULL;
c010c3a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c3a8:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010c3af:	00 00 00 
     --(rq->proc_num);
c010c3b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3b5:	8b 40 08             	mov    0x8(%eax),%eax
c010c3b8:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c3bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3be:	89 50 08             	mov    %edx,0x8(%eax)
}
c010c3c1:	c9                   	leave  
c010c3c2:	c3                   	ret    

c010c3c3 <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010c3c3:	55                   	push   %ebp
c010c3c4:	89 e5                	mov    %esp,%ebp
c010c3c6:	53                   	push   %ebx
c010c3c7:	83 ec 14             	sub    $0x14,%esp
             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
             (1.2) If using list, we have to search list to find the p with minimum stride value
      * (2) update p;s stride value: p->lab6_stride
      * (3) return p
      */
     if (rq->lab6_run_pool == NULL)
c010c3ca:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3cd:	8b 40 10             	mov    0x10(%eax),%eax
c010c3d0:	85 c0                	test   %eax,%eax
c010c3d2:	75 07                	jne    c010c3db <stride_pick_next+0x18>
          return NULL;
c010c3d4:	b8 00 00 00 00       	mov    $0x0,%eax
c010c3d9:	eb 66                	jmp    c010c441 <stride_pick_next+0x7e>
     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
c010c3db:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3de:	8b 40 10             	mov    0x10(%eax),%eax
c010c3e1:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c3e6:	89 45 f8             	mov    %eax,-0x8(%ebp)
     if (p->lab6_priority == 0)
c010c3e9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c3ec:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010c3f2:	85 c0                	test   %eax,%eax
c010c3f4:	75 1a                	jne    c010c410 <stride_pick_next+0x4d>
          p->lab6_stride += BIG_STRIDE;
c010c3f6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c3f9:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010c3ff:	8d 90 ff ff ff 7f    	lea    0x7fffffff(%eax),%edx
c010c405:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c408:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
c010c40e:	eb 2e                	jmp    c010c43e <stride_pick_next+0x7b>
     else
          p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010c410:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c413:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010c419:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c41c:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010c422:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c425:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
c010c42a:	ba 00 00 00 00       	mov    $0x0,%edx
c010c42f:	f7 75 e8             	divl   -0x18(%ebp)
c010c432:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010c435:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c438:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
     return p;
c010c43e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010c441:	83 c4 14             	add    $0x14,%esp
c010c444:	5b                   	pop    %ebx
c010c445:	5d                   	pop    %ebp
c010c446:	c3                   	ret    

c010c447 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010c447:	55                   	push   %ebp
c010c448:	89 e5                	mov    %esp,%ebp
     /* LAB6: 2011010312 */
     if (proc->time_slice > 0) {
c010c44a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c44d:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c453:	85 c0                	test   %eax,%eax
c010c455:	7e 15                	jle    c010c46c <stride_proc_tick+0x25>
          --(proc->time_slice);
c010c457:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c45a:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c460:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c463:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c466:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     }
     if (proc->time_slice == 0) {
c010c46c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c46f:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c475:	85 c0                	test   %eax,%eax
c010c477:	75 0a                	jne    c010c483 <stride_proc_tick+0x3c>
          proc->need_resched = 1;
c010c479:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c47c:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
     }
}
c010c483:	5d                   	pop    %ebp
c010c484:	c3                   	ret    
c010c485:	00 00                	add    %al,(%eax)
	...

c010c488 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010c488:	55                   	push   %ebp
c010c489:	89 e5                	mov    %esp,%ebp
c010c48b:	53                   	push   %ebx
c010c48c:	83 ec 14             	sub    $0x14,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010c48f:	9c                   	pushf  
c010c490:	5b                   	pop    %ebx
c010c491:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return eflags;
c010c494:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010c497:	25 00 02 00 00       	and    $0x200,%eax
c010c49c:	85 c0                	test   %eax,%eax
c010c49e:	74 0c                	je     c010c4ac <__intr_save+0x24>
        intr_disable();
c010c4a0:	e8 45 5c ff ff       	call   c01020ea <intr_disable>
        return 1;
c010c4a5:	b8 01 00 00 00       	mov    $0x1,%eax
c010c4aa:	eb 05                	jmp    c010c4b1 <__intr_save+0x29>
    }
    return 0;
c010c4ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c4b1:	83 c4 14             	add    $0x14,%esp
c010c4b4:	5b                   	pop    %ebx
c010c4b5:	5d                   	pop    %ebp
c010c4b6:	c3                   	ret    

c010c4b7 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010c4b7:	55                   	push   %ebp
c010c4b8:	89 e5                	mov    %esp,%ebp
c010c4ba:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010c4bd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c4c1:	74 05                	je     c010c4c8 <__intr_restore+0x11>
        intr_enable();
c010c4c3:	e8 1c 5c ff ff       	call   c01020e4 <intr_enable>
    }
}
c010c4c8:	c9                   	leave  
c010c4c9:	c3                   	ret    

c010c4ca <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010c4ca:	55                   	push   %ebp
c010c4cb:	89 e5                	mov    %esp,%ebp
c010c4cd:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010c4d0:	a1 20 33 1c c0       	mov    0xc01c3320,%eax
c010c4d5:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c4d8:	74 19                	je     c010c4f3 <sched_class_enqueue+0x29>
        sched_class->enqueue(rq, proc);
c010c4da:	a1 9c 53 1c c0       	mov    0xc01c539c,%eax
c010c4df:	8b 48 08             	mov    0x8(%eax),%ecx
c010c4e2:	a1 a0 53 1c c0       	mov    0xc01c53a0,%eax
c010c4e7:	8b 55 08             	mov    0x8(%ebp),%edx
c010c4ea:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c4ee:	89 04 24             	mov    %eax,(%esp)
c010c4f1:	ff d1                	call   *%ecx
    }
}
c010c4f3:	c9                   	leave  
c010c4f4:	c3                   	ret    

c010c4f5 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010c4f5:	55                   	push   %ebp
c010c4f6:	89 e5                	mov    %esp,%ebp
c010c4f8:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010c4fb:	a1 9c 53 1c c0       	mov    0xc01c539c,%eax
c010c500:	8b 48 0c             	mov    0xc(%eax),%ecx
c010c503:	a1 a0 53 1c c0       	mov    0xc01c53a0,%eax
c010c508:	8b 55 08             	mov    0x8(%ebp),%edx
c010c50b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c50f:	89 04 24             	mov    %eax,(%esp)
c010c512:	ff d1                	call   *%ecx
}
c010c514:	c9                   	leave  
c010c515:	c3                   	ret    

c010c516 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010c516:	55                   	push   %ebp
c010c517:	89 e5                	mov    %esp,%ebp
c010c519:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010c51c:	a1 9c 53 1c c0       	mov    0xc01c539c,%eax
c010c521:	8b 50 10             	mov    0x10(%eax),%edx
c010c524:	a1 a0 53 1c c0       	mov    0xc01c53a0,%eax
c010c529:	89 04 24             	mov    %eax,(%esp)
c010c52c:	ff d2                	call   *%edx
}
c010c52e:	c9                   	leave  
c010c52f:	c3                   	ret    

c010c530 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010c530:	55                   	push   %ebp
c010c531:	89 e5                	mov    %esp,%ebp
c010c533:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010c536:	a1 20 33 1c c0       	mov    0xc01c3320,%eax
c010c53b:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c53e:	74 1b                	je     c010c55b <sched_class_proc_tick+0x2b>
        sched_class->proc_tick(rq, proc);
c010c540:	a1 9c 53 1c c0       	mov    0xc01c539c,%eax
c010c545:	8b 48 14             	mov    0x14(%eax),%ecx
c010c548:	a1 a0 53 1c c0       	mov    0xc01c53a0,%eax
c010c54d:	8b 55 08             	mov    0x8(%ebp),%edx
c010c550:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c554:	89 04 24             	mov    %eax,(%esp)
c010c557:	ff d1                	call   *%ecx
c010c559:	eb 0a                	jmp    c010c565 <sched_class_proc_tick+0x35>
    }
    else {
        proc->need_resched = 1;
c010c55b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c55e:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010c565:	c9                   	leave  
c010c566:	c3                   	ret    

c010c567 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010c567:	55                   	push   %ebp
c010c568:	89 e5                	mov    %esp,%ebp
c010c56a:	83 ec 28             	sub    $0x28,%esp
c010c56d:	c7 45 f4 94 53 1c c0 	movl   $0xc01c5394,-0xc(%ebp)
c010c574:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c577:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c57a:	89 50 04             	mov    %edx,0x4(%eax)
c010c57d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c580:	8b 50 04             	mov    0x4(%eax),%edx
c010c583:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c586:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010c588:	c7 05 9c 53 1c c0 8c 	movl   $0xc0131a8c,0xc01c539c
c010c58f:	1a 13 c0 

    rq = &__rq;
c010c592:	c7 05 a0 53 1c c0 a4 	movl   $0xc01c53a4,0xc01c53a0
c010c599:	53 1c c0 
    rq->max_time_slice = 5;
c010c59c:	a1 a0 53 1c c0       	mov    0xc01c53a0,%eax
c010c5a1:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010c5a8:	a1 9c 53 1c c0       	mov    0xc01c539c,%eax
c010c5ad:	8b 50 04             	mov    0x4(%eax),%edx
c010c5b0:	a1 a0 53 1c c0       	mov    0xc01c53a0,%eax
c010c5b5:	89 04 24             	mov    %eax,(%esp)
c010c5b8:	ff d2                	call   *%edx

    cprintf("sched class: %s\n", sched_class->name);
c010c5ba:	a1 9c 53 1c c0       	mov    0xc01c539c,%eax
c010c5bf:	8b 00                	mov    (%eax),%eax
c010c5c1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c5c5:	c7 04 24 68 03 11 c0 	movl   $0xc0110368,(%esp)
c010c5cc:	e8 92 3d ff ff       	call   c0100363 <cprintf>
}
c010c5d1:	c9                   	leave  
c010c5d2:	c3                   	ret    

c010c5d3 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010c5d3:	55                   	push   %ebp
c010c5d4:	89 e5                	mov    %esp,%ebp
c010c5d6:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010c5d9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5dc:	8b 00                	mov    (%eax),%eax
c010c5de:	83 f8 03             	cmp    $0x3,%eax
c010c5e1:	75 24                	jne    c010c607 <wakeup_proc+0x34>
c010c5e3:	c7 44 24 0c 79 03 11 	movl   $0xc0110379,0xc(%esp)
c010c5ea:	c0 
c010c5eb:	c7 44 24 08 94 03 11 	movl   $0xc0110394,0x8(%esp)
c010c5f2:	c0 
c010c5f3:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010c5fa:	00 
c010c5fb:	c7 04 24 a9 03 11 c0 	movl   $0xc01103a9,(%esp)
c010c602:	e8 b5 47 ff ff       	call   c0100dbc <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010c607:	e8 7c fe ff ff       	call   c010c488 <__intr_save>
c010c60c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010c60f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c612:	8b 00                	mov    (%eax),%eax
c010c614:	83 f8 02             	cmp    $0x2,%eax
c010c617:	74 2d                	je     c010c646 <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010c619:	8b 45 08             	mov    0x8(%ebp),%eax
c010c61c:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010c622:	8b 45 08             	mov    0x8(%ebp),%eax
c010c625:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010c62c:	00 00 00 
            if (proc != current) {
c010c62f:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010c634:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c637:	74 29                	je     c010c662 <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010c639:	8b 45 08             	mov    0x8(%ebp),%eax
c010c63c:	89 04 24             	mov    %eax,(%esp)
c010c63f:	e8 86 fe ff ff       	call   c010c4ca <sched_class_enqueue>
c010c644:	eb 1c                	jmp    c010c662 <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010c646:	c7 44 24 08 bf 03 11 	movl   $0xc01103bf,0x8(%esp)
c010c64d:	c0 
c010c64e:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c010c655:	00 
c010c656:	c7 04 24 a9 03 11 c0 	movl   $0xc01103a9,(%esp)
c010c65d:	e8 c9 47 ff ff       	call   c0100e2b <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010c662:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c665:	89 04 24             	mov    %eax,(%esp)
c010c668:	e8 4a fe ff ff       	call   c010c4b7 <__intr_restore>
}
c010c66d:	c9                   	leave  
c010c66e:	c3                   	ret    

c010c66f <schedule>:

void
schedule(void) {
c010c66f:	55                   	push   %ebp
c010c670:	89 e5                	mov    %esp,%ebp
c010c672:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010c675:	e8 0e fe ff ff       	call   c010c488 <__intr_save>
c010c67a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010c67d:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010c682:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010c689:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010c68e:	8b 00                	mov    (%eax),%eax
c010c690:	83 f8 02             	cmp    $0x2,%eax
c010c693:	75 0d                	jne    c010c6a2 <schedule+0x33>
            sched_class_enqueue(current);
c010c695:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010c69a:	89 04 24             	mov    %eax,(%esp)
c010c69d:	e8 28 fe ff ff       	call   c010c4ca <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010c6a2:	e8 6f fe ff ff       	call   c010c516 <sched_class_pick_next>
c010c6a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c6aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c6ae:	74 0b                	je     c010c6bb <schedule+0x4c>
            sched_class_dequeue(next);
c010c6b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6b3:	89 04 24             	mov    %eax,(%esp)
c010c6b6:	e8 3a fe ff ff       	call   c010c4f5 <sched_class_dequeue>
        }
        if (next == NULL) {
c010c6bb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c6bf:	75 08                	jne    c010c6c9 <schedule+0x5a>
            next = idleproc;
c010c6c1:	a1 20 33 1c c0       	mov    0xc01c3320,%eax
c010c6c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010c6c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6cc:	8b 40 08             	mov    0x8(%eax),%eax
c010c6cf:	8d 50 01             	lea    0x1(%eax),%edx
c010c6d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6d5:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010c6d8:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010c6dd:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010c6e0:	74 0b                	je     c010c6ed <schedule+0x7e>
            proc_run(next);
c010c6e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c6e5:	89 04 24             	mov    %eax,(%esp)
c010c6e8:	e8 05 e3 ff ff       	call   c010a9f2 <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010c6ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6f0:	89 04 24             	mov    %eax,(%esp)
c010c6f3:	e8 bf fd ff ff       	call   c010c4b7 <__intr_restore>
}
c010c6f8:	c9                   	leave  
c010c6f9:	c3                   	ret    

c010c6fa <add_timer>:

// add timer to timer_list
void
add_timer(timer_t *timer) {
c010c6fa:	55                   	push   %ebp
c010c6fb:	89 e5                	mov    %esp,%ebp
c010c6fd:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c700:	e8 83 fd ff ff       	call   c010c488 <__intr_save>
c010c705:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010c708:	8b 45 08             	mov    0x8(%ebp),%eax
c010c70b:	8b 00                	mov    (%eax),%eax
c010c70d:	85 c0                	test   %eax,%eax
c010c70f:	74 0a                	je     c010c71b <add_timer+0x21>
c010c711:	8b 45 08             	mov    0x8(%ebp),%eax
c010c714:	8b 40 04             	mov    0x4(%eax),%eax
c010c717:	85 c0                	test   %eax,%eax
c010c719:	75 24                	jne    c010c73f <add_timer+0x45>
c010c71b:	c7 44 24 0c dc 03 11 	movl   $0xc01103dc,0xc(%esp)
c010c722:	c0 
c010c723:	c7 44 24 08 94 03 11 	movl   $0xc0110394,0x8(%esp)
c010c72a:	c0 
c010c72b:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010c732:	00 
c010c733:	c7 04 24 a9 03 11 c0 	movl   $0xc01103a9,(%esp)
c010c73a:	e8 7d 46 ff ff       	call   c0100dbc <__panic>
        assert(list_empty(&(timer->timer_link)));
c010c73f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c742:	83 c0 08             	add    $0x8,%eax
c010c745:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c748:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c74b:	8b 40 04             	mov    0x4(%eax),%eax
c010c74e:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010c751:	0f 94 c0             	sete   %al
c010c754:	0f b6 c0             	movzbl %al,%eax
c010c757:	85 c0                	test   %eax,%eax
c010c759:	75 24                	jne    c010c77f <add_timer+0x85>
c010c75b:	c7 44 24 0c 08 04 11 	movl   $0xc0110408,0xc(%esp)
c010c762:	c0 
c010c763:	c7 44 24 08 94 03 11 	movl   $0xc0110394,0x8(%esp)
c010c76a:	c0 
c010c76b:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010c772:	00 
c010c773:	c7 04 24 a9 03 11 c0 	movl   $0xc01103a9,(%esp)
c010c77a:	e8 3d 46 ff ff       	call   c0100dbc <__panic>
c010c77f:	c7 45 e4 94 53 1c c0 	movl   $0xc01c5394,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c786:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c789:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010c78c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010c78f:	eb 4a                	jmp    c010c7db <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010c791:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c794:	83 e8 08             	sub    $0x8,%eax
c010c797:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010c79a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c79d:	8b 10                	mov    (%eax),%edx
c010c79f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7a2:	8b 00                	mov    (%eax),%eax
c010c7a4:	39 c2                	cmp    %eax,%edx
c010c7a6:	73 13                	jae    c010c7bb <add_timer+0xc1>
                next->expires -= timer->expires;
c010c7a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7ab:	8b 10                	mov    (%eax),%edx
c010c7ad:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7b0:	8b 00                	mov    (%eax),%eax
c010c7b2:	29 c2                	sub    %eax,%edx
c010c7b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7b7:	89 10                	mov    %edx,(%eax)
                break;
c010c7b9:	eb 29                	jmp    c010c7e4 <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010c7bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7be:	8b 10                	mov    (%eax),%edx
c010c7c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c7c3:	8b 00                	mov    (%eax),%eax
c010c7c5:	29 c2                	sub    %eax,%edx
c010c7c7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7ca:	89 10                	mov    %edx,(%eax)
c010c7cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7cf:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c7d2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c7d5:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010c7d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010c7db:	81 7d f4 94 53 1c c0 	cmpl   $0xc01c5394,-0xc(%ebp)
c010c7e2:	75 ad                	jne    c010c791 <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010c7e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c7e7:	8d 50 08             	lea    0x8(%eax),%edx
c010c7ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7ed:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010c7f0:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010c7f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c7f6:	8b 00                	mov    (%eax),%eax
c010c7f8:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c7fb:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c7fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c801:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c804:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c807:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c80a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c80d:	89 10                	mov    %edx,(%eax)
c010c80f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c812:	8b 10                	mov    (%eax),%edx
c010c814:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c817:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c81a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c81d:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010c820:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c823:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c826:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010c829:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010c82b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c82e:	89 04 24             	mov    %eax,(%esp)
c010c831:	e8 81 fc ff ff       	call   c010c4b7 <__intr_restore>
}
c010c836:	c9                   	leave  
c010c837:	c3                   	ret    

c010c838 <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010c838:	55                   	push   %ebp
c010c839:	89 e5                	mov    %esp,%ebp
c010c83b:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c83e:	e8 45 fc ff ff       	call   c010c488 <__intr_save>
c010c843:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010c846:	8b 45 08             	mov    0x8(%ebp),%eax
c010c849:	83 c0 08             	add    $0x8,%eax
c010c84c:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c84f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c852:	8b 40 04             	mov    0x4(%eax),%eax
c010c855:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010c858:	0f 94 c0             	sete   %al
c010c85b:	0f b6 c0             	movzbl %al,%eax
c010c85e:	85 c0                	test   %eax,%eax
c010c860:	0f 85 89 00 00 00    	jne    c010c8ef <del_timer+0xb7>
            if (timer->expires != 0) {
c010c866:	8b 45 08             	mov    0x8(%ebp),%eax
c010c869:	8b 00                	mov    (%eax),%eax
c010c86b:	85 c0                	test   %eax,%eax
c010c86d:	74 35                	je     c010c8a4 <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010c86f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c872:	83 c0 08             	add    $0x8,%eax
c010c875:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c878:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c87b:	8b 40 04             	mov    0x4(%eax),%eax
c010c87e:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010c881:	81 7d f0 94 53 1c c0 	cmpl   $0xc01c5394,-0x10(%ebp)
c010c888:	74 1a                	je     c010c8a4 <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010c88a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c88d:	83 e8 08             	sub    $0x8,%eax
c010c890:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010c893:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c896:	8b 10                	mov    (%eax),%edx
c010c898:	8b 45 08             	mov    0x8(%ebp),%eax
c010c89b:	8b 00                	mov    (%eax),%eax
c010c89d:	01 c2                	add    %eax,%edx
c010c89f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c8a2:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010c8a4:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8a7:	83 c0 08             	add    $0x8,%eax
c010c8aa:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c8ad:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c8b0:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c8b3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c8b6:	8b 40 04             	mov    0x4(%eax),%eax
c010c8b9:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c8bc:	8b 12                	mov    (%edx),%edx
c010c8be:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010c8c1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c8c4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c8c7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c8ca:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c8cd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c8d0:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c8d3:	89 10                	mov    %edx,(%eax)
c010c8d5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c8d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010c8db:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c8de:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010c8e1:	89 50 04             	mov    %edx,0x4(%eax)
c010c8e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c8e7:	8b 50 04             	mov    0x4(%eax),%edx
c010c8ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c8ed:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010c8ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8f2:	89 04 24             	mov    %eax,(%esp)
c010c8f5:	e8 bd fb ff ff       	call   c010c4b7 <__intr_restore>
}
c010c8fa:	c9                   	leave  
c010c8fb:	c3                   	ret    

c010c8fc <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010c8fc:	55                   	push   %ebp
c010c8fd:	89 e5                	mov    %esp,%ebp
c010c8ff:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c902:	e8 81 fb ff ff       	call   c010c488 <__intr_save>
c010c907:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c90a:	c7 45 e4 94 53 1c c0 	movl   $0xc01c5394,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c911:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c914:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010c917:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010c91a:	81 7d f4 94 53 1c c0 	cmpl   $0xc01c5394,-0xc(%ebp)
c010c921:	0f 84 fc 00 00 00    	je     c010ca23 <run_timer_list+0x127>
            timer_t *timer = le2timer(le, timer_link);
c010c927:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c92a:	83 e8 08             	sub    $0x8,%eax
c010c92d:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010c930:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c933:	8b 00                	mov    (%eax),%eax
c010c935:	85 c0                	test   %eax,%eax
c010c937:	75 24                	jne    c010c95d <run_timer_list+0x61>
c010c939:	c7 44 24 0c 29 04 11 	movl   $0xc0110429,0xc(%esp)
c010c940:	c0 
c010c941:	c7 44 24 08 94 03 11 	movl   $0xc0110394,0x8(%esp)
c010c948:	c0 
c010c949:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010c950:	00 
c010c951:	c7 04 24 a9 03 11 c0 	movl   $0xc01103a9,(%esp)
c010c958:	e8 5f 44 ff ff       	call   c0100dbc <__panic>
            timer->expires --;
c010c95d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c960:	8b 00                	mov    (%eax),%eax
c010c962:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c965:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c968:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010c96a:	e9 a4 00 00 00       	jmp    c010ca13 <run_timer_list+0x117>
c010c96f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c972:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c975:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c978:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010c97b:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010c97e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c981:	8b 40 04             	mov    0x4(%eax),%eax
c010c984:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010c987:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c98a:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c990:	85 c0                	test   %eax,%eax
c010c992:	74 31                	je     c010c9c5 <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010c994:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c997:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c99d:	85 c0                	test   %eax,%eax
c010c99f:	78 4a                	js     c010c9eb <run_timer_list+0xef>
c010c9a1:	c7 44 24 0c 40 04 11 	movl   $0xc0110440,0xc(%esp)
c010c9a8:	c0 
c010c9a9:	c7 44 24 08 94 03 11 	movl   $0xc0110394,0x8(%esp)
c010c9b0:	c0 
c010c9b1:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010c9b8:	00 
c010c9b9:	c7 04 24 a9 03 11 c0 	movl   $0xc01103a9,(%esp)
c010c9c0:	e8 f7 43 ff ff       	call   c0100dbc <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010c9c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c9c8:	8b 40 04             	mov    0x4(%eax),%eax
c010c9cb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010c9cf:	c7 44 24 08 64 04 11 	movl   $0xc0110464,0x8(%esp)
c010c9d6:	c0 
c010c9d7:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c010c9de:	00 
c010c9df:	c7 04 24 a9 03 11 c0 	movl   $0xc01103a9,(%esp)
c010c9e6:	e8 40 44 ff ff       	call   c0100e2b <__warn>
                }
                wakeup_proc(proc);
c010c9eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c9ee:	89 04 24             	mov    %eax,(%esp)
c010c9f1:	e8 dd fb ff ff       	call   c010c5d3 <wakeup_proc>
                del_timer(timer);
c010c9f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c9f9:	89 04 24             	mov    %eax,(%esp)
c010c9fc:	e8 37 fe ff ff       	call   c010c838 <del_timer>
                if (le == &timer_list) {
c010ca01:	81 7d f4 94 53 1c c0 	cmpl   $0xc01c5394,-0xc(%ebp)
c010ca08:	74 18                	je     c010ca22 <run_timer_list+0x126>
                    break;
                }
                timer = le2timer(le, timer_link);
c010ca0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca0d:	83 e8 08             	sub    $0x8,%eax
c010ca10:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010ca13:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca16:	8b 00                	mov    (%eax),%eax
c010ca18:	85 c0                	test   %eax,%eax
c010ca1a:	0f 84 4f ff ff ff    	je     c010c96f <run_timer_list+0x73>
c010ca20:	eb 01                	jmp    c010ca23 <run_timer_list+0x127>
                    warn("process %d's wait_state == 0.\n", proc->pid);
                }
                wakeup_proc(proc);
                del_timer(timer);
                if (le == &timer_list) {
                    break;
c010ca22:	90                   	nop
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010ca23:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010ca28:	89 04 24             	mov    %eax,(%esp)
c010ca2b:	e8 00 fb ff ff       	call   c010c530 <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010ca30:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ca33:	89 04 24             	mov    %eax,(%esp)
c010ca36:	e8 7c fa ff ff       	call   c010c4b7 <__intr_restore>
}
c010ca3b:	c9                   	leave  
c010ca3c:	c3                   	ret    
c010ca3d:	00 00                	add    %al,(%eax)
	...

c010ca40 <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010ca40:	55                   	push   %ebp
c010ca41:	89 e5                	mov    %esp,%ebp
c010ca43:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010ca46:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca49:	8b 00                	mov    (%eax),%eax
c010ca4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010ca4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca51:	89 04 24             	mov    %eax,(%esp)
c010ca54:	e8 19 e6 ff ff       	call   c010b072 <do_exit>
}
c010ca59:	c9                   	leave  
c010ca5a:	c3                   	ret    

c010ca5b <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010ca5b:	55                   	push   %ebp
c010ca5c:	89 e5                	mov    %esp,%ebp
c010ca5e:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010ca61:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010ca66:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ca69:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010ca6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca6f:	8b 40 44             	mov    0x44(%eax),%eax
c010ca72:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010ca75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca78:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ca7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca7f:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ca83:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010ca8a:	e8 af e4 ff ff       	call   c010af3e <do_fork>
}
c010ca8f:	c9                   	leave  
c010ca90:	c3                   	ret    

c010ca91 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010ca91:	55                   	push   %ebp
c010ca92:	89 e5                	mov    %esp,%ebp
c010ca94:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010ca97:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca9a:	8b 00                	mov    (%eax),%eax
c010ca9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010ca9f:	8b 45 08             	mov    0x8(%ebp),%eax
c010caa2:	83 c0 04             	add    $0x4,%eax
c010caa5:	8b 00                	mov    (%eax),%eax
c010caa7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010caaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010caad:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cab1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cab4:	89 04 24             	mov    %eax,(%esp)
c010cab7:	e8 70 ef ff ff       	call   c010ba2c <do_wait>
}
c010cabc:	c9                   	leave  
c010cabd:	c3                   	ret    

c010cabe <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010cabe:	55                   	push   %ebp
c010cabf:	89 e5                	mov    %esp,%ebp
c010cac1:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010cac4:	8b 45 08             	mov    0x8(%ebp),%eax
c010cac7:	8b 00                	mov    (%eax),%eax
c010cac9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010cacc:	8b 45 08             	mov    0x8(%ebp),%eax
c010cacf:	8b 40 04             	mov    0x4(%eax),%eax
c010cad2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010cad5:	8b 45 08             	mov    0x8(%ebp),%eax
c010cad8:	83 c0 08             	add    $0x8,%eax
c010cadb:	8b 00                	mov    (%eax),%eax
c010cadd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010cae0:	8b 45 08             	mov    0x8(%ebp),%eax
c010cae3:	8b 40 0c             	mov    0xc(%eax),%eax
c010cae6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010cae9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010caec:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010caf0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010caf3:	89 44 24 08          	mov    %eax,0x8(%esp)
c010caf7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cafa:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cafe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb01:	89 04 24             	mov    %eax,(%esp)
c010cb04:	e8 d5 ed ff ff       	call   c010b8de <do_execve>
}
c010cb09:	c9                   	leave  
c010cb0a:	c3                   	ret    

c010cb0b <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010cb0b:	55                   	push   %ebp
c010cb0c:	89 e5                	mov    %esp,%ebp
c010cb0e:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010cb11:	e8 00 ef ff ff       	call   c010ba16 <do_yield>
}
c010cb16:	c9                   	leave  
c010cb17:	c3                   	ret    

c010cb18 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010cb18:	55                   	push   %ebp
c010cb19:	89 e5                	mov    %esp,%ebp
c010cb1b:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010cb1e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb21:	8b 00                	mov    (%eax),%eax
c010cb23:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010cb26:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb29:	89 04 24             	mov    %eax,(%esp)
c010cb2c:	e8 9a f0 ff ff       	call   c010bbcb <do_kill>
}
c010cb31:	c9                   	leave  
c010cb32:	c3                   	ret    

c010cb33 <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010cb33:	55                   	push   %ebp
c010cb34:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010cb36:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010cb3b:	8b 40 04             	mov    0x4(%eax),%eax
}
c010cb3e:	5d                   	pop    %ebp
c010cb3f:	c3                   	ret    

c010cb40 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010cb40:	55                   	push   %ebp
c010cb41:	89 e5                	mov    %esp,%ebp
c010cb43:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010cb46:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb49:	8b 00                	mov    (%eax),%eax
c010cb4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010cb4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb51:	89 04 24             	mov    %eax,(%esp)
c010cb54:	e8 32 38 ff ff       	call   c010038b <cputchar>
    return 0;
c010cb59:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cb5e:	c9                   	leave  
c010cb5f:	c3                   	ret    

c010cb60 <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010cb60:	55                   	push   %ebp
c010cb61:	89 e5                	mov    %esp,%ebp
c010cb63:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010cb66:	e8 af a0 ff ff       	call   c0106c1a <print_pgdir>
    return 0;
c010cb6b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cb70:	c9                   	leave  
c010cb71:	c3                   	ret    

c010cb72 <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010cb72:	55                   	push   %ebp
c010cb73:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010cb75:	a1 b8 53 1c c0       	mov    0xc01c53b8,%eax
}
c010cb7a:	5d                   	pop    %ebp
c010cb7b:	c3                   	ret    

c010cb7c <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010cb7c:	55                   	push   %ebp
c010cb7d:	89 e5                	mov    %esp,%ebp
c010cb7f:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010cb82:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb85:	8b 00                	mov    (%eax),%eax
c010cb87:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010cb8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb8d:	89 04 24             	mov    %eax,(%esp)
c010cb90:	e8 a7 f4 ff ff       	call   c010c03c <lab6_set_priority>
    return 0;
c010cb95:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cb9a:	c9                   	leave  
c010cb9b:	c3                   	ret    

c010cb9c <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010cb9c:	55                   	push   %ebp
c010cb9d:	89 e5                	mov    %esp,%ebp
c010cb9f:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010cba2:	8b 45 08             	mov    0x8(%ebp),%eax
c010cba5:	8b 00                	mov    (%eax),%eax
c010cba7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010cbaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbad:	89 04 24             	mov    %eax,(%esp)
c010cbb0:	e8 b1 f4 ff ff       	call   c010c066 <do_sleep>
}
c010cbb5:	c9                   	leave  
c010cbb6:	c3                   	ret    

c010cbb7 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010cbb7:	55                   	push   %ebp
c010cbb8:	89 e5                	mov    %esp,%ebp
c010cbba:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010cbbd:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010cbc2:	8b 40 3c             	mov    0x3c(%eax),%eax
c010cbc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010cbc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbcb:	8b 40 1c             	mov    0x1c(%eax),%eax
c010cbce:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010cbd1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cbd5:	78 60                	js     c010cc37 <syscall+0x80>
c010cbd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbda:	3d ff 00 00 00       	cmp    $0xff,%eax
c010cbdf:	77 56                	ja     c010cc37 <syscall+0x80>
        if (syscalls[num] != NULL) {
c010cbe1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbe4:	8b 04 85 c0 1a 13 c0 	mov    -0x3fece540(,%eax,4),%eax
c010cbeb:	85 c0                	test   %eax,%eax
c010cbed:	74 48                	je     c010cc37 <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010cbef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbf2:	8b 40 14             	mov    0x14(%eax),%eax
c010cbf5:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010cbf8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbfb:	8b 40 18             	mov    0x18(%eax),%eax
c010cbfe:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010cc01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc04:	8b 40 10             	mov    0x10(%eax),%eax
c010cc07:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010cc0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc0d:	8b 00                	mov    (%eax),%eax
c010cc0f:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010cc12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc15:	8b 40 04             	mov    0x4(%eax),%eax
c010cc18:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010cc1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc1e:	8b 14 85 c0 1a 13 c0 	mov    -0x3fece540(,%eax,4),%edx
c010cc25:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010cc28:	89 04 24             	mov    %eax,(%esp)
c010cc2b:	ff d2                	call   *%edx
c010cc2d:	89 c2                	mov    %eax,%edx
c010cc2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc32:	89 50 1c             	mov    %edx,0x1c(%eax)
        }
    }
    print_trapframe(tf);
    panic("undefined syscall %d, pid = %d, name = %s.\n",
            num, current->pid, current->name);
}
c010cc35:	c9                   	leave  
c010cc36:	c3                   	ret    
            arg[4] = tf->tf_regs.reg_esi;
            tf->tf_regs.reg_eax = syscalls[num](arg);
            return ;
        }
    }
    print_trapframe(tf);
c010cc37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc3a:	89 04 24             	mov    %eax,(%esp)
c010cc3d:	e8 6c 58 ff ff       	call   c01024ae <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010cc42:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010cc47:	8d 50 48             	lea    0x48(%eax),%edx
c010cc4a:	a1 28 33 1c c0       	mov    0xc01c3328,%eax
c010cc4f:	8b 40 04             	mov    0x4(%eax),%eax
c010cc52:	89 54 24 14          	mov    %edx,0x14(%esp)
c010cc56:	89 44 24 10          	mov    %eax,0x10(%esp)
c010cc5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc5d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cc61:	c7 44 24 08 84 04 11 	movl   $0xc0110484,0x8(%esp)
c010cc68:	c0 
c010cc69:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c010cc70:	00 
c010cc71:	c7 04 24 b0 04 11 c0 	movl   $0xc01104b0,(%esp)
c010cc78:	e8 3f 41 ff ff       	call   c0100dbc <__panic>
c010cc7d:	00 00                	add    %al,(%eax)
	...

c010cc80 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010cc80:	55                   	push   %ebp
c010cc81:	89 e5                	mov    %esp,%ebp
c010cc83:	53                   	push   %ebx
c010cc84:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010cc87:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc8a:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010cc90:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return (hash >> (32 - bits));
c010cc93:	b8 20 00 00 00       	mov    $0x20,%eax
c010cc98:	2b 45 0c             	sub    0xc(%ebp),%eax
c010cc9b:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010cc9e:	89 d3                	mov    %edx,%ebx
c010cca0:	89 c1                	mov    %eax,%ecx
c010cca2:	d3 eb                	shr    %cl,%ebx
c010cca4:	89 d8                	mov    %ebx,%eax
}
c010cca6:	83 c4 10             	add    $0x10,%esp
c010cca9:	5b                   	pop    %ebx
c010ccaa:	5d                   	pop    %ebp
c010ccab:	c3                   	ret    

c010ccac <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010ccac:	55                   	push   %ebp
c010ccad:	89 e5                	mov    %esp,%ebp
c010ccaf:	56                   	push   %esi
c010ccb0:	53                   	push   %ebx
c010ccb1:	83 ec 60             	sub    $0x60,%esp
c010ccb4:	8b 45 10             	mov    0x10(%ebp),%eax
c010ccb7:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010ccba:	8b 45 14             	mov    0x14(%ebp),%eax
c010ccbd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010ccc0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ccc3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ccc6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010ccc9:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010cccc:	8b 45 18             	mov    0x18(%ebp),%eax
c010cccf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010ccd2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ccd5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ccd8:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010ccdb:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010ccde:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010cce1:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010cce4:	89 d3                	mov    %edx,%ebx
c010cce6:	89 c6                	mov    %eax,%esi
c010cce8:	89 75 e0             	mov    %esi,-0x20(%ebp)
c010cceb:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010ccee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ccf1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ccf4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ccf8:	74 1c                	je     c010cd16 <printnum+0x6a>
c010ccfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ccfd:	ba 00 00 00 00       	mov    $0x0,%edx
c010cd02:	f7 75 e4             	divl   -0x1c(%ebp)
c010cd05:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010cd08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cd0b:	ba 00 00 00 00       	mov    $0x0,%edx
c010cd10:	f7 75 e4             	divl   -0x1c(%ebp)
c010cd13:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cd16:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010cd19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd1c:	89 d6                	mov    %edx,%esi
c010cd1e:	89 c3                	mov    %eax,%ebx
c010cd20:	89 f0                	mov    %esi,%eax
c010cd22:	89 da                	mov    %ebx,%edx
c010cd24:	f7 75 e4             	divl   -0x1c(%ebp)
c010cd27:	89 d3                	mov    %edx,%ebx
c010cd29:	89 c6                	mov    %eax,%esi
c010cd2b:	89 75 e0             	mov    %esi,-0x20(%ebp)
c010cd2e:	89 5d dc             	mov    %ebx,-0x24(%ebp)
c010cd31:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cd34:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010cd37:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010cd3a:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c010cd3d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010cd40:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010cd43:	89 c3                	mov    %eax,%ebx
c010cd45:	89 d6                	mov    %edx,%esi
c010cd47:	89 5d e8             	mov    %ebx,-0x18(%ebp)
c010cd4a:	89 75 ec             	mov    %esi,-0x14(%ebp)
c010cd4d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cd50:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010cd53:	8b 45 18             	mov    0x18(%ebp),%eax
c010cd56:	ba 00 00 00 00       	mov    $0x0,%edx
c010cd5b:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010cd5e:	77 56                	ja     c010cdb6 <printnum+0x10a>
c010cd60:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010cd63:	72 05                	jb     c010cd6a <printnum+0xbe>
c010cd65:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010cd68:	77 4c                	ja     c010cdb6 <printnum+0x10a>
        printnum(putch, putdat, result, base, width - 1, padc);
c010cd6a:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010cd6d:	8d 50 ff             	lea    -0x1(%eax),%edx
c010cd70:	8b 45 20             	mov    0x20(%ebp),%eax
c010cd73:	89 44 24 18          	mov    %eax,0x18(%esp)
c010cd77:	89 54 24 14          	mov    %edx,0x14(%esp)
c010cd7b:	8b 45 18             	mov    0x18(%ebp),%eax
c010cd7e:	89 44 24 10          	mov    %eax,0x10(%esp)
c010cd82:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cd85:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cd88:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cd8c:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010cd90:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cd93:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd97:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd9a:	89 04 24             	mov    %eax,(%esp)
c010cd9d:	e8 0a ff ff ff       	call   c010ccac <printnum>
c010cda2:	eb 1c                	jmp    c010cdc0 <printnum+0x114>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010cda4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cda7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cdab:	8b 45 20             	mov    0x20(%ebp),%eax
c010cdae:	89 04 24             	mov    %eax,(%esp)
c010cdb1:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdb4:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010cdb6:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010cdba:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010cdbe:	7f e4                	jg     c010cda4 <printnum+0xf8>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010cdc0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cdc3:	05 e4 05 11 c0       	add    $0xc01105e4,%eax
c010cdc8:	0f b6 00             	movzbl (%eax),%eax
c010cdcb:	0f be c0             	movsbl %al,%eax
c010cdce:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cdd1:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cdd5:	89 04 24             	mov    %eax,(%esp)
c010cdd8:	8b 45 08             	mov    0x8(%ebp),%eax
c010cddb:	ff d0                	call   *%eax
}
c010cddd:	83 c4 60             	add    $0x60,%esp
c010cde0:	5b                   	pop    %ebx
c010cde1:	5e                   	pop    %esi
c010cde2:	5d                   	pop    %ebp
c010cde3:	c3                   	ret    

c010cde4 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010cde4:	55                   	push   %ebp
c010cde5:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010cde7:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010cdeb:	7e 14                	jle    c010ce01 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010cded:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdf0:	8b 00                	mov    (%eax),%eax
c010cdf2:	8d 48 08             	lea    0x8(%eax),%ecx
c010cdf5:	8b 55 08             	mov    0x8(%ebp),%edx
c010cdf8:	89 0a                	mov    %ecx,(%edx)
c010cdfa:	8b 50 04             	mov    0x4(%eax),%edx
c010cdfd:	8b 00                	mov    (%eax),%eax
c010cdff:	eb 30                	jmp    c010ce31 <getuint+0x4d>
    }
    else if (lflag) {
c010ce01:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ce05:	74 16                	je     c010ce1d <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010ce07:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce0a:	8b 00                	mov    (%eax),%eax
c010ce0c:	8d 48 04             	lea    0x4(%eax),%ecx
c010ce0f:	8b 55 08             	mov    0x8(%ebp),%edx
c010ce12:	89 0a                	mov    %ecx,(%edx)
c010ce14:	8b 00                	mov    (%eax),%eax
c010ce16:	ba 00 00 00 00       	mov    $0x0,%edx
c010ce1b:	eb 14                	jmp    c010ce31 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010ce1d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce20:	8b 00                	mov    (%eax),%eax
c010ce22:	8d 48 04             	lea    0x4(%eax),%ecx
c010ce25:	8b 55 08             	mov    0x8(%ebp),%edx
c010ce28:	89 0a                	mov    %ecx,(%edx)
c010ce2a:	8b 00                	mov    (%eax),%eax
c010ce2c:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010ce31:	5d                   	pop    %ebp
c010ce32:	c3                   	ret    

c010ce33 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010ce33:	55                   	push   %ebp
c010ce34:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010ce36:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010ce3a:	7e 14                	jle    c010ce50 <getint+0x1d>
        return va_arg(*ap, long long);
c010ce3c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce3f:	8b 00                	mov    (%eax),%eax
c010ce41:	8d 48 08             	lea    0x8(%eax),%ecx
c010ce44:	8b 55 08             	mov    0x8(%ebp),%edx
c010ce47:	89 0a                	mov    %ecx,(%edx)
c010ce49:	8b 50 04             	mov    0x4(%eax),%edx
c010ce4c:	8b 00                	mov    (%eax),%eax
c010ce4e:	eb 30                	jmp    c010ce80 <getint+0x4d>
    }
    else if (lflag) {
c010ce50:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010ce54:	74 16                	je     c010ce6c <getint+0x39>
        return va_arg(*ap, long);
c010ce56:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce59:	8b 00                	mov    (%eax),%eax
c010ce5b:	8d 48 04             	lea    0x4(%eax),%ecx
c010ce5e:	8b 55 08             	mov    0x8(%ebp),%edx
c010ce61:	89 0a                	mov    %ecx,(%edx)
c010ce63:	8b 00                	mov    (%eax),%eax
c010ce65:	89 c2                	mov    %eax,%edx
c010ce67:	c1 fa 1f             	sar    $0x1f,%edx
c010ce6a:	eb 14                	jmp    c010ce80 <getint+0x4d>
    }
    else {
        return va_arg(*ap, int);
c010ce6c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce6f:	8b 00                	mov    (%eax),%eax
c010ce71:	8d 48 04             	lea    0x4(%eax),%ecx
c010ce74:	8b 55 08             	mov    0x8(%ebp),%edx
c010ce77:	89 0a                	mov    %ecx,(%edx)
c010ce79:	8b 00                	mov    (%eax),%eax
c010ce7b:	89 c2                	mov    %eax,%edx
c010ce7d:	c1 fa 1f             	sar    $0x1f,%edx
    }
}
c010ce80:	5d                   	pop    %ebp
c010ce81:	c3                   	ret    

c010ce82 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010ce82:	55                   	push   %ebp
c010ce83:	89 e5                	mov    %esp,%ebp
c010ce85:	83 ec 28             	sub    $0x28,%esp
    va_list ap;

    va_start(ap, fmt);
c010ce88:	8d 55 14             	lea    0x14(%ebp),%edx
c010ce8b:	8d 45 f4             	lea    -0xc(%ebp),%eax
c010ce8e:	89 10                	mov    %edx,(%eax)
    vprintfmt(putch, putdat, fmt, ap);
c010ce90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce93:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ce97:	8b 45 10             	mov    0x10(%ebp),%eax
c010ce9a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ce9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cea1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cea5:	8b 45 08             	mov    0x8(%ebp),%eax
c010cea8:	89 04 24             	mov    %eax,(%esp)
c010ceab:	e8 02 00 00 00       	call   c010ceb2 <vprintfmt>
    va_end(ap);
}
c010ceb0:	c9                   	leave  
c010ceb1:	c3                   	ret    

c010ceb2 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010ceb2:	55                   	push   %ebp
c010ceb3:	89 e5                	mov    %esp,%ebp
c010ceb5:	56                   	push   %esi
c010ceb6:	53                   	push   %ebx
c010ceb7:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010ceba:	eb 17                	jmp    c010ced3 <vprintfmt+0x21>
            if (ch == '\0') {
c010cebc:	85 db                	test   %ebx,%ebx
c010cebe:	0f 84 db 03 00 00    	je     c010d29f <vprintfmt+0x3ed>
                return;
            }
            putch(ch, putdat);
c010cec4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cec7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cecb:	89 1c 24             	mov    %ebx,(%esp)
c010cece:	8b 45 08             	mov    0x8(%ebp),%eax
c010ced1:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010ced3:	8b 45 10             	mov    0x10(%ebp),%eax
c010ced6:	0f b6 00             	movzbl (%eax),%eax
c010ced9:	0f b6 d8             	movzbl %al,%ebx
c010cedc:	83 fb 25             	cmp    $0x25,%ebx
c010cedf:	0f 95 c0             	setne  %al
c010cee2:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c010cee6:	84 c0                	test   %al,%al
c010cee8:	75 d2                	jne    c010cebc <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010ceea:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010ceee:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010cef5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010cef8:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010cefb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010cf02:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cf05:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cf08:	eb 04                	jmp    c010cf0e <vprintfmt+0x5c>
            goto process_precision;

        case '.':
            if (width < 0)
                width = 0;
            goto reswitch;
c010cf0a:	90                   	nop
c010cf0b:	eb 01                	jmp    c010cf0e <vprintfmt+0x5c>
            goto reswitch;

        process_precision:
            if (width < 0)
                width = precision, precision = -1;
            goto reswitch;
c010cf0d:	90                   	nop
        char padc = ' ';
        width = precision = -1;
        lflag = altflag = 0;

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010cf0e:	8b 45 10             	mov    0x10(%ebp),%eax
c010cf11:	0f b6 00             	movzbl (%eax),%eax
c010cf14:	0f b6 d8             	movzbl %al,%ebx
c010cf17:	89 d8                	mov    %ebx,%eax
c010cf19:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c010cf1d:	83 e8 23             	sub    $0x23,%eax
c010cf20:	83 f8 55             	cmp    $0x55,%eax
c010cf23:	0f 87 45 03 00 00    	ja     c010d26e <vprintfmt+0x3bc>
c010cf29:	8b 04 85 08 06 11 c0 	mov    -0x3feef9f8(,%eax,4),%eax
c010cf30:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010cf32:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010cf36:	eb d6                	jmp    c010cf0e <vprintfmt+0x5c>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010cf38:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010cf3c:	eb d0                	jmp    c010cf0e <vprintfmt+0x5c>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010cf3e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010cf45:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010cf48:	89 d0                	mov    %edx,%eax
c010cf4a:	c1 e0 02             	shl    $0x2,%eax
c010cf4d:	01 d0                	add    %edx,%eax
c010cf4f:	01 c0                	add    %eax,%eax
c010cf51:	01 d8                	add    %ebx,%eax
c010cf53:	83 e8 30             	sub    $0x30,%eax
c010cf56:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010cf59:	8b 45 10             	mov    0x10(%ebp),%eax
c010cf5c:	0f b6 00             	movzbl (%eax),%eax
c010cf5f:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010cf62:	83 fb 2f             	cmp    $0x2f,%ebx
c010cf65:	7e 39                	jle    c010cfa0 <vprintfmt+0xee>
c010cf67:	83 fb 39             	cmp    $0x39,%ebx
c010cf6a:	7f 34                	jg     c010cfa0 <vprintfmt+0xee>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010cf6c:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010cf70:	eb d3                	jmp    c010cf45 <vprintfmt+0x93>
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
c010cf72:	8b 45 14             	mov    0x14(%ebp),%eax
c010cf75:	8d 50 04             	lea    0x4(%eax),%edx
c010cf78:	89 55 14             	mov    %edx,0x14(%ebp)
c010cf7b:	8b 00                	mov    (%eax),%eax
c010cf7d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010cf80:	eb 1f                	jmp    c010cfa1 <vprintfmt+0xef>

        case '.':
            if (width < 0)
c010cf82:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cf86:	79 82                	jns    c010cf0a <vprintfmt+0x58>
                width = 0;
c010cf88:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010cf8f:	e9 76 ff ff ff       	jmp    c010cf0a <vprintfmt+0x58>

        case '#':
            altflag = 1;
c010cf94:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010cf9b:	e9 6e ff ff ff       	jmp    c010cf0e <vprintfmt+0x5c>
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
            goto process_precision;
c010cfa0:	90                   	nop
        case '#':
            altflag = 1;
            goto reswitch;

        process_precision:
            if (width < 0)
c010cfa1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010cfa5:	0f 89 62 ff ff ff    	jns    c010cf0d <vprintfmt+0x5b>
                width = precision, precision = -1;
c010cfab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010cfae:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cfb1:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010cfb8:	e9 50 ff ff ff       	jmp    c010cf0d <vprintfmt+0x5b>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010cfbd:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010cfc1:	e9 48 ff ff ff       	jmp    c010cf0e <vprintfmt+0x5c>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010cfc6:	8b 45 14             	mov    0x14(%ebp),%eax
c010cfc9:	8d 50 04             	lea    0x4(%eax),%edx
c010cfcc:	89 55 14             	mov    %edx,0x14(%ebp)
c010cfcf:	8b 00                	mov    (%eax),%eax
c010cfd1:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cfd4:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cfd8:	89 04 24             	mov    %eax,(%esp)
c010cfdb:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfde:	ff d0                	call   *%eax
            break;
c010cfe0:	e9 b4 02 00 00       	jmp    c010d299 <vprintfmt+0x3e7>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010cfe5:	8b 45 14             	mov    0x14(%ebp),%eax
c010cfe8:	8d 50 04             	lea    0x4(%eax),%edx
c010cfeb:	89 55 14             	mov    %edx,0x14(%ebp)
c010cfee:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010cff0:	85 db                	test   %ebx,%ebx
c010cff2:	79 02                	jns    c010cff6 <vprintfmt+0x144>
                err = -err;
c010cff4:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010cff6:	83 fb 18             	cmp    $0x18,%ebx
c010cff9:	7f 0b                	jg     c010d006 <vprintfmt+0x154>
c010cffb:	8b 34 9d 80 05 11 c0 	mov    -0x3feefa80(,%ebx,4),%esi
c010d002:	85 f6                	test   %esi,%esi
c010d004:	75 23                	jne    c010d029 <vprintfmt+0x177>
                printfmt(putch, putdat, "error %d", err);
c010d006:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010d00a:	c7 44 24 08 f5 05 11 	movl   $0xc01105f5,0x8(%esp)
c010d011:	c0 
c010d012:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d015:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d019:	8b 45 08             	mov    0x8(%ebp),%eax
c010d01c:	89 04 24             	mov    %eax,(%esp)
c010d01f:	e8 5e fe ff ff       	call   c010ce82 <printfmt>
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010d024:	e9 70 02 00 00       	jmp    c010d299 <vprintfmt+0x3e7>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010d029:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d02d:	c7 44 24 08 fe 05 11 	movl   $0xc01105fe,0x8(%esp)
c010d034:	c0 
c010d035:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d038:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d03c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d03f:	89 04 24             	mov    %eax,(%esp)
c010d042:	e8 3b fe ff ff       	call   c010ce82 <printfmt>
            }
            break;
c010d047:	e9 4d 02 00 00       	jmp    c010d299 <vprintfmt+0x3e7>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010d04c:	8b 45 14             	mov    0x14(%ebp),%eax
c010d04f:	8d 50 04             	lea    0x4(%eax),%edx
c010d052:	89 55 14             	mov    %edx,0x14(%ebp)
c010d055:	8b 30                	mov    (%eax),%esi
c010d057:	85 f6                	test   %esi,%esi
c010d059:	75 05                	jne    c010d060 <vprintfmt+0x1ae>
                p = "(null)";
c010d05b:	be 01 06 11 c0       	mov    $0xc0110601,%esi
            }
            if (width > 0 && padc != '-') {
c010d060:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d064:	7e 7c                	jle    c010d0e2 <vprintfmt+0x230>
c010d066:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010d06a:	74 76                	je     c010d0e2 <vprintfmt+0x230>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010d06c:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c010d06f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d072:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d076:	89 34 24             	mov    %esi,(%esp)
c010d079:	e8 25 04 00 00       	call   c010d4a3 <strnlen>
c010d07e:	89 da                	mov    %ebx,%edx
c010d080:	29 c2                	sub    %eax,%edx
c010d082:	89 d0                	mov    %edx,%eax
c010d084:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d087:	eb 17                	jmp    c010d0a0 <vprintfmt+0x1ee>
                    putch(padc, putdat);
c010d089:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010d08d:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d090:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d094:	89 04 24             	mov    %eax,(%esp)
c010d097:	8b 45 08             	mov    0x8(%ebp),%eax
c010d09a:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010d09c:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010d0a0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d0a4:	7f e3                	jg     c010d089 <vprintfmt+0x1d7>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010d0a6:	eb 3a                	jmp    c010d0e2 <vprintfmt+0x230>
                if (altflag && (ch < ' ' || ch > '~')) {
c010d0a8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010d0ac:	74 1f                	je     c010d0cd <vprintfmt+0x21b>
c010d0ae:	83 fb 1f             	cmp    $0x1f,%ebx
c010d0b1:	7e 05                	jle    c010d0b8 <vprintfmt+0x206>
c010d0b3:	83 fb 7e             	cmp    $0x7e,%ebx
c010d0b6:	7e 15                	jle    c010d0cd <vprintfmt+0x21b>
                    putch('?', putdat);
c010d0b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d0bb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d0bf:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c010d0c6:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0c9:	ff d0                	call   *%eax
c010d0cb:	eb 0f                	jmp    c010d0dc <vprintfmt+0x22a>
                }
                else {
                    putch(ch, putdat);
c010d0cd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d0d0:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d0d4:	89 1c 24             	mov    %ebx,(%esp)
c010d0d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0da:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010d0dc:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010d0e0:	eb 01                	jmp    c010d0e3 <vprintfmt+0x231>
c010d0e2:	90                   	nop
c010d0e3:	0f b6 06             	movzbl (%esi),%eax
c010d0e6:	0f be d8             	movsbl %al,%ebx
c010d0e9:	85 db                	test   %ebx,%ebx
c010d0eb:	0f 95 c0             	setne  %al
c010d0ee:	83 c6 01             	add    $0x1,%esi
c010d0f1:	84 c0                	test   %al,%al
c010d0f3:	74 29                	je     c010d11e <vprintfmt+0x26c>
c010d0f5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010d0f9:	78 ad                	js     c010d0a8 <vprintfmt+0x1f6>
c010d0fb:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010d0ff:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010d103:	79 a3                	jns    c010d0a8 <vprintfmt+0x1f6>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010d105:	eb 17                	jmp    c010d11e <vprintfmt+0x26c>
                putch(' ', putdat);
c010d107:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d10a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d10e:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010d115:	8b 45 08             	mov    0x8(%ebp),%eax
c010d118:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010d11a:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010d11e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d122:	7f e3                	jg     c010d107 <vprintfmt+0x255>
                putch(' ', putdat);
            }
            break;
c010d124:	e9 70 01 00 00       	jmp    c010d299 <vprintfmt+0x3e7>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010d129:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d12c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d130:	8d 45 14             	lea    0x14(%ebp),%eax
c010d133:	89 04 24             	mov    %eax,(%esp)
c010d136:	e8 f8 fc ff ff       	call   c010ce33 <getint>
c010d13b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d13e:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010d141:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d144:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d147:	85 d2                	test   %edx,%edx
c010d149:	79 26                	jns    c010d171 <vprintfmt+0x2bf>
                putch('-', putdat);
c010d14b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d14e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d152:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c010d159:	8b 45 08             	mov    0x8(%ebp),%eax
c010d15c:	ff d0                	call   *%eax
                num = -(long long)num;
c010d15e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d161:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d164:	f7 d8                	neg    %eax
c010d166:	83 d2 00             	adc    $0x0,%edx
c010d169:	f7 da                	neg    %edx
c010d16b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d16e:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010d171:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010d178:	e9 a8 00 00 00       	jmp    c010d225 <vprintfmt+0x373>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010d17d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d180:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d184:	8d 45 14             	lea    0x14(%ebp),%eax
c010d187:	89 04 24             	mov    %eax,(%esp)
c010d18a:	e8 55 fc ff ff       	call   c010cde4 <getuint>
c010d18f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d192:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010d195:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010d19c:	e9 84 00 00 00       	jmp    c010d225 <vprintfmt+0x373>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010d1a1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d1a4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d1a8:	8d 45 14             	lea    0x14(%ebp),%eax
c010d1ab:	89 04 24             	mov    %eax,(%esp)
c010d1ae:	e8 31 fc ff ff       	call   c010cde4 <getuint>
c010d1b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d1b6:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010d1b9:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010d1c0:	eb 63                	jmp    c010d225 <vprintfmt+0x373>

        // pointer
        case 'p':
            putch('0', putdat);
c010d1c2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d1c5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d1c9:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c010d1d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1d3:	ff d0                	call   *%eax
            putch('x', putdat);
c010d1d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d1d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d1dc:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c010d1e3:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1e6:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010d1e8:	8b 45 14             	mov    0x14(%ebp),%eax
c010d1eb:	8d 50 04             	lea    0x4(%eax),%edx
c010d1ee:	89 55 14             	mov    %edx,0x14(%ebp)
c010d1f1:	8b 00                	mov    (%eax),%eax
c010d1f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d1f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010d1fd:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010d204:	eb 1f                	jmp    c010d225 <vprintfmt+0x373>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010d206:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d209:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d20d:	8d 45 14             	lea    0x14(%ebp),%eax
c010d210:	89 04 24             	mov    %eax,(%esp)
c010d213:	e8 cc fb ff ff       	call   c010cde4 <getuint>
c010d218:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d21b:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010d21e:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010d225:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010d229:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d22c:	89 54 24 18          	mov    %edx,0x18(%esp)
c010d230:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d233:	89 54 24 14          	mov    %edx,0x14(%esp)
c010d237:	89 44 24 10          	mov    %eax,0x10(%esp)
c010d23b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d23e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d241:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d245:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010d249:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d24c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d250:	8b 45 08             	mov    0x8(%ebp),%eax
c010d253:	89 04 24             	mov    %eax,(%esp)
c010d256:	e8 51 fa ff ff       	call   c010ccac <printnum>
            break;
c010d25b:	eb 3c                	jmp    c010d299 <vprintfmt+0x3e7>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010d25d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d260:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d264:	89 1c 24             	mov    %ebx,(%esp)
c010d267:	8b 45 08             	mov    0x8(%ebp),%eax
c010d26a:	ff d0                	call   *%eax
            break;
c010d26c:	eb 2b                	jmp    c010d299 <vprintfmt+0x3e7>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010d26e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d271:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d275:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010d27c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d27f:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c010d281:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d285:	eb 04                	jmp    c010d28b <vprintfmt+0x3d9>
c010d287:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d28b:	8b 45 10             	mov    0x10(%ebp),%eax
c010d28e:	83 e8 01             	sub    $0x1,%eax
c010d291:	0f b6 00             	movzbl (%eax),%eax
c010d294:	3c 25                	cmp    $0x25,%al
c010d296:	75 ef                	jne    c010d287 <vprintfmt+0x3d5>
                /* do nothing */;
            break;
c010d298:	90                   	nop
        }
    }
c010d299:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010d29a:	e9 34 fc ff ff       	jmp    c010ced3 <vprintfmt+0x21>
            if (ch == '\0') {
                return;
c010d29f:	90                   	nop
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010d2a0:	83 c4 40             	add    $0x40,%esp
c010d2a3:	5b                   	pop    %ebx
c010d2a4:	5e                   	pop    %esi
c010d2a5:	5d                   	pop    %ebp
c010d2a6:	c3                   	ret    

c010d2a7 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010d2a7:	55                   	push   %ebp
c010d2a8:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010d2aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2ad:	8b 40 08             	mov    0x8(%eax),%eax
c010d2b0:	8d 50 01             	lea    0x1(%eax),%edx
c010d2b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2b6:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010d2b9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2bc:	8b 10                	mov    (%eax),%edx
c010d2be:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2c1:	8b 40 04             	mov    0x4(%eax),%eax
c010d2c4:	39 c2                	cmp    %eax,%edx
c010d2c6:	73 12                	jae    c010d2da <sprintputch+0x33>
        *b->buf ++ = ch;
c010d2c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2cb:	8b 00                	mov    (%eax),%eax
c010d2cd:	8b 55 08             	mov    0x8(%ebp),%edx
c010d2d0:	88 10                	mov    %dl,(%eax)
c010d2d2:	8d 50 01             	lea    0x1(%eax),%edx
c010d2d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2d8:	89 10                	mov    %edx,(%eax)
    }
}
c010d2da:	5d                   	pop    %ebp
c010d2db:	c3                   	ret    

c010d2dc <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010d2dc:	55                   	push   %ebp
c010d2dd:	89 e5                	mov    %esp,%ebp
c010d2df:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010d2e2:	8d 55 14             	lea    0x14(%ebp),%edx
c010d2e5:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010d2e8:	89 10                	mov    %edx,(%eax)
    cnt = vsnprintf(str, size, fmt, ap);
c010d2ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d2ed:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d2f1:	8b 45 10             	mov    0x10(%ebp),%eax
c010d2f4:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d2f8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d2ff:	8b 45 08             	mov    0x8(%ebp),%eax
c010d302:	89 04 24             	mov    %eax,(%esp)
c010d305:	e8 08 00 00 00       	call   c010d312 <vsnprintf>
c010d30a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010d30d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d310:	c9                   	leave  
c010d311:	c3                   	ret    

c010d312 <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010d312:	55                   	push   %ebp
c010d313:	89 e5                	mov    %esp,%ebp
c010d315:	83 ec 28             	sub    $0x28,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010d318:	8b 45 08             	mov    0x8(%ebp),%eax
c010d31b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d31e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d321:	83 e8 01             	sub    $0x1,%eax
c010d324:	03 45 08             	add    0x8(%ebp),%eax
c010d327:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d32a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010d331:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d335:	74 0a                	je     c010d341 <vsnprintf+0x2f>
c010d337:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d33a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d33d:	39 c2                	cmp    %eax,%edx
c010d33f:	76 07                	jbe    c010d348 <vsnprintf+0x36>
        return -E_INVAL;
c010d341:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d346:	eb 2a                	jmp    c010d372 <vsnprintf+0x60>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010d348:	8b 45 14             	mov    0x14(%ebp),%eax
c010d34b:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d34f:	8b 45 10             	mov    0x10(%ebp),%eax
c010d352:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d356:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010d359:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d35d:	c7 04 24 a7 d2 10 c0 	movl   $0xc010d2a7,(%esp)
c010d364:	e8 49 fb ff ff       	call   c010ceb2 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c010d369:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d36c:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010d36f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d372:	c9                   	leave  
c010d373:	c3                   	ret    

c010d374 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010d374:	55                   	push   %ebp
c010d375:	89 e5                	mov    %esp,%ebp
c010d377:	57                   	push   %edi
c010d378:	56                   	push   %esi
c010d379:	53                   	push   %ebx
c010d37a:	83 ec 34             	sub    $0x34,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010d37d:	a1 c0 1e 13 c0       	mov    0xc0131ec0,%eax
c010d382:	8b 15 c4 1e 13 c0    	mov    0xc0131ec4,%edx
c010d388:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010d38e:	6b c8 05             	imul   $0x5,%eax,%ecx
c010d391:	01 cf                	add    %ecx,%edi
c010d393:	b9 6d e6 ec de       	mov    $0xdeece66d,%ecx
c010d398:	f7 e1                	mul    %ecx
c010d39a:	8d 0c 17             	lea    (%edi,%edx,1),%ecx
c010d39d:	89 ca                	mov    %ecx,%edx
c010d39f:	83 c0 0b             	add    $0xb,%eax
c010d3a2:	83 d2 00             	adc    $0x0,%edx
c010d3a5:	89 c3                	mov    %eax,%ebx
c010d3a7:	80 e7 ff             	and    $0xff,%bh
c010d3aa:	0f b7 f2             	movzwl %dx,%esi
c010d3ad:	89 1d c0 1e 13 c0    	mov    %ebx,0xc0131ec0
c010d3b3:	89 35 c4 1e 13 c0    	mov    %esi,0xc0131ec4
    unsigned long long result = (next >> 12);
c010d3b9:	a1 c0 1e 13 c0       	mov    0xc0131ec0,%eax
c010d3be:	8b 15 c4 1e 13 c0    	mov    0xc0131ec4,%edx
c010d3c4:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010d3c8:	c1 ea 0c             	shr    $0xc,%edx
c010d3cb:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d3ce:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010d3d1:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010d3d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d3db:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d3de:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010d3e1:	89 55 cc             	mov    %edx,-0x34(%ebp)
c010d3e4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d3e7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010d3ea:	89 d3                	mov    %edx,%ebx
c010d3ec:	89 c6                	mov    %eax,%esi
c010d3ee:	89 75 d8             	mov    %esi,-0x28(%ebp)
c010d3f1:	89 5d e8             	mov    %ebx,-0x18(%ebp)
c010d3f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d3f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d3fa:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d3fe:	74 1c                	je     c010d41c <rand+0xa8>
c010d400:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d403:	ba 00 00 00 00       	mov    $0x0,%edx
c010d408:	f7 75 dc             	divl   -0x24(%ebp)
c010d40b:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010d40e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d411:	ba 00 00 00 00       	mov    $0x0,%edx
c010d416:	f7 75 dc             	divl   -0x24(%ebp)
c010d419:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d41c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d41f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d422:	89 d6                	mov    %edx,%esi
c010d424:	89 c3                	mov    %eax,%ebx
c010d426:	89 f0                	mov    %esi,%eax
c010d428:	89 da                	mov    %ebx,%edx
c010d42a:	f7 75 dc             	divl   -0x24(%ebp)
c010d42d:	89 d3                	mov    %edx,%ebx
c010d42f:	89 c6                	mov    %eax,%esi
c010d431:	89 75 d8             	mov    %esi,-0x28(%ebp)
c010d434:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
c010d437:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d43a:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010d43d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d440:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c010d443:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010d446:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010d449:	89 c3                	mov    %eax,%ebx
c010d44b:	89 d6                	mov    %edx,%esi
c010d44d:	89 5d e0             	mov    %ebx,-0x20(%ebp)
c010d450:	89 75 e4             	mov    %esi,-0x1c(%ebp)
c010d453:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010d456:	83 c4 34             	add    $0x34,%esp
c010d459:	5b                   	pop    %ebx
c010d45a:	5e                   	pop    %esi
c010d45b:	5f                   	pop    %edi
c010d45c:	5d                   	pop    %ebp
c010d45d:	c3                   	ret    

c010d45e <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010d45e:	55                   	push   %ebp
c010d45f:	89 e5                	mov    %esp,%ebp
    next = seed;
c010d461:	8b 45 08             	mov    0x8(%ebp),%eax
c010d464:	ba 00 00 00 00       	mov    $0x0,%edx
c010d469:	a3 c0 1e 13 c0       	mov    %eax,0xc0131ec0
c010d46e:	89 15 c4 1e 13 c0    	mov    %edx,0xc0131ec4
}
c010d474:	5d                   	pop    %ebp
c010d475:	c3                   	ret    
	...

c010d478 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010d478:	55                   	push   %ebp
c010d479:	89 e5                	mov    %esp,%ebp
c010d47b:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010d47e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010d485:	eb 04                	jmp    c010d48b <strlen+0x13>
        cnt ++;
c010d487:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010d48b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d48e:	0f b6 00             	movzbl (%eax),%eax
c010d491:	84 c0                	test   %al,%al
c010d493:	0f 95 c0             	setne  %al
c010d496:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d49a:	84 c0                	test   %al,%al
c010d49c:	75 e9                	jne    c010d487 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010d49e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010d4a1:	c9                   	leave  
c010d4a2:	c3                   	ret    

c010d4a3 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010d4a3:	55                   	push   %ebp
c010d4a4:	89 e5                	mov    %esp,%ebp
c010d4a6:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010d4a9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010d4b0:	eb 04                	jmp    c010d4b6 <strnlen+0x13>
        cnt ++;
c010d4b2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010d4b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d4b9:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d4bc:	73 13                	jae    c010d4d1 <strnlen+0x2e>
c010d4be:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4c1:	0f b6 00             	movzbl (%eax),%eax
c010d4c4:	84 c0                	test   %al,%al
c010d4c6:	0f 95 c0             	setne  %al
c010d4c9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d4cd:	84 c0                	test   %al,%al
c010d4cf:	75 e1                	jne    c010d4b2 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010d4d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010d4d4:	c9                   	leave  
c010d4d5:	c3                   	ret    

c010d4d6 <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010d4d6:	55                   	push   %ebp
c010d4d7:	89 e5                	mov    %esp,%ebp
c010d4d9:	57                   	push   %edi
c010d4da:	56                   	push   %esi
c010d4db:	53                   	push   %ebx
c010d4dc:	83 ec 24             	sub    $0x24,%esp
c010d4df:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d4e5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d4e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010d4eb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d4ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d4f1:	89 d6                	mov    %edx,%esi
c010d4f3:	89 c3                	mov    %eax,%ebx
c010d4f5:	89 df                	mov    %ebx,%edi
c010d4f7:	ac                   	lods   %ds:(%esi),%al
c010d4f8:	aa                   	stos   %al,%es:(%edi)
c010d4f9:	84 c0                	test   %al,%al
c010d4fb:	75 fa                	jne    c010d4f7 <strcpy+0x21>
c010d4fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010d500:	89 fb                	mov    %edi,%ebx
c010d502:	89 75 e8             	mov    %esi,-0x18(%ebp)
c010d505:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
c010d508:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d50b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010d50e:	8b 45 f0             	mov    -0x10(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010d511:	83 c4 24             	add    $0x24,%esp
c010d514:	5b                   	pop    %ebx
c010d515:	5e                   	pop    %esi
c010d516:	5f                   	pop    %edi
c010d517:	5d                   	pop    %ebp
c010d518:	c3                   	ret    

c010d519 <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010d519:	55                   	push   %ebp
c010d51a:	89 e5                	mov    %esp,%ebp
c010d51c:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010d51f:	8b 45 08             	mov    0x8(%ebp),%eax
c010d522:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010d525:	eb 21                	jmp    c010d548 <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010d527:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d52a:	0f b6 10             	movzbl (%eax),%edx
c010d52d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d530:	88 10                	mov    %dl,(%eax)
c010d532:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d535:	0f b6 00             	movzbl (%eax),%eax
c010d538:	84 c0                	test   %al,%al
c010d53a:	74 04                	je     c010d540 <strncpy+0x27>
            src ++;
c010d53c:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010d540:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010d544:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010d548:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d54c:	75 d9                	jne    c010d527 <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010d54e:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010d551:	c9                   	leave  
c010d552:	c3                   	ret    

c010d553 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010d553:	55                   	push   %ebp
c010d554:	89 e5                	mov    %esp,%ebp
c010d556:	57                   	push   %edi
c010d557:	56                   	push   %esi
c010d558:	53                   	push   %ebx
c010d559:	83 ec 24             	sub    $0x24,%esp
c010d55c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d55f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d562:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d565:	89 45 ec             	mov    %eax,-0x14(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010d568:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d56b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d56e:	89 d6                	mov    %edx,%esi
c010d570:	89 c3                	mov    %eax,%ebx
c010d572:	89 df                	mov    %ebx,%edi
c010d574:	ac                   	lods   %ds:(%esi),%al
c010d575:	ae                   	scas   %es:(%edi),%al
c010d576:	75 08                	jne    c010d580 <strcmp+0x2d>
c010d578:	84 c0                	test   %al,%al
c010d57a:	75 f8                	jne    c010d574 <strcmp+0x21>
c010d57c:	31 c0                	xor    %eax,%eax
c010d57e:	eb 04                	jmp    c010d584 <strcmp+0x31>
c010d580:	19 c0                	sbb    %eax,%eax
c010d582:	0c 01                	or     $0x1,%al
c010d584:	89 fb                	mov    %edi,%ebx
c010d586:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010d589:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d58c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d58f:	89 75 e4             	mov    %esi,-0x1c(%ebp)
c010d592:	89 5d e0             	mov    %ebx,-0x20(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010d595:	8b 45 e8             	mov    -0x18(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010d598:	83 c4 24             	add    $0x24,%esp
c010d59b:	5b                   	pop    %ebx
c010d59c:	5e                   	pop    %esi
c010d59d:	5f                   	pop    %edi
c010d59e:	5d                   	pop    %ebp
c010d59f:	c3                   	ret    

c010d5a0 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010d5a0:	55                   	push   %ebp
c010d5a1:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010d5a3:	eb 0c                	jmp    c010d5b1 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010d5a5:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d5a9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d5ad:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010d5b1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d5b5:	74 1a                	je     c010d5d1 <strncmp+0x31>
c010d5b7:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5ba:	0f b6 00             	movzbl (%eax),%eax
c010d5bd:	84 c0                	test   %al,%al
c010d5bf:	74 10                	je     c010d5d1 <strncmp+0x31>
c010d5c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5c4:	0f b6 10             	movzbl (%eax),%edx
c010d5c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d5ca:	0f b6 00             	movzbl (%eax),%eax
c010d5cd:	38 c2                	cmp    %al,%dl
c010d5cf:	74 d4                	je     c010d5a5 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010d5d1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d5d5:	74 1a                	je     c010d5f1 <strncmp+0x51>
c010d5d7:	8b 45 08             	mov    0x8(%ebp),%eax
c010d5da:	0f b6 00             	movzbl (%eax),%eax
c010d5dd:	0f b6 d0             	movzbl %al,%edx
c010d5e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d5e3:	0f b6 00             	movzbl (%eax),%eax
c010d5e6:	0f b6 c0             	movzbl %al,%eax
c010d5e9:	89 d1                	mov    %edx,%ecx
c010d5eb:	29 c1                	sub    %eax,%ecx
c010d5ed:	89 c8                	mov    %ecx,%eax
c010d5ef:	eb 05                	jmp    c010d5f6 <strncmp+0x56>
c010d5f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d5f6:	5d                   	pop    %ebp
c010d5f7:	c3                   	ret    

c010d5f8 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010d5f8:	55                   	push   %ebp
c010d5f9:	89 e5                	mov    %esp,%ebp
c010d5fb:	83 ec 04             	sub    $0x4,%esp
c010d5fe:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d601:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010d604:	eb 14                	jmp    c010d61a <strchr+0x22>
        if (*s == c) {
c010d606:	8b 45 08             	mov    0x8(%ebp),%eax
c010d609:	0f b6 00             	movzbl (%eax),%eax
c010d60c:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010d60f:	75 05                	jne    c010d616 <strchr+0x1e>
            return (char *)s;
c010d611:	8b 45 08             	mov    0x8(%ebp),%eax
c010d614:	eb 13                	jmp    c010d629 <strchr+0x31>
        }
        s ++;
c010d616:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010d61a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d61d:	0f b6 00             	movzbl (%eax),%eax
c010d620:	84 c0                	test   %al,%al
c010d622:	75 e2                	jne    c010d606 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010d624:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d629:	c9                   	leave  
c010d62a:	c3                   	ret    

c010d62b <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010d62b:	55                   	push   %ebp
c010d62c:	89 e5                	mov    %esp,%ebp
c010d62e:	83 ec 04             	sub    $0x4,%esp
c010d631:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d634:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010d637:	eb 0f                	jmp    c010d648 <strfind+0x1d>
        if (*s == c) {
c010d639:	8b 45 08             	mov    0x8(%ebp),%eax
c010d63c:	0f b6 00             	movzbl (%eax),%eax
c010d63f:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010d642:	74 10                	je     c010d654 <strfind+0x29>
            break;
        }
        s ++;
c010d644:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010d648:	8b 45 08             	mov    0x8(%ebp),%eax
c010d64b:	0f b6 00             	movzbl (%eax),%eax
c010d64e:	84 c0                	test   %al,%al
c010d650:	75 e7                	jne    c010d639 <strfind+0xe>
c010d652:	eb 01                	jmp    c010d655 <strfind+0x2a>
        if (*s == c) {
            break;
c010d654:	90                   	nop
        }
        s ++;
    }
    return (char *)s;
c010d655:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010d658:	c9                   	leave  
c010d659:	c3                   	ret    

c010d65a <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010d65a:	55                   	push   %ebp
c010d65b:	89 e5                	mov    %esp,%ebp
c010d65d:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010d660:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010d667:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010d66e:	eb 04                	jmp    c010d674 <strtol+0x1a>
        s ++;
c010d670:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010d674:	8b 45 08             	mov    0x8(%ebp),%eax
c010d677:	0f b6 00             	movzbl (%eax),%eax
c010d67a:	3c 20                	cmp    $0x20,%al
c010d67c:	74 f2                	je     c010d670 <strtol+0x16>
c010d67e:	8b 45 08             	mov    0x8(%ebp),%eax
c010d681:	0f b6 00             	movzbl (%eax),%eax
c010d684:	3c 09                	cmp    $0x9,%al
c010d686:	74 e8                	je     c010d670 <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010d688:	8b 45 08             	mov    0x8(%ebp),%eax
c010d68b:	0f b6 00             	movzbl (%eax),%eax
c010d68e:	3c 2b                	cmp    $0x2b,%al
c010d690:	75 06                	jne    c010d698 <strtol+0x3e>
        s ++;
c010d692:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d696:	eb 15                	jmp    c010d6ad <strtol+0x53>
    }
    else if (*s == '-') {
c010d698:	8b 45 08             	mov    0x8(%ebp),%eax
c010d69b:	0f b6 00             	movzbl (%eax),%eax
c010d69e:	3c 2d                	cmp    $0x2d,%al
c010d6a0:	75 0b                	jne    c010d6ad <strtol+0x53>
        s ++, neg = 1;
c010d6a2:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d6a6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010d6ad:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d6b1:	74 06                	je     c010d6b9 <strtol+0x5f>
c010d6b3:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010d6b7:	75 24                	jne    c010d6dd <strtol+0x83>
c010d6b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6bc:	0f b6 00             	movzbl (%eax),%eax
c010d6bf:	3c 30                	cmp    $0x30,%al
c010d6c1:	75 1a                	jne    c010d6dd <strtol+0x83>
c010d6c3:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6c6:	83 c0 01             	add    $0x1,%eax
c010d6c9:	0f b6 00             	movzbl (%eax),%eax
c010d6cc:	3c 78                	cmp    $0x78,%al
c010d6ce:	75 0d                	jne    c010d6dd <strtol+0x83>
        s += 2, base = 16;
c010d6d0:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010d6d4:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010d6db:	eb 2a                	jmp    c010d707 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010d6dd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d6e1:	75 17                	jne    c010d6fa <strtol+0xa0>
c010d6e3:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6e6:	0f b6 00             	movzbl (%eax),%eax
c010d6e9:	3c 30                	cmp    $0x30,%al
c010d6eb:	75 0d                	jne    c010d6fa <strtol+0xa0>
        s ++, base = 8;
c010d6ed:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d6f1:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010d6f8:	eb 0d                	jmp    c010d707 <strtol+0xad>
    }
    else if (base == 0) {
c010d6fa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d6fe:	75 07                	jne    c010d707 <strtol+0xad>
        base = 10;
c010d700:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010d707:	8b 45 08             	mov    0x8(%ebp),%eax
c010d70a:	0f b6 00             	movzbl (%eax),%eax
c010d70d:	3c 2f                	cmp    $0x2f,%al
c010d70f:	7e 1b                	jle    c010d72c <strtol+0xd2>
c010d711:	8b 45 08             	mov    0x8(%ebp),%eax
c010d714:	0f b6 00             	movzbl (%eax),%eax
c010d717:	3c 39                	cmp    $0x39,%al
c010d719:	7f 11                	jg     c010d72c <strtol+0xd2>
            dig = *s - '0';
c010d71b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d71e:	0f b6 00             	movzbl (%eax),%eax
c010d721:	0f be c0             	movsbl %al,%eax
c010d724:	83 e8 30             	sub    $0x30,%eax
c010d727:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d72a:	eb 48                	jmp    c010d774 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010d72c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d72f:	0f b6 00             	movzbl (%eax),%eax
c010d732:	3c 60                	cmp    $0x60,%al
c010d734:	7e 1b                	jle    c010d751 <strtol+0xf7>
c010d736:	8b 45 08             	mov    0x8(%ebp),%eax
c010d739:	0f b6 00             	movzbl (%eax),%eax
c010d73c:	3c 7a                	cmp    $0x7a,%al
c010d73e:	7f 11                	jg     c010d751 <strtol+0xf7>
            dig = *s - 'a' + 10;
c010d740:	8b 45 08             	mov    0x8(%ebp),%eax
c010d743:	0f b6 00             	movzbl (%eax),%eax
c010d746:	0f be c0             	movsbl %al,%eax
c010d749:	83 e8 57             	sub    $0x57,%eax
c010d74c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d74f:	eb 23                	jmp    c010d774 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010d751:	8b 45 08             	mov    0x8(%ebp),%eax
c010d754:	0f b6 00             	movzbl (%eax),%eax
c010d757:	3c 40                	cmp    $0x40,%al
c010d759:	7e 38                	jle    c010d793 <strtol+0x139>
c010d75b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d75e:	0f b6 00             	movzbl (%eax),%eax
c010d761:	3c 5a                	cmp    $0x5a,%al
c010d763:	7f 2e                	jg     c010d793 <strtol+0x139>
            dig = *s - 'A' + 10;
c010d765:	8b 45 08             	mov    0x8(%ebp),%eax
c010d768:	0f b6 00             	movzbl (%eax),%eax
c010d76b:	0f be c0             	movsbl %al,%eax
c010d76e:	83 e8 37             	sub    $0x37,%eax
c010d771:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010d774:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d777:	3b 45 10             	cmp    0x10(%ebp),%eax
c010d77a:	7d 16                	jge    c010d792 <strtol+0x138>
            break;
        }
        s ++, val = (val * base) + dig;
c010d77c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d780:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d783:	0f af 45 10          	imul   0x10(%ebp),%eax
c010d787:	03 45 f4             	add    -0xc(%ebp),%eax
c010d78a:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010d78d:	e9 75 ff ff ff       	jmp    c010d707 <strtol+0xad>
        }
        else {
            break;
        }
        if (dig >= base) {
            break;
c010d792:	90                   	nop
        }
        s ++, val = (val * base) + dig;
        // we don't properly detect overflow!
    }

    if (endptr) {
c010d793:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d797:	74 08                	je     c010d7a1 <strtol+0x147>
        *endptr = (char *) s;
c010d799:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d79c:	8b 55 08             	mov    0x8(%ebp),%edx
c010d79f:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010d7a1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010d7a5:	74 07                	je     c010d7ae <strtol+0x154>
c010d7a7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d7aa:	f7 d8                	neg    %eax
c010d7ac:	eb 03                	jmp    c010d7b1 <strtol+0x157>
c010d7ae:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010d7b1:	c9                   	leave  
c010d7b2:	c3                   	ret    

c010d7b3 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010d7b3:	55                   	push   %ebp
c010d7b4:	89 e5                	mov    %esp,%ebp
c010d7b6:	57                   	push   %edi
c010d7b7:	56                   	push   %esi
c010d7b8:	53                   	push   %ebx
c010d7b9:	83 ec 24             	sub    $0x24,%esp
c010d7bc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7bf:	88 45 d0             	mov    %al,-0x30(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010d7c2:	0f be 45 d0          	movsbl -0x30(%ebp),%eax
c010d7c6:	8b 55 08             	mov    0x8(%ebp),%edx
c010d7c9:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010d7cc:	88 45 ef             	mov    %al,-0x11(%ebp)
c010d7cf:	8b 45 10             	mov    0x10(%ebp),%eax
c010d7d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010d7d5:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010d7d8:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c010d7dc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d7df:	89 ce                	mov    %ecx,%esi
c010d7e1:	89 d3                	mov    %edx,%ebx
c010d7e3:	89 f1                	mov    %esi,%ecx
c010d7e5:	89 df                	mov    %ebx,%edi
c010d7e7:	f3 aa                	rep stos %al,%es:(%edi)
c010d7e9:	89 fb                	mov    %edi,%ebx
c010d7eb:	89 ce                	mov    %ecx,%esi
c010d7ed:	89 75 e4             	mov    %esi,-0x1c(%ebp)
c010d7f0:	89 5d e0             	mov    %ebx,-0x20(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010d7f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010d7f6:	83 c4 24             	add    $0x24,%esp
c010d7f9:	5b                   	pop    %ebx
c010d7fa:	5e                   	pop    %esi
c010d7fb:	5f                   	pop    %edi
c010d7fc:	5d                   	pop    %ebp
c010d7fd:	c3                   	ret    

c010d7fe <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010d7fe:	55                   	push   %ebp
c010d7ff:	89 e5                	mov    %esp,%ebp
c010d801:	57                   	push   %edi
c010d802:	56                   	push   %esi
c010d803:	53                   	push   %ebx
c010d804:	83 ec 38             	sub    $0x38,%esp
c010d807:	8b 45 08             	mov    0x8(%ebp),%eax
c010d80a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d80d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d810:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d813:	8b 45 10             	mov    0x10(%ebp),%eax
c010d816:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010d819:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d81c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010d81f:	73 4e                	jae    c010d86f <memmove+0x71>
c010d821:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d824:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d827:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d82a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d82d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d830:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010d833:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d836:	89 c1                	mov    %eax,%ecx
c010d838:	c1 e9 02             	shr    $0x2,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010d83b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d83e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d841:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c010d844:	89 d7                	mov    %edx,%edi
c010d846:	89 c3                	mov    %eax,%ebx
c010d848:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c010d84b:	89 de                	mov    %ebx,%esi
c010d84d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010d84f:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010d852:	83 e1 03             	and    $0x3,%ecx
c010d855:	74 02                	je     c010d859 <memmove+0x5b>
c010d857:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d859:	89 f3                	mov    %esi,%ebx
c010d85b:	89 4d c0             	mov    %ecx,-0x40(%ebp)
c010d85e:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c010d861:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010d864:	89 7d d4             	mov    %edi,-0x2c(%ebp)
c010d867:	89 5d d0             	mov    %ebx,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010d86a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d86d:	eb 3b                	jmp    c010d8aa <memmove+0xac>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010d86f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d872:	83 e8 01             	sub    $0x1,%eax
c010d875:	89 c2                	mov    %eax,%edx
c010d877:	03 55 ec             	add    -0x14(%ebp),%edx
c010d87a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d87d:	83 e8 01             	sub    $0x1,%eax
c010d880:	03 45 f0             	add    -0x10(%ebp),%eax
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010d883:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010d886:	89 4d bc             	mov    %ecx,-0x44(%ebp)
c010d889:	89 d6                	mov    %edx,%esi
c010d88b:	89 c3                	mov    %eax,%ebx
c010d88d:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c010d890:	89 df                	mov    %ebx,%edi
c010d892:	fd                   	std    
c010d893:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d895:	fc                   	cld    
c010d896:	89 fb                	mov    %edi,%ebx
c010d898:	89 4d bc             	mov    %ecx,-0x44(%ebp)
c010d89b:	8b 4d bc             	mov    -0x44(%ebp),%ecx
c010d89e:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010d8a1:	89 75 c8             	mov    %esi,-0x38(%ebp)
c010d8a4:	89 5d c4             	mov    %ebx,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010d8a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010d8aa:	83 c4 38             	add    $0x38,%esp
c010d8ad:	5b                   	pop    %ebx
c010d8ae:	5e                   	pop    %esi
c010d8af:	5f                   	pop    %edi
c010d8b0:	5d                   	pop    %ebp
c010d8b1:	c3                   	ret    

c010d8b2 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010d8b2:	55                   	push   %ebp
c010d8b3:	89 e5                	mov    %esp,%ebp
c010d8b5:	57                   	push   %edi
c010d8b6:	56                   	push   %esi
c010d8b7:	53                   	push   %ebx
c010d8b8:	83 ec 24             	sub    $0x24,%esp
c010d8bb:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8be:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d8c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d8c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d8c7:	8b 45 10             	mov    0x10(%ebp),%eax
c010d8ca:	89 45 e8             	mov    %eax,-0x18(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010d8cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d8d0:	89 c1                	mov    %eax,%ecx
c010d8d2:	c1 e9 02             	shr    $0x2,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010d8d5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d8d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d8db:	89 4d d0             	mov    %ecx,-0x30(%ebp)
c010d8de:	89 d7                	mov    %edx,%edi
c010d8e0:	89 c3                	mov    %eax,%ebx
c010d8e2:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010d8e5:	89 de                	mov    %ebx,%esi
c010d8e7:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010d8e9:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010d8ec:	83 e1 03             	and    $0x3,%ecx
c010d8ef:	74 02                	je     c010d8f3 <memcpy+0x41>
c010d8f1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d8f3:	89 f3                	mov    %esi,%ebx
c010d8f5:	89 4d d0             	mov    %ecx,-0x30(%ebp)
c010d8f8:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010d8fb:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
c010d8fe:	89 7d e0             	mov    %edi,-0x20(%ebp)
c010d901:	89 5d dc             	mov    %ebx,-0x24(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010d904:	8b 45 f0             	mov    -0x10(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010d907:	83 c4 24             	add    $0x24,%esp
c010d90a:	5b                   	pop    %ebx
c010d90b:	5e                   	pop    %esi
c010d90c:	5f                   	pop    %edi
c010d90d:	5d                   	pop    %ebp
c010d90e:	c3                   	ret    

c010d90f <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010d90f:	55                   	push   %ebp
c010d910:	89 e5                	mov    %esp,%ebp
c010d912:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010d915:	8b 45 08             	mov    0x8(%ebp),%eax
c010d918:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010d91b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d91e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010d921:	eb 32                	jmp    c010d955 <memcmp+0x46>
        if (*s1 != *s2) {
c010d923:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d926:	0f b6 10             	movzbl (%eax),%edx
c010d929:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d92c:	0f b6 00             	movzbl (%eax),%eax
c010d92f:	38 c2                	cmp    %al,%dl
c010d931:	74 1a                	je     c010d94d <memcmp+0x3e>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010d933:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d936:	0f b6 00             	movzbl (%eax),%eax
c010d939:	0f b6 d0             	movzbl %al,%edx
c010d93c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d93f:	0f b6 00             	movzbl (%eax),%eax
c010d942:	0f b6 c0             	movzbl %al,%eax
c010d945:	89 d1                	mov    %edx,%ecx
c010d947:	29 c1                	sub    %eax,%ecx
c010d949:	89 c8                	mov    %ecx,%eax
c010d94b:	eb 1c                	jmp    c010d969 <memcmp+0x5a>
        }
        s1 ++, s2 ++;
c010d94d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010d951:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010d955:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d959:	0f 95 c0             	setne  %al
c010d95c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d960:	84 c0                	test   %al,%al
c010d962:	75 bf                	jne    c010d923 <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010d964:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d969:	c9                   	leave  
c010d96a:	c3                   	ret    
